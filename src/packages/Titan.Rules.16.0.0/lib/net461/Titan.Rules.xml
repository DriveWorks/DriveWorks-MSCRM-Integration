<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Titan.Rules</name>
    </assembly>
    <members>
        <member name="T:Titan.Rules.Algorithms.DependentEvaluatorBase`3">
            <summary>
            Provides the base class for a non-recursive dependency evaluation algorithm.
            </summary>
        </member>
        <member name="F:Titan.Rules.Algorithms.DependentEvaluatorBase`3.DEPENDENCY_EVAL_DEFAULT_CAPACITY">
            <summary>
            The default size of the collection used for dependency
            evaluation.
            </summary>
        </member>
        <member name="F:Titan.Rules.Algorithms.DependentEvaluatorBase`3.EmptyResults">
            <summary>
            Used to return a static instance of an empty array.
            </summary>
        </member>
        <member name="F:Titan.Rules.Algorithms.DependentEvaluatorBase`3.mChildEvaluator">
            <summary>
            The precedency evaluator used to for the main evaluation phase.
            </summary>
        </member>
        <member name="M:Titan.Rules.Algorithms.DependentEvaluatorBase`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Algorithms.DependentEvaluatorBase`3" /> type.
            </summary>
        </member>
        <member name="M:Titan.Rules.Algorithms.DependentEvaluatorBase`3.Evaluate(System.Collections.Generic.IList{`0})">
            <summary>
            Evaluates the dependency graph and builds
            an ordered sequence of results which
            will bring all dependencies up to date.
            </summary>
            <param name="initial">
            The nodes whose dependencies are to be evaluated.
            </param>
        </member>
        <member name="M:Titan.Rules.Algorithms.DependentEvaluatorBase`3.GetResult(`0)">
            <summary>
            When overridden by a derived class, gets the result from the given node.
            </summary>
            <param name="node">The node from which to get the result.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Algorithms.DependentEvaluatorBase`3.GetIdentity(`0)">
            <summary>
            When overridden by a derived class gets the identity of the given node.
            </summary>
            <param name="node">The node from which to get the result.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Algorithms.DependentEvaluatorBase`3.GetDependentCount(`0)">
            <summary>
            When overridden by a derived class, gets the number of dependents of the
            given node.
            </summary>
            <param name="node">The node from which to get the dependent count.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Algorithms.DependentEvaluatorBase`3.GetDependent(`0,System.Int32)">
            <summary>
            When overridden by a derived class, gets the dependent at the specified
            index from the given node.
            </summary>
            <param name="node">The node from which to get the dependent.</param>
            <param name="index">The index at which to get the dependent.</param>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3">
            <summary>
            Provides the base class for a non-recursive dependency evaluation algorithm based on knowing the precedents of
            given nodes.
            </summary>
        </member>
        <member name="F:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.DEPENDENCY_EVAL_DEFAULT_CAPACITY">
            <summary>
            The default size of the collection used for dependency
            evaluation.
            </summary>
        </member>
        <member name="F:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.EmptyResults">
            <summary>
            Used to return a static instance of an empty array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.Evaluate(System.Collections.Generic.IList{`0})">
            <summary>
            Evaluates the dependency graph and builds
            an ordered sequence of results which
            will bring all dependencies up to date.
            </summary>
            <param name="initial">
            The nodes whose dependencies are to be evaluated.
            </param>
        </member>
        <member name="M:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.GetResult(`0)">
            <summary>
            When overridden by a derived class, gets the result from the given node.
            </summary>
            <param name="node">The node from which to get the result.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.GetIdentity(`0)">
            <summary>
            When overridden by a derived class gets the identity of the given node.
            </summary>
            <param name="node">The node from which to get the result.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.GetPrecedentCount(`0)">
            <summary>
            When overridden by a derived class, gets the number of precedents in the
            given node.
            </summary>
            <param name="node">The node from which to get the precedent count.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.GetPrecedent(`0,System.Int32)">
            <summary>
            When overridden by a derived class, gets the precedent at the specified
            index from the given node.
            </summary>
            <param name="node">The node from which to get the precedent.</param>
            <param name="index">The index at which to get the precedent.</param>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.NodeToProcess">
            <summary>
            Used to store a reference to a node being processed.
            </summary>
        </member>
        <member name="F:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.NodeToProcess.Node">
            <summary>
            The node to be processed.
            </summary>
        </member>
        <member name="F:Titan.Rules.Algorithms.PrecedentEvaluatorBase`3.NodeToProcess.NextPrecedent">
            <summary>
            The next precedent to evaluate.
            </summary>
        </member>
        <member name="T:Titan.Rules.Common.ComparisonSupport.ValuePredicate">
            <summary>
            Represents a predicate used to compare a value against some known value.
            </summary>
            <param name="convertValue">The value object to use for any conversions required of the value from the table.</param>
            <param name="value">The value to compare.</param>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Common.TableSupport.ArrayValueRow">
            <summary>
            Represents a single row in an array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.ArrayValueRow.#ctor(System.Int32,System.Object[])">
            <summary>
            Constructs a new row given an array of values. The values must
            already be Titan supported types.
            </summary>
            <param name="rowIndex">The index of the row.</param>
            <param name="values">The column values.</param>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.ArrayValueRow.GetElementAsValue(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.ArrayValueRow.GetElementAsDouble(System.Globalization.CultureInfo,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.ArrayValueRow.GetElementAsString(System.Globalization.CultureInfo,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.ArrayValueRow.GetElementAsDateTime(System.Globalization.CultureInfo,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.ArrayValueRow.GetElementAsBoolean(System.Globalization.CultureInfo,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.ArrayValueRow.GetElement(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Common.TableSupport.ArrayValueRow.RowIndex">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Common.TableSupport.ArrayValueRow.Columns">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.TakeRowsTableArrayValue.GetElementCore(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.TakeRowsTableArrayValue.ToArray">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Common.TableSupport.TakeRowsTableArrayValue.Rows">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Common.TableSupport.TakeRowsTableArrayValue.Columns">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.SkipRowsTableArrayValue.GetElementCore(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.SkipRowsTableArrayValue.ToArray">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Common.TableSupport.SkipRowsTableArrayValue.Rows">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Common.TableSupport.SkipRowsTableArrayValue.Columns">
            <inheritdoc />
        </member>
        <member name="T:Titan.Rules.Common.TableSupport.IQueryEnumerable">
            <summary>
            Provides a contract for an object that supports enumeration as a query
            result set.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.IQueryEnumerable.GetQueryEnumerator">
            <summary>
            Gets the query enumerator.
            </summary>
        </member>
        <member name="T:Titan.Rules.Common.TableSupport.IQueryEnumerator">
            <summary>
            Provides a contract for enumerating through a query result set.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.IQueryEnumerator.GetElementAsValue(System.Int32)">
            <summary>
            Gets the element at the given row and column index as a Titan value.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.IQueryEnumerator.GetElementAsDouble(System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a double, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>    
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.IQueryEnumerator.GetElementAsString(System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a string, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, or converted value.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.IQueryEnumerator.GetElementAsDateTime(System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a date-time, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.IQueryEnumerator.GetElementAsBoolean(System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a boolean, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.IQueryEnumerator.GetElement(System.Int32)">
            <summary>
            Gets the value at the specific column index for the current result.
            </summary>
            <param name="columnIndex">The column index.</param>
            <returns>The value of the result at the specified column, or a null reference if the index is out of range.</returns>
        </member>
        <member name="P:Titan.Rules.Common.TableSupport.IQueryEnumerator.RowIndex">
            <summary>
            Gets the current row index.
            </summary>
        </member>
        <member name="P:Titan.Rules.Common.TableSupport.IQueryEnumerator.Columns">
            <summary>
            Gets the column count for the current result.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.IQueryEnumerator.MoveNext">
            <summary>
            Moves to the next result in the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.QueryEnumerator.GetElementAsValue(Titan.Rules.Common.TableSupport.IQueryEnumerator,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a Titan value.
            </summary>
            <param name="source">The enumerator for which to get the value.</param>
            <param name="columnIndex">The column index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.QueryEnumerator.GetElementAsDouble(Titan.Rules.Common.TableSupport.IQueryEnumerator,System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a double, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="source">The enumerator for which to get the value.</param>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>    
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.QueryEnumerator.GetElementAsString(Titan.Rules.Common.TableSupport.IQueryEnumerator,System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a string, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="source">The enumerator for which to get the value.</param>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, or converted value.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.QueryEnumerator.GetElementAsDateTime(Titan.Rules.Common.TableSupport.IQueryEnumerator,System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a date-time, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="source">The enumerator for which to get the value.</param>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.QueryEnumerator.GetElementAsBoolean(Titan.Rules.Common.TableSupport.IQueryEnumerator,System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a boolean, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="source">The enumerator for which to get the value.</param>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.QueryTableArrayValueBase.GetQueryEnumerator">
            <summary>
            Gets a query result set enumerator for the table.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.QueryTableArrayValueBase.GetQueryEnumeratorCore">
            <summary>
            When overridden in a derived class gets the query enumerator for the table.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.TableSupport.QueryTableArrayValueBase.GetRowEnumerable">
            <summary>
            Creates a row enumerable
            </summary>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Common.TableFunctions">
            <summary>
            Provides table functions which can be used with the rules engine.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.HLookup(System.Object,Titan.Rules.Execution.IArrayValue,System.Double)">
            <summary>
            Performs a nearest-match horizontal lookup in a table.
            </summary>
            <param name="lookupValue">The value to lookup in the table.</param>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="rowIndex">The index of the row from which to return the matching value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.HLookup(System.Object,Titan.Rules.Execution.IArrayValue,System.Double,System.Boolean)">
            <summary>
            Performs a horizontal lookup in a table.
            </summary>
            <param name="lookupValue">The value to lookup in the table.</param>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="rowIndex">The index of the row from which to return the matching value.</param>
            <param name="closestMatch">True to look for the closest value, or false to perform an exact match.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.DWHLookup(System.Object,Titan.Rules.Execution.IArrayValue,System.Double,System.Double)">
            <summary>
            Performs a horizontal lookup in a table.
            </summary>
            <param name="lookupValue">The value to lookup in the table.</param>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="lookupRowIndex">The index of the row from which to find the matching value.</param>
            <param name="rowIndex">The index of the row from which to return the matching value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.DWHLookup(System.Object,Titan.Rules.Execution.IArrayValue,System.Double,System.Double,System.Boolean)">
            <summary>
            Performs a horizontal lookup in a table.
            </summary>
            <param name="lookupValue">The value to lookup in the table.</param>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="lookupIndex">The index of the row from which to find the matching value.</param>
            <param name="rowIndex">The index of the row from which to return the matching value.</param>
            <param name="closestMatch">True to look for the closest value, or false to perform an exact match.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.ListAll2(Titan.Rules.Execution.IArrayValue,System.Double)">
            <summary>
            Lists the values in the specified column of the given table.
            </summary>
            <param name="table">The table.</param>
            <param name="columnIndex">The index of the column whose values are to be listed.</param>
            <returns></returns>
            <devdoc>
            ListAll2 is exactly the same as ListAll in Titan, but DriveWorks needed 
            one that took a range, and another that took a string containing the range name
            instead (in order).
            </devdoc>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.ListAll(Titan.Rules.Execution.IArrayValue,System.Double)">
            <summary>
            Lists the values in the specified column of the given table.
            </summary>
            <param name="table">The table.</param>
            <param name="columnIndex">The index of the column whose values are to be listed.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.ListAllDistinct(Titan.Rules.Execution.IArrayValue,System.Double)">
            <summary>
            Lists the unique values in the specified column of the given table.
            </summary>
            <param name="table">The table.</param>
            <param name="columnIndex">The index of the column whose unique values are to be listed.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.ListAllConditional(Titan.Rules.Execution.IArrayValue,System.Double,System.Double,System.String)">
            <summary>
            Lists the values in the specified column of the given table.
            </summary>
            <param name="table">The table.</param>
            <param name="headerIndex">The index of the column whose values are to be listed.</param>
            <param name="conditionIndex">The column index to look up for the first condition.</param>
            <param name="condition">The first condition to match against.</param>
            <returns>All of the values from the header column that have matched the row conditions.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.ListAllConditional(Titan.Rules.Execution.IArrayValue,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Lists the values in the specified column of the given table.
            </summary>
            <param name="table">The table.</param>
            <param name="headerIndex">The index of the column whose values are to be listed.</param>
            <param name="conditionIndex">The column index to look up for the first condition.</param>
            <param name="condition">The first condition to match against.</param>
            <param name="extraConditions">Additional condition indecies and expressions.</param>
            <returns>All of the values from the header column that have matched the row conditions.</returns>
            <remarks>
            This is an overflow handler.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.ListAllConditionalDistinct(Titan.Rules.Execution.IArrayValue,System.Double,System.Double,System.String)">
            <summary>
            Lists the unique values in the specified column of the given table.
            </summary>
            <param name="table">The table.</param>
            <param name="headerIndex">The index of the column whose unique values are to be listed.</param>
            <param name="conditionIndex">The column index to look up for the first condition.</param>
            <param name="condition">The first condition to match against.</param>
            <returns>The unique values from the header column that have matched the row conditions.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.ListAllConditionalDistinct(Titan.Rules.Execution.IArrayValue,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Lists the unique values in the specified column of the given table.
            </summary>
            <param name="table">The table.</param>
            <param name="headerIndex">The index of the column whose unique values are to be listed.</param>
            <param name="conditionIndex">The column index to look up for the first condition.</param>
            <param name="condition">The first condition to match against.</param>
            <param name="extraConditions">Additional condition indecies and expressions.</param>
            <returns>The unique values from the header column that have matched the row conditions.</returns>
            <remarks>
            This is an overflow handler.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.BuildConditionPairs(Titan.Rules.Execution.IArrayValue,System.Object[])">
            <summary>
            Converts an array of params into condition pairs. 
            </summary>
            <param name="table">The table for which the conditions are being built.</param>
            <param name="values">Sequence of params in the pattern: columnIndex as double, condition as string.</param>
            <returns>A list of condition pairs if the input values are correct, otherwise a null reference to indicate an argument exception.</returns>
            <remarks>This is a params converter.</remarks>
        </member>
        <member name="P:Titan.Rules.Common.TableFunctions.PredicateConversionValue">
            <summary>
            Provides access to a thread static value which can be used for conversions.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableTranspose(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Returns a table which is the transpose of the given table.
            </summary>
            <param name="table">The table to transpose.</param>
            <returns></returns>        
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetRowCount(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Gets the number of rows in a table.
            </summary>
            <param name="table">The table for which to get the row count.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetColumnCount(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Gets the number of columns in a table.
            </summary>
            <param name="table">The table for which to get the column count.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableDistinct(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Eliminates non-distinct values in the table.
            </summary>
            <param name="table">The table to filter.</param>
            <param name="column">The column to check for value uniqueness.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableFilter(Titan.Rules.Execution.IArrayValue,System.Int32,System.Object)">
            <summary>
            Filters the table according to the specified conditions.
            </summary>
            <param name="table">The table to filter.</param>
            <param name="column">The column to check for a match.</param>
            <param name="condition">The condition to apply.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableFilter(Titan.Rules.Execution.IArrayValue,System.Int32,System.Object,System.Int32,System.Object)">
            <summary>
            Filters the table according to the specified conditions.
            </summary>
            <param name="table">The table to filter.</param>
            <param name="column1">A column to check for a match.</param>
            <param name="condition1">A condition to apply.</param>
            <param name="column2">A column to check for a match.</param>
            <param name="condition2">A condition to apply.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableFilter(Titan.Rules.Execution.IArrayValue,System.Int32,System.Object,System.Int32,System.Object,System.Int32,System.Object)">
            <summary>
            Filters the table according to the specified conditions.
            </summary>
            <param name="table">The table to filter.</param>
            <param name="column1">A column to check for a match.</param>
            <param name="condition1">A condition to apply.</param>
            <param name="column2">A column to check for a match.</param>
            <param name="condition2">A condition to apply.</param>
            <param name="column3">A column to check for a match.</param>
            <param name="condition3">A condition to apply.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableFilterAll(Titan.Rules.Execution.IArrayValue,Titan.Rules.Execution.IArrayValue)">
            <summary>
            Filters the table according to the specified conditions.
            </summary>
            <param name="table">The table to filter.</param>
            <param name="conditions">A table containing conditions, where each row has two columns, the first of which is the column number to check, and the second of which is the condition.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableMin(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Gets row containing the minimum of the values in a column in the given table.
            </summary>
            <param name="table">The table to process.</param>
            <param name="column">The column to aggregate.</param>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableMax(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Gets row containing the maximum of the values in a column in the given table.
            </summary>
            <param name="table">The table to process.</param>
            <param name="column">The column to aggregate.</param>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableMinValue(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Gets the minimum of the values in a column in the given table.
            </summary>
            <param name="table">The table to process.</param>
            <param name="column">The column to aggregate.</param>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableMaxValue(Titan.Rules.Execution.IArrayValue,System.Int32,System.Double)">
            <summary>
            Gets the maximum value from a column in the given table.
            </summary>
            <param name="table">The table to process.</param>
            <param name="column">The column to aggregate.</param>
            <param name="defaultValue">Value returned if the column contains no valid numbers.</param>
            <returns>The maximum value from the column.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableMaxValue(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Gets the maximum value from a column in the given table.
            </summary>
            <param name="table">The table to process.</param>
            <param name="column">The column to aggregate.</param>
            <returns>The maximum value from the column.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSum(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Gets the sum of the values in a column in the given table.
            </summary>
            <param name="table">The table to process.</param>
            <param name="column">The column to aggregate.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableAverage(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Gets the average of the values in a column in the given table.
            </summary>
            <param name="table">The table to process.</param>
            <param name="column">The column to aggregate.</param>
            <returns>The average.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSort(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Perform a sort on the specified column of the given table. The resulting array is sorted in ascending order.
            The header row of the table is not included in the data that is sorted.
            </summary>
            <param name="table">The table to sort</param>
            <param name="column">The column to sort the table by</param>
            <returns>The sorted table</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSort(Titan.Rules.Execution.IArrayValue,System.Int32,System.Boolean)">
            <summary>
            Perform a sort on the specified column of the given table. The resulting array is sorted in ascending order.
            </summary>
            <param name="table">The table to sort</param>
            <param name="column">The column to sort the table by</param>
            <param name="hasHeaders">Whether or not the table has a row of headers which shouldn't be included in the sort</param>
            <returns>The sorted table</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSort(Titan.Rules.Execution.IArrayValue,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Perform a sort on the specified column of the given table.
            </summary>
            <param name="table">The table to sort</param>
            <param name="column">The column to sort the table by</param>
            <param name="hasHeaders">Whether or not the table has a row of headers which shouldn't be included in the sort</param>
            <param name="sortAscending">Whether or not to sort in ascending order or descening order</param>
            <returns>The sorted table</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSequence(System.Int32)">
            <summary>
            Generates a table with exactly one column, and the specified number of rows, where
            the value of each cell is the same as the row number.
            </summary>
            <param name="rowCount">The number of rows to generate.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableReverse(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Reverses the order of the rows in the given table.
            </summary>
            <param name="other">The table whose rows should be reverse-ordered.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSkipRows(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Returns a new table where the specified number of rows have been removed from the start of the given table.
            </summary>
            <param name="other">The table from which to take rows.</param>
            <param name="rowsToSkip">The number of the rows from the input table that should be omitted from the result table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableTakeRows(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Returns a new table with only the specified number of rows.
            </summary>
            <param name="other">The table from which to take rows.</param>
            <param name="rowsToTake">The number of the rows from the input table that should be present in the result table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetRows(Titan.Rules.Execution.IArrayValue,System.Int32,System.Int32)">
            <summary>
            Returns a new table with only the specified of rows.
            </summary>
            <param name="other">The table from which to take rows</param>
            <param name="firstRowIndex">The number of the first row to take.</param>
            <param name="rowsToTake">The number of the rows from the input table that should be present in the result table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableAppendRows(Titan.Rules.Execution.IArrayValue,Titan.Rules.Execution.IArrayValue)">
            <summary>
            Appends the rows from the given tables in order, and returns the result.
            </summary>
            <param name="first">The first set of rows for the new table.</param>
            <param name="second">The second set of rows for the new table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableAppendRow(Titan.Rules.Execution.IArrayValue,System.Object[])">
            <summary>
            Appends a row from the given values and returns the result.
            </summary>
            <param name="source">The table to start from.</param>
            <param name="row">Collection of values that will make up the row to add.</param>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableAppendRows(Titan.Rules.Execution.IArrayValue,Titan.Rules.Execution.IArrayValue,Titan.Rules.Execution.IArrayValue)">
            <summary>
            Appends the rows from the given tables in order, and returns the result.
            </summary>
            <param name="first">The first set of rows for the new table.</param>
            <param name="second">The second set of rows for the new table.</param>
            <param name="third">The third set of rows for the new table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableRemoveBlankRows(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Remove any rows from the table if every cell in that row is blank.
            Keeps the header row even if it is blank.
            </summary>
            <param name="table">The table to remove blank rows from.</param>
            <returns>The table with all blank rows removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableRemoveBlankRows(Titan.Rules.Execution.IArrayValue,System.Boolean)">
            <summary>
            Remove any rows from the table if every cell in that row is blank.
            </summary>
            <param name="table">The table to remove blank rows from.</param>
            <param name="removeBlankHeaders">True if the first row should be included in filtering, 
            false if it should be kept regardless of if it is blank.</param>
            <returns>The table with all blank rows removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableRemoveBlankColumns(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Removes any columns from the table where every cell in that column is blank.
            Keeps columns even if only the header row has a value in it.
            </summary>
            <param name="table">The table to remove blank columns from.</param>
            <returns>The table with all blank columns removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableRemoveBlankColumns(Titan.Rules.Execution.IArrayValue,System.Boolean)">
            <summary>
            Removes any columns from the table where every cell in that column is blank.
            </summary>
            <param name="table">The table to remove blank columns from.</param>
            <param name="includeHeaderRow">True to include the header row when evaluating a column.</param>
            <returns>The table with all blank columns removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableAppendColumns(Titan.Rules.Execution.IArrayValue,Titan.Rules.Execution.IArrayValue)">
            <summary>
            Appends the columns from the given tables in order, and returns the result.
            </summary>
            <param name="first">The first set of columns for the new table.</param>
            <param name="second">The second set of columns for the new table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableAppendColumns(Titan.Rules.Execution.IArrayValue,Titan.Rules.Execution.IArrayValue,Titan.Rules.Execution.IArrayValue)">
            <summary>
            Appends the columns from the given tables in order, and returns the result.
            </summary>
            <param name="first">The first set of columns for the new table.</param>
            <param name="second">The second set of columns for the new table.</param>
            <param name="third">The third set of columns for the new table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSelectColumns(Titan.Rules.Execution.IArrayValue,System.Int32[])">
            <summary>
            Appends the columns from the given tables in order, and returns the result.
            </summary>
            <param name="table">The first set of columns for the new table.</param>
            <param name="columns">The indices of the columns that should be in the result table, these can be in any order, e.g. 3,2,1 to switch the first and third columns around.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableWithSequence(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Prepends the given table with a column containing a sequence of numbers.
            </summary>
            <param name="table">The table to which to prepend sequence numbers.</param>
            <returns>A table with a column containing a sequence of numbers inserted at the start of the table.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableWithSequence(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Inserts a column containing a sequence of numbers into the specified position in the table.
            </summary>
            <param name="table">The table to insert a new sequence of numbers into.</param>
            <param name="columnIndex">The position to insert the new column.</param>
            <returns>A table with a column containing a sequence of numbers inserted at the specified position.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableWithSequence(Titan.Rules.Execution.IArrayValue,System.Int32,System.String)">
            <summary>
            Inserts a column containing a sequence of numbers into the specified position in the table with a column heading.
            </summary>
            <param name="table">The table to insert a new sequence of numbers into.</param>
            <param name="columnIndex">The position to insert the new column.</param>
            <param name="newColumnText">The heading of the new column.</param>
            <returns>A table with a column containing a sequence of numbers and heading inserted at the specified position.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableRow(System.Object[])">
            <summary>
            Constructs a table containing a single row containing the given values.
            </summary>
            <param name="values">The values which should make up the table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableColumn(System.Object[])">
            <summary>
            Constructs a table containing a single column containing the given values.
            </summary>
            <param name="values">The values which should make up the table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableJoin(Titan.Rules.Execution.IArrayValue,System.Double,Titan.Rules.Execution.IArrayValue,System.Double)">
            <summary>
            Performs an inner join of the specified tables based on matching values in columns in each of the two tables.
            </summary>
            <param name="left">The left table to join.</param>
            <param name="leftColumn">The column which contains values that will be matched against values in the right table.</param>
            <param name="right">The right table to join.</param>
            <param name="rightColumn">The column which contains values that will be matched against values in the left table.</param>
            <returns>A new table which is an inner joined result of the left and right tables and matching selected columns.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableJoin(Titan.Rules.Execution.IArrayValue,System.Double,Titan.Rules.Execution.IArrayValue,System.Double,System.String)">
            <summary>
            Performs a join of the specified tables based on matching values in columns in each of the two tables.
            </summary>
            <param name="left">The left table to join.</param>
            <param name="leftColumn">The column which contains values that will be matched against values in the right table.</param>
            <param name="right">The right table to join.</param>
            <param name="rightColumn">The column which contains values that will be matched against values in the left table.</param>
            <param name="joinType">The type of the join to perform, either "Inner", or "Outer".</param>
            <returns>A new table which is a result of the join type between the left and right tables based on matching values in selected columns.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableJoin(Titan.Rules.Execution.IArrayValue,System.Double,Titan.Rules.Execution.IArrayValue,System.Double,System.String,System.Boolean)">
            <summary>
            Performs a join of the specified tables based on matching values in columns in each of the two tables.
            </summary>
            <param name="left">The left table to join.</param>
            <param name="leftColumn">The column which contains values that will be matched against values in the right table.</param>
            <param name="right">The right table to join.</param>
            <param name="rightColumn">The column which contains values that will be matched against values in the left table.</param>
            <param name="joinType">The type of the join to perform, either "Inner", or "Outer".</param>
            <param name="dataRowsOnly">True to only match values in the data rows. False to match values in the header and data rows. By default this is False.</param>
            <returns>A new table which is a result of the join type between the left and right tables based on matching values in selected columns.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableJoin(Titan.Rules.Execution.IArrayValue,System.Double,Titan.Rules.Execution.IArrayValue,System.Double,System.String,System.Boolean,System.Boolean)">
            <summary>
            Performs a join of the specified tables based on matching values in columns in each of the two tables.
            </summary>
            <param name="left">The left table to join.</param>
            <param name="leftColumn">The column which contains values that will be matched against values in the right table.</param>
            <param name="right">The right table to join.</param>
            <param name="rightColumn">The column which contains values that will be matched against values in the left table.</param>
            <param name="joinType">The type of the join to perform, either "Inner", or "Outer".</param>
            <param name="dataRowsOnly">True to only match values in the data rows. False to match values in the header and data rows. By default this is False.</param>
            <param name="includeHeaders">Include a header row in the resulting table.</param>
            <returns>A new table which is a result of the join type between the left and right tables based on matching values in selected columns.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableCombine(Titan.Rules.Execution.IArrayValue[])">
            <summary>
            Combines the rows from the given tables into a single table, re-using columns where they match.
            </summary>
            <param name="tables">One or more tables to combine.></param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSubstitute(Titan.Rules.Execution.IArrayValue,System.Int32,System.String,System.String)">
            <summary>
            Substitutes text found in a column in the provided table.
            </summary>
            <param name="table">The table in which to perform the substitution.</param>
            <param name="column">The column in which to perform the substitution.</param>
            <param name="oldText">The old text within the column that is to be substituted.</param>
            <param name="newText">The new text that is to substitute the old text.</param>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSubstitute(Titan.Rules.Execution.IArrayValue,System.Int32,System.String,System.String,System.Double)">
            <summary>
            Substitutes text found in a column in the provided table.
            </summary>
            <param name="table">The table in which to perform the substitution.</param>
            <param name="column">The column in which to perform the substitution.</param>
            <param name="oldText">The old text within the column that is to be substituted.</param>
            <param name="newText">The new text that is to substitute the old text.</param>
            <param name="instanceNumber">A number representing the occurrence of old text that is to be replaced. 0 means that every occurrence of the old text will be replaced.</param>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSubstitute(Titan.Rules.Execution.IArrayValue,System.Int32,System.String,System.String,System.Double,System.Boolean)">
            <summary>
            Substitutes text found in a column in the provided table.
            </summary>
            <param name="table">The table in which to perform the substitution.</param>
            <param name="column">The column in which to perform the substitution.</param>
            <param name="oldText">The old text within the column that is to be substituted.</param>
            <param name="newText">The new text that is to substitute the old text.</param>
            <param name="instanceNumber">A number representing the occurrence of old text that is to be replaced. 0 means that every occurrence of the old text will be replaced.</param>
            <param name="caseInsensitive">True to ignore case when replacing, otherwise false.</param>
            <returns></returns>       
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableFormat(Titan.Rules.Execution.IArrayValue,System.Int32,System.String)">
            <summary>
            Formats text found in a column in the provided table.
            </summary>
            <param name="table">The table in which to perform the substitution.</param>
            <param name="column">The column in which to perform the formatting.</param>
            <param name="format">An Excel formatting string,.</param>
            <returns></returns>       
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableReplaceRow(Titan.Rules.Execution.IArrayValue,System.Int32,Titan.Rules.Execution.IArrayValue)">
            <summary>
            Replaces a row in the given table.
            </summary>
            <param name="table">The table in which to replace a row.</param>
            <param name="replacementRowIndex">The index of the row to replace.</param>
            <param name="replacementRow">The replacement row.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableRemoveRow(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Removes a row in the given table.
            </summary>
            <param name="table">The table in which to remove a row.</param>
            <param name="rowIndex">The index of the row to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableReplaceHeaders(Titan.Rules.Execution.IArrayValue,System.String)">
            <summary>
            Replaces the headers in the given table with the headers specified in the list.
            </summary>
            <param name="table">The table in which to replace the headers.</param>
            <param name="replacementHeaders">A pipe delimited list of headers to replace the existing ones with.</param>
            <returns>A table with the new specified headers.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableReplaceHeaders(Titan.Rules.Execution.IArrayValue,System.String,System.Boolean)">
            <summary>
            Replaces the headers in the given table with the headers specified in the list.
            </summary>
            <param name="table">The table in which to replace the headers.</param>
            <param name="replacementHeaders">A pipe delimited list of headers to replace the existing ones with.</param>
            <param name="replaceBlankHeaders">Whether blank values in the replacement headers list should skip over the existing header or should replace the header.</param>
            <returns>A table with the new specified headers.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableReplaceHeaderRow(Titan.Rules.Execution.IArrayValue,Titan.Rules.Execution.IArrayValue)">
            <summary>
            Replaces the header row in the given table.
            </summary>
            <param name="table">The table in which to replace a row.</param>
            <param name="replacementRow">The row which will replace the header row.</param>
            <returns>A table with new specified headings.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableBreak(Titan.Rules.Execution.IArrayValue,System.Int32,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Breaks the table into two at or after the row matching the given condition, and returns either the top or bottom half
            </summary>
            <param name="table">The table to break.</param>
            <param name="column">The column to check for a match.</param>
            <param name="condition">The condition which defines the break.</param>
            <param name="top">True to return the top half of the broken table, False to include the bottom half.</param>
            <param name="includeBreakRow">True to include the row at which the table is broken, otherwise False.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetHeaderRow(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Gets the header row from the given table as a data row.
            </summary>
            <param name="table">The table from which to get the header row.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetHeaderRow(Titan.Rules.Execution.IArrayValue,System.Boolean)">
            <summary>
            Gets the header row from the given table.
            </summary>
            <param name="table">The table from which to get the header row.</param>
            <param name="asDataRow">True to return the header row as a data row (i.e. the second absolute row in the table), false to return it as a header row (i.e. the first absolute row in the table).</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetDataRows(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Gets everything except the header row from the given table.
            </summary>
            <param name="table">The table from which to get the data rows.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetValue(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Gets the value from the first row and column of the given table.
            </summary>
            <param name="table">The table from which to get the result.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetValue(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Gets the value from the first row and specified column of the given table.
            </summary>
            <param name="table">The table from which to get the result.</param>
            <param name="column">The column from which to get the result.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetValue(Titan.Rules.Execution.IArrayValue,System.Int32,System.Int32)">
            <summary>
            Gets the value from the specified row and column of the given table.
            </summary>
            <param name="table">The table from which to get the result.</param>
            <param name="column">The column from which to get the result.</param>
            <param name="row">The row from which to get the result.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.VLookup(System.Object,Titan.Rules.Execution.IArrayValue,System.Double)">
            <summary>
            Performs a nearest-match vertical lookup in a table.
            </summary>
            <param name="lookupValue">The value to lookup in the table.</param>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="columnIndex">The index of the column from which to return the matching value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.VLookup(System.Object,Titan.Rules.Execution.IArrayValue,System.Double,System.Boolean)">
            <summary>
            Performs a vertical lookup in a table.
            </summary>
            <param name="lookupValue">The value to lookup in the table.</param>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="columnIndex">The index of the column from which to return the matching value.</param>
            <param name="closestMatch">True to look for the closest value, or false to perform an exact match.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.DWVLookup(System.Object,Titan.Rules.Execution.IArrayValue,System.Double,System.Double)">
            <summary>
            Performs a vertical lookup in a table.
            </summary>
            <param name="lookupValue">The value to lookup in the table.</param>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="lookupColumnIndex">The index of the column from which to find the matching value.</param>
            <param name="columnIndex">The index of the column from which to return the matching value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.DWVLookup(System.Object,Titan.Rules.Execution.IArrayValue,System.Double,System.Double,System.Boolean)">
            <summary>
            Performs a vertical lookup in a table.
            </summary>
            <param name="lookupValue">The value to lookup in the table.</param>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="lookupIndex">The index of the column from which to find the matching value.</param>
            <param name="columnIndex">The index of the column from which to return the matching value.</param>
            <param name="closestMatch">True to look for the closest value, or false to perform an exact match.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetColumnIndexByName(Titan.Rules.Execution.IArrayValue,System.String)">
            <summary>
            Searches columns by name and returns the index of the first matching column.
            </summary>
            <param name="columnName">The name of the column to be found.</param>
            <param name="table">The table in which to perform the lookup.</param>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableGetColumnIndexByName(Titan.Rules.Execution.IArrayValue,System.String,System.Boolean)">
            <summary>
            Searches columns by name and returns the index of the first matching column.
            </summary>
            <param name="columnName">The name of the column to be found.</param>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="ignoreCase">Whether or not the search should be case sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSearch(Titan.Rules.Execution.IArrayValue,System.String)">
            <summary>
            Searches all cells within a table for a case sensitive match to the specified search text.
            </summary>
            <param name="table">The table in which to search for the specified text.</param>
            <param name="searchText">The text to search for within the table.</param>
            <returns>Creates a table made up of rows where there was a match with the search text.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableSearch(Titan.Rules.Execution.IArrayValue,System.String,System.Boolean)">
            <summary>
            Searches all cells within a table for a match to the specified search text with an option to perform a case insensitive search.
            </summary>
            <param name="table">The table in which to search for the specified text.</param>
            <param name="searchText">The text to search for within the table.</param>
            <param name="ignoreCase">False to perform a case sensitive search. True to perform a case insesitive search.</param>
            <returns>Creates a table made up of rows where there was a match with the search text.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.CountIf(Titan.Rules.Execution.IArrayValue,System.Object)">
            <summary>
            Counts all the cells in the given table that comply with the specified condition.
            </summary>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="condition">The condition to test each cell with.</param>
            <returns></returns>
            <remarks>
            The condition is mostly a string matching param. 
            It can have basic operators at the start and wild characters (?) and wild string (*).
            </remarks>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableFromList(System.String)">
            <summary>
            Converts a pipe delimited list into a table with an empty header.
            </summary>
            <param name="list">The list to convert to a single column table."</param>
            <returns>Creates a single column table from the pipebar delimited list, with an empty header.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableFromList(System.String,System.Boolean)">
            <summary>
            Converts a pipe delimited list into a table with a parameter to use the first item as a header.
            </summary>
            <param name="list">The list to convert to a single column table."</param>
            <param name="firstItemAsHeader">True to use the first item in the list as the header; False to leave the header blank.</param>
            <returns>Creates a single column table from the pipebar delimited list.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.TableFromCsv(System.String)">
            <summary>
            Converts CSV string into a table.
            </summary>
            <param name="csv">The CSV string to be converted into a table.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.DCount(Titan.Rules.Execution.IArrayValue,System.Int32,System.Object)">
            <summary>
            Counts all the cells in the given table's column, that comply with the specified condition.
            </summary>
            <param name="table">The table in which to perform the lookup.</param>
            <param name="columnIndex">The column to look up.</param>
            <param name="condition">The condition to test each cell with.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.GetTableValue(Titan.Rules.Execution.IArrayValue,System.Int32,System.Int32)">
            <summary>
            Retrieves the value at the specified row index and column index.
            </summary>
            <param name="table">The table.</param>
            <param name="rowIndex">The index of the row that the value is in.</param>
            <param name="columnIndex">The index of the column that the value is in.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.SumTableColumn(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Calculates the sum of the values in the specified column.
            </summary>
            <param name="table">The table.</param>
            <param name="columnIndex">The index of the column that you want to get the sum of.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.ChooseFrom(System.String,System.String,System.String[])">
            <summary>
            Provides conversion functionality by selecting a value based on a match
            found with an input value. If no match is found, the specified default
            value is returned instead.
            </summary>
            <param name="input">The input value to check against.</param>
            <param name="defaultResult">The default value to return if no match is found.</param>
            <param name="values">The values to check for and return if a match is found.</param>
            <returns>The relevant result based on whether or not a match was found.</returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.DMax(Titan.Rules.Execution.IArrayValue,System.Int32,System.Object)">
            <summary>
            Returns the largest value in the given table's column, that complies with the specified condition.
            </summary>
            <param name="table">The table.</param>
            <param name="columnIndex">The column to look up.</param>
            <param name="condition">The condition to test each cell with.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TableFunctions.DMin(Titan.Rules.Execution.IArrayValue,System.Int32,System.Object)">
            <summary>
            Returns the smallest value in the given table's column, that complies with the specified condition.
            </summary>
            <param name="table">The table.</param>
            <param name="columnIndex">The column to look up.</param>
            <param name="condition">The condition to test each cell with.</param>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Common.TriggeredFunctions">
            <summary>
            Provides simple triggered functions.
            </summary>
        </member>
        <member name="T:Titan.Rules.Common.TriggeredFunctions.IndirectTriggerAttribute">
            <summary>
            Responsible for instantiation of the indirect trigger.
            </summary>
        </member>
        <member name="T:Titan.Rules.Common.TriggeredFunctions.IndirectTrigger">
            <summary>
            The trigger used by the indirect function.
            </summary>
            <remarks>
            <para>
            The indirect function in Titan works by using a trigger to run before each function invocation,
            and when the trigger is called, it transfers the rule text into a slot which is then monitored for updates. 
            Any updates to this slot cause the trigger to get fired off, which means the rule containing the function invocation
            gets recalculated.
            </para>
            <para>
            This approach means that the rule only recalculates when it needs to which should make it pretty efficient.
            </para>
            </remarks>
        </member>
        <member name="M:Titan.Rules.Common.TriggeredFunctions.Indirect(Titan.Rules.Execution.ITrigger,System.String)">
            <summary>
            Evaluates the result of a rule provided as a rule.
            </summary>
            <param name="trigger">The trigger object provided by the execution engine.</param>
            <param name="ruleText">The rule to evaluate.</param>
            <returns></returns>
            <devdoc>
            The function text argument may look redundant but it really isn't! - it's preprocessed
            by the trigger.
            </devdoc>
        </member>
        <member name="T:Titan.Rules.Common.TriggeredFunctions.MyAdjacentValueTriggerAttribute">
            <summary>
            Responsible for instantiation of the <see cref="T:Titan.Rules.Common.TriggeredFunctions.MyAdjacentValueTrigger"/> trigger.
            </summary>
        </member>
        <member name="T:Titan.Rules.Common.TriggeredFunctions.MyAdjacentValueTrigger">
            <summary>
            The trigger used by the MyAdjacentValue function and is essentially the the implementation for relative references.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.TriggeredFunctions.MyAdjacentValue(Titan.Rules.Execution.ITrigger,System.Double,System.Double)">
            <summary>
            Gets an adjacent value based on relative co-ordinates.
            </summary>
            <param name="trigger">The trigger for the owner of this function.</param>
            <param name="horizontalDelta">The number of values to travel horizontally to get the adjacent value.</param>
            <param name="verticalDelta">The number of values to travel vertically to get the adjacent value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.TriggeredFunctions.CalcTable(Titan.Rules.Execution.ITrigger)">
            <summary>
            Function that will check the owning slot's context for an <see cref="T:Titan.Rules.Execution.IArrayValueProvider"/> 
            implementation and use that to return it's array value.
            </summary>
            <param name="trigger">The trigger for the owner of this function.</param>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Common.Constants">
            <summary>
            Holds constants used for rule parsing and evaluation.
            </summary>
        </member>
        <member name="F:Titan.Rules.Common.Constants.GLOBAL_STRING">
            <summary>
            The string representing the global scope.
            </summary>
        </member>
        <member name="F:Titan.Rules.Common.Constants.TRUE_STRING">
            <summary>
            The string recognized as the boolean value True.
            </summary>
        </member>
        <member name="F:Titan.Rules.Common.Constants.FALSE_STRING">
            <summary>
            The string recognized as the boolean value False.
            </summary>
        </member>
        <member name="F:Titan.Rules.Common.Constants.AND_INLINE_STRING">
            <summary>
            The string recognized as an condition1 AND condition2 inline operation.
            </summary>
        </member>
        <member name="F:Titan.Rules.Common.Constants.OR_INLINE_STRING">
            <summary>
            The string recognized as an condition1 OR condition2 inline operation.
            </summary>
        </member>
        <member name="F:Titan.Rules.Common.Constants.DOUBLE_ROUNDING_LEVEL">
            <summary>
            The precision to round a double value to.
            </summary>
        </member>
        <member name="F:Titan.Rules.Common.Constants.MIN_OA_DATE">
            <summary>
            The smallest OLE automation date represented as a date.
            </summary>
        </member>
        <member name="F:Titan.Rules.Common.Constants.DATE_ZERO">
            <summary>
            The zero OLE automation date.
            </summary>
        </member>
        <member name="F:Titan.Rules.Common.Constants.DATE_ONE">
            <summary>
            The first OLE automation date.
            </summary>
            <remarks>
            This is Excels version of the zero OLE date ("1899/12/31 00:00:00" but in Excel it's displayed as "1900/01/00 00:00:00"), 
            rather than standard (1899/12/30 00:00:00)
            </remarks>
        </member>
        <member name="F:Titan.Rules.Common.Constants.MIN_OA_DATE_VALUE">
            <summary>
            The smallest OLE automation date represented as a double.
            </summary>
            <remarks>
            It is possible to have a smaller date-time, but they aren't representable in doubles,
            e.g. DateTime.MinValue comes back as 0.0 even though technically it's 100 years before DateTime.FromOADate(0.0)
            </remarks>
        </member>
        <member name="F:Titan.Rules.Common.Constants.MAX_OA_DATE_VALUE">
            <summary>
            The largest OLE automation date represented as a double.
            </summary>
        </member>
        <member name="T:Titan.Rules.Common.DateFunctions">
            <summary>
            Provides common date functions which can be used with the rules engine.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Now">
            <summary>
            Returns the current date and time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Today">
            <summary>
            Returns the current date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Day">
            <summary>
            Returns the current day of the month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Year">
            <summary>
            Returns the current year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Month">
            <summary>
            Returns the current month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Date">
            <summary>
            Returns the current date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.DateValue(System.DateTime)">
            <summary>
            Converts a date to OLE Automation date.
            </summary>
            <param name="dateValue">Date to convert.</param>
            <returns>Serial date value if successful, otherwise returns ArgumentException.</returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.TimeValue(System.DateTime)">
            <summary>
            Returns the current time in serial format.
            </summary>
            <param name="timeValue">Converts a time string to OLE Automation time.</param>
            <returns>Serial time value if successful, otherwise returns ArgumentException.</returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Day(System.DateTime)">
            <summary>
            Returns a day given a serial date/number. 
            </summary>
            <param name="date">Parameter of DateTime type to return DAY of a given date.</param>
            <returns>Day of the month(A number from 1 to 31).</returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Month(System.DateTime)">
            <summary>
            Returns the number of the month in the year given as serial date/number .
            </summary>
            <param name="date">Parameter of DateTime type to return MONTH of a given date.</param>
            <returns>Month number (A number from 1 to 12). </returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Year(System.DateTime)">
            <summary>
            Returns the year of a given serial date/number 
            </summary>
            <param name="date">Parameter of DateTime type to return YEAR of a given date.</param>
            <returns>Year (A number from 1900 to 9999).</returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Second(System.DateTime)">
            <summary>
            Returns the second of a given date
            </summary>
            <param name="date">Parameter of DateTime type to return SECOND of a given date.</param>
            <returns>Second (A number from 0 to 59).</returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Minute(System.DateTime)">
            <summary>
            Returns the minute of a given serial number 
            </summary>
            <param name="date">Parameter of DateTime type to return MINUTE of a given date.</param>
            <returns>Minute (A number from 0 to 59).</returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.Hour(System.DateTime)">
            <summary>
            Returns the minute of the given serial number 
            </summary>
            <param name="date">Parameter of DateTime type to return HOUR of a given date.</param>
            <returns>Hour (A number from 0 to 23).</returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.WeekDay(System.DateTime)">
            <summary>
            Returns the day of the week from a date as a number.
            </summary>
            <param name="date">The date to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.WeekDay(System.DateTime,System.Double)">
            <summary>
            Returns the day of the week from a date as a number.
            </summary>
            <param name="date">The date to be checked.</param>
            <param name="returnType">The return type value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.WorkDay(System.DateTime,System.Double,System.DateTime[])">
            <summary>
            Returns the date before or after a specified number of work days.
            </summary>
            <param name="date">The date to start counting from.</param>
            <param name="days">The number of work days.</param>
            <param name="holidays">Dates to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.WorkDayCustom(System.DateTime,System.Double,System.Double,System.DateTime[])">
            <summary>
            Returns the date before or after a specified number of work days.
            </summary>
            <param name="date">The date to start counting from.</param>
            <param name="days">The number of work days.</param>
            <param name="weekend">Corresponds to the days that are weekend days.</param>
            <param name="holidays">Dates to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.NetWorkDays(System.DateTime,System.DateTime,System.DateTime[])">
            <summary>
            Returns the number of work days between two dates.
            </summary>
            <param name="startDate">The date to start counting from.</param>
            <param name="endDate">The date to stop counting at.</param>
            <param name="holidays">Dates to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.NetWorkDaysCustom(System.DateTime,System.DateTime,System.Double,System.DateTime[])">
            <summary>
            Returns the number of work days between two dates.
            </summary>
            <param name="startDate">The date to start counting from.</param>
            <param name="endDate">The date to stop counting at.</param>
            <param name="weekend">Corresponds to the days that are weekend days.</param>
            <param name="holidays">Dates to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.WeekNum(System.DateTime)">
            <summary>
             Returns the week number of a date given (serial number / date value).
            </summary>
            <param name="dateValue">Date from where we calculate which week of the year that date falls in.</param>
            <returns>The number of the week that from the date specified.</returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.WeekNum(System.DateTime,System.Double)">
            <summary>
            Returns the week number of a date given (serial number / date value).
            </summary>
            <param name="dateValue">Date from where we calculate which week of the year that date falls in.</param>
            <param name="returnType">Day when the week begins. This is EXCEL is 1,2,11-17 or 21 depending which system(as EXCEL)</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.DateFunctions.ConvertDay(System.DayOfWeek)">
            <summary>
            Converts given day to Excel style day values.
            Where monday is 1 and sunday is 7.
            </summary>
            <param name="value">Day to convert.</param>
        </member>
        <member name="T:Titan.Rules.Common.DbFunctions">
            <summary>
            Provides common database functions which can be used with the rules engine.
            </summary>
        </member>
        <member name="T:Titan.Rules.Common.GlobalizationUtil">
            <summary>
            Provides functions used for parsing and data type conversion.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.GetListOfListsSeparator(System.Globalization.CultureInfo)">
            <summary>
            Gets the character used to separate list of lists, typically ';', or '\' for European locales.
            </summary>
            <param name="ci">The culture information for which to get the separator.</param>
            <remarks>
            <para>
            The list-of-lists separator (used for array literals) is a semi-colon 
            for English locales, e.g. an array literal looks like {1,2;3,4}.
            </para>
            <para>For locales like German, however, that doesn't work because their list separator
            is a semi-colon, so in this case, we use a "\" because it doesn't conflict with anything.
            </para>
            <para>
            This is the opposite behavior to Excel which uses "\" for the list separator for arrays which means
            functions and arrays end up with different separators
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.TryParseBasic(System.String,System.Globalization.CultureInfo,System.Double@)">
            <summary>
            Attempts to parse a string as a double.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="culture">The culture information to use when parsing.</param>
            <param name="result">The value that will receive the result.</param>
            <returns>True if the string was successfully parsed, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.TryParse(System.String,System.Globalization.CultureInfo,System.Double@)">
            <summary>
            Attempts to parse a string as a double.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="culture">The culture information to use when parsing.</param>
            <param name="result">The value that will receive the result.</param>
            <returns>True if the string was successfully parsed, otherwise false.</returns>
            <remarks>Will also attempt to treat the string as a fraction.</remarks>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.TryParse(System.String,System.Globalization.CultureInfo,System.DateTime@)">
            <summary>
            Attempts to parse a string as a DateTime.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="culture">The culture information to use when parsing.</param>
            <param name="result">The value that will receive the result.</param>
            <returns>True if the string was successfully parsed, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.TryParse(System.String,System.Globalization.CultureInfo,System.Boolean@)">
            <summary>
            Attempts to parse a string as a boolean.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="culture">The culture information to use when parsing.</param>
            <param name="result">The value that will receive the result.</param>
            <returns>True if the string was successfully parsed, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.ConvertToString(System.Boolean)">
            <summary>
            Converts the specified Boolean to a String.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The string representation of the specified value.</returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.ConvertToString(System.Double,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified Double to a String.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="culture">The culture information to use for the conversion.</param>
            <returns>The string representation of the specified value.</returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.ConvertToString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified DateTime to a String.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="culture">The culture information to use for the conversion.</param>
            <returns>The string representation of the specified value.</returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.TryConvertToOADate(System.Double,System.DateTime@)">
            <summary>
            Converts the specified double to a DateTime.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="result">The value that will receive the result.</param>
            <returns>True if the conversion was successful.</returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.TryConvertDateToDouble(System.DateTime,System.Double@)">
            <summary>
            Converts the specified DateTime to a double.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="result">The value that will receive the result.</param>
            <returns>True if the conversion was successful.</returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.ReadNextNumericComponent(System.String,System.Globalization.CultureInfo,System.Int32@,System.Int32,System.Double@)">
            <summary>
            Reads a numeric component from the given string.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="culture">The formatting information to use for parsing the string.</param>
            <param name="startIndex">The index at which to start the parse, this value is updated during the parse.</param>
            <param name="endIndex">The index of the last character to parse (usually the length of the string minus one).</param>
            <param name="value">The parsed value if successful.</param>
            <returns>True if the string contained a numeric component at the given index and it was successfully parsed and returned.</returns>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.GetUserRegionalCulture">
            <summary>
            Gets the current Windows user's regional culture.
            </summary>
            <remarks>
            We use this instead of CultureInfo.CurrentCulture, as that can be overridden by SolidWorks.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.SetUserRegionalCulture(System.Globalization.CultureInfo)">
            <summary>
            For testing only.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.GlobalizationUtil.GetUserDefaultLocaleName(System.Text.StringBuilder,System.Int32)">
            <summary>
            Gets the current user's culture name (formating etc).
            See: http://msdn.microsoft.com/en-us/library/dd318136(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:Titan.Rules.Common.LogicalFunctions">
            <summary>
            Provides common logical functions which can be used with the rules engine.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.Not(System.Boolean)">
            <summary>
            Returns the inverse of the given boolean value.
            </summary>
            <param name="arg">The value to return the inverse of.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.Or(System.Boolean,System.Boolean)">
            <summary>
            Returns whether either the first or second arguments are true. Consider using
            OrElse instead.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.Or(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether any of the arguments are true.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.Or(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether any of the arguments are true.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.Or(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether any of the arguments are true.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.Or(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether any of the arguments are true.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.Or(System.Boolean[])">
            <summary>
            Returns whether any of the arguments are true.
            </summary>
            <param name="args">The array of arguments.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.And(System.Boolean,System.Boolean)">
            <summary>
            Returns whether both the first and second arguments are true. Consider using
            AndAlso instead.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.And(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether all of the arguments are true.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.And(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether all of the arguments are true.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.And(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether all of the arguments are true.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.And(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns whether all of the arguments are true.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.And(System.Boolean[])">
            <summary>
            Returns whether all of the arguments are true.
            </summary>
            <param name="args">The array of arguments.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsText(System.Object)">
            <summary>
            Returns true if a value is text.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsNonText(System.Object)">
            <summary>
            Returns true if a value is not text.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsNumber(System.Object)">
            <summary>
            Returns true if a value is a number.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsNumber(System.Object,System.Boolean)">
            <summary>
            Returns true if a value is a number.
            </summary>
            <param name="value">The value to check.</param>
            <param name="allowString">Whether or not to allow strings to be parsed.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsNonNumber(System.Object)">
            <summary>
            Returns true if a value is not a number.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsNonNumber(System.Object,System.Boolean)">
            <summary>
            Returns true if a value is not a number.
            </summary>
            <param name="value">The value to check.</param>
            <param name="allowString">Whether or not to allow strings to be parsed.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsEmpty(System.Object)">
            <summary>
            Returns TRUE if the given value is either an empty value, or a zero-length piece of text.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsBoolean(System.Object)">
            <summary>
            Returns true if a value is a boolean.
            </summary>
            <param name="value">The value to check.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsBoolean(System.Object,System.Boolean)">
            <summary>
            Returns true if a value is a boolean.
            </summary>
            <param name="value">The value to check.</param>
            <param name="allowStrings">Whether or not strings can be counted as booleans.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IsNonBoolean(System.Object)">
            <summary>
            Returns true if a value is not a boolean.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="M:Titan.Rules.Common.LogicalFunctions.IfCondition(System.Object,System.Object,System.Object)">
            <summary>
            Checks the first parameter against the condition in the second.
            If the first parameter matches the condition, returns the first parameter.
            If the first parameter doesn't match the condition, returns the second parameter.
            If the condition is null, returns null.
            </summary>
            <param name="toCheck">The object to check against the condition.</param>
            <param name="condition">The condition to check the first parameter with.</param>
            <param name="defaultValue">The value to return if the first parameter doesn't match the condition.</param>
            <returns>The first parameter if the first parameter satisfies the condition in the second parameter, otherwise the second parameter.</returns>
        </member>
        <member name="T:Titan.Rules.Common.MathFunctions">
            <summary>
            Provides common math functions which can be used with the rules engine.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.PI">
            <summary>
            Returns the value of PI.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Sin(System.Double)">
            <summary>
            Returns the sine of the specified angle measured in radians.
            </summary>
            <param name="angle">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.SinH(System.Double)">
            <summary>
            Returns the hyperbolic sine of an angle in radians.
            </summary>
            <param name="angle">An angle measured in radians.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.SinD(System.Double)">
            <summary>
            Returns the sine of the specified angle measured in degrees.
            </summary>
            <param name="angle">An angle measured in degrees.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ASin(System.Double)">
            <summary>
            Returns the angle corresponding to the given sine ratio.
            </summary>
            <param name="ratio">A sine ratio for which to find the angle.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ASinH(System.Double)">
            <summary>
            Returns the inverse hyperbolic sine of an angle in radians.
            </summary>
            <param name="angle">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ASinD(System.Double)">
            <summary>
            Returns the arcsine of an number, measured in degrees.
            </summary>
            <param name="ratio">A number to find the arcsine of.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Tan(System.Double)">
            <summary>
            Returns the tangent of the specified angle measured in radians.
            </summary>
            <param name="angle">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.TanH(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified angle measured in radians.
            </summary>
            <param name="angle">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.TanD(System.Double)">
            <summary>
            Returns the tangent of an angle measured in degrees.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ATan(System.Double)">
            <summary>
            Returns the arctangent of an angle in radians.
            </summary>
            <param name="ratio">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ATanH(System.Double)">
            <summary>
            Returns the inverse hyperbolic tangent of an angle in radians.
            </summary>
            <param name="ratio">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ATanD(System.Double)">
            <summary>
            Returns the arctangent of an number, measured in degrees.
            </summary>
            <param name="ratio">An number to find the arctangent of.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ATan2(System.Double,System.Double)">
            <summary>
            Returns the angle in radians whose tangent is quotient of the two numbers.
            </summary>
            <param name="x_num">The x co-ordinate of a vector.</param>
            <param name="y_num">The y co-ordinate of a vector.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Cos(System.Double)">
            <summary>
            Returns the cosine of the specified angle measured in radians.
            </summary>
            <param name="angle">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.CosH(System.Double)">
            <summary>
            Returns the hyperbolic cosine of an angle in radians.
            </summary>
            <param name="angle">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.CosD(System.Double)">
            <summary>
            Returns the cosine of an angle measured in degrees.
            </summary>
            <param name="angle">An angle measured in degrees.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ACos(System.Double)">
            <summary>
            Returns the arccosine of an angle in radians.
            </summary>
            <param name="ratio">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ACosH(System.Double)">
            <summary>
            Returns the inverse hyperbolic cosine of an angle in radians.
            </summary>
            <param name="ratio">An angle measured in radians.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.ACosD(System.Double)">
            <summary>
            Returns the arccosine of an number, measured in degrees.
            </summary>
            <param name="number">A number to find the arccosine of.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Min(System.Double,System.Double)">
            <summary>
            Returns the smaller of the two specified values.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Min(System.Double,System.Double,System.Double)">
            <summary>
            Returns the smaller of the specified values.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <param name="v3">The third value to compare.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Min(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the smaller of the specified values.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <param name="v3">The third value to compare.</param>
            <param name="v4">The forth value to compare.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Min(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the smaller of the specified values.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <param name="v3">The third value to compare.</param>
            <param name="v4">The forth value to compare.</param>
            <param name="v5">The fifth value to compare.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Min(System.Double[])">
            <summary>
            Returns the smaller of the specified values.
            </summary>
            <param name="values">Values to compare</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Max(System.Double,System.Double)">
            <summary>
            Returns the greater of the specified values.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Max(System.Double,System.Double,System.Double)">
            <summary>
            Returns the greater of the specified values.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <param name="v3">The third value to compare.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Max(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the greater of the specified values.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <param name="v3">The third value to compare.</param>
            <param name="v4">The forth value to compare.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Max(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the greater of the specified values.
            </summary>
            <param name="v1">The first value to compare.</param>
            <param name="v2">The second value to compare.</param>
            <param name="v3">The third value to compare.</param>
            <param name="v4">The forth value to compare.</param>
            <param name="v5">The fifth value to compare.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Max(System.Double[])">
            <summary>
            Returns the greater of the specified values.
            </summary>
            <param name="values">Values to compare</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.RoundDown(System.Double,System.Double)">
            <summary>
            Rounds the number down to the specified number of digits.
            </summary>
            <param name="value">The value to round.</param>
            <param name="digits">The number of digits to keep.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.RoundUp(System.Double,System.Double)">
            <summary>
            Rounds the number up to the specified number of digits.
            </summary>
            <param name="value">The value to round.</param>
            <param name="digits">The number of digits to keep.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Round(System.Double,System.Double)">
            <summary>
            Rounds the number to the specified number of digits.
            </summary>
            <param name="value">The value to round.</param>
            <param name="digits">The number of digits to keep.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Radians(System.Double)">
            <summary>
            Converts the given value in degrees to radians.
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Degrees(System.Double)">
            <summary>
            Converts the given value in radians to degrees.
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Abs(System.Double)">
            <summary>
            Returns the absolute value of a number.
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Ceiling(System.Double,System.Double)">
            <summary>
            Returns the number rounded up to the nearest integer, 
            away from zero to the nearest multiple of significance.
            </summary>
            <param name="value">The value to round.</param>
            <param name="significance">The multiple to which you want to round.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Floor(System.Double,System.Double)">
            <summary>
            Rounds a number down toward zero to the nearest multiple of significance.
            </summary>
            <param name="value">The value to round.</param>
            <param name="significance">The multiple to which you want to round.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Int(System.Double)">
            <summary>
            Returns the number rounded down to the nearest integer.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Even(System.Double)">
            <summary>
            Returns the number rounded to the nearest even integer.
            </summary>
            <param name="value">The value to round.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Odd(System.Double)">
            <summary>
            Returns the number rounded up if the number is positive and rounded down
            if the number is negative, to the nearest odd integer.
            </summary>
            <param name="value">The value to round.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.IsOdd(System.Double)">
            <summary>
            Returns true if the number odd.
            </summary>
            <param name="value">The number to check.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.IsEven(System.Double)">
            <summary>
            Returns true if the number even.
            </summary>
            <param name="value">The number to check.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Exp(System.Double)">
            <summary>
            Returns e raised to the power of a number.
            </summary>
            <param name="value">The value to calculate.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Fact(System.Double)">
            <summary>
            Returns the factorial of a number.
            </summary>
            <param name="value">The value to calculate.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.FactDouble(System.Double)">
            <summary>
            Returns the double factorial of a number.
            </summary>
            <param name="value">The value to calculate.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Ln(System.Double)">
            <summary>
            Returns the natural logarithm of a number.
            </summary>
            <param name="value">The value to get the logarithm of.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Log(System.Double,System.Double)">
            <summary>
            Returns the logarithm of a number to a specified base.
            </summary>
            <param name="value">The value to get the logarithm of.</param>
            <param name="baseNumber">The base of the logarithm.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Mod(System.Double,System.Double)">
            <summary>
            Returns the remainder after division.
            </summary>
            <param name="value">The value to divide.</param>
            <param name="divisor">The number to divide the value by.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Power(System.Double,System.Double)">
            <summary>
            Returns the result of a number raised to a power.
            </summary>
            <param name="value">The value to raise.</param>
            <param name="power">The exponent to which the value is raised.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Product(System.Double[])">
            <summary>
            Multiplies its arguments together.
            </summary>
            <param name="values">Values to multiply together.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Sum(System.Double[])">
            <summary>
            Adds it's arguments together.
            </summary>
            <param name="values">Values to add together.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Choose(System.Double,System.Object[])">
            <summary>
            Chooses a value from a list of values.
            </summary>
            <param name="index">Index of the item to pick from the list, starting from 1.</param>
            <param name="values">The values to pick from.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Quotient(System.Double,System.Double)">
            <summary>
            Returns the integer portion of a division.
            </summary>
            <param name="value1">The dividend.</param>
            <param name="value2">The divisor.</param>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Rand">
            <summary>
            Returns a random number between 0 and 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Sign(System.Double)">
            <summary>
            Returns the sign of a number.
            </summary>
            <param name="value">The value to get the sign of.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Sqrt(System.Double)">
            <summary>
            Returns the square root of a number.
            </summary>
            <param name="value">The value to find the square root of.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.SqrtPi(System.Double)">
            <summary>
            Returns the square root of a number * PI.
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Trunc(System.Double)">
            <summary>
            Truncates a number to an integer.
            </summary>
            <param name="value">The value to truncate.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Trunc(System.Double,System.Double)">
            <summary>
            Truncates a number to an integer.
            </summary>
            <param name="value">The value to truncate.</param>
            <param name="digits">The number of digits to truncate to.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.RandBetween(System.Double,System.Double)">
            <summary>
            Returns a random number between the numbers you specify.
            </summary>
            <param name="bottom">The lower limit of the random range.</param>
            <param name="top">The upper limit of the random range.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.MRound(System.Double,System.Double)">
            <summary>
            Returns a number rounded to the desired multiple.
            </summary>
            <param name="value">The number to round.</param>
            <param name="multiple">The multiple to round the number to.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.Log10(System.Double)">
            <summary>
            Returns the base-10 logarithm of a number.
            </summary>
            <param name="value">number for which you wan the base-10 logarithm.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.AngleAbsD(System.Double)">
            <summary>
            Returns the absolute value of an angle in degrees.
            </summary>
            <param name="angle">angle in degrees for which you want the absolute value</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.MathFunctions.AngleAbs(System.Double)">
            <summary>
            Returns the absolute value of an angle in radians.
            </summary>
            <param name="angle">angle in radians for which you want the absolute value</param>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Common.StringFunctions">
            <summary>
            Provides common string functions which can be used with the rules engine.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.GetNumericSuffix(Titan.Rules.Execution.Value,System.String)">
            <summary>
            Gets the numeric suffix from a string.
            </summary>
            <param name="result">The Value which will receive the result of the function.</param>
            <param name="text">The string from which to get the suffix.</param>
            <returns>The numeric suffix from the specified string.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.TextFormat(System.String,System.Object[])">
            <summary>
            Formats the given format string and values using the .NET <see cref="M:System.String.Format(System.String,System.Object[])" /> method.
            </summary>
            <param name="format">The format string.</param>
            <param name="values">The values to format</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Char(System.Double)">
            <summary>
            Returns a character corresponding based on its numeric value.
            </summary>
            <param name="value">The value of the character to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Text(System.Object,System.String)">
            <summary>
            Converts the given value to a string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The formatting string.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Left(System.String,System.Double)">
            <summary>
            Gets the left part of the given string.
            </summary>
            <param name="value">The string to process.</param>
            <param name="count">The number of characters to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Left(System.String)">
            <summary>
            Gets the left part of the given string.
            </summary>
            <param name="value">The string to process.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Right(System.String,System.Double)">
            <summary>
            Gets the right part of the given string.
            </summary>
            <param name="value">The string to process.</param>
            <param name="count">The number of characters to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Right(System.String)">
            <summary>
            Gets the right part of the given string.
            </summary>
            <param name="value">The string to process.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Mid(System.String,System.Double,System.Double)">
            <summary>
            Gets the specified part of the given string.
            </summary>
            <param name="value">The string to process.</param>
            <param name="start">The 1-based index at which to start.</param>
            <param name="count">The number of characters to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Mid(System.String,System.Double)">
            <summary>
            Gets the specified part of the given string.
            </summary>
            <param name="value">The string to process.</param>
            <param name="start">The 1-based index at which to start.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Len(System.String)">
            <summary>
            Gets the length of the given string.
            </summary>
            <param name="value">The string to process.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Upper(System.String)">
            <summary>
            Converts the given value to an uppercase string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Lower(System.String)">
            <summary>
            Converts the given value to an lowercase string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Exact(System.String,System.String)">
            <summary>
            Checks to see if the two text values are identical.
            </summary>
            <param name="value1">First text string.</param>
            <param name="value2">Second text string.</param>
            <returns>True if values are the same.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Find(System.String,System.String,System.Double)">
            <summary>
            Finds one text value within another (case-sensitive).
            </summary>
            <param name="find">The text you want to find.</param>
            <param name="within">The text containing the text you want to find.</param>
            <param name="startIndex">Specifies the character at which to start the search.</param>
            <returns>Index of the text to find.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Find(System.String,System.String,System.Double,System.StringComparison)">
            <summary>
            Finds one text value within another (case-sensitive).
            </summary>
            <param name="find">The text you want to find.</param>
            <param name="within">The text containing the text you want to find.</param>
            <param name="startIndex">Specifies the character at which to start the search.</param>
            <param name="searchType">Type of search.</param>
            <returns>Index of the text to find.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Find(System.String,System.String)">
            <summary>
            Finds one text value within another (case-sensitive).
            </summary>
            <param name="find">The text you want to find.</param>
            <param name="within">The text containing the text you want to find.</param>
            <returns>Index of the text to find.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Replace(System.String,System.Double,System.Double,System.String)">
            <summary>
            Replaces characters within text at the position given
            </summary>
            <param name="oldText">The target text.</param>
            <param name="startIndex">The start character index to being the replace.</param>
            <param name="charCount">The amount of characters to replace in the target text.</param>
            <param name="newText">The new text to place in the target string.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Search(System.String,System.String)">
            <summary>
            Finds one text value within another (not case-sensitive).
            </summary>
            <param name="find">The text you want to find.</param>
            <param name="within">The text containing the text you want to find.</param>
            <returns>Index of the text to find.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Search(System.String,System.String,System.Double)">
            <summary>
            Finds one text value within another (not case-sensitive).
            </summary>
            <param name="find">The text you want to find.</param>
            <param name="within">The text containing the text you want to find.</param>
            <param name="startIndex">Specifies the character at which to start the search.</param>
            <returns>Index of the text to find.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.DimensionText(System.String,System.String,System.String,System.String)">
            <summary>
            Sets each text string to be displayed at their specified position on a dimension.
            </summary>
            <param name="leftText">The text you want to display on the left of a dimension.</param>
            <param name="topText">The text you want to display at the top of the dimension.</param>
            <param name="rightText">The text you want to display on the right of a dimension.</param>
            <param name="bottomText">The text you want to display at the bottom of the dimension.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.DimensionTextAll(System.String)">
            <summary>
            Sets the whole of the dimension text to display allText.
            </summary>
            <param name="allText">The text you want to display for the whole dimension.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Substitute(System.String,System.String,System.String,System.Double,System.Boolean)">
            <summary>
            Substitutes new text for old text in a text string.
            </summary>
            <param name="text">Text for which you want to substitute characters.</param>
            <param name="oldText">The old text to substitute.</param>
            <param name="newText">The new text to place in.</param>
            <param name="instanceNumber">The specific instance to place.</param>
            <param name="ignoreCase">Dictates whether the search is case insensitive.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Substitute(System.String,System.String,System.String,System.Double)">
            <summary>
            Substitutes new text for old text in a text string.
            </summary>
            <param name="text">Text for which you want to substitute characters.</param>
            <param name="oldText">The old text to substitute.</param>
            <param name="newText">The new text to place in.</param>
            <param name="instanceNumber">The specific instance to place.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Substitute(System.String,System.String,System.String)">
            <summary>
            Substitutes new text for old text in a text string.
            </summary>
            <param name="text">Text for which you want to substitute characters.</param>
            <param name="oldText">The old text to substitute.</param>
            <param name="newText">The new text to place in.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Trim(System.String)">
            <summary>
            Removes spaces from the beginning and the end of the given text. 
            Removes any extra spaces between words if there is more than one space between two words.
            </summary>
            <param name="value">The text to trim.</param>
            <returns>Trimmed text.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.TrimStart(System.String)">
            <summary>
            Removes whitespace from the beginning of the given text.
            </summary>
            <param name="value">The text to trim.</param>
            <returns>Trimmed text.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.TrimEnd(System.String)">
            <summary>
            Removes whitespace from the end of the given text.
            </summary>
            <param name="value">The text to trim.</param>
            <returns>Trimmed text.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.StringJoin(System.String,System.String)">
            <summary>
            Joins text items together with a separator between each item.
            </summary>
            <param name="separator">The string to use as a separator.</param>
            <param name="list">The value or collection of values, separated by a pipe character.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.StringJoin(System.String,System.String[])">
            <summary>
            Joins text items together with a separator between each item.
            </summary>
            <param name="list">The value or collection of values, separating each item by a comma.</param>
            <param name="separator">The string to use as a separator.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Proper(System.String)">
            <summary>
            Capitalizes the first letter in each word of a text value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Fixed(System.Double)">
            <summary>
            Formats a number as text with a fixed number of decimals.
            </summary>
            <param name="value">Number to convert.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Fixed(System.Double,System.Double)">
            <summary>
            Formats a number as text with a fixed number of decimals.
            </summary>
            <param name="value">Number to convert.</param>
            <param name="decimals">The number of decimals to show.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Fixed(System.Double,System.Double,System.Boolean)">
            <summary>
            Formats a number as text with a fixed number of decimals.
            </summary>
            <param name="value">Number to convert.</param>
            <param name="decimals">The number of decimals to show.</param>
            <param name="noCommas">If commas should be removed from the number.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Dollar(System.Double)">
            <summary>
            Converts a number to text using the currency format.
            </summary>
            <param name="value">The number to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Dollar(System.Double,System.Double)">
            <summary>
            Converts a number to text using the currency format.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="decimals">The number of decimal places.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Concatenate(System.String[])">
            <summary>
            Joins text items into one text item.
            </summary>
            <param name="values">Items to join together.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.IsValidFileName(System.String)">
            <summary>
            Checks that the file name is valid.
            </summary>
            <param name="fileName">The file name to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.IsValidDirectory(System.String)">
            <summary>
            Checks that the directory is valid.
            (Valid directory structure with no filename)
            </summary>
            <param name="dir">The directory to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.IsValidPath(System.String)">
            <summary>
            Checks that the path is valid.
            (Valid directory structure with a filename)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.IsValidFileNameResult(System.String)">
            <summary>
            Checks that the file name is of a valid structure,
            including wild characters ('*') to form such structures
            as; *.txt, helloworld.* and *.*
            </summary>
            <param name="fileName">The file name to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.IsValidRelativePathResult(System.String)">
            <summary>
            Checks that the path is a valid relative path result.
            </summary>
            <param name="path">The path to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.EmailGetUserName(System.String)">
            <summary>
            Gets the user name portion of an email address.
            </summary>
            <param name="email">The email address to parse.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.EmailGetDomainName(System.String)">
            <summary>
            Gets the domain name portion of an email address.
            </summary>
            <param name="email">The email address to parse.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.IsValidEmailAddress(System.String)">
            <summary>
            Checks the e-mail address is of a valid structure.
            (e.g. yourname@email.com)
            </summary>
            <param name="email">The e-mail address to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the regular expression specified finds
            a match in the input string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression to use.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.FsGetFileName(System.String)">
            <summary>
            Returns the name of the file in the specified path/directory
            </summary>
            <param name="filePath">The string to check for the file name.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.FsGetDirectoryName(System.String)">
            <summary>
            Returns the name of the Directory 
            </summary>
            <param name="filePath">The string to check for the directory.</param>
            <returns>Returns the directory information for the specified path string</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.FsGetExtension(System.String)">
            <summary>
            Returns the extension of the file 
            </summary>
            <param name="filePath">The string to check for the extension of a file.</param>
            <returns>Returns the extension of the file name</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Color(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a color using defined units of red, green and blue.
            (Each value must be an integer between the values of 0 and 255.)
            </summary>
            <param name="r">The amount of red.</param>
            <param name="g">The amount of green.</param>
            <param name="b">The amount of blue.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ColorHex(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a color using defined units of red, green and blue.
            (Each value must be an integer between the values of 0 and 255.)
            </summary>
            <param name="r">The amount of red.</param>
            <param name="g">The amount of green.</param>
            <param name="b">The amount of blue.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ColorHex(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a color using defined units of red, green and blue.
            (Each value must be an integer between the values of 0 and 255.)
            </summary>
            <param name="r">The amount of red.</param>
            <param name="g">The amount of green.</param>
            <param name="b">The amount of blue.</param>
            <param name="alpha">The alpha component of the color.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.NewLine">
            <summary>
            Returns a character to represent a newline whitespace
            character within a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.NewLine(System.Double)">
            <summary>
            Returns characters to represent multiple newline whitespace
            characters within a string.
            </summary>
            <param name="count">number of newline characters to return</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Rept(System.String,System.Double)">
            <summary>
            Repeats the specified string n number of times.
            </summary>
            <param name="text">The string to repeat.</param>
            <param name="numberTimes">The number of times to repeat the specified string.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.FsPathCombine(System.String,System.String)">
            <summary>
            Combines two paths.
            </summary>
            <param name="firstPath">First path to be combined.</param>
            <param name="secondPath">Second path to be combined.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.FsChangeExtension(System.String,System.String)">
            <summary>
            Changes the file extension of a given path.
            </summary>
            <param name="path">Path to be changed.</param>
            <param name="extension">New file extension.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListCountItems(System.String)">
            <summary>
            Returns the number of items in a list.
            </summary>
            <param name="listValue">String which is the list of elements separated with a "|".</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListGetItem(System.String,System.Double)">
            <summary>
            Gets an item from a List of items separated with '|'.
            </summary>
            <param name="listValue">The List/(string of items/elements) where we look for the index/item that we want to get from this List. </param>
            <param name="desiredItemIndex">The item that we want to find in the List.</param>
            <returns></returns> 
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListFindItem(System.String,System.String)">
            <summary>
            Finds an item from a List of items separated with '|'.
            </summary>
            <param name="listValue">The List/(string of items/elements) where we look for the index/item that we want to get from this List. </param>
            <param name="itemValue">The item that we want to find in the List.</param>
            <returns>Returns a number.The number of the item in the list.</returns> 
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListJoin(System.String[])">
            <summary>
            Joins two lists together.
            </summary>
            <param name="values">The lists that are going to be joined to one-another.</param>
            <returns>The joined list.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListRemoveDuplicates(System.String)">
            <summary>
            Removes duplicates from a pipe delimited list using a case sensitive comparison.
            </summary>
            <param name="list">The list to remove duplicates from.</param>
            <returns>The list with duplicates removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListRemoveDuplicates(System.String,System.Boolean)">
            <summary>
            Removes duplicates from a pipe delimited list.
            Comparison can be case sensitive or not.
            </summary>
            <param name="list">The list to remove duplicates from.</param>
            <param name="ignoreCase">True to perform a case insensitive comparison on the items in the list.</param>
            <returns>The list with duplicates removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListRemoveIndex(System.String,System.Double)">
            <summary>
            Removes the item at the specified index in a pipe delimited list.
            </summary>
            <param name="list">The list to remove an item from.</param>
            <param name="index">The index of the item to remove from the list.</param>
            <returns>The list with the specified index removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListRemoveItem(System.String,System.String)">
            <summary>
            Removes all matching items from a pipe delimited list using a case sensitive comparison.
            </summary>
            <param name="list">The list to remove matching items from.</param>
            <param name="item">The item to remove from the list.</param>
            <returns>The list with all matching items removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListRemoveItem(System.String,System.String,System.Boolean)">
            <summary>
            Removes all matching items from a pipe delimited list.
            </summary>
            <param name="list">The list to remove matching items from.</param>
            <param name="item">The item to remove from the list.</param>
            <param name="ignoreCase">True to perform a case insensitive remove of the matching items in the list.</param>
            <returns>The list with all matching items removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListReplaceItem(System.String,System.String,System.String)">
            <summary>
            Replaces all matching items in a pipe delimited list using a case sensitive comparison.
            </summary>
            <param name="list">The list to replace matching items in.</param>
            <param name="oldItem">The item value to replace in the list.</param>
            <param name="newItem">The new item that is to replace all matching old items.</param>
            <returns>The list with all matching items replaced.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListReplaceItem(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces all matching items in a pipe delimited list.
            </summary>
            <param name="list">The list to replace matching items in.</param>
            <param name="oldItem">The item value to replace in the list.</param>
            <param name="newItem">The new item that is to replace all matching old items.</param>
            <param name="ignoreCase">True to perform a case insensitive replacement of the matching items in the list.</param>
            <returns>The list with all matching items replaced.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListRemoveEmpty(System.String)">
            <summary>
             Removes the empty entries from a pipe delimited list.
             Empty entries are any entries where there are no characters.
             </summary>
             <param name="list">The list to remove empty entries from.</param>
             <returns>The list with empty entries removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListRemoveEmpty(System.String,System.Boolean)">
            <summary>
            Removes the empty entries from a pipe delimited list.
            Optionally treats entries consisting only of whitespace as empty,
            in addition to entries containing no characters.
            </summary>
            <param name="list">The list to remove empty entries from.</param>
            <param name="removeWhitespace">True to treat entries consisting only of whitespace as empty.</param>
            <returns>The list with empty entries removed.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListReplaceIndex(System.String,System.Double,System.String)">
            <summary>
            Replaces the item at the specified index in a pipe delimited list.
            </summary>
            <param name="list">The list to replace an item in.</param>
            <param name="index">The index of the item to replace in the list.</param>
            <param name="newItem">The new item to replace the item at the specified index with.</param>
            <returns>The list with the specified index replaced by newItem.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListGetCommon(System.String,System.String)">
            <summary>
            Compares two pipe delimited lists using a case sensitive comparison and returns the common items, including any duplicates.
            </summary>
            <param name="list1">The first list to compare.</param>
            <param name="list2">The second list to compare.</param>
            <returns>A list of items that appear in List 1 and also appear in List 2.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListGetCommon(System.String,System.String,System.Boolean)">
            <summary>
            Compares two pipe delimited lists using a case sensitive comparison and returns the common items with an option for including duplicates.
            </summary>
            <param name="list1">The first list to compare.</param>
            <param name="list2">The second list to compare.</param>
            <param name="showDuplicates">True to show duplicate items in the result.</param>
            <returns>A list of items that appear in List 1 and also appear in List 2.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListGetCommon(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Compares two pipe delimited lists and returns the common items with options for case insensitive checking and including duplicate values.
            </summary>
            <param name="list1">The first list to compare.</param>
            <param name="list2">The second list to compare.</param>
            <param name="showDuplicates">True to show duplicate items in the result.</param>
            <param name="ignoreCase">True to perform a case insensitive comparison on the items in the lists.</param>
            <returns>A list of items that appear in List 1 and also appear in List 2.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListGetUnique(System.String,System.String)">
            <summary>
            Compares two pipe delimited lists using a case sensitive comparison and returns the items that appear in List 1 but not in List 2, including any duplicates.
            </summary>
            <param name="list1">The first list to compare.</param>
            <param name="list2">The second list to compare.</param>
            <returns>A list of items that appear in List 1 but not in List 2.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListGetUnique(System.String,System.String,System.Boolean)">
            <summary>
            Compares two pipe delimited lists using a case sensitive comparison and returns the items that appear in List 1 but not in List 2 with an option for including duplicates.
            </summary>
            <param name="list1">The first list to compare.</param>
            <param name="list2">The second list to compare.</param>
            <param name="showDuplicates">True to show duplicate items in the result.</param>
            <returns>A list of items that appear in List 1 but not in List 2.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListGetUnique(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Compares two pipe delimited lists using a case sensitive comparison and returns the items that appear in List 1 but not in List 2 with options for case insensitive checking and including duplicate values.
            </summary>
            <param name="list1">The first list to compare.</param>
            <param name="list2">The second list to compare.</param>
            <param name="showDuplicates">True to show duplicate items in the result.</param>
            <param name="ignoreCase">True to perform a case insensitive comparison on the items in the lists.</param>
            <returns>A list of items that appear in List 1 but not in List 2.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListMaxValue(System.String)">
            <summary>
            Gets the maximum value in a given list.
            </summary>
            <param name="list">The list to process.</param>
            <returns>The maximum value from the list.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListMaxValue(System.String,System.Double)">
            <summary>
            Gets the maximum value in a given list.
            </summary>
            <param name="list">The list to process.</param>
            <param name="defaultValue">Value returned if the list contains no valid numbers.</param>
            <returns>The maximum value from the list.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListReverse(System.String)">
            <summary>
            Reverses the order of a list.
            </summary>
            <param name="list">The list that is going to be reversed.</param>
            <returns>A list in reverse order.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListSum(System.String)">
            <summary>
            Calculates the sum of the numbers in the specified list.
            </summary>
            <param name="list">The list to sum numbers from.</param>
            <returns>Total for the numbers in the list.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListSort(System.String)">
            <summary>
            Perform a sort in ascending order on the specified list.
            </summary>
            <param name="list">The list to sort.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ListSort(System.String,System.Boolean)">
            <summary>
            Perform a sort on the specified list.
            </summary>
            <param name="list">The list to sort.</param>
            <param name="sortAscending">TRUE to sort the results ascending, FALSE to sort descending.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.IsErrorString(System.Object)">
            <summary>
            Returns true if the specified value is an error string.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the specified value is an error string.</returns>
            <remarks>Error strings look something  like "#ERROR! oh dear".</remarks>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.HashMD5(System.String)">
            <summary>
            Computes the MD5 hash of the specified value and returns it in hexadecimal.
            </summary>
            <param name="value">The value to hash.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.HashSHA1(System.String)">
            <summary>
            Computes the SHA1 hash of the specified value and returns it in hexadecimal.
            </summary>
            <param name="value">The value to hash.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.HashHMACSHA1(System.String,System.String)">
            <summary>
            Generates an Signing Key using HMAC-SHA1 and returns it as a Base64 Encoded string.
            </summary>
            <param name="baseString">The value to encrypt.</param>
            <param name="signingKey">The signing key to use during encryption.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.Base64Encode(System.String)">
            <summary>
            Base 64 Encodes a string.
            </summary>
            <param name="value">The string value to encode.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.UrlEncode(System.String)">
            <summary>
            Encodes the given string so that it is suitable for use in a URL.
            </summary>
            <param name="value">The string value to encode.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ColorHexToNumbers(System.String)">
            <summary>
            Converts hex color codes to pipe delimited numbers as a string.
            </summary>
            <param name="hexValue">The value to convert.</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ExtractNumber(System.String)">
            <summary>
            Gets the first occurrence of a number in the specified value.
            </summary>
            <param name="value">The value to get the number from.</param>
            <returns>The found number as a string.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ExtractNumber(System.String,System.Double)">
            <summary>
            Gets the Nth occurrence of a number in the specified value.
            </summary>
            <param name="value">The value to find the number in.</param>
            <param name="index">The index of the number to find.</param>
            <returns>The found number as a string.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.FormatDouble(System.Double,System.String)">
            <summary>
            Excel style formatting for double values.
            </summary>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ConvertToFractionFixedDenom(System.Double,System.Int32)">
            <summary>
            Returns a text representation of a fraction with the specified denominator.
            </summary>
            <param name="value">The value to convert to a fraction</param>
            <param name="denominator">The desired denominator</param>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ConvertToFraction(System.Double,System.Int32)">
            <summary>
            Returns text representation of fraction e.g. 1.5 would return "3/2". 
            </summary>
            <param name="value">The value to convert to a fraction.</param>
            <param name="denominatorUnitLimit">The number of units that can be used in the denominator of the fraction. Setting this too low may reduce accuracy. Set to -1 to ignore.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.FindFraction(System.Double,System.Int32)">
            <summary>
            Will return a fraction that as closely as possible matches the denominator unit bound.
            E.g where denoLimit = 3 then the denominator can be 100 to 999 (3 units).
            </summary>
            <param name="decimalNumber">The number to find the fraction representation of.</param>
            <param name="denoLimit">The range that the denominator can be - expressing in unit count.</param>
            <returns>An array with 2 values, first is numerator and second is the denominator.</returns>
        </member>
        <member name="M:Titan.Rules.Common.StringFunctions.ReplaceString(System.String,System.String,System.String)">
            <summary>
            Replaces the string values in the given value while ignoring case.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.ArrayValueExtensions">
            <summary>
            Useful extension methods for arrays.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueExtensions.IsColumnValid(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Determines whether the specified column index is valid for the given table.
            </summary>
            <param name="self">The array to test.</param>
            <param name="columnIndex">The column index to test.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueExtensions.IsRowValid(Titan.Rules.Execution.IArrayValue,System.Int32)">
            <summary>
            Determines whether the specified row index is valid
            for the given array.
            </summary>
            <param name="self">The array to test.</param>
            <param name="rowIndex">The row index to test.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueExtensions.HasRows(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Determines whether the array has any rows.
            </summary>
            <param name="self">The array to test.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueExtensions.HasColumns(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Determines whether the array has any rows.
            </summary>
            <param name="self">The array to test.</param>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Execution.DuplicateNameException">
            <summary>
            Thrown when a duplicate name conflict occurs.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.DuplicateNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.DuplicateNameException"/> type. 
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Titan.Rules.Execution.DuplicateNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.DuplicateNameException"/> type. 
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.DuplicateNameException.Name">
            <summary>
            Gets the name involved in the conflict.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.DuplicateNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            with information about the exception.</summary> 
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Titan.Rules.Execution.FunctionAttributes">
            <summary>
            Provides information on various states and flags of a function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.FunctionAttributes.None">
            <summary>
            A lack of special attributes.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.FunctionAttributes.IsHidden">
            <summary>
            Whether or not the function should be hidden from editors.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.IArrayValueRow">
            <summary>
            Represents a single row in a table.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValueRow.GetElementAsValue(System.Int32)">
            <summary>
            Gets the element at the given row and column index as a Titan value.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValueRow.GetElementAsDouble(System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a double, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>    
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValueRow.GetElementAsString(System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a string, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, or converted value.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValueRow.GetElementAsDateTime(System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a date-time, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValueRow.GetElementAsBoolean(System.Globalization.CultureInfo,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a boolean, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValueRow.GetElement(System.Int32)">
            <summary>
            Gets the value at the specific column index for the current result.
            </summary>
            <param name="columnIndex">The column index.</param>
            <returns>The value of the result at the specified column, or a null reference if the index is out of range.</returns>
        </member>
        <member name="P:Titan.Rules.Execution.IArrayValueRow.RowIndex">
            <summary>
            Gets the current row index.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IArrayValueRow.Columns">
            <summary>
            Gets the column count for the current result.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.IHasCustomName">
            <summary>
            Provides a contract for a slot's context to implement that will specify a value to be used in the MyName() function.
            </summary>
            <remarks>
            The name can be any value and will not be used to set evaluation scope etc, like the slot's actual name will be.
            </remarks>
        </member>
        <member name="P:Titan.Rules.Execution.IHasCustomName.Name">
            <summary>
            The name to use.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.IHasCustomScope">
            <summary>
            Provides an method for a slot to define its own scope (that does not link to its own path).
            This is then used when evaluating references use in the slot.
            </summary>
            <remarks>
            This should be implemented on a slot context to be used.
            </remarks>
        </member>
        <member name="P:Titan.Rules.Execution.IHasCustomScope.ScopeAddress">
            <summary>
            The parts of the scope that the rule should have
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.IPositionedAdjacentSlotProvider">
            <summary>
            Provides a contract for an object to be able to fetch a <see cref="T:Titan.Rules.Execution.Slot"/> based on a relative 2D offset.
            Also provides the location of itself.
            </summary>
            <remarks>
            This should be implemented by a <see cref="T:Titan.Rules.Execution.Slot"/>'s <see cref="P:Titan.Rules.Execution.Slot.Context"/> object.
            </remarks>
        </member>
        <member name="P:Titan.Rules.Execution.IPositionedAdjacentSlotProvider.X">
            <summary>
            Absolute horizontal location of this provider (slot).
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IPositionedAdjacentSlotProvider.Y">
            <summary>
            Absolute vertical location of this provider (slot).
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.IAdjacentSlotProvider">
            <summary>
            Provides a contract for an object to be able to fetch a <see cref="T:Titan.Rules.Execution.Slot"/> based on a relative 2D offset.
            </summary>
            <remarks>
            This should be implemented by a <see cref="T:Titan.Rules.Execution.Slot"/>'s <see cref="P:Titan.Rules.Execution.Slot.Context"/> object.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.IAdjacentSlotProvider.GetSlot(System.Double,System.Double)">
            <summary>
            Gets the slot relative to this object (representing a slot).
            </summary>
            <param name="horizontalOffset">A unit horizontal offset from this object to the desired slot. This can be negative.</param>
            <param name="verticalOffset">A unit vertical offset from this object to the desired slot. This can be negative.</param>
            <returns>The found slot or null if nothing is found.</returns>
        </member>
        <member name="T:Titan.Rules.Execution.ArrayValueBase">
            <summary>
            Provides a base class designed to make it easier to implement array values for Titan. It is preferable to inherit 
            this base class rather than implement the <see cref="T:Titan.Rules.Execution.IArrayValue" /> interface.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.GetElementCore(System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, gets the element at the specified row and column index.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.ToArray">
            <summary>
            When overridden in a derived class, creates a two dimensional object array containing the values from the array value.
            </summary>
            <remarks>Wherever possible this method should be avoided as it can be very expensive in terms of memory and time taken.</remarks>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.ArrayValueBase.Rows">
            <summary>
            When overridden in a derived class, gets the number of rows in the array.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ArrayValueBase.Columns">
            <summary>
            When overridden in a derived class, gets the number of columns in the array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.GetElement(System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.GetElementAsValue(System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a Titan value.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.GetElementAsDouble(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a double, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>    
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.GetElementAsString(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a string, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, or converted value.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.GetElementAsDateTime(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a date-time, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.GetElementAsBoolean(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a boolean, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.ToArrayViaPerElementCopy">
            <summary>
            Provides a basic implementation of <see cref="M:Titan.Rules.Execution.ArrayValueBase.ToArray" />
            which constructs a new two dimension object array, and invokes
            <see cref="M:Titan.Rules.Execution.ArrayValueBase.GetElementCore(System.Int32,System.Int32)" /> to derive the value of each cell.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.ArrayValueBase.IsFullyLoaded">
            <summary>
            Implements <see cref="P:Titan.Rules.Execution.ILazyArrayValue.IsFullyLoaded" />
            by returning true.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.IsRowLoaded(System.Int32)">
            <summary>
            Implements <see cref="M:Titan.Rules.Execution.ILazyArrayValue.IsRowLoaded(System.Int32)" />
            by calling into <see cref="M:Titan.Rules.Execution.ArrayValueBase.IsRowValid(System.Int32)" />.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.IsRowValid(System.Int32)">
            <summary>
            Implements <see cref="M:Titan.Rules.Execution.ILazyArrayValue.IsRowValid(System.Int32)" />
            by checking to see if the number of rows given by
            <see cref="P:Titan.Rules.Execution.ArrayValueBase.Rows" /> is enough to satisfy the specified
            row index.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ArrayValueBase.GetEnumerator">
            <summary>
            Gets an enumerator over the rows in the array value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Execution.ILazyArrayValue">
            <summary>
            Extends array values with features that make it easier to work with
            lazily evaluate data sources.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ILazyArrayValue.IsFullyLoaded">
            <summary>
            Determines whether the array value is fully loaded or not.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ILazyArrayValue.IsRowLoaded(System.Int32)">
            <summary>
            Determines whether the specified row has been loaded or not, this should not 
            require the underlying data source to be contacted.
            </summary>
            <param name="rowIndex">The index of the row to check.</param>
            <returns>True if the specified row has been loaded, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.ILazyArrayValue.IsRowValid(System.Int32)">
            <summary>
            Determines whether the specified row exists, this may require
            loading the specified row, and possibly others, from the underlying 
            data source. Using this method is expected to be faster than using
            <see cref="P:Titan.Rules.Execution.IArrayValue.Rows"/> for most use cases.
            </summary>
            <param name="rowIndex">The index of the row to check.</param>
            <returns>True if the specified row index represents a row that can be retrieved, otherwise false.</returns>
        </member>
        <member name="T:Titan.Rules.Execution.ColumnarJaggedArrayValue">
            <summary>
            Provides a simple implementation of an array value around an array of arrays.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ColumnarJaggedArrayValue.#ctor(System.Object[][],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.ColumnarJaggedArrayValue" /> class.
            </summary>
            <param name="values">The array of columns where each column is an array, the values in the array MUST be one of the types supported by Titan otherwise runtime errors could occur.</param>
            <param name="rowCount">The maximum count of elements in any of the columns in the array.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ColumnarJaggedArrayValue.GetElementCore(System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified row and column index.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ColumnarJaggedArrayValue.ToArray">
            <summary>
            Creates a two dimensional object array containing the values from the array value.
            </summary>
            <remarks>Wherever possible this method should be avoided as it can be very expensive in terms of memory and time taken.</remarks>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.ColumnarJaggedArrayValue.Rows">
            <summary>
            Gets the number of rows in the array.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ColumnarJaggedArrayValue.Columns">
            <summary>
            Gets the number of columns in the array.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.LazyArrayValue">
            <summary>
            Represents an array value whose rows are lazily
            loaded from the given source.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.#ctor(System.Collections.Generic.IEnumerable{Titan.Rules.Execution.IArrayValueRow})">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.LazyArrayValue" />
            class.
            </summary>
            <param name="source">The source of rows.</param>
        </member>
        <member name="P:Titan.Rules.Execution.LazyArrayValue.Rows">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Execution.LazyArrayValue.Columns">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.GetElement(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.GetElementAsValue(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.GetElementAsDouble(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.GetElementAsString(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.GetElementAsDateTime(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.GetElementAsBoolean(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.ToArray">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Execution.LazyArrayValue.IsFullyLoaded">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.IsRowLoaded(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.IsRowValid(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.LazyArrayValue.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Titan.Rules.Execution.LazyRowEnumeratorHelper">
            <summary>
            Helper to help lazy array values to lazily load 
            values from some source, and ensure that
            the underlying enumerator is disposed when 
            enumeration completes.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.IArrayValueProvider">
            <summary>
            Provides a contract for an object to provide an array value on demand 
            and to be notified when supplied values have become stale (invalidated).
            </summary>
        </member>
        <member name="E:Titan.Rules.Execution.IArrayValueProvider.Invalidated">
            <summary>
            Raised when there is a new value available.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValueProvider.GetValue">
            <summary>
            Gets a new instance of the array from this provider.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.MethodInfoFunction">
            <summary>
            Provides a wrapper around a .NET function so that it can be called from a rule.
            See <see cref="T:Titan.Rules.Execution.Functions.ReflectedFunctionFactory" />
            for more information about exposing .NET functions.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.MethodInfoFunction.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.MethodInfoFunction" /> class.
            </summary>
            <param name="obj">An instance of an object on which to call the method when the function is invoked, or, a null reference (Nothing in Visual Basic) if the method is static (Shared in Visual Basic).</param>
            <param name="mi">An instance of the <see cref="T:System.Reflection.MethodInfo" /> class which describes the .NET method to call when the function is invoked.</param>
        </member>
        <member name="P:Titan.Rules.Execution.MethodInfoFunction.Name">
            <summary>
            Gets the name of the current function
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.MethodInfoFunction.Description">
            <summary>
            Gets the description for this method.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.MethodInfoFunction.Category">
            <summary>
            Gets the category that this method belongs to.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.MethodInfoFunction.GetFunctionInfo">
            <summary>
            Gets the metadata for the function.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.MethodInfoFunction.ArgumentCount">
            <summary>
            Gets the number of arguments supported by the function.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.MethodInfoFunction.HasParameterArray">
            <summary>
            Gets the location of xml documentation file for this function. If it has one.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.MethodInfoFunction.IsDeprecated">
            <summary>
            Gets whether or not this function has been deprecated/obsolete.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.MethodInfoFunction.Attributes">
            <summary>
            Gets the flags associated with this function.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.MethodInfoFunction.Invoke(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.Value[],Titan.Rules.Execution.Value)">
            <summary>
            Invokes the target function.
            </summary>
            <param name="engine">The execution engine executing the function.</param>
            <param name="args">The functionArguments to pass to the function.</param>
            <param name="result">The <see cref="T:Titan.Rules.Execution.Value" /> to which to apply the result.</param>
        </member>
        <member name="P:Titan.Rules.Execution.MethodInfoFunction.TriggerData">
            <summary>
            Gets data about the trigger, or a null reference if there is no trigger on the function.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.MethodInfoFunction.Invoke(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.ITrigger,Titan.Rules.Execution.Value[],Titan.Rules.Execution.Value)">
            <summary>
            Invokes the target function.
            </summary>
            <param name="engine">The execution engine executing the function.</param>
            <param name="trigger">The function's trigger.</param>
            <param name="args">The functionArguments to pass to the function.</param>
            <param name="result">The <see cref="T:Titan.Rules.Execution.Value" /> to which to apply the result.</param>
        </member>
        <member name="T:Titan.Rules.Execution.Profiling.FunctionProfile">
            <summary>
            Provides a description of a function's usage.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfile.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfile.TotalElapsed">
            <summary>
            Gets the total time that it has taken to execute all instances of functions.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfile.EventInstances">
            <summary>
            Gets all instances of times that this function has been called.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Profiling.FunctionProfileEvent">
            <summary>
            Provides a description of a function being executed.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfileEvent.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfileEvent.Arguments">
            <summary>
            Gets the arguments that were supplied to the function.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfileEvent.Owner">
            <summary>
            Gets the slot that used the function.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfileEvent.Result">
            <summary>
            The resulting value of the function's execution.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfileEvent.Time">
            <summary>
            Gets the start time of the event.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfileEvent.Duration">
            <summary>
            Gets the time span that it took to execute the function.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Profiling.FunctionProfileEventArgs">
            <summary>
            Prevents an event about a profile function.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.FunctionProfileEventArgs.Profile">
            <summary>
            The associated function profile.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Profiling.ProfileEvent">
            <summary>
            provides description of a slot based event for a value change.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.ProfileEvent.Slot">
            <summary>
            Gets the slot that this event is for.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.ProfileEvent.Rule">
            <summary>
            Gets the rule of the slot at the time of this event's creation.
            </summary>
            <remarks>
            A slot's rule can change over time.
            </remarks>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.ProfileEvent.OldValue">
            <summary>
            The original value of the slot before this event.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.ProfileEvent.NewValue">
            <summary>
            The value of the slot after this event.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.ProfileEvent.Time">
            <summary>
            The time this event happened.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.ProfileEvent.Duration">
            <summary>
            How long it took to complete the event.
            </summary>
            <remarks>
            This is typically the calculation time of the rule.
            </remarks>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.ProfileEvent.IsFromCalculation">
            <summary>
            True if the event was a result of the slot's rule being calculated. As opposed to a value being directly set on the slot.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Profiling.ProfileEventArgs">
            <summary>
            Represents a event associated with a slot based profile event.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.ProfileEventArgs.Event">
            <summary>
            Gets the associated profile event.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Profiling.Profiler">
            <summary>
            Provides the ability to track events and changes coming form an <see cref="T:Titan.Rules.Execution.ExecutionEngine"/>.
            </summary>
        </member>
        <member name="E:Titan.Rules.Execution.Profiling.Profiler.NewRuleEvent">
            <summary>
            Raised when a slot has changed or a calculation has been made.
            </summary>
        </member>
        <member name="E:Titan.Rules.Execution.Profiling.Profiler.NewFunctionProfile">
            <summary>
            Raised when a function has been executed.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.Profiler.IsEnabled">
            <summary>
            Controls whether or not profiling is enabled.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.Profiler.RuleEvents">
            <summary>
            Gets a collection of rule events that have been seen while <see cref="P:Titan.Rules.Execution.Profiling.Profiler.IsEnabled"/> is set to true.
            </summary>
            <remarks>
            This collection implemented <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </remarks>
        </member>
        <member name="P:Titan.Rules.Execution.Profiling.Profiler.FunctionProfiles">
            <summary>
            Gets a collection of function events that have been seen while <see cref="P:Titan.Rules.Execution.Profiling.Profiler.IsEnabled"/> is set to true.
            </summary>
            <remarks>
            This collection implemented <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Profiling.Profiler.Clear">
            <summary>
            Removes all events from this profiler.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.SingleColumnArrayValue">
            <summary>
            Provides a simple implementation of an array value around a one dimensional array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.SingleColumnArrayValue.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.SingleColumnArrayValue" /> class.
            </summary>
            <param name="values">The one dimensional array of values to wrap, the values in the array MUST be one of the types supported by Titan otherwise runtime errors could occur.</param>
        </member>
        <member name="M:Titan.Rules.Execution.SingleColumnArrayValue.GetElementCore(System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified row and column index.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
        </member>
        <member name="M:Titan.Rules.Execution.SingleColumnArrayValue.ToArray">
            <summary>
            Creates a two dimensional object array containing the values from the array value.
            </summary>
            <remarks>Wherever possible this method should be avoided as it can be very expensive in terms of memory and time taken.</remarks>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.SingleColumnArrayValue.Rows">
            <summary>
            Gets the number of rows in the array.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.SingleColumnArrayValue.Columns">
            <summary>
            Gets the number of columns in the array.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.ChangeEventManager">
            <summary>
            Provides factory functionality for creating instances of ChangeEventManager.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ChangeEventManager.Create``3(``0,System.Func{``0,``2},System.Func{``0,``2,``2,``1})">
            <summary>
            Creates a new instance of ChangeEventManager with the specified arguments.
            </summary>
            <typeparam name="TSource">The type of the object raising the event.</typeparam>
            <typeparam name="TArgs">The type of the event data class.</typeparam>
            <typeparam name="TValue">The type of value for which change events are generated.</typeparam>
            <param name="context">The context to raise events with (sender).</param>
            <param name="currentValueFetcher">Function that will return the current value for this event.</param>
            <param name="eventArgsFactory">Function that will return event args with the specified old value.</param>
        </member>
        <member name="T:Titan.Rules.Execution.ChangeEventManager`3">
            <summary>
            Provides a wrapper around an event that will ensure that listeners will always be given unique and up to date event args.
            </summary>
            <typeparam name="TSource">The type of the object raising the event.</typeparam>
            <typeparam name="TArgs">The type of the event data class.</typeparam>
            <typeparam name="TValue">The type of value for which change events are generated.</typeparam>
        </member>
        <member name="M:Titan.Rules.Execution.ChangeEventManager`3.#ctor(`0,System.Func{`0,`2},System.Func{`0,`2,`2,`1})">
            <summary>
            Creates a new instance of ChangeEventManager with the specified arguments.
            </summary>
            <param name="source">The sender for the events, and the source of the values.</param>
            <param name="currentValueFetcher">Function that will return the current value for this event.</param>
            <param name="eventArgsFactory">Function that will return event args with the specified old value.</param>
        </member>
        <member name="P:Titan.Rules.Execution.ChangeEventManager`3.HasListeners">
            <summary>
            Whether or not this event has any listeners.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ChangeEventManager`3.AddHandler(System.EventHandler{`1})">
            <summary>
            Adds a handler to this event.
            </summary>
            <param name="handler">The handler to add to this event.</param>
            <exception cref="T:System.ArgumentException">
            Raised when a duplicate handler is added.
            </exception>
            <remarks>
            The same handler can not be added twice.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.ChangeEventManager`3.RemoveHandler(System.EventHandler{`1})">
            <summary>
            Removes a handler from this event.
            </summary>
            <param name="handler">The handler to remove from this event.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ChangeEventManager`3.RaiseEvent">
            <summary>
            Lets all listeners know that this event's value has changed.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.SingleRowArrayValue">
            <summary>
            Provides a simple implementation of an array value around a one dimensional array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.SingleRowArrayValue.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.SingleRowArrayValue" /> class.
            </summary>
            <param name="values">The one dimensional array of values to wrap, the values in the array MUST be one of the types supported by Titan otherwise runtime errors could occur.</param>
        </member>
        <member name="M:Titan.Rules.Execution.SingleRowArrayValue.GetElementCore(System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified row and column index.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
        </member>
        <member name="M:Titan.Rules.Execution.SingleRowArrayValue.ToArray">
            <summary>
            Creates a two dimensional object array containing the values from the array value.
            </summary>
            <remarks>Wherever possible this method should be avoided as it can be very expensive in terms of memory and time taken.</remarks>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.SingleRowArrayValue.Rows">
            <summary>
            Gets the number of rows in the array.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.SingleRowArrayValue.Columns">
            <summary>
            Gets the number of columns in the array.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.ErrorType">
            <summary>
            Represents the type of error contained in a <see cref="T:Titan.Rules.Execution.Value" />.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ErrorType.TypeMismatch">
            <summary>
            The error that occurs when two values of different types are compared.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ErrorType.ConvertFailed">
            <summary>
            The error that occurs when a value could not be converted to another type.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ErrorType.UnrecognizedFunction">
            <summary>
            The error that occurs when a function could not be found.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ErrorType.UnrecognizedReference">
            <summary>
            The error that occurs when a reference to a named rule could not be found.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ErrorType.ArgumentException">
            <summary>
            The error that occurs when one or more arguments passed to a function.
            were invalid.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ErrorType.ValueException">
            <summary>
            The error that occurs when an operation resulted in an invalid value.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ErrorType.InvalidRule">
            <summary>
            The rule can't be calculated because it is invalid.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ErrorType.CircularRule">
            <summary>
            The rule can't be calculated because it would result in a cycle.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.FunctionDescWithTrigger">
            <summary>
            Describes a function call.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.FunctionDescWithTrigger.#ctor(System.Int32,Titan.Rules.Execution.IFunction,System.String)">
            <summary>
            Creates a new instance of FunctionDesc.
            </summary>
            <param name="argumentCount">The number of arguments to be popped of the execution stack and passed to the function when invoked.</param>
            <param name="target">The target of the function call.</param>
            <param name="id">A unique identifier allocated to the trigger.</param>
        </member>
        <member name="P:Titan.Rules.Execution.FunctionDescWithTrigger.ArgumentCount">
            <summary>
            The number of arguments represented by the function call.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.FunctionDescWithTrigger.Execute(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.InstructionList,Titan.Rules.Execution.Value[],Titan.Rules.Execution.Value)">
            <summary>
            Executes the target function.
            </summary>
            <param name="engine">The execution engine.</param>
            <param name="instructionList">The instruction list which is the target of of the triggered function.</param>
            <param name="arguments">The arguments to the function.</param>
            <param name="result">The slot which receives the result of the function call.</param>
        </member>
        <member name="T:Titan.Rules.Execution.IArrayValue">
            <summary>
            Represents an array value in Titan. Consider implementing 
            <see cref="T:Titan.Rules.Execution.ILazyArrayValue" /> in addition to <see cref="T:Titan.Rules.Execution.IArrayValue" />.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IArrayValue.Rows">
            <summary>
            Gets the number of rows in the array. Ideally, for performance
            reasons, this property should not be used. In the case of lazily 
            evaluated tables such as filtered tables, accessing this property
            causes the entire table to be evaluated.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IArrayValue.Columns">
            <summary>
            Gets the number of columns in the array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValue.GetElement(System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValue.GetElementAsValue(System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a Titan value.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValue.GetElementAsDouble(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a double, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>        
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValue.GetElementAsString(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a string, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, or converted value.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValue.GetElementAsDateTime(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a date-time, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValue.GetElementAsBoolean(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a boolean, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.IArrayValue.ToArray">
            <summary>
            Creates a two dimensional object array containing the values from the array value.
            </summary>
            <remarks>Wherever possible this method should be avoided as it can be very expensive in terms of memory and time taken.</remarks>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Execution.IFunctionWithTrigger">
            <summary>
            Implemented by functions that wish to implement triggering capabilities.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IFunctionWithTrigger.TriggerData">
            <summary>
            Gets data about the trigger, or a null reference if there is no trigger on the function.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionWithTrigger.Invoke(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.ITrigger,Titan.Rules.Execution.Value[],Titan.Rules.Execution.Value)">
            <summary>
            Invokes the target function.
            </summary>
            <param name="engine">The execution engine executing the function.</param>
            <param name="trigger">The function's trigger.</param>
            <param name="args">The functionArguments to pass to the function.</param>
            <param name="result">The <see cref="T:Titan.Rules.Execution.Value" /> to which to apply the result.</param>
        </member>
        <member name="T:Titan.Rules.Execution.ITrigger">
            <summary>
            Cooperates with a function to which it is attached, to trigger rule updates 
            outside of normal argument value changes.
            </summary>
            <remarks>
            <para>
            A trigger is bound to a particular call of a function in a particular rule and is non-reentrant.
            </para>
            <para>
            If the first argument to a function is typed as an <see cref="T:Titan.Rules.Execution.ITrigger" /> then the trigger will be passed to the function
            by the execution engine, meaning that the trigger can pass data to a function, or cache data across trigged invocations 
            of the function.
            </para>
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.ITrigger.PreExecute(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.Value[])">
            <summary>
            Called by the execution engine before a function is executed.
            </summary>
            <param name="engine">The Execution Engine.</param>
            <param name="args">The arguments that will be sent to the function, the function arguments may be modified before they are sent.</param>
        </member>
        <member name="T:Titan.Rules.Execution.ITriggerTarget">
            <summary>
            Represents the target of a trigger.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ITriggerTarget.Update">
            <summary>
            Forces the target to update its value.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ITriggerTarget.OwningSlot">
            <summary>
            Gets the owning slot for this trigger.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.JaggedArrayValue">
            <summary>
            Provides a simple implementation of an array value around an array of arrays.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.JaggedArrayValue.#ctor(System.Object[][],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.JaggedArrayValue" /> class.
            </summary>
            <param name="values">The array of rows where each row is an array, the values in the array MUST be one of the types supported by Titan otherwise runtime errors could occur.</param>
            <param name="columnCount">The maximum count of elements in any of the rows in the array.</param>
        </member>
        <member name="M:Titan.Rules.Execution.JaggedArrayValue.GetElementCore(System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified row and column index.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
        </member>
        <member name="M:Titan.Rules.Execution.JaggedArrayValue.ToArray">
            <summary>
            Creates a two dimensional object array containing the values from the array value.
            </summary>
            <remarks>Wherever possible this method should be avoided as it can be very expensive in terms of memory and time taken.</remarks>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.JaggedArrayValue.Rows">
            <summary>
            Gets the number of rows in the array.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.JaggedArrayValue.Columns">
            <summary>
            Gets the number of columns in the array.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.RuntimeFunctionNames">
            Provides the names of the runtime functions provided by Titan.
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.IfFunction">
            <summary>
            The string recognized as an If(condition, value_if_true, value_if_false) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.AndAlsoFunction">
            <summary>
            The string recognized as an AndAlso(condition1, condition2) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.OrElseFunction">
            <summary>
            The string recognized as an OrElse(condition1, condition2) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.ValueFunction">
            <summary>
            The string recognized as an Value(sub-expression) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.NumberFunction">
            <summary>
            The string recognized as an Number(sub-expression) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.StringFunction">
            <summary>
            The string recognized as an String(sub-expression) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.BooleanFunction">
            <summary>
            The string recognized as an Boolean(sub-expression) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.DateTimeFunction">
            <summary>
            The string recognized as an DateTime(sub-expression) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.NumberLocalFunction">
            <summary>
            The string recognized as an NumberLocal(sub-expression) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.StringLocalFunction">
            <summary>
            The string recognized as an StringLocal(sub-expression) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.DateTimeLocalFunction">
            <summary>
            The string recognized as an DateTimeLocal(sub-expression) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.IsErrorFunction">
            <summary>
            The string recognized as an IsError(sub-expression) function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionNames.MyNameFunction">
            <summary>
            The string recognized as a MyName() function.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.RuntimeFunctionOptions">
            <summary>
            Provides an enumeration of the runtime functions provided by Titan.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.If">
            <summary>
            The If-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.AndAlso">
            <summary>
            The AndAlso-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.OrElse">
            <summary>
            The OrElse-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.Value">
            <summary>
            The Value-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.Number">
            <summary>
            The Number-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.String">
            <summary>
            The String-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.Boolean">
            <summary>
            The Boolean-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.DateTime">
            <summary>
            The DateTime-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.ValueLocal">
            <summary>
            The ValueLocal-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.NumberLocal">
            <summary>
            The NumberLocal-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.StringLocal">
            <summary>
            The StringLocal-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.DateTimeLocal">
            <summary>
            The DateTimeLocal-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.IsError">
            <summary>
            The IsError-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.IfError">
            <summary>
            The IfError-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.IfNonNumber">
            <summary>
            The IfNonNumber-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.IfNonBoolean">
            <summary>
            The IfNonBoolean-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.IfEmpty">
            <summary>
            The IfEmpty-function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.RuntimeFunctionOptions.MyName">
            <summary>
            The MyName-function
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.InvalidRuleBehavior">
            <summary>
            Controls the behavior of the <see cref="M:Titan.Rules.Execution.Slot.SetRule(System.String,Titan.Rules.Execution.InvalidRuleBehavior)"/> method 
            when an invalid rule is specified.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InvalidRuleBehavior.ThrowAndClear">
            <summary>
            The rule is cleared, and an exception is thrown.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InvalidRuleBehavior.IgnoreAndApply">
            <summary>
            The change is applied but the rule will evaluate as <see cref="F:Titan.Rules.Execution.ErrorType.InvalidRule" />
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.ParamInfoAttribute">
            <summary>
            Provides information on target method.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ParamInfoAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates new information for a parameter.
            </summary>
            <param name="displayName">The display name for the target method.</param>	
            <param name="description">The description for the target method.</param>	
        </member>
        <member name="P:Titan.Rules.Execution.ParamInfoAttribute.DisplayName">
            <summary>
            Gets the display name for the target method.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ParamInfoAttribute.Description">
            <summary>
            Gets the description for the target method.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.FunctionInfoAttribute">
            <summary>
            Provides information on target method.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.FunctionInfoAttribute.#ctor(System.String)">
            <summary>
            Creates new information for a method.
            </summary>
            <param name="description">The description for this target method.</param>	
        </member>
        <member name="M:Titan.Rules.Execution.FunctionInfoAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates new information for a method.
            </summary>
            <param name="description">The description for this target method.</param>	
            <param name="category">The category for this target method.</param>
        </member>
        <member name="P:Titan.Rules.Execution.FunctionInfoAttribute.Description">
            <summary>
            Gets the description for the target method.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.FunctionInfoAttribute.Category">
            <summary>
            Gets the category for the target method.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.IFunctionInfo">
            <summary>
            Provides information about a function.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionInfo.GetFunctionDescription">
            <summary>
            Gets a description of the function.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionInfo.GetFunctionCategory">
            <summary>
            Gets the category that the function belongs to.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionInfo.GetParameterCount">
            <summary>
            Gets the number of parameters in the function, if a parameter array is present, 
            it will count as a single parameter in the count.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionInfo.GetParameterDisplayName(System.Int32)">
            <summary>
            Gets the name of the specified parameter.
            </summary>
            <param name="paramIndex">The index of the parameter.</param>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionInfo.GetParameterTypeName(System.Int32)">
            <summary>
            Gets the name of the type taken by the specified parameter.
            </summary>
            <param name="paramIndex">The index of the parameter.</param>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionInfo.GetParameterDescription(System.Int32)">
            <summary>
            Gets the description of the specified parameter.
            </summary>
            <param name="paramIndex">The index of the parameter.</param>
        </member>
        <member name="T:Titan.Rules.Execution.SlotDependentEvaluator">
            <summary>
            Provides support for evaluating the dependencies of slots.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.SlotDependentEvaluator.Instance">
            <summary>
            Gets a static instance of the slot evaluator.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.InvalidRuleException">
            <summary>
            The exception thrown when an syntactically invalid rule is provided.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.InvalidRuleException.SlotName">
            <summary>
            The name of the slot that threw this exception.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.InvalidRuleException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.InvalidRuleException" /> class.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.InvalidRuleException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.InvalidRuleException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Titan.Rules.Execution.InvalidRuleException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.InvalidRuleException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="slotName">The name of the slot threw this exception.</param>
        </member>
        <member name="M:Titan.Rules.Execution.InvalidRuleException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.InvalidRuleException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Titan.Rules.Execution.InvalidRuleException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.InvalidRuleException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="slotName">The name of the slot threw this exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Titan.Rules.Execution.InvalidRuleException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Titan.Rules.Execution.ExecutionPlan">
            <summary>
            Provides support for executing the rules required 
            to bring all slots up to date when the owning slot's
            value changes.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ExecutionPlan.DEPENDENCY_EVAL_DEFAULT_CAPACITY">
            <summary>
            The default size of the collection used for dependency
            evaluation.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionPlan.#ctor(Titan.Rules.Execution.Slot)">
            <summary>
            Initializes a new instance of an execution plan
            for the given slot.
            </summary>
            <param name="owner">The slot to which the plan pertains.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionPlan.Evaluate">
            <summary>
            Evaluates the dependency graph and builds
            an ordered sequence of instruction lists which
            will bring all dependencies up to date.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionPlan.Execute">
            <summary>
            Executes the plan.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.CircularReferenceException">
            <summary>
            The exception thrown when an expression causes a circular reference.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.CircularReferenceException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.CircularReferenceException" /> class.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.CircularReferenceException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.CircularReferenceException" /> class.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.CircularReferenceException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.CircularReferenceException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Titan.Rules.Execution.CircularReferenceException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.Execution.CircularReferenceException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Titan.Rules.Execution.ExecutionEngine">
            <summary>
            Provides an execution and management environment for interrelated rules.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.IsTriggerableFunction(Titan.Rules.Execution.IFunction)">
            <summary>
            Determines if the specified function object is a triggerable function.
            </summary>
            <param name="function">The function to check.</param>
            <returns>True if the specified function is a triggerable function, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.IsDeferredFunction(Titan.Rules.Execution.IFunction)">
            <summary>
            Determines if the specified function object is a deferred function.
            </summary>
            <param name="function">The function to check.</param>
            <returns>True if the specified function is a deferred function, otherwise false.</returns>
        </member>
        <member name="F:Titan.Rules.Execution.ExecutionEngine.DEPENDENCY_EVAL_DEFAULT_CAPACITY">
            <summary>
            The default size of the collection used for dependency
            evaluation.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ExecutionEngine.CultureChanged">
            <summary>
            Raised when the <see cref="P:Titan.Rules.Execution.ExecutionEngine.Culture" /> property is changed.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ExecutionEngine.mEnableCompilation">
            <summary>
            Whether compilation support is enabled.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Titan.Rules.Execution.ExecutionEngine" /> type.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Instantiates a new instance of the <see cref="T:Titan.Rules.Execution.ExecutionEngine" /> type.
            </summary>
            <param name="ci">The culture information to use when converting values to and from strings.</param>
        </member>
        <member name="P:Titan.Rules.Execution.ExecutionEngine.Culture">
            <summary>
            Gets/sets the culture used for parsing and formatting textual representations of data.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ExecutionEngine.GlobalScope">
            <summary>
            Gets the scope which acts as the parent of all scopes managed by the execution engine.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ExecutionEngine.Profiler">
            <summary>
            Gets the profiler for this execution engine.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ExecutionEngine.CompilationEnabled">
            <summary>
            Gets or sets whether compilation support is enabled (Experimental).
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.GetFunctions">
            <summary>
            Gets the functions that have been added to the execution engine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.AddFunctionResolver(Titan.Rules.Execution.IFunctionResolver)">
            <summary>
            Adds the specified function resolver.
            </summary>
            <param name="resolver">An object which can perform function resolution.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.AddFunctions(System.Object)">
            <summary>
            Makes any .NET methods on the specified object available to rules as functions.
            </summary>
            <param name="obj">The object instance which contains the methods to make available.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.AddFunctions(System.Object,System.Predicate{System.Reflection.MethodInfo})">
            <summary>
            Makes any .NET methods on the specified object that pass the supplied function validator available to rules as functions. 
            </summary>
            <param name="obj">The object instance which contains the methods to make available.</param>
            <param name="isValidFunction">A predicate that returns true if the function should be made available to the rules or false if not.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.AddFunctions``1">
            <summary>
            Makes any static .NET methods on the specified type available to rules as functions.
            </summary>
            <typeparam name="T">The type of the class containing the static methods to make available</typeparam>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.AddFunctions(System.Type)">
            <summary>
            Makes any static .NET methods on the specified type available to rules as functions.
            </summary>
            <param name="t">The type of the class containing the static methods to make available.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.AddFunction(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Makes the specified .NET method available to rules as a function.
            </summary>
            <param name="obj">The object on which to call the method when the function is invoked, or, a null reference (Nothing in Visual Basic) if the method is static (Shared in Visual Basic).</param>
            <param name="mi">An instance of the <see cref="T:System.Reflection.MethodInfo" /> class which represents the method to wrap.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.AddFunction(System.String,Titan.Rules.Execution.IFunction)">
            <summary>
            Makes the specified function available to rules with the given name.
            </summary>
            <param name="name">The name to give the function.</param>
            <param name="function">An implementation of the <see cref="T:Titan.Rules.Execution.IFunction" /> interface which represents the function call.</param>
            <exception cref="T:System.Data.DuplicateNameException">When a function with same name and arguments has already been registered.</exception>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.QueuePendingUpdate(Titan.Rules.Execution.Slot)">
            <summary>
            Queues a slot for updating when calculation resumes.
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.Execute(Titan.Rules.Execution.InstructionList[],System.Boolean)">
            <summary>
            Executes the specified rules.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.Execute(Titan.Rules.Execution.InstructionList,System.Boolean)">
            <summary>
            Executes the specified rule.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.IncrementCalculationVersion">
            <summary>
            Increments the calculation version number to invalidate
            cached execution plans.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ExecutionEngine.CalculationVersion">
            <summary>
            Gets the current calculation version number.
            </summary>
            <remarks>
            This is used by cached execution plans to see if they
            are still current.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.SuppressUpdate">
            <summary>
            Increments the suppression level by one which has the effect of suppressing the execution of the rules managed by the execution engine.
            </summary>
            <returns>The new suppression level of the execution engine.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.ResumeUpdate">
            <summary>
            Decrements the suppression level by one, which has the effect of re-enabling rule execution when the suppression level reaches zero.
            </summary>
            <returns>The new suppression level of the execution engine.</returns>
        </member>
        <member name="P:Titan.Rules.Execution.ExecutionEngine.SuppressionLevel">
            <summary>
            Gets the current execution suppression level of the execution engine, where 0
            indicates that execution is not suppressed.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.ResolveFunction(Titan.Rules.Execution.Slot,System.String,System.Int32)">
            <summary>
            Gets the function represented by the specified name.
            </summary>
            <param name="forSlot">The slot for which to resolve the function.</param>
            <param name="name">The name of the function to retrieve.</param>
            <param name="argumentCount">The number of arguments to be passed to the function when it is invoked.</param>
            <returns>An instance of a class implementing <see cref="T:Titan.Rules.Execution.IFunction" /> which represents the function call, or, a null reference (Nothing in Visual Basic) if the function could not be resolved.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.ResolveReference(Titan.Rules.Execution.Slot,Titan.Rules.Execution.Scope,System.String[])">
            <summary>
            Resolves a path to a slot.
            </summary>
            <param name="owner">The owner of the reference.</param>
            <param name="parentScope">The scope from which to start resolution.</param>
            <param name="path">An array of strings containing the names of each scope in the path and finishing with the name of the slot.</param>
            <returns>The slot to which the path refers, -or- a null reference (Nothing in Visual Basic) if a slot could not be found.</returns>
            <remarks>This method is used internally, and by the <see cref="T:Titan.Rules.Execution.Reference" /> class.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.IsParentedToGlobal(Titan.Rules.Execution.Scope)">
            <summary>
            This is used to check if a scope has been removed from this engine.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.OnCultureChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:Titan.Rules.Execution.ExecutionEngine.CultureChanged" /> event.
            </summary>
            <param name="e">The event data to be passed to listening event handlers.</param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.EvaluateChildren(Titan.Rules.Execution.Slot)">
            <summary>
            Evaluates the dependency graph and builds
            an ordered sequence of instruction lists which
            will bring all dependencies up to date.
            </summary>
            <param name="initial">
            The slot whose dependencies are to be evaluated.
            </param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.EvaluateAll(Titan.Rules.Execution.Slot[])">
            <summary>
            Evaluates the dependency graph and builds
            an ordered sequence of instruction lists which
            will bring all dependencies up to date.
            </summary>
            <param name="initial">
            The slots whose dependencies are to be evaluated.
            </param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.EvaluateAll(System.Collections.Generic.IList{Titan.Rules.Execution.Slot})">
            <summary>
            Evaluates the dependency graph and builds
            an ordered sequence of instruction lists which
            will bring all dependencies up to date.
            </summary>
            <param name="initial">
            The slots whose dependencies are to be evaluated.
            </param>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.DumpDependencies">
            <summary>
            Dumps dependency information for every slot in the execution engine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ExecutionEngine.DumpDependenciesToString">
            <summary>
            Dumps dependency information for every slot in the execution engine.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Execution.EvaluationException">
            <summary>
            The exception thrown when a serious problem occurs during the evaluation of an expression.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.EvaluationException.#ctor">
            <summary>
            Creates a new instance of an EvaluationException.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.EvaluationException.#ctor(System.String)">
            <summary>
            Creates a new instance of an EvaluationException.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Titan.Rules.Execution.EvaluationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of an EvaluationException.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Titan.Rules.Execution.IFunctionResolver">
            <summary>
            Provides a contract for an object which can take part in function resolution.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionResolver.TryResolveFunction(System.String,System.Int32)">
            <summary>
            Tries to resolve the specified function.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="argumentCount">The total number of parameters to the function.</param>
            <returns>The resolved function, or a null reference if resolution failed.</returns>
        </member>
        <member name="T:Titan.Rules.Execution.IFunctionResolverCollection">
            <summary>
            Provides a contract for an object which can take part in function resolution
            by delegating to other function resolvers.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionResolverCollection.AddResolver(Titan.Rules.Execution.IFunctionResolver)">
            <summary>
            Adds the specified function resolver to the collection.
            </summary>
            <param name="resolver">The resolver to add.</param>
        </member>
        <member name="M:Titan.Rules.Execution.IFunctionResolverCollection.RemoveResolver(Titan.Rules.Execution.IFunctionResolver)">
            <summary>
            Removes the specified function resolver from the collection.
            </summary>
            <param name="resolver">The resolver to remove.</param>
            <returns>True if the resolver was part of the collection and was removed, false if the resolver was not part of the collection.</returns>
        </member>
        <member name="T:Titan.Rules.Execution.FunctionDesc">
            <summary>
            Describes a function call.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.FunctionDesc.#ctor(System.Int32,Titan.Rules.Execution.IFunction)">
            <summary>
            Creates a new instance of FunctionDesc.
            </summary>
            <param name="argumentCount">The number of arguments to be popped of the execution stack and passed to the function when invoked.</param>
            <param name="target">The target of the function call.</param>
        </member>
        <member name="P:Titan.Rules.Execution.FunctionDesc.ArgumentCount">
            <summary>
            The number of arguments represented by the function call.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.FunctionDesc.Target">
            <summary>
            The target of the function call.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.IFunction">
            <summary>
            Represents a reference to a function required by a rule.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IFunction.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IFunction.ArgumentCount">
            <summary>
            Gets the number of arguments supported by the function, if a 
            parameter array is present, -1 is returned.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IFunction.HasParameterArray">
            <summary>
            Determines whether the function has a variable number of arguments.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.IFunction.Invoke(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.Value[],Titan.Rules.Execution.Value)">
            <summary>
            Invokes the target function.
            </summary>
            <param name="engine">The execution engine executing the function.</param>
            <param name="args">The functionArguments to pass to the function.</param>
            <param name="result">The <see cref="T:Titan.Rules.Execution.Value" /> to which to apply the result.</param>
        </member>
        <member name="M:Titan.Rules.Execution.IFunction.GetFunctionInfo">
            <summary>
            Gets metadata information for the function.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IFunction.IsDeprecated">
            <summary>
            Gets whether or not this function has been deprecated/obsolete.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.IFunction.Attributes">
            <summary>
            Gets the flags associated with this function.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.InstructionCode">
            <summary>
            Specifies the valid instruction codes.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Push">
            <summary>
            Pushes a value on to the execution stack.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Pop">
            <summary>
            Pops a value from the execution stack.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Negate">
            <summary>
            Pops a value from the execution stack, negates it, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Add">
            <summary>
            Pops two values from the execution stack, adds them, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Subtract">
            <summary>
            Pops two values from the execution stack, subtracts them, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.AddDynamic">
            <summary>
            Pops two values from the execution stack, peforms runtime checks for DateTime support, adds them, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.SubtractDynamic">
            <summary>
            Pops two values from the execution stack, peforms runtime checks for DateTime support, subtracts them, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Multiply">
            <summary>
            Pops two values from the execution stack, multiplies them, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Divide">
            <summary>
            Pops two values from the execution stack, divides them, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Exponentiate">
            <summary>
            Pops two values from the execution stack, exponentiates them, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Concatenate">
            <summary>
            Pops two values from the execution stack, concatenates them, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.IsEqual">
            <summary>
            Pops a value from the stack, and pushes true if the value is equal to 0.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.IsNotEqual">
            <summary>
            Pops a value from the stack, and pushes true if the value is not equal to 0.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.IsLesser">
            <summary>
            Pops a value from the stack, and pushes true if the value is -1.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.IsLesserOrEqual">
            <summary>
            Pops a value from the stack, and pushes true if the value is -1 or 0.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.IsGreater">
            <summary>
            Pops a value from the stack, and pushes true if the value is equal to 1.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.IsGreaterOrEqual">
            <summary>
            Pops a value from the stack, and pushes true if the value is equal to 0 or 1.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.ConvToDateTime">
            <summary>
            Pops a value from the stack, converts it to a date/time using invariant culture rules and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.ConvToString">
            <summary>
            Pops a value from the stack, converts it to a string using invariant culture rules and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.ConvToNumber">
            <summary>
            Pops a value from the stack, converts it to a number using invariant culture rules and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.ConvToBoolean">
            <summary>
            Pops a value from the stack, converts it to a boolean using invariant culture rules and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.ConvToDateTimeLocal">
            <summary>
            Pops a value from the stack, converts it to a date/time using local culture rules and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.ConvToStringLocal">
            <summary>
            Pops a value from the stack, converts it to a string using local culture rules and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.ConvToNumberLocal">
            <summary>
            Pops a value from the stack, converts it to a number using local culture rules and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Fetch">
            <summary>
            Fetches a value from elsewhere and pushes it onto the execution stack.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Call">
            <summary>
            Pops 0 or more values off the execution stack, executes a function, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.CallTriggered">
            <summary>
            Pops 0 or more values off the execution stack, executes a possibly triggered function, and pushes the result back.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Branch">
            <summary>
            Branches unconditionally to another instruction.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Branch_True">
            <summary>
            Branches to another instruction if the value atop the execution stack is true.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Branch_False">
            <summary>
            Branches to another insturction of the value atop the execution stack is false.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Duplicate">
            <summary>
            Duplicates the value atop the execution stack.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.Return">
            <summary>
            Pops a value from the execution stack and returns it to the owning slot.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.BeginCatch">
            <summary>
            Denotes the start of a catch block. Inside the catch block, if an error value is detected on the evaluation
            stack, a forward scan is made in the instruction list for the next EndCatch_nnn instruction.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.EndCatch_PushBoolean">
            <summary>
            Denotes the end of a catch block. If an error value is detected on the top of the stack then
            true is pushed on to the stack, otherwise false. The original error value is removed from the stack.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.EndCatch_PushBoolean_LeaveValue">
            <summary>
            Denotes the end of a catch block. If an error value is detected on the top of the stack then
            true is pushed on to the stack, otherwise false. The original error value is left on the stack.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.InstructionCode.EndCatch_PushCode">
            <summary>
            Denotes the end of a catch block. If an error value is detected on the top of the stack then
            the numeric version of the error is pushed on to the stack, otherwise a zero is pushed on to the stack.
            The original error value is removed from the stack.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Instruction">
            <summary>
            Represents a single instruction in an instruction list.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Instruction.#ctor(Titan.Rules.Execution.InstructionCode)">
            <summary>
            Creates a new instruction with the given instruction code.
            </summary>
            <param name="code">A valid instruction code.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Instruction.#ctor(Titan.Rules.Execution.InstructionCode,System.Int32)">
            <summary>
            Creates a new instruction with the given instruction code and data index.
            </summary>
            <param name="code">A valid instruction code.</param>
            <param name="data">The index to the data required by the instruction</param>
        </member>
        <member name="T:Titan.Rules.Execution.InstructionList">
            <summary>
            Represents the sequence of instructions and related data for a single expression.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.InstructionList.FromExpression(Titan.Rules.ObjectModel.ExpressionTree,Titan.Rules.Execution.Slot)">
            <summary>
            Converts the specified expression tree into a list of instructions required to execute the expression.
            </summary>
            <param name="expression">The expression tree to convert.</param>
            <param name="owner">The slot which owns the rule.</param>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.InstructionList.Owner">
            <summary>
            Gets the slot which owns the instruction list.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.InstructionList.ReferencesUncloned">
            <summary>
            Gets a collection of references in-use by the rule.
            </summary>
            <devdoc>
            This property returns an uncloned array for performance reasons.
            </devdoc>
        </member>
        <member name="M:Titan.Rules.Execution.InstructionList.GenerateIfReplace(Titan.Rules.Execution.InstructionList.InstructionListBuilder,Titan.Rules.Execution.StackValueType,Titan.Rules.ObjectModel.NodeBase)">
            <summary>
            Generates the predicate checking and value replacement logic for an IfXXX style expression.
            The logic that's generated assumes two values atop the stack, the value, and a boolean expression
            where true indicates the value should be replaced, and false indicates the value should be left 
            as is.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.InstructionList.NotifySlotNameChanged">
            <summary>
            Updates the name of the slot in the instruction list and returns a value indicating whether
            the instruction list needs recalculating as a result.
            </summary>
            <returns>True if the slot should be invalidated, otherwise false.</returns>
        </member>
        <member name="T:Titan.Rules.Execution.Reference">
            <summary>
            Encapsulates a reference to a slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Reference.Owner">
            <summary>
            Gets the slot which owns the reference.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Reference.Target">
            <summary>
            Gets the slot represented by the reference, or a null reference (Nothing in Visual Basic) if the reference has not be resolved.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Reference.IsConditional">
            <summary>
            Determines whether the reference is used conditionally.
            </summary>
            <remarks>
            A conditional reference is a reference used from a conditional branch
            in an expression, e.g. the valueIfTrue or valueIfFalse branches of an 
            IF statement, or the second operand of an AndAlso or OrElse statement.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Reference.Resolve">
            <summary>
            Attempts to resolve the reference.
            </summary>
            <returns>True if the reference was successfully resolved, otherwise, false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Reference.Resolve(System.Boolean)">
            <summary>
            Attempts to resolve the reference.
            </summary>
            <param name="isTrackedReference">
            True to add the source of the reference to the target so a CIL can be built. This
            is only ever false for transient calculations by scopes.
            </param>
            <returns>True if the reference was successfully resolved, otherwise, false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Reference.Resolve(Titan.Rules.Execution.Slot,System.Boolean)">
            <summary>
            Resolves the reference with the specified slot.
            </summary>
            <remarks>
            This is done with no checking to make sure that the target slot is an acceptable target, 
            but will ensure that there are no circular references.
            Hopefully you understand that this method should not be used lightly!
            This should only be used when targeting anonymous slots.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Reference.Unresolve">
            <summary>
            Removes target from reference and clear's up targets dependents etc.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Reference.GetTargetValue">
            <summary>
            Gets the value pointed to by the reference.
            </summary>
            <returns>The value pointed to by the reference, or a null reference (Nothing in Visual Basic) if the reference could not be resolved.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Reference.GetTargetValueOrError">
            <summary>
            Gets the value pointed to by the reference.
            </summary>
            <returns>The value pointed to by the reference, or an error value of UnrecognizedReference.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Reference.Dispose">
            <summary>
            Disposes of the reference and its use in dependent lists etc.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Scope">
            <summary>
            Represents a naming scope for slots in an execution engine's namespace.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Scope.ScopeCollection">
            <summary>
            A collection of subordinate scopes.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.ScopeCollection.Item(System.String)">
            <summary>
            Gets the scope with the specified name.
            </summary>
            <param name="name">The name of the scope to get.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.Add(System.String)">
            <summary>
            Adds a new scope with the specified name.
            </summary>
            <param name="name">The name of the new scope.</param>
            <returns>The newly created scope.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.IndexOf(Titan.Rules.Execution.Scope)">
            <summary>
            Determines the index of a specific <see cref="T:Titan.Rules.Execution.Scope" /> in the <see cref="T:Titan.Rules.Execution.Scope.ScopeCollection" />.
            </summary>
            <param name="item">The scope to locate in the <see cref="T:Titan.Rules.Execution.Scope.ScopeCollection" />.</param>
            <returns>The index of <paramref name="item"/> if found in the collection, otherwise -1.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Titan.Rules.Execution.Scope" /> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Titan.Rules.Execution.Scope" /> to remove.</param>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.ScopeCollection.Item(System.Int32)">
            <summary>
            Gets/sets a <see cref="T:Titan.Rules.Execution.Scope" /> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Titan.Rules.Execution.Scope" /> to get or set.</param>
            <returns>The <see cref="T:Titan.Rules.Execution.Scope"/> at <paramref name="index" />.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.Add(Titan.Rules.Execution.Scope)">
            <summary>
            Adds the specified <see cref="T:Titan.Rules.Execution.Scope" /> to the collection.
            </summary>
            <param name="item">The <see cref="T:Titan.Rules.Execution.Scope" /> to add.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.Clear">
            <summary>
            Removes all scopes from the collection.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.Contains(Titan.Rules.Execution.Scope)">
            <summary>
            Determines if the collection contains the specified <see cref="T:Titan.Rules.Execution.Scope" />.
            </summary>
            <param name="item">The <see cref="T:Titan.Rules.Execution.Scope"/> to check for.</param>
            <returns>True if <paramref name="item"/> is a member of the collection.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.CopyTo(Titan.Rules.Execution.Scope[],System.Int32)">
            <summary>
            Copies the contents of the collection to the specified array.
            </summary>
            <param name="array">The array to copy the contents of the collection to.</param>
            <param name="arrayIndex">The index in <paramref name="array"/> to start copying from.</param>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.ScopeCollection.Count">
            <summary>
            Gets a count of the scopes in the collection.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.ScopeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only (always false).
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.Remove(Titan.Rules.Execution.Scope)">
            <summary>
            Removes the specified scope from the collection.
            </summary>
            <param name="item">The <see cref="T:Titan.Rules.Execution.Scope"/> to remove from the collection.</param>
            <returns>True if <paramref name="item"/> was removed from the collection, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.GetEnumerator">
            <summary>
            Gets an enumerator which can be used to enumerate the elements in the collection.
            </summary>
            <returns>An instance of an enumerator.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ScopeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator which can be used to enumerate the elements in the collection.
            </summary>
            <returns>An instance of an enumerator.</returns>
        </member>
        <member name="T:Titan.Rules.Execution.Scope.SlotCollection">
            <summary>
            A collection of slots defined for a given <see cref="T:Titan.Rules.Execution.Scope" />.
            </summary>
            <remarks>
            Instance members of this collection are not guaranteed to be thread safe with the exception
            of the addition and removal of anonymous slots which is guaranteed to be thread safe.
            </remarks>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.SlotCollection.Item(System.String)">
            <summary>
            Gets the slot with the given name from the collection, or, returns a null reference (Nothing in Visual Basic) if no slot with the specified name exists.
            </summary>
            <param name="name">The name of the slot to retrieve.</param>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.AddAnonymous">
            <summary>
            Adds an anonymous slot.
            </summary>
            <returns>The added slot.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.Add(System.String)">
            <summary>
            Adds a new slot with the specified name to the collection.
            </summary>
            <param name="name">The name of the new slot, null or an empty string represents an anonymous slot.</param>
            <returns>The newly created slot.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.IndexOf(Titan.Rules.Execution.Slot)">
            <summary>
            Gets the index of the given slot in the collection.
            </summary>
            <param name="item">The slot to find.</param>
            <returns>The index of the slot if found, otherwise -1.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.Insert(System.Int32,Titan.Rules.Execution.Slot)">
            <summary>
            Inserts the given slot at the specified index in the collection.
            </summary>
            <param name="index">The index at which to insert the slot.</param>
            <param name="item">The slot to insert.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the slot at the specified index.
            </summary>
            <param name="index">The index of the slot to remove.</param>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.SlotCollection.Item(System.Int32)">
            <summary>
            Gets/sets the slot at the specified index in the collection.
            </summary>
            <param name="index">The index of the slot to get/set.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.System#Collections#Generic#ICollection{Titan#Rules#Execution#Slot}#Add(Titan.Rules.Execution.Slot)">
            <summary>
            Adds the given slot to the collection.
            </summary>
            <param name="item">The slot to add.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.Clear">
            <summary>
            Removes all slots from the collection.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.Contains(Titan.Rules.Execution.Slot)">
            <summary>
            Returns a value indicating whether the given slot is a member of the collection.
            </summary>
            <param name="item">The slot to find.</param>
            <returns>True if the slot is a member of the collection, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.CopyTo(Titan.Rules.Execution.Slot[],System.Int32)">
            <summary>
            Copies all of the slots in the collection to the specified array at the given index.
            </summary>
            <param name="array">The array to populate with the collection's slots.</param>
            <param name="arrayIndex">The index in <paramref name="arrayIndex" /> at which start copying.</param>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.SlotCollection.Count">
            <summary>
            Gets the count of slots in the collection.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.SlotCollection.IsReadOnly">
            <summary>
            Returns false to indicate the collection is read/write.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.Remove(Titan.Rules.Execution.Slot)">
            <summary>
            Removes the specified slot from the collection.
            </summary>
            <param name="item">The slot to remove.</param>
            <returns>True if the slot was removed, false if the slot was not a member of the collection.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.GetEnumerator">
            <summary>
            Gets a generic enumerator suitable for interating through the collection's members.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.SlotCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator suitable for interating through the collection's members.
            </summary>
        </member>
        <member name="E:Titan.Rules.Execution.Scope.NameChanged">
            <summary>
            Raised when the newName of the scope changes.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.#ctor(Titan.Rules.Execution.ExecutionEngine,System.String)">
            <summary>
            Creates a new instance of a scope, which acts as a naming container for slots and other scopes.
            </summary>
            <param name="engine">The execution engine to which the scope belongs.</param>
            <param name="name">The name of the new scope.</param>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.Name">
            <summary>
            Gets/sets the newName of the current scope.
            </summary>
            <exception cref="T:System.InvalidOperationException">The newName is not valid because it is already in use or would create an abiguity.</exception>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.Engine">
            <summary>
            Gets the execution engine managing rules for the scope and any children.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.Root">
            <summary>
            Gets the root of the scope hierarchy, or a null reference (Nothing in Visual Basic) if the current scope is the root scope.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.Parent">
            <summary>
            Gets the parent scope, or a null reference (Nothing in Visual Basic) if the current scope is the root scope.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.Scopes">
            <summary>
            Gets a collection of scopes which are children of the current scope.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.Slots">
            <summary>
            Gets a collection of slots scoped by the current scope.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.Tag">
            <summary>
            Gets sets a tag on the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Scope.MutableReferences">
            <summary>
            Gets a collection of references that are targeted within this scope that could potentially be resolved more locally.
            </summary>
            <remarks>
            This may be null, if it hasn't been used yet.
            This is only here for testing!
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.Calculate(System.String)">
            <summary>
            Calculates the given rule in the context of the scope.
            </summary>
            <param name="rule">The rule to execute.</param>
            <returns>The value of the calculated rule.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.Calculate(System.String,System.String)">
            <summary>
            Calculates the given rule in the context of the scope.
            </summary>
            <param name="rule">The rule to execute.</param>
            <param name="name">The name that should be returned by the MyName() function.</param>
            <returns>The value of the calculated rule.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.Calculate(System.String,System.String,System.Object)">
            <summary>
            Calculates the given rule in the context of the scope.
            </summary>
            <param name="rule">The rule to execute.</param>
            <param name="name">The name that should be returned by the MyName() function.</param>
            <param name="context">The context to use on the calculation slot.</param>
            <returns>The value of the calculated rule.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.TryCalculate(System.String,System.Object@)">
            <summary>
            Tries to calculate the given rule in the context of the scope.
            </summary>
            <param name="rule">The rule to execute.</param>
            <param name="result">The result of the rule.</param>
            <returns>True if the rule was syntactically correct, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.TryCalculate(System.String,System.Object@,System.String)">
            <summary>
            Tries to calculate the given rule in the context of the scope.
            </summary>
            <param name="rule">The rule to execute.</param>
            <param name="result">The result of the rule.</param>
            <param name="name">The name that should be returned by the MyName() function.</param>
            <returns>True if the rule was syntactically correct, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.TryCalculate(System.String,System.Object@,System.String,System.Object)">
            <summary>
            Tries to calculate the given rule in the context of the scope.
            </summary>
            <param name="rule">The rule to execute.</param>
            <param name="result">The result of the rule.</param>
            <param name="name">The name that should be returned by the MyName() function.</param>
            <param name="context">The context object for the calculation.</param>
            <returns>True if the rule was syntactically correct, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.TryCalculate(System.Collections.Generic.IList{System.String})">
            <summary>
            Tries to calculate the given rules.
            </summary>
            <param name="rules">The rule to execute.</param>
            <returns>An array of the results of the specified rules, the entries corresponding to rules that are invalid will contain an <see cref="T:Titan.Rules.Execution.InvalidRuleException"/>.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.TryCalculate(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Tries to calculate the given rules.
            </summary>
            <param name="rules">The rule to execute.</param>
            <param name="name">The name that should be returned by the MyName() function.</param>
            <returns>An array of the results of the specified rules, the entries corresponding to rules that are invalid will contain an <see cref="T:Titan.Rules.Execution.InvalidRuleException"/>.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.GetPath">
            <summary>
            Gets the full path to this scope including its newName.
            </summary>
            <returns>An array of strings representing the scope path.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.Remove">
            <summary>
            Remove this slot from its parent.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.ChangeParentInternal_IsChild(Titan.Rules.Execution.Scope,Titan.Rules.Execution.Scope)">
            <summary>
            Checks to see if scopeToCheck is a direct or indirect child of the parentScope.
            </summary>
            <param name="parentScope">The scope whose hierarchy is to be checked for scopeToCheck.</param>
            <param name="scopeToCheck">The scope to try and find in parentScope's hierarchy.</param>
            <returns>True if scopeToCheck is a child of parentScope, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.PropagateChangedParent(Titan.Rules.Execution.Scope)">
            <summary>
            Recursively updates scopes when a scope has had its parent changed.
            </summary>
            <param name="newParent">The fully qualified path to the new parent.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Scope.OnNameChanged(Titan.Rules.Execution.ScopeNameChangedEventArgs)">
            <summary>
            Raises the <see cref="M:Titan.Rules.Execution.Scope.OnNameChanged(Titan.Rules.Execution.ScopeNameChangedEventArgs)" /> event.
            </summary>
            <param name="e">An instance of <see cref="T:Titan.Rules.Execution.SlotNameChangedEventArgs" /> containing the data for the event.</param>
        </member>
        <member name="T:Titan.Rules.Execution.ScopeNameChangedEventArgs">
            <summary>
            Provides event data for the <see cref="E:Titan.Rules.Execution.Scope.NameChanged" /> event.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ScopeNameChangedEventArgs.#ctor(Titan.Rules.Execution.Scope,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.ScopeNameChangedEventArgs" /> class.
            </summary>
            <param name="scope">The scope that has been renamed.</param>
            <param name="oldName">The old newName of the scope.</param>
            <param name="newName">The new newName of the scope.</param>
        </member>
        <member name="P:Titan.Rules.Execution.ScopeNameChangedEventArgs.OldName">
            <summary>
            The old newName of the scope.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ScopeNameChangedEventArgs.NewName">
            <summary>
            The new newName of the scope.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ScopeNameChangedEventArgs.SourceScope">
            <summary>
            The scope that has had its newName changed.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Slot">
            <summary>
            Represents a named rule or value in a execution engine's namespace.
            </summary>
        </member>
        <member name="E:Titan.Rules.Execution.Slot.ValueChanged">
            <summary>
            Raised when the value of the slot changes.
            </summary>
        </member>
        <member name="E:Titan.Rules.Execution.Slot.ParentChanged">
            <summary>
            Raised when the parent of the slot changes.
            </summary>
        </member>
        <member name="E:Titan.Rules.Execution.Slot.NameChanged">
            <summary>
            Raised when the name of the slot changes.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.#ctor(Titan.Rules.Execution.Scope,System.String)">
            <summary>
            Instantiates a new instance of the <see cref="T:Titan.Rules.Execution.Slot" /> type.
            </summary>
            <param name="parent">The parent scope of this slot.</param>
            <param name="name">The name of the new slot.</param>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.HasInvalidRule">
            <summary>
            Determines if the slot has a rule which is invalid and is preventing it from 
            being calculated.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.IsCircular">
            <summary>
            Determines if the slot is involved in a circular chain of dependencies.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Name">
            <summary>
            Gets/sets the name of the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Parent">
            <summary>
            Gets/sets the parent scope.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Engine">
            <summary>
            Gets the execution engine managing the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Rule">
            <summary>
            Gets/sets the rule to use.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Text">
            <summary>
            Gets the textual representation of the slot's value.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Value">
            <summary>
            Gets/sets the current value of the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.IsError">
            <summary>
            Gets a value indicating whether the value is an error.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Tag">
            <summary>
            Gets sets a tag on the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Context">
            <summary>
            gets and sets the context for the slot.
            </summary>
            <remarks>
            This can provide meta information for the slot, such as a relative slot provider.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.Remove">
            <summary>
            Remove this slot from its parent.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.Invalidate">
            <summary>
            Cause an update of this slot and all of its dependents.
            </summary>
            <remarks>
            Typically used when slot is a reference to external data.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.SetRule(System.String,Titan.Rules.Execution.InvalidRuleBehavior)">
            <summary>
            Sets the rule to use.
            </summary>
            <param name="ruleText">The text of the rule to apply.</param>
            <param name="invalidRuleBehavior">The behavior if the rule specified is invalid.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.SetValue(System.Object,System.Boolean)">
            <summary>
            Set's the value of this slot.
            </summary>
            <param name="value">The value to set.</param>
            <param name="forceChange">If true, all dependent slots will be re-evaluated, even if the value hasn't changed.</param>
            <returns>True if the value was different from the current one and caused an update.</returns>
            <remarks>
            This will always remove the rule from the slot.
            </remarks>
            <exception cref="T:System.InvalidCastException">When <paramref name="value"/> is of an unsupported type.</exception>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.GetPath">
            <summary>
            Gets the fully-qualified path to the slot.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.GetEffectivePath">
            <summary>
            Gets the effective path of this slot. This is used for MyName().
            </summary>
            <remarks>
            In the case that this is a mimic slot (indirect slot) then it will return the path of the main slot, not this one.
            The name of this slot will mean nothing anyway.
            </remarks>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Identity">
            <summary>
            Gets the number which uniquely identifies the slot from
            all others created by the same Engine.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.ResolveScope">
            <summary>
            Gets the scope that will be used when resolving references for this slot.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.SetRuleWithoutCalculation(System.String)">
            <summary>
            This is typically used by profiling on temp slots so that we know what we are calculating.
            </summary>
            <remarks>Probably a bad idea to use this in any other situation.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.RetrieveInternalValue">
            <summary>
            This is used by an instruction list to get hold of a value
            - it must not be cloned here because the instruction list 
            can do a better job.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.Slot.Dependents">
            <summary>
            Gets the list of dependent slots. The returned list
            MUST NOT be modified.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.CheckUnresolved(System.Boolean)">
            <summary>
            This is used by the Execution Engine to form resolution
            of unresolved references. See remarks for details.
            </summary>
            <param name="calculateOnFullResolve"></param>
            <returns>
            This method is always a side-effect of another action, e.g. unsuppressing
            calculation suppression, or adding a new slot to scope. Because of this it is important
            that if a circular reference is detected, an exception is not thrown.
            </returns>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.GetInstructions">
            <summary>
            Gets the instruction list which represents the rule
            assigned to the slot.
            </summary>
            <returns></returns>
            <devdoc>
            This is exposed purely for the benefit of the execution
            plan class. Nothing else should use this.
            </devdoc>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.InvatidatePlan">
            <remarks>
            As dependents can be changed without changing the rule, 
            this is for updating what needs to be done when this slot changes.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.SetMimicSlot(Titan.Rules.Execution.Slot)">
            <summary>
            This is so that indirect slots can clone another slots scope, without compromising the context.
            </summary>
            <remarks>
            This must be called before the slot has had it's rule set, as it modifies how references are created.
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.ChangeParentInternal(Titan.Rules.Execution.Scope)">
            <summary>
            Called by <see cref="T:Titan.Rules.Execution.Scope.SlotCollection" /> and the <see cref="P:Titan.Rules.Execution.Slot.Parent" /> property when
            the parent changes.
            </summary>
            <param name="newParent">The new slot parent.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.PropagateChangedParent(System.String[],System.Boolean)">
            <summary>
            Called by <see cref="M:Titan.Rules.Execution.Slot.ChangeParentInternal(Titan.Rules.Execution.Scope)" /> and <see cref="M:Titan.Rules.Execution.Scope.PropagateChangedParent(Titan.Rules.Execution.Scope)" />, 
            to change the fully qualified path of the parent.
            </summary>
            <param name="parentPath">The new path for the slot.</param>
            <param name="raiseNameChanged">Whether or not to raise the name changed event.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.OnValueChanged">
            <summary>
            Raises the <see cref="E:Titan.Rules.Execution.Slot.ValueChanged" /> event.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.OnParentChanged(Titan.Rules.Execution.Scope)">
            <summary>
            Raises the <see cref="M:Titan.Rules.Execution.Slot.OnParentChanged(Titan.Rules.Execution.Scope)" /> event.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Slot.OnNameChanged(System.String)">
            <summary>
            Raises the <see cref="M:Titan.Rules.Execution.Slot.OnNameChanged(System.String)" /> event.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.SlotNameChangedEventArgs">
            <summary>
            Provides event data for the <see cref="E:Titan.Rules.Execution.Slot.NameChanged" /> event.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.SlotNameChangedEventArgs.#ctor(Titan.Rules.Execution.Slot,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.SlotNameChangedEventArgs" /> class.
            </summary>
            <param name="slot">The slot that has been renamed.</param>
            <param name="oldName">The old name of the slot.</param>
            <param name="newName">The new name of the slot.</param>
        </member>
        <member name="P:Titan.Rules.Execution.SlotNameChangedEventArgs.OldName">
            <summary>
            The old name of the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.SlotNameChangedEventArgs.NewName">
            <summary>
            The new name of the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.SlotNameChangedEventArgs.SourceSlot">
            <summary>
            The slot that has had its name changed.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.SlotParentChangedEventArgs">
            <summary>
            Provides event data for the <see cref="E:Titan.Rules.Execution.Slot.ParentChanged" /> event.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.SlotParentChangedEventArgs.#ctor(Titan.Rules.Execution.Slot,Titan.Rules.Execution.Scope,Titan.Rules.Execution.Scope)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.SlotParentChangedEventArgs" /> class.
            </summary>
            <param name="oldParent">The old parent of the slot.</param>
            <param name="newParent">The new parent of the slot.</param>
            <param name="slot">The slot that has had its value changed.</param>
        </member>
        <member name="P:Titan.Rules.Execution.SlotParentChangedEventArgs.OldParent">
            <summary>
            The old parent of the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.SlotParentChangedEventArgs.NewParent">
            <summary>
            The new parent of the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.SlotParentChangedEventArgs.SourceSlot">
            <summary>
            The slot that has had its parent changed.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.SlotTriggerBase">
            <summary>
            Provides a base class for triggers which use a slot as their 
            triggering mechanism.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.SlotTriggerBase.#ctor(Titan.Rules.Execution.ITriggerTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.SlotTriggerBase"/> type.
            </summary>
            <param name="target">The target of the trigger.</param>
        </member>
        <member name="P:Titan.Rules.Execution.SlotTriggerBase.TriggerSlot">
            <summary>
            Gets the trigger slot if it has been created.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.SlotTriggerBase.OnTriggerSlotValueChanged(Titan.Rules.Execution.SlotValueChangedEventArgs)">
            <summary>
            Called when the value of the trigger slot changes.
            </summary>
            <param name="e">The event data from the slot value change event.</param>
        </member>
        <member name="M:Titan.Rules.Execution.SlotTriggerBase.PreExecute(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.Value[])">
            <summary>
            Called by the execution engine before a function is executed.
            </summary>
            <param name="engine">The Execution Engine.</param>
            <param name="args">The arguments that will be sent to the function, the function arguments may be modified before they are sent.</param>
        </member>
        <member name="M:Titan.Rules.Execution.SlotTriggerBase.EnsureSlot">
            <summary>
            Ensures the trigger slot is available.
            </summary>
            <returns>
            True if the trigger slot is available, false if PreExecute hasn't been 
            called yet and so the trigger slot cannot be created.
            </returns>
        </member>
        <member name="M:Titan.Rules.Execution.SlotTriggerBase.Dispose">
            <summary>
            Disposes the trigger by disconnecting the trigger slot.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.SlotValueChangedEventArgs">
            <summary>
            Provides event data for the <see cref="E:Titan.Rules.Execution.Slot.ValueChanged" /> event.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.SlotValueChangedEventArgs.#ctor(Titan.Rules.Execution.Slot,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.SlotValueChangedEventArgs" /> class.
            </summary>
            <param name="oldValue">The old value of the slot.</param>
            <param name="newValue">The new value of the slot.</param>
            <param name="slot">The slot that has had its value changed.</param>
        </member>
        <member name="P:Titan.Rules.Execution.SlotValueChangedEventArgs.OldValue">
            <summary>
            The old value of the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.SlotValueChangedEventArgs.NewValue">
            <summary>
            The new value of the slot.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.SlotValueChangedEventArgs.SourceSlot">
            <summary>
            The slot that has had its value changed.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.SlotValueChangeHelpers">
            <summary>
            The singleton delegates exposed by this type are used by a slot
            so that slot don't require a unique delegate per slot.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.SlotValueChangeHelpers.FetchValueDelegate">
            <summary>
            Gets a singleton delegate which can fetch the value of a slot when provided with the slot.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.SlotValueChangeHelpers.ConstructArgsDelegate">
            <summary>
            Gets a singleton delegate which can construct an instance of a <see cref="T:Titan.Rules.Execution.SlotValueChangedEventArgs"/>
            when given a slot, the slot's previous value, and the slot's new value.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.SortedArrayValue">
            <summary>
            Provides an implementation of a two dimensional array value that has been sorted
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.SortedArrayValue.#ctor(Titan.Rules.Execution.IArrayValue,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.SortedArrayValue" /> class.
            </summary>
            <param name="arrayValue">The two dimensional array of values to wrap, the values in the array MUST be one of the types supported by Titan otherwise runtime errors could occur.</param>
            <param name="sortedIndexes">The array of sorted row indexes which point to the correct row inside the two dimensional array</param>
        </member>
        <member name="P:Titan.Rules.Execution.SortedArrayValue.Rows">
            <summary>
            Gets the number of rows in the array.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.SortedArrayValue.Columns">
            <summary>
            Gets the number of columns in the array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.SortedArrayValue.GetElement(System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.SortedArrayValue.GetElementAsValue(System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a Titan value.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.SortedArrayValue.GetElementAsDouble(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a double, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns> 
        </member>
        <member name="M:Titan.Rules.Execution.SortedArrayValue.GetElementAsString(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a string, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, or converted value.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.SortedArrayValue.GetElementAsDateTime(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a date-time, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.SortedArrayValue.GetElementAsBoolean(System.Globalization.CultureInfo,System.Int32,System.Int32)">
            <summary>
            Gets the element at the given row and column index as a boolean, converting using Titan's
            data conversion rules if necessary.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
            <param name="ci">The culture information to use for conversions.</param>
            <returns>The value, converted value, or a null reference if conversion fails.</returns>  
        </member>
        <member name="M:Titan.Rules.Execution.SortedArrayValue.ToArray">
            <summary>
            Creates a two dimensional object array containing the values from the array value.
            </summary>
            <remarks>Wherever possible this method should be avoided as it can be very expensive in terms of memory and time taken.</remarks>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Execution.StackValueType">
            <summary>
            Represents the type of the value on top of the evaluation stack during
            conversion of the parse tree to an instruction list.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.StackValueType.Any">
            <summary>
            The value type is not known, evt.g, after dereferencing a name.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.StackValueType.Number">
            <summary>
            The value is a number.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.StackValueType.Bool">
            <summary>
            The value is a boolean.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.StackValueType.DateTime">
            <summary>
            The value is a date and time.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.StackValueType.String">
            <summary>
            The value is a string.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.StandardArrayValue">
            <summary>
            Provides a simple implementation of an array value around a two dimensional array.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.StandardArrayValue.Empty">
            <summary>
            Gets an immutable, singleton, empty array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.StandardArrayValue.#ctor(System.Object[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.Execution.StandardArrayValue" /> class.
            </summary>
            <param name="values">The two dimensional array of values to wrap, the values in the array MUST be one of the types supported by Titan otherwise runtime errors could occur.</param>
        </member>
        <member name="M:Titan.Rules.Execution.StandardArrayValue.GetElementCore(System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified row and column index.
            </summary>
            <param name="columnIndex">The column index of the element to get.</param>
            <param name="rowIndex">The row index of the element to get.</param>
        </member>
        <member name="M:Titan.Rules.Execution.StandardArrayValue.ToArray">
            <summary>
            Creates a two dimensional object array containing the values from the array value.
            </summary>
            <remarks>Wherever possible this method should be avoided as it can be very expensive in terms of memory and time taken.</remarks>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.StandardArrayValue.Rows">
            <summary>
            Gets the number of rows in the array.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.StandardArrayValue.Columns">
            <summary>
            Gets the number of columns in the array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.StandardArrayValue.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.StandardArrayValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Titan.Rules.Execution.Functions.ReflectedFunctionFactory">
            <summary>
            Provides support for creating a wrapper around a .NET method which can 
            then be consumed within Titan. See remarks for details.
            </summary>
            <remarks>
            <para>
            Functions can be made available to Titan by implementing the <see cref="T:Titan.Rules.Execution.IFunction" />
            interface. However, to simplify the process of creating functions for use with Titan, two 
            convenience mechanisms are supported.
            </para>
            <para>
            The first of these convenience mechanisms is the <see cref="T:Titan.Rules.Execution.MethodInfoFunction" /> class. This mechanism
            supports regular functions, triggered functions, and void functions (which use an initial parameter of type <see cref="T:Titan.Rules.Execution.Value" />
            to return their result). This provides the most flexibility, however, does not support functions loaded 
            from secondary application domains.
            </para>
            <para>
            The second mechanism is a combination of using <see cref="T:Titan.Rules.Execution.Functions.ReflectedFunctionFactory"/>, and 
            <see cref="T:Titan.Rules.Execution.Functions.ReflectedFunctionAdapterFactory" />. This method supports secondary application domains.
            To use this mechanism, <see cref="T:Titan.Rules.Execution.Functions.ReflectedFunctionFactory"/> is used in the secondary application domain, and the
            resultant <see cref="T:Titan.Rules.Execution.Functions.IReflectedFunction" /> is passed to the primary application domain. In the primary application
            domain, <see cref="T:Titan.Rules.Execution.Functions.ReflectedFunctionAdapterFactory" /> is used to create an <see cref="T:Titan.Rules.Execution.IFunction" /> which can then be
            added to an <see cref="T:Titan.Rules.Execution.ExecutionEngine" />.
            </para>
            <para>
            This second mechanism has more overhead, and does not support void functions or triggered functions.
            </para>
            </remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Functions.ReflectedFunctionFactory.Create(System.Object,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Creates a new reflected function. See remarks for details.
            </summary>
            <param name="target">The object on which the CLR method should be called, or a null reference if the method is static.</param>
            <param name="mi">The method to wrap.</param>
            <param name="forRemoting">
            True if the reflected function is being created in an <see cref="T:System.AppDomain" /> 
            other than the one in which the target <see cref="T:Titan.Rules.Execution.ExecutionEngine" /> exists, otherwise false.
            </param>
            <returns>A new reflected function.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Functions.FunctionValueHelpers.PrepareParameterArray(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.Value[],System.Int32,Titan.Rules.Execution.Functions.FunctionValueType)">
            <summary>
            Prepares a parameter array.
            </summary>
            <param name="engine">The execution engine.</param>
            <param name="args">All arguments to the function, including non-parameter array arguments.</param>
            <param name="nonParameterArrayArgumentCount">The count of non-parameter array arguments.</param>
            <param name="parameterArrayInternalType">The titan type of the parameter array.</param>
            <returns>An array to use as the parameter array, or a null reference if the arguments were incompatible.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Functions.FunctionValueHelpers.PrepareParameterArray(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.Value[],System.Int32,Titan.Rules.Execution.Functions.FunctionValueType,System.Type)">
            <summary>
            Prepares a parameter array.
            </summary>
            <param name="engine">The execution engine.</param>
            <param name="args">All arguments to the function, including non-parameter array arguments.</param>
            <param name="nonParameterArrayArgumentCount">The count of non-parameter array arguments.</param>
            <param name="parameterArrayInternalType">The titan type of the parameter array.</param>
            <param name="parameterArrayType">The CLR type of the parameter array.</param>
            <returns>An array to use as the parameter array, or a null reference if the arguments were incompatible.</returns>
        </member>
        <member name="T:Titan.Rules.Execution.Functions.ReflectedFunctionDesc">
            <summary>
            Provides descriptive information about a function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionDesc.Description">
            <summary>
            Gets a description of the function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionDesc.Category">
            <summary>
            Gets the category that the function belongs to.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionDesc.IsDeprecated">
            <summary>
            Gets whether the function has been deprecated and 
            therefore should not be displayed in UI.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionDesc.Attributes">
            <summary>
            Gets the flags associated with the function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionDesc.Parameters">
            <summary>
            Gets information about the functions parameters.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Functions.ReflectedFunctionExecutionData">
            <summary>
            Provides information required for the execution of a 
            reflected function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionExecutionData.ReturnType">
            <summary>
            Gets the return type of the function.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionExecutionData.ParameterTypes">
            <summary>
            Gets the parameter count for the function. See remarks for details.
            </summary>
            <remarks>
            <para>If a parameter array is present, its element type is the final type in the array.</para>
            <para>The trigger parameter if present, is not present in the type list.</para>
            </remarks>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionExecutionData.IsTriggered">
            <summary>
            Gets whether the function is a triggered function and
            therefore requires the trigger to be passed as the first
            parameter.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionExecutionData.HasParameterArray">
            <summary>
            Gets whether the final parameter of the function is a parameter
            array.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionExecutionData.IsResultInFirstParameter">
            <summary>
            Gets whether the first parameter of the function is a <see cref="T:Titan.Rules.Execution.Value" /> representing the result.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Functions.ReflectedFunctionExecutionData.Clone">
            <summary>
            Returns a cloned version of the execution data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Execution.Functions.ReflectedFunctionParamDesc">
            <summary>
            Provides descriptive information about a parameter.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionParamDesc.DisplayName">
            <summary>
            Gets the display name of the parameter.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionParamDesc.Description">
            <summary>
            Gets a description of the parameter.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.ReflectedFunctionParamDesc.TypeDisplayName">
            <summary>
            Gets the display name for the parameter's type.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Functions.FunctionValueType">
            <summary>
            Represents the types of values supported by functions.
            </summary>
            <devdoc>
            The values of facets in this enumeration must be kept in sync with
            <see cref="T:Titan.Rules.Execution.ValueType" /> - with the exception of <see cref="F:Titan.Rules.Execution.ValueType.Empty"/>
            which should not be present in this list.
            </devdoc>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.FunctionValueType.Error">
            <summary>
            Represents an error.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.FunctionValueType.DateTime">
            <summary>
            Represents a date/time.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.FunctionValueType.String">
            <summary>
            Represents a string.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.FunctionValueType.Number">
            <summary>
            Represents a double-precision floating point number.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.FunctionValueType.Boolean">
            <summary>
            Represents a boolean.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.FunctionValueType.Array">
            <summary>
            Represents an array.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.FunctionValueType.Integer">
            <summary>
            Represents a 32-bit integer that will be automatically 
            cast to/from a double.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.Functions.FunctionValueType.Any">
            <summary>
            Any valid object type. 
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Functions.IReflectedFunction">
            <summary>
            Provides a simplified interface on top of a .NET function. See <see cref="T:Titan.Rules.Execution.Functions.ReflectedFunctionFactory" /> for more
            details.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Functions.IReflectedFunction.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Functions.IReflectedFunction.GetDescription">
            <summary>
            Gets descriptive information about the function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Functions.IReflectedFunction.GetExecutionData">
            <summary>
            Gets information about the function required to be able to execute it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Functions.IReflectedFunction.Execute(System.Object[])">
            <summary>
            Executes the function with the given arguments.
            </summary>
            <param name="arguments">The arguments to pass to the function.</param>
            <returns>The result of executing the function.</returns>
        </member>
        <member name="T:Titan.Rules.Execution.Functions.ReflectedFunctionAdapterFactory">
            <summary>
            Supports the creation of adapters from <see cref="T:Titan.Rules.Execution.Functions.IReflectedFunction" /> to <see cref="T:Titan.Rules.Execution.IFunction" />.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Functions.ReflectedFunctionAdapterFactory.Create(Titan.Rules.Execution.Functions.IReflectedFunction)">
            <summary>
            Creates an adapter from an reflected function to <see cref="T:Titan.Rules.Execution.IFunction" />.
            </summary>
            <param name="reflectedFunction">The function around which to create an adapter.</param>
            <returns>An appropriate adapter.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the passed-in function is a transparent proxy to a triggered function.</exception>
        </member>
        <member name="T:Titan.Rules.Execution.ReverseArrayValue">
            <summary>
            Represents an array which is the row-orientated reverse of another array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ReverseArrayValue.Reverse(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Constructs a new array value which is the reverse of the provided array.
            </summary>
            <param name="originalArray">The array to reverse.</param>
            <returns>An array which is the reverse of the given array.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.ReverseArrayValue.GetElementCore(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.ReverseArrayValue.ToArray">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Execution.ReverseArrayValue.Rows">
            <inheritdoc />
        </member>
        <member name="P:Titan.Rules.Execution.ReverseArrayValue.Columns">
            <inheritdoc />
        </member>
        <member name="T:Titan.Rules.Execution.TransposeArrayValue">
            <summary>
            Represents an array which is the transpose of another array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.TransposeArrayValue.Transpose(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Constructs a new array value which is the transpose of the provided array.
            </summary>
            <param name="originalArray">The array to transpose.</param>
            <returns>An array which is the transpose of the given array.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.TransposeArrayValue.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Titan.Rules.Execution.TransposeArrayValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Titan.Rules.Execution.TriggerAttribute">
            <summary>
            Marks a user defined function as supporting trigged updates.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.TriggerAttribute.CreateTrigger(Titan.Rules.Execution.ITriggerTarget,System.String)">
            <summary>
            Constructs a trigger for the given target.
            </summary>
            <param name="target">The target of the trigger.</param>
            <param name="triggerId">The id of the trigger.</param>
            <returns>A trigger which will be connected to a particular function within a certain rule.</returns>
        </member>
        <member name="T:Titan.Rules.Execution.TriggerBase">
            <summary>
            Provides a base class to make implementing <see cref="T:Titan.Rules.Execution.ITrigger"/> simpler.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.TriggerBase.PreExecute(Titan.Rules.Execution.ExecutionEngine,Titan.Rules.Execution.Value[])">
            <summary>
            Called by the execution engine before a function is executed.
            </summary>
            <param name="engine">The Execution Engine.</param>
            <param name="args">The arguments that will be sent to the function, the function arguments may be modified before they are sent.</param>
        </member>
        <member name="M:Titan.Rules.Execution.TriggerBase.Dispose">
            <summary>
            When overridden in a derived implementation, disposes the resources held by the implementation.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.TriggerContext">
            <summary>
            Provides configuration and information for trigger based functions.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.TriggerContext.IsSynchronousRequired">
            <summary>
            Gets whether or not trigger functions should be working synchronously or not.
            </summary>
        </member>
        <member name="T:Titan.Rules.Execution.Value">
            <summary>
            Represents a weakly-typed value and defines appropriate operations and conversions.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor">
            <summary>
            Creates a new empty value.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor(Titan.Rules.Execution.ErrorType)">
            <summary>
            Creates a new value based on the specified error.
            </summary>
            <param name="value">The initial value to used.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor(System.DateTime)">
            <summary>
            Creates a new value based on a date and time.
            </summary>
            <param name="value">The initial value to be used.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor(System.String)">
            <summary>
            Creates a new value based on a string.
            </summary>
            <param name="value">The initial value to be used.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor(System.Double)">
            <summary>
            Creates a new value based on a number.
            </summary>
            <param name="value">The initial value to be used.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor(System.Boolean)">
            <summary>
            Creates a new value based on a boolean.
            </summary>
            <param name="value">The initial value to be used.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor(Titan.Rules.Execution.Value)">
            <summary>
            Creates a copy of the passed-in weak value.
            </summary>
            <param name="value">The value to copy.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor(System.Object)">
            <summary>
            Creates a copy of the passed-in value.
            </summary>
            <param name="value">The value to copy.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor(System.Object[0:,0:])">
            <summary>
            Creates a copy of the passed-in array value.
            </summary>
            <param name="value">The value to copy.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.#ctor(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Creates a copy of the passed-in array value.
            </summary>
            <param name="value">The value to copy.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryCreateValue(System.Object)">
            <summary>
            Attempts to create a new Value from the provided native 
            .NET value.
            </summary>
            <param name="value">The value to encapsulate.</param>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.Execution.Value.IsError">
            <summary>
            Gets a value indicating whether the value is an error.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Value.IsEmpty">
            <summary>
            Gets a value indicating whether the value is empty.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.Value.IsArray">
            <summary>
            Gets a value indicating whether the value is an array.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Value.GetValue">
            <summary>
            Gets the boxed representation of the current value.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Value.GetValueType">
            <summary>
            Gets the type of the current value.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Value.GetDateTime">
            <summary>
            Gets the current value as a date and time.      
            </summary>
            <returns>The current value as a date and time.</returns>
            <remarks>This method does not perform any data type conversion.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the current value is not of the right type.</exception>
        </member>
        <member name="M:Titan.Rules.Execution.Value.GetString">
            <summary>
            Gets the current value as a string.      
            </summary>
            <returns>The current value as a string.</returns>
            <remarks>This method does not perform any data type conversion.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the current value is not of the right type.</exception>
        </member>
        <member name="M:Titan.Rules.Execution.Value.GetNumber">
            <summary>
            Gets the current value as a number.      
            </summary>
            <returns>The current value as a number.</returns>
            <remarks>This method does not perform any data type conversion.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the current value is not of the right type.</exception>
        </member>
        <member name="M:Titan.Rules.Execution.Value.GetBoolean">
            <summary>
            Gets the current value as a boolean.      
            </summary>
            <returns>The current value as a boolean.</returns>
            <remarks>This method does not perform any data type conversion.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the current value is not of the right type.</exception>
        </member>
        <member name="M:Titan.Rules.Execution.Value.GetError">
            <summary>
            Gets the current value as an error code.      
            </summary>
            <returns>The current value as an error code.</returns>
            <remarks>This method does not perform any data type conversion.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the current value is not of the right type.</exception>
        </member>
        <member name="M:Titan.Rules.Execution.Value.GetArray">
            <summary>
            Gets the current value as an array.
            </summary>
            <returns>The current value as an array.</returns>
            <remarks>This method does not perform any data type conversion.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the current value is not of the right type.</exception>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryConvert(System.Globalization.CultureInfo,Titan.Rules.Execution.ValueType)">
            <summary>
            Attempts conversion of the value to the desired type.
            </summary>
            <param name="culture">The culture to be used whilst converting to and from string representations.</param>
            <param name="desiredType">The desired type of the value after conversion.</param>
            <returns>True if the conversion was successful, otherwise false.</returns>
            <remarks>If the method fails, the value is left unchanged.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryConvertToString(System.Globalization.CultureInfo)">
            <summary>
            Attempts conversion of the value to a string.
            </summary>
            <param name="culture">The culture to be used whilst converting to and from string representations.</param>
            <returns>True if the conversion was successful, otherwise false.</returns>
            <remarks>This method always succeeds.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryConvertToNumber(System.Globalization.CultureInfo)">
            <summary>
            Attempts conversion of the value to a number.
            </summary>
            <param name="culture">The culture to be used whilst converting to and from string representations.</param>
            <returns>True if the conversion was successful, otherwise false.</returns>
            <remarks>If the method fails, the value is left unchanged.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryConvertToBoolean(System.Globalization.CultureInfo)">
            <summary>
            Attempts conversion of the value to a boolean.
            </summary>
            <param name="culture">The culture to be used whilst converting to and from string representations.</param>
            <returns>True if the conversion was successful, otherwise false.</returns>
            <remarks>If the method fails, the value is left unchanged.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryConvertToDateTime(System.Globalization.CultureInfo)">
            <summary>
            Attempts conversion of the value to a date and time.
            </summary>
            <param name="culture">The culture to be used whilst converting to and from string representations.</param>
            <returns>True if the conversion was successful, otherwise false.</returns>
            <remarks>If the method fails, the value is left unchanged.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryConvertToArray">
            <summary>
            Converts the value to an array.
            </summary>
            <returns>True if the conversion was successful, otherwise false.</returns>
            <remarks>If the method fails, the value is left unchanged.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Clear">
            <summary>
            Clears the value.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Assign(Titan.Rules.Execution.ErrorType)">
            <summary>
            Sets the current value to the passed-in error type.
            </summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Assign(System.String)">
            <summary>
            Sets the current value to the passed-in string.
            </summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Assign(System.Double)">
            <summary>
            Sets the current value to the passed-in number.
            </summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Assign(System.DateTime)">
            <summary>
            Sets the current value to the passed-in date and time.
            </summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Assign(System.Boolean)">
            <summary>
            Sets the current value to the passed-in boolean.
            </summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Assign(Titan.Rules.Execution.IArrayValue)">
            <summary>
            Sets the current value to the passed-in array value.
            </summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Assign(System.Object[0:,0:])">
            <summary>
            Sets the current value to the passed-in array value.
            </summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Assign(Titan.Rules.Execution.Value)">
            <summary>
            Sets the current value to same as the passed-in ExpressionValue.
            </summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Assign(System.Object)">
            <summary>
            Sets the current value to same as the passed-in value.
            </summary>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryAssign(System.Object)">
            <summary>
            Attempts to assign the specified value without making any changes if the attempt is unsuccessful.
            </summary>
            <param name="value">The value to try to assign.</param>
            <returns>True if the assignment was successful, otherwise false.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Add(Titan.Rules.Execution.Value)">
            <summary>
            Adds the specified value to this one without performing any
            conversions.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Add(Titan.Rules.Execution.Value,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Adds the specified value to this one.
            </summary>
            <param name="value">The value to add.</param>
            <param name="ci">The culture to use if any conversions are required.</param>
            <param name="destructive">True if, if conversions are required, the input value is allowed to be converted in-place rather than cloning it.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Subtract(Titan.Rules.Execution.Value)">
            <summary>
            Subtracts the specified value from this one without performing any
            conversions.
            </summary>
            <param name="value">The value to subtract.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Subtract(Titan.Rules.Execution.Value,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Subtracts the specified value from this one.
            </summary>
            <param name="value">The value to subtract.</param>
            <param name="ci">The culture to use if any conversions are required.</param>
            <param name="destructive">True if, if conversions are required, the input value is allowed to be converted in-place rather than cloning it.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Multiply(Titan.Rules.Execution.Value)">
            <summary>
            Multiplies the value by the specified value without performing any conversions.
            </summary>
            <param name="value">The value to multiply by.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Divide(Titan.Rules.Execution.Value)">
            <summary>
            Divides the value by the specified value without performing any conversions.
            </summary>
            <param name="value">The value to divide by.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Negate">
            <summary>
            Negates the value without performing any conversions.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Power(Titan.Rules.Execution.Value)">
            <summary>
            Raises the value to the specified power.
            </summary>
            <param name="value">The power to which to raise the value.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Concatenate(Titan.Rules.Execution.Value)">
            <summary>
            Concatenates two string values.
            </summary>
            <param name="value">The value to concatenate.</param>
        </member>
        <member name="M:Titan.Rules.Execution.Value.IsEqual(Titan.Rules.Execution.Value,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Compares two values without performing any conversions
            and assigns true to the first if the second is equal.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="ci">The culture to use if any conversions are required.</param>
            <param name="destructive">True if, if conversions are required, the input value is allowed to be converted in-place rather than cloning it.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Value.IsNotEqual(Titan.Rules.Execution.Value,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Compares two values without performing any conversions
            and assigns true to the first if the second is not equal.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="ci">The culture to use if any conversions are required.</param>
            <param name="destructive">True if, if conversions are required, the input value is allowed to be converted in-place rather than cloning it.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Value.IsLesser(Titan.Rules.Execution.Value,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Compares two values without performing any conversions
            and assigns true to the first if the first is less than 
            the second.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="ci">The culture to use if any conversions are required.</param>
            <param name="destructive">True if, if conversions are required, the input value is allowed to be converted in-place rather than cloning it.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Value.IsLesserOrEqual(Titan.Rules.Execution.Value,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Compares two values without performing any conversions
            and assigns true to the first if the first is less than 
            or equal to the second.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="ci">The culture to use if any conversions are required.</param>
            <param name="destructive">True if, if conversions are required, the input value is allowed to be converted in-place rather than cloning it.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Value.IsGreater(Titan.Rules.Execution.Value,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Compares two values without performing any conversions
            and assigns true to the first if the first is less than 
            the second.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="ci">The culture to use if any conversions are required.</param>
            <param name="destructive">True if, if conversions are required, the input value is allowed to be converted in-place rather than cloning it.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Value.IsGreaterOrEqual(Titan.Rules.Execution.Value,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Compares two values without performing any conversions
            and assigns true to the first if the first is less than 
            or equal to the second.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="ci">The culture to use if any conversions are required.</param>
            <param name="destructive">True if, if conversions are required, the input value is allowed to be converted in-place rather than cloning it.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryCoerce(Titan.Rules.Execution.Value,System.Globalization.CultureInfo)">
            <summary>
            Attempts to coerce the values to the same type as if destructive had been explicitly specified as true.
            </summary>
            <param name="value">The second value to coerce.</param>
            <param name="culture">The culture information to use for any required value conversions.</param>
            <returns>True if the operation is successful, otherwise false.</returns>
            <remarks>This operation is destructive, both the value on which the operation is called, and the given value may be modified.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Value.TryCoerce(Titan.Rules.Execution.Value@,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Attempts to coerce the values to the same type.
            </summary>
            <param name="value">The second value to coerce, this is replaced with a cloned copy if it needed to be converted.</param>
            <param name="culture">The culture information to use for any required value conversions.</param>
            <param name="destructive">True if, if conversions are required, the input value is allowed to be converted in-place rather than cloning it.</param>
            <returns>True if the operation is successful, otherwise false.</returns>
            <remarks>This operation is destructive, both the value on which the operation is called, and the given value may be modified.</remarks>
        </member>
        <member name="M:Titan.Rules.Execution.Value.Clone">
            <summary>
            Clones the value and returns the cloned instance.
            </summary>
            <returns>A new instance of <see cref="T:Titan.Rules.Execution.Value" /> with the same value as the instance being cloned.</returns>
        </member>
        <member name="M:Titan.Rules.Execution.Value.ToString(System.Globalization.CultureInfo)">
            <summary>
            Gets the textual representation of the value.
            </summary>
            <param name="ci">The culture information to use for formatting.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.Value.ToString">
            <summary>
            Gets the textual representation of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Execution.ValueConvertHelper">
            <summary>
            Provides facilities for converting values in the same way as the <see cref="T:Titan.Rules.Execution.Value" /> class.
            </summary>
        </member>
        <member name="P:Titan.Rules.Execution.ValueConvertHelper.ConvertValue">
            <summary>
            Gets the thread-local value used for conversion. Note, we have to wrap
            this in a property because initializers on thread static variables are
            executed by the class constructor and thus additional threads won't
            get initialized.
            </summary>
        </member>
        <member name="M:Titan.Rules.Execution.ValueConvertHelper.TryConvertToSpecificType(System.Globalization.CultureInfo,System.String,Titan.Rules.Execution.Value@)">
            <summary>
            Attempts to parse the specified value and return it as a Value. If no more specific type than string can be found
            then false is returned and the result will be the string as a Value.
            </summary>
            <param name="culture">The culture information to use for parsing.</param>
            <param name="value">The value to try to parse.</param>
            <param name="specific">A reference to a variable which receives the parsed value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ValueConvertHelper.TryConvert(System.Globalization.CultureInfo,System.Object,System.Double@)">
            <summary>
            Tries to convert the specified value to a double.
            </summary>
            <param name="culture">The culture information to use for conversions.</param>
            <param name="value">The value to convert.</param>
            <param name="converted">The converted value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ValueConvertHelper.TryConvert(System.Globalization.CultureInfo,System.Object,System.String@)">
            <summary>
            Tries to convert the specified value to a string.
            </summary>
            <param name="culture">The culture information to use for conversions.</param>
            <param name="value">The value to convert.</param>
            <param name="converted">The converted value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ValueConvertHelper.TryConvert(System.Globalization.CultureInfo,System.Object,System.DateTime@)">
            <summary>
            Tries to convert the specified value to a date-time.
            </summary>
            <param name="culture">The culture information to use for conversions.</param>
            <param name="value">The value to convert.</param>
            <param name="converted">The converted value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ValueConvertHelper.TryConvert(System.Globalization.CultureInfo,System.Object,System.Boolean@)">
            <summary>
            Tries to convert the specified value to a boolean.
            </summary>
            <param name="culture">The culture information to use for conversions.</param>
            <param name="value">The value to convert.</param>
            <param name="converted">The converted value.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.Execution.ValueConvertHelper.ToTitanSupportedType(System.Object)">
            <summary>
            Converts the specified value which is a standard .NET type to one of the types supported by titan.
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.Execution.ValueType">
            <summary>
            Represents the type of value contained in a <see cref="T:Titan.Rules.Execution.Value" />.
            </summary>
            <devdoc>
            These are in order of comparison precedence.
            </devdoc>
        </member>
        <member name="F:Titan.Rules.Execution.ValueType.Empty">
            <summary>
            The value is empty.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ValueType.Error">
            <summary>
            The value is an error.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ValueType.Number">
            <summary>
            The value is a number.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ValueType.DateTime">
            <summary>
            The value is a date and time.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ValueType.Boolean">
            <summary>
            The value is a boolean.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ValueType.String">
            <summary>
            The value is a string.
            </summary>
        </member>
        <member name="F:Titan.Rules.Execution.ValueType.Array">
            <summary>
            The value is an array of values.
            </summary>
        </member>
        <member name="T:Titan.Rules.LocalizedResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Titan.Rules.LocalizedResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Titan.Rules.LocalizedResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Titan.Rules.LocalizedResources.AnAngleMeasuredInDegrees">
            <summary>
              Looks up a localized string similar to An angle measured in degrees..
            </summary>
        </member>
        <member name="P:Titan.Rules.LocalizedResources.AnAngleMeasuredInRadians">
            <summary>
              Looks up a localized string similar to An angle measured in radians..
            </summary>
        </member>
        <member name="P:Titan.Rules.LocalizedResources.Angle">
            <summary>
              Looks up a localized string similar to Angle.
            </summary>
        </member>
        <member name="P:Titan.Rules.LocalizedResources.NoDescriptionAvailable">
            <summary>
              Looks up a localized string similar to No description available.
            </summary>
        </member>
        <member name="P:Titan.Rules.LocalizedResources.ReturnsTheSineOfTheSpecifiedAngleMeasuredInRadians">
            <summary>
              Looks up a localized string similar to Returns the sine of the specified angle measured in radians..
            </summary>
        </member>
        <member name="P:Titan.Rules.LocalizedResources.ReturnsTheValueOfPI">
            <summary>
              Looks up a localized string similar to Returns the value of PI..
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.CallOperationBase">
            <summary>
            Provides a base class for operations which work like function calls.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.CallOperationBase.Name">
            <summary>
            Gets/sets the name of the function to call.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.CallOperationBase.Arguments">
            <summary>
            Gets/sets the arguments to be passed to the function. The array accessed by
            this property is not cloned for performance reasons.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.Direction">
            <summary>
            Represents a direction.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.Direction.None">
            <summary>
            A lack of direction.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.Direction.Up">
            <summary>
            Up direction.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.Direction.Down">
            <summary>
            Down direction.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.Direction.Left">
            <summary>
            Left direction.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.Direction.Right">
            <summary>
            Right direction.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.LiteralEmpty">
            <summary>
            Represents an empty literal in an expression.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.LiteralEmpty.Value">
            <summary>
            Gets the empty value represented by this instance.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.LiteralFormatString">
            <summary>
            Represents a literal format string, i.e. a string of the form @"Some String @(With a Rule)"
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.LiteralFormatString.Components">
            <summary>
            Gets/sets the the components of the formatted literal string, the only valid
            components are instances of the <see cref="T:Titan.Rules.ObjectModel.LiteralFormatStringComponent"/> and
            <see cref="T:Titan.Rules.ObjectModel.LiteralFormatStringRule"/> types. The array accessed by
            this property is not cloned for performance reasons.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.LiteralFormatStringComponent">
            <summary>
            Represents a string component in a formatted literal string in an expression.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.LiteralFormatStringComponent.Value">
            <summary>
            Gets the string component represented by this instance.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.LiteralFormatStringRule">
            <summary>
            Represents a rule embedded in a literal format string.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.LiteralFormatStringRule.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.LiteralFormatStringRule"/> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ParanthesizedExpression">
            <summary>
            Provides an object which represents a paranthesized expression.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ParanthesizedExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.ParanthesizedExpression"/>
            class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.RelativeNumber">
            <summary>
            Represents a number that is used inside of a relative reference expression.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.RelativeNumber.#ctor(System.Int32,Titan.Rules.ObjectModel.Direction)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.RelativeNumber"/> class.
            </summary>
            <param name="value">Actual offset value for this reference.</param>
            <param name="directionHint">The direction for this reference.</param>
        </member>
        <member name="P:Titan.Rules.ObjectModel.RelativeNumber.Value">
            <summary>
            Gets and sets the value represented by this instance.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.RelativeNumber.NormalizedValue">
            <summary>
            Gets the absolute value for this instance based on the direction hint.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.RelativeNumber.DirectionHint">
            <summary>
            Gets and sets whether the reference specifies a particular direction. Such as: L, U, R or D (Left, Up, Right or Down).
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.RelativeReference">
            <summary>
            Represents a relative reference.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.RelativeReference.X">
            <summary>
            Gets and sets The horizontal parse information for this relative reference.
            </summary>
            <remarks>
            This can be null.
            </remarks>
        </member>
        <member name="P:Titan.Rules.ObjectModel.RelativeReference.Y">
            <summary>
            Gets and sets The vertical parse information for this relative reference.
            </summary>
            <remarks>
            This can be null.
            </remarks>
        </member>
        <member name="T:Titan.Rules.ObjectModel.RuntimeCallOperation">
            <summary>
            A function call.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.RuntimeCallOperation.RuntimeFunction">
            <summary>
            Gets or sets the runtime function represented by the runtime call operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.RuntimeCallOperation.Normalize">
            <summary>
            Normalizes the function call node according to the specific rules for the 
            type of runtime function call, and returns true if the operation was successful,
            otherwise false - for example, false is returned if the arguments are invalid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.ObjectModel.InlineOrOperation">
            <summary>
            Represents an inline short-circuiting or statement.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.InlineOrOperation.Condition1">
            <summary>
            A sub-expression which should evaluate to true or false.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.InlineOrOperation.Condition2">
            <summary>
            A sub-expression which should evaluate to true or false.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.InlineAndOperation">
            <summary>
            A short-circuiting inline and statement.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.InlineAndOperation.Condition1">
            <summary>
            Gets/sets a sub-expression which should evaluate to true or false.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.InlineAndOperation.Condition2">
            <summary>
            Gets/sets a sub-expression which should evaluate to true or false.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.EmptyArgument">
            <summary>
            Represents an empty argument to a function call.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.LiteralArray">
            <summary>
            An array of literals.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.LiteralArray.Literals">
            <summary>
            Gets/sets the literals in the array. The array accessed by
            this property is not cloned for performance reasons.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.LiteralArray.ToArrayValue">
            <summary>
            Converts the values in the literal array to an array value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ParseException">
            <summary>
            Thrown when an expression could not be parsed.
            </summary>    
        </member>
        <member name="M:Titan.Rules.ObjectModel.ParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.ParseException" /> type.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.ParseException" /> type.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.ParseException" /> type.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The exception that caused the <see cref="T:Titan.Rules.ObjectModel.ParseException" />.</param>
        </member>
        <member name="T:Titan.Rules.ObjectModel.SeparatorDuplicationException">
            <summary>
            Thrown when an expression could not be parsed because the culture
            information has one or more duplicated separators.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SeparatorDuplicationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.SeparatorDuplicationException" /> type.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SeparatorDuplicationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.SeparatorDuplicationException" /> type.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SeparatorDuplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.SeparatorDuplicationException" /> type.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The exception that caused the <see cref="T:Titan.Rules.ObjectModel.SeparatorDuplicationException" /></param>
        </member>
        <member name="T:Titan.Rules.ObjectModel.AddOperation">
            <summary>
            A binary addition operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.AddOperation.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.AddOperation" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.BinaryOperationBase">
            <summary>
            The base class for all binary operations in the rules object model.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.BinaryOperationBase.LeftHandSide">
            <summary>
            Gets/sets the left hand side of the operation.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.BinaryOperationBase.RightHandSide">
            <summary>
            Gets/sets the right hand side of the operation.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.BinaryOperationBase.IsAssociative">
            <summary>
            Determines whether the operation is associative.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.BinaryOperationBase.Precedence">
            <summary>
            Gets the relative precedence of the operation.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.BinaryOperationBase.Representation">
            <summary>
            Gets the string representation of the operation.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ConcatenateOperation">
            <summary>
            The binary string concatenation operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ConcatenateOperation.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.ConcatenateOperation" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.DivideOperation">
            <summary>
            The binary division operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.DivideOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.DivideOperation" /> type.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ExpressionError">
            <summary>
            Represents a parsing error in a parse tree.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionError.Type">
            <summary>
            Gets the type of parsing error.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ExpressionErrorType">
            <summary>
            Represents the type of parse error.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionErrorType.TailingTokens">
            <summary>
            The rule has unexpected tokens at the end.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionErrorType.PrematureEndOfRule">
            <summary>
            The rule terminates before complete.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionErrorType.ExpectedBeginParanthesis">
            <summary>
            An opening paranethesis is expected.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionErrorType.ExpectedEndParanthesis">
            <summary>
            A closing paranthesis is expected.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionErrorType.ExpectedName">
            <summary>
            A name is expected.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionErrorType.ExpectedSeperatorOrEndOfFunction">
            <summary>
            A separator or closing paranthesis are expected in a function call's argument list.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionErrorType.UnexpectedToken">
            <summary>
            An unexpected token was encountered.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionErrorType.UnterminatedString">
            <summary>
            An unterminated string was encountered.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionErrorType.SyntaxError">
            <summary>
            A general syntax error was encountered.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ExponentiateOperation">
            <summary>
            The binary exponentiation operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExponentiateOperation.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.ExponentiateOperation" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.CallOperation">
            <summary>
            A function call.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.IsEqualComparison">
            <summary>
            Represents the binary is-equal comparison operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.IsEqualComparison.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.IsEqualComparison" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.IsGreaterComparison">
            <summary>
            Represents the binary is-greater comparison operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.IsGreaterComparison.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.IsGreaterComparison" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.IsGreaterOrEqualComparison">
            <summary>
            Represents the binary is-greater-or-equal comparison operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.IsGreaterOrEqualComparison.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.IsGreaterOrEqualComparison" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.IsLesserComparison">
            <summary>
            Represents the binary is-lesser comparison operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.IsLesserComparison.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.IsLesserComparison" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.IsLesserOrEqualComparison">
            <summary>
            Represents the binary is-lesser-or-equal operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.IsLesserOrEqualComparison.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.IsLesserOrEqualComparison" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.IsNotEqualComparison">
            <summary>
            Represents the binary is-not-equal comparison operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.IsNotEqualComparison.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.IsNotEqualComparison" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.MultiplyOperation">
            <summary>
            Represents the binary multiply operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.MultiplyOperation.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.MultiplyOperation" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.NegateOperation">
            <summary>
            Represents the unary negation operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.NegateOperation.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.NegateOperation" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.NodeBase">
            <summary>
            Provides a common base for all nodes in an expression tree.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.NodeBase.StartIndex">
            <summary>
            Gets the start index in the expression text, of the string from which this node was parsed.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.NodeBase.EndIndex">
            <summary>
            Gets the end index in the expression text, of the string from which this node was parsed.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.NodeBase.OuterStartIndex">
            <summary>
            Gets the outer start index in the expression text, of the string from which this node was parsed.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.NodeBase.OuterEndIndex">
            <summary>
            Gets the outer end index in the expression text, of the string from which this node was parsed.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.NodeBase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Titan.Rules.ObjectModel.NodeBase" />.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.NodeBase.ToString(System.Globalization.CultureInfo)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Titan.Rules.ObjectModel.NodeBase" />.
            </summary>
            <param name="ci">
            The culture information to use when converting to a string.
            </param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.NodeBase.ToStringImpl(System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, converts the <see cref="T:Titan.Rules.ObjectModel.NodeBase" /> into a textual representation.
            </summary>
            <param name="ci">The culture information to use.</param>
            <returns>A textual expression.</returns>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ExpressionTokenizer">
            <summary>
            Provides support for tokenizing a rule.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionTokenizer.#ctor(System.Globalization.CultureInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.ExpressionTokenizer"/> class.
            </summary>
            <param name="culture">The culture to use for tokenization.</param>
            <param name="rule">The rule to tokenize.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionTokenizer.Next">
            <summary>
            Advances to the next token in the rule.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionTokenizer.Culture">
            <summary>
            Gets the culture that was specified for tokenization.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionTokenizer.Rule">
            <summary>
            Gets the rule being tokenized.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionTokenizer.Type">
            <summary>
            Gets the type of the current token.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionTokenizer.StartIndex">
            <summary>
            Gets the start index of the current token.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionTokenizer.EndIndex">
            <summary>
            Gets the end index of the current token.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionTokenizer.GetBool">
            <summary>
            Gets the boolean value of the current token if the current token is a literal boolean.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionTokenizer.GetDouble">
            <summary>
            Gets the numeric value of the current token if the current token is a literal number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionTokenizer.GetString">
            <summary>
            Gets the textual value of the current token if the current token is a literal string or 
            a name.
            </summary>
            <returns></returns>
            <remarks>
            To get the textual value of other types of token you can use the start and end index to index directly into the original string.
            </remarks>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ExpressionParser">
            <summary>
            Provides the facility to take an expression in textual form, and parse it to produce an expression tree.
            </summary>
            <devdoc>
            The Parser class takes a token stream obtained by calling Tokenizer.Tokenize() on a rule, it then
            parses the rule by recursive descent.
            
            All methods on this class are static, parsing methods return a boolean, if the method returns true,
            it means that the method in question consumed one or more input tokens, if it returns false it did not.
            
            If a method consumes an input token it is expected to call TokenStream.Next() to advance the TokenStream
            ready for subsequent code to use. A method may therefore assume it has a token to process as soon as it is
            called. The end of the stream is reached when TokenStream.GetValueType == TokenClass.None
            </devdoc>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionParser.ParseResultOuter.Success">
            <devdoc>
            The outer parse was successful.
            </devdoc>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionParser.ParseResultOuter.Empty">
            <devdoc>
            The outer parse had nothing to process, ip.evt. the RuleTokenStream
            was empty.
            </devdoc>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionParser.ParseResultOuter.Fail">
            <devdoc>
            A problem ocurred whilst parsing.
            </devdoc>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionParser.ParseResultPrime.Success">
            <devdoc>
            The inner parse was successful.
            </devdoc>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionParser.ParseResultPrime.Fail">
            <devdoc>
            A problem ocurred whilst parsing.
            </devdoc>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionParser.Parse(System.String)">
            <summary>
            Parses the passed-in rule using the current UI culture.
            </summary>
            <param name="rule">The expression to parse.</param>
            <returns>An expression tree.</returns>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionParser.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the passed-in rule using the specified culture.
            </summary>
            <param name="rule">The expression to parse.</param>
            <param name="culture">The culture to use for parsing and formatting.</param>
            <returns>An expression tree.</returns>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionParser.ParseArray(Titan.Rules.ObjectModel.ExpressionParser.ParseContext)">
            <summary>
            Parses the current array row. On entry the token stream
            should be positioned on the '{' token. On exit if valid
            the token stream will be positioned on the end of the array '}'. 
            On exit if invalid the token stream will be
            at the end of the token stream or on an unknown token.
            </summary>
            <param name="parseContext">The current parse context.</param>
            <returns>Null if parsing failed (errors are logged), otherwise an array.</returns>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionParser.ParseArrayRow(Titan.Rules.ObjectModel.ExpressionParser.ParseContext)">
            <summary>
            Parses the current array row. On entry the token stream
            should be positioned on the token AFTER the '{'. On exit if valid
            the token stream will be positioned on either a row terminator e.g. ';', 
            OR the end of the array '}'. On exit if invalid the token stream will be
            at the end of the token stream or on an unknown token. No errors are logged.
            </summary>
            <param name="parseContext">The current parse context.</param>
            <returns></returns>
        </member>
        <member name="M:Titan.Rules.ObjectModel.ExpressionParser.TryParseLiteral(Titan.Rules.ObjectModel.ExpressionParser.ParseContext)">
            <summary>
            Parses the literal at the current point in the token stream without advancing the token stream, and returns 
            whether the token stream was positioned on a literal. 
            </summary>
            <param name="parseContext">The current parse context.</param>
            <returns></returns>
        </member>
        <member name="T:Titan.Rules.ObjectModel.Reference">
            <summary>
            Represents a reference to a named item.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.Reference.IsGlobal">
            <summary>
            Gets/sets a value indicating whether the reference should be resolved from the global (top-level) scope.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.Reference.Path">
            <summary>
            Gets the path to the reference.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.Reference.Extender">
            <summary>
            Gets a name which extends the reference into an array.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.SlotTable">
            <summary>
            Allows a table composed of slots to be created and managed.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.#ctor(Titan.Rules.Execution.Scope,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Titan.Rules.ObjectModel.SlotTable"/> class.
            </summary>
            <param name="scope">The scope to place the table slot in.</param>
            <param name="name">The name of the table to create.</param>
        </member>
        <member name="P:Titan.Rules.ObjectModel.SlotTable.TableSlot">
            <summary>
            The slot that contains the table value.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.SlotTable.ColumnCount">
            <summary>
            The number of columns in this table.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.SlotTable.RowCount">
            <summary>
            The number of rows in this table.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.GetSlot(System.Int32,System.Int32)">
            <summary>
            Gets a specific slot from the table based on co-ordinates.
            </summary>
            <param name="colIndex">The column number of the slot to get.</param>
            <param name="rowIndex">The row number of the slot to get.</param>
            <returns>The matching slot or null if nothing is found.</returns>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.SetRowCount(System.Int32)">
            <summary>
            Updates the number of rows in this table. This will either trim or append new rows depending on the value.
            </summary>
            <param name="rowCount">The number of rows to set this table to have.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.AddColumn">
            <summary>
            Appends a new column to this table.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.InsertColumn(System.Int32)">
            <summary>
            Inserts a new column in this table.
            </summary>
            <param name="index">The place to insert the new column</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.MoveColumn(System.Int32,System.Int32)">
            <summary>
            Moves a column (and all slots) within this table.
            </summary>
            <param name="oldIndex">The location to move the column from.</param>
            <param name="newIndex">The location to move the column to.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.RemoveColumn(System.Int32)">
            <summary>
            Removes a column from the table, shifting all columns and cells over.
            </summary>
            <param name="index">The location of the column to remove.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.UpdateTableName(System.String)">
            <summary>
            renames the table to the specified name.
            </summary>
            <param name="name">The new name to give the table.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.RemoveRow(System.Int32)">
            <summary>
            Removes the specified row from the slot table.
            </summary>
            <param name="rowIndex">The index of the row to remove.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.GetCellName(System.Int32,System.Int32)">
            <summary>
            Gets the name of a cell at a specific location.
            </summary>
            <param name="columnIndex">The column location of the cell.</param>
            <param name="rowIndex">The row location of the cell.</param>
            <returns>The name of the cell at the specified location.</returns>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.CreateCellContext(System.Int32,System.Int32)">
            <summary>
            Gets the slot context that will be used for the cell at the specified location.
            </summary>
            <param name="colIndex">The column location of the cell.</param>
            <param name="rowIndex">The row location of the cell.</param>
            <returns>A context that will provide adjacent cell information and location information.</returns>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.OnSlotAdded(Titan.Rules.Execution.Slot,System.Int32,System.Int32)">
            <summary>
            Called whenever a slot has been created for the table.
            </summary>
            <param name="slot">The newly created cell.</param>
            <param name="columnIndex">The column location of the cell.</param>
            <param name="rowIndex">The row location of the cell.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.OnSlotNameChanged(Titan.Rules.Execution.Slot,System.Int32,System.Int32)">
            <summary>
            Called whenever a slot has it's name changed in the table.
            </summary>
            <param name="slot">The slot that had it's name changed.</param>
            <param name="columnIndex">The column location of the cell.</param>
            <param name="rowIndex">The row location of the cell.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.OnSlotRemoved(Titan.Rules.Execution.Slot,System.Int32,System.Int32)">
            <summary>
            Called whenever a cell is removed from the table.
            </summary>
            <param name="slot">The slot that was removed from the table.</param>
            <param name="columnIndex">The column location of the cell.</param>
            <param name="rowIndex">The row location of the cell.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.UpdateColumnNames(System.Int32)">
            <summary>
            Automatically updates all cell names for specified column.
            </summary>
            <param name="colIndex">The location of the column to update the cell names of.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.PopulateColumn(System.Int32,System.Collections.Generic.List{Titan.Rules.Execution.Slot})">
            <remarks>
            This function returns a collection of references that should be resolved at the very end of subsequent calls to PopulateColumn.
            This is because reference resolution can be "slow" if you keep doing it after every single slot creation. 
            (It causes the Scope's entire slot collection to be sorted each time - as something new was added).
            So, resolution is better done in batches as there will be only 1 sort.
            </remarks>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.Dispose">
            <summary>
            Removes the table from the parent scope and clears all handlers etc.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.Dispose(System.Boolean)">
            <summary>
            Called during disposal or finalization.
            </summary>
            <param name="disposing">Whether or not we are disposing.</param>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SlotTable.Finalize">
            <summary>
            Finalizing method for the <see cref="T:Titan.Rules.ObjectModel.SlotTable"/> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.SubtractOperation">
            <summary>
            Represents the binary subtraction operation.
            </summary>
        </member>
        <member name="M:Titan.Rules.ObjectModel.SubtractOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Titan.Rules.ObjectModel.SubtractOperation" /> class.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ExpressionTokenType">
            <summary>
            Represents the type of the current token in the tokenizer.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.None">
            <summary>
            No token is loaded.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.UnterminatedString">
            <summary>
            The token is an unterminated string constant.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.Unknown">
            <summary>
            The token is unrecognized.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.Whitespace">
            <summary>
            The token is whitespace.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpAdd">
            <summary>
            The token is an add operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpSub">
            <summary>
            The token is a subtract operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpMul">
            <summary>
            The token is a multiply operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpDiv">
            <summary>
            The token is a divide operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpPwr">
            <summary>
            The token is an exponentiation operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpCat">
            <summary>
            The token is a concatenation operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpCmpIsEqual">
            <summary>
            The token is an equal comparison operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpCmpIsNotEqual">
            <summary>
            The token is a not-equal comparison operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpCmpIsGreater">
            <summary>
            The token is a greater-than comparison operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpCmpIsGreaterOrEqual">
            <summary>
            The token is a greater-than-or-equal comparison operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpCmpIsLesser">
            <summary>
            The token is a lesser-than comparison operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.OpCmpIsLesserOrEqual">
            <summary>
            The token is a lesser-than-or-equal comparison operator.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.LitString">
            <summary>
            The token is a literal string.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.LitFormattedStringStart">
            <summary>
            The token is the start of a literal formatted string, i.e. @"
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.LitFormattedStringEnd">
            <summary>
            The token is the end of a literal formatted string, i.e. "
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.LitFormattedStringContent">
            <summary>
            The token is a string component of a literal formatted string.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.LitFormattedStringRuleStart">
            <summary>
            The token is the start of a rule within a literal formatted string.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.LitFormattedStringRuleEnd">
            <summary>
            The token is the end of a rule within a literal formatted string.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.LitNumber">
            <summary>
            The token is a number.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.LitBoolean">
            <summary>
            The token is a boolean.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.LitRelativeReferenceNumber">
            <summary>
            The token is a relative number reference.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.NmFuncName">
            <summary>
            The token is a function name.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.NmRefName">
            <summary>
            The token is a reference name.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymFuncParamSep">
            <summary>
            The token is the separator character for function parameter lists.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymListOfListsSep">
            <summary>
            The token is the separator character for lists of lists.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymScope">
            <summary>
            The token is the separator character for nested scopes.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymScopeRoot">
            <summary>
            The token is an identifier for a rooted reference.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymExtend">
            <summary>
            The token is the character that separates a reference from an extension.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymParanLeft">
            <summary>
            The token is the opening paranthesis character.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymParanRight">
            <summary>
            The token is the closing paranthesis character.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymBraceLeft">
            <summary>
            The token is the opening brace character.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymBraceRight">
            <summary>
            The token is the closing brace character.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymBracketLeft">
            <summary>
            The token is the opening bracket character.
            </summary>
        </member>
        <member name="F:Titan.Rules.ObjectModel.ExpressionTokenType.SymBracketRight">
            <summary>
            The token is the closing bracket character.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.ExpressionTree">
            <summary>
            Encapsulates information about a parsed expression.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionTree.Root">
            <summary>
            Gets the root node in the expression tree.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionTree.Errors">
            <summary>
            Provides quick access to error nodes in the expression tree. The array accessed by
            this property is not cloned for performance reasons.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionTree.References">
            <summary>
            Provides quick access to references in the expression tree.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.ExpressionTree.FunctionCalls">
            <summary>
            Provides quick access to functions referenced in the expression tree.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.UnaryOperationBase">
            <summary>
            Represents a unary operation in an expression.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.UnaryOperationBase.InnerExpression">
            <summary>
            Gets/sets the inner sub-expression.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.UnaryOperationBase.IsCall">
            <summary>
            Gets a value indicating whether the operator is implemented as a call.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.UnaryOperationBase.Representation">
            <summary>
            Gets the string representation of the operation.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.LiteralBoolean">
            <summary>
            Represents a boolean literal in an expression.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.LiteralBoolean.Value">
            <summary>
            Gets the boolean literal represented by this instance.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.LiteralNumber">
            <summary>
            Represents a number literal in an expression.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.LiteralNumber.Value">
            <summary>
            Gets the literal value represented by this instance.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.LiteralBase">
            <summary>
            Represents a literal value in an expression.
            </summary>
        </member>
        <member name="T:Titan.Rules.ObjectModel.LiteralString">
            <summary>
            Represents a string literal in an expression.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.LiteralString.Value">
            <summary>
            Gets the string literal represented by this instance.
            </summary>
        </member>
        <member name="P:Titan.Rules.ObjectModel.LiteralString.StartIndex">
            <summary>
            Gets the start index of the inner text, of this string.
            </summary>
            <remarks>
            This will be -1 if the string is empty.
            </remarks>
        </member>
        <member name="P:Titan.Rules.ObjectModel.LiteralString.EndIndex">
            <summary>
            Gets the end index of the inner text, of this string.
            </summary>
            <remarks>
            This will be -1 if the string is empty.
            </remarks>
        </member>
        <member name="T:Titan.Rules.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ERR_NO_ENGINE">
            <summary>
              Looks up a localized string similar to The operation could not be performed because  no execution engine was available. Make sure the scope belongs to the global scope of an execution engine..
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ERR_RULE_DRIVEN">
            <summary>
              Looks up a localized string similar to The operation could not be performed because the slot is rules driven..
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ExArgumentAlreadyAdded">
            <summary>
              Looks up a localized string similar to The object could not be added as it is already within the collection.
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ExArgumentNull">
            <summary>
              Looks up a localized string similar to Could not add object as it was set to nothing.
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ExCircularRefrence">
            <summary>
              Looks up a localized string similar to A circular reference was detected in the rule for &apos;{0}&apos;. {1}.
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ExInvalidRuleEvaluation">
            <summary>
              Looks up a localized string similar to There was a problem constructing an instruction list for slot &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ExInvalidRuleParse">
            <summary>
              Looks up a localized string similar to There was a problem parsing a rule for slot &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ExReflFuncAdaptProxyTriggeredFunctions">
            <summary>
              Looks up a localized string similar to Transparent proxies to triggered functions are not supported. Triggered functions must be registered in the same domain as the Execution Engine..
            </summary>
        </member>
        <member name="P:Titan.Rules.Properties.Resources.ExReflFuncAdaptTriggeredFunctions">
            <summary>
              Looks up a localized string similar to Triggered functions are not currently supported by ReflectedFunctionAdapterFactory..
            </summary>
        </member>
    </members>
</doc>
