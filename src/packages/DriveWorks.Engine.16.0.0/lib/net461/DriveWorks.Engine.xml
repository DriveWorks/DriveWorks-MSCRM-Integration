<?xml version="1.0"?>
<doc>
<assembly>
<name>
DriveWorks.Engine
</name>
</assembly>
<members>
<member name="T:DriveWorks.My.Resources.ComponentTaskResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.ComponentTasksAddNotSupported">
<summary>
  Looks up a localized string similar to This collection does not support this method, please use one of the Add(Type,String) overloads instead..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.ComponentTasksInsertNotSupported">
<summary>
  Looks up a localized string similar to This collection does not support this method, please use one of the Add(Type,String,Integer) overloads instead..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.ConditionCtorInvokeFailedMessage">
<summary>
  Looks up a localized string similar to Unable to create an instance of condition with the type &apos;{0}&apos;. Ensure the condition has a parameterless constructor..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.ConditionTitleInUse">
<summary>
  Looks up a localized string similar to The title &apos;{0}&apos; is already in use by another condition..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.ConditionTypeUnrecognisedMessage">
<summary>
  Looks up a localized string similar to The implementation for condition with the type &apos;{0}&apos; is missing. Are you missing a plugin?.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.InvalidConditionType">
<summary>
  Looks up a localized string similar to The type &apos;{0}&apos; is not a valid Component Task Condition type..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.InvalidPropertyValueTypeMessage">
<summary>
  Looks up a localized string similar to The property value &apos;{0}&apos; is not valid for the property &apos;{1}&apos;. Passing the condition by default..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.ReleaseConditionFailed">
<summary>
  Looks up a localized string similar to The condition did not pass, the associated task will not be released..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.ReleaseConditionInvalidBaseClass">
<summary>
  Looks up a localized string similar to The type &apos;{0}&apos; is not a valid Condition Type. Release Conditions are required to inherit the ComponentTaskReleaseCondition class..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ComponentTaskResources.ReleaseConditionPassed">
<summary>
  Looks up a localized string similar to The condition passed successfully..
</summary>
</member>
<member name="T:DriveWorks.My.Resources.RemoteGroupResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.RemoteGroupResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.RemoteGroupResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.RemoteGroupResources.ExProblemDeletingSharedGroup">
<summary>
  Looks up a localized string similar to There was a problem deleting the Group database from the SQL server. {0}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.RemoteGroupResources.FailedToCreateTempFile">
<summary>
  Looks up a localized string similar to Failed to create temporary file: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.RemoteGroupResources.ServerVersionNotSupportedDescription">
<summary>
  Looks up a localized string similar to The Pro server version is not supported, this is most likely because the Pro server needs upgrading to the latest version..
</summary>
</member>
<member name="T:DriveWorks.My.Resources.ChildSpecificationListResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ChildSpecificationListResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.ChildSpecificationListResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:DriveWorks.My.Resources.LocalizedResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.CommonDataServiceBase_CreateTeam_ATeamWithTheIdentifierAlreadyExists">
<summary>
  Looks up a localized string similar to A team with the identifier &apos;{0}&apos; already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.CommonDataServiceBase_CreateTeam_ATeamWithTheNameAlreadyExists">
<summary>
  Looks up a localized string similar to A team with the name &apos;{0}&apos; already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ConnectorTimerIntervalCanNotBeEqualLowerThanZero">
<summary>
  Looks up a localized string similar to Timer interval can not be equal to or lower than 0..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ConstantNameInUseErrorMessage">
<summary>
  Looks up a localized string similar to A constant could not be created with the name &apos;{0}&apos; as this already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.DefaultDocumentRuleId">
<summary>
  Looks up a localized string similar to Rule{0}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.DocumentRuleNameInUseErrorMessage">
<summary>
  Looks up a localized string similar to A document rule could not be created with the name &apos;{0}&apos; as this already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExAbortingMacroExecutionTooDeep">
<summary>
  Looks up a localized string similar to Aborting further macro execution as too many macros have been called recursively..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExAlreadyGroupCreatedWithName">
<summary>
  Looks up a localized string similar to There is already a Group with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExCanNotConnectGroupInUseAnotherServer">
<summary>
  Looks up a localized string similar to Can not connect to Group &apos;{0}&apos; as it is in use on another DriveWorks Pro Server..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExConnectorDataTypeNotInheritGroupConnectorInformation">
<summary>
  Looks up a localized string similar to Specified connectorDataType does not inherit from GroupConnectorInformation..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExConnectorNameAlreadyInUse">
<summary>
  Looks up a localized string similar to The connector name &apos;{0}&apos; is already in use..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExCouldNotFindGroupDataTableWithId">
<summary>
  Looks up a localized string similar to Could not find a group data table with the id: &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExCouldNotRemapComponentPathAlreadyUsed">
<summary>
  Looks up a localized string similar to Could not remap &apos;{0}&apos; to &apos;{1}&apos;, there is already a captured component at that path..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExDecisionExpressionFormatEx">
<summary>
  Looks up a localized string similar to Rule Formatting error for form decision expression..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExDocumentPathEmpty">
<summary>
  Looks up a localized string similar to Document path is empty..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExDocumentPathTooLong">
<summary>
  Looks up a localized string similar to Document path is too long. The maximum length is {0} characters..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExEmbeddedChildSpecsNotSupported">
<summary>
  Looks up a localized string similar to Embedded child specifications are not supported by this project type..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExGroupConnectionStrNoGroupNameSpecified">
<summary>
  Looks up a localized string similar to No group name specified.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExGroupConnectionStrNoServerOrFilePathSpecified">
<summary>
  Looks up a localized string similar to No server or file path specified.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExGroupConnectionStrProviderCanNotBeNull">
<summary>
  Looks up a localized string similar to Provider can not be null.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExGroupConnectorNameAlreadyInUse">
<summary>
  Looks up a localized string similar to The group connector name &apos;{0}&apos; is already in use..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExGroupRequiresUpdateForConnection">
<summary>
  Looks up a localized string similar to The group &apos;{0}&apos; must be upgraded using the Pro Server Configuration Tool before it can be opened in this version of DriveWorks..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExInvalidGroupConnectorName">
<summary>
  Looks up a localized string similar to Invalid group connector name..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExInvalidGroupDataConnectorName">
<summary>
  Looks up a localized string similar to Invalid group data connector name..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExMaxTimeReachMacroAborting">
<summary>
  Looks up a localized string similar to Aborting further macro execution as max amount of time has passed ({0} secs)..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExNoAuthToResetSpecPool">
<summary>
  Looks up a localized string similar to You do not have permission to reset the current specification Id pool..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExProjectNotInSpecification">
<summary>
  Looks up a localized string similar to The project is currently not in a specification..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExTooltipsNotSupported">
<summary>
  Looks up a localized string similar to This control does not support tooltips..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExUnableReleaseGroupHasActiveSessions">
<summary>
  Looks up a localized string similar to Unable to release the group as one or more users are still connected..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExUnableToFindGroupWithName">
<summary>
  Looks up a localized string similar to Unable to find a group with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExUnableToResetSpecIdPoolSpecsExist">
<summary>
  Looks up a localized string similar to Unable to reset the specification Id pool, as there are currently specifications in the Group..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ExUserAbortingMacro">
<summary>
  Looks up a localized string similar to Aborting further macro execution by user request..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncBooleanDescription">
<summary>
  Looks up a localized string similar to Converts a value into a boolean representation. Changes from text values using US English spelling..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncDataTimeLocalDescription">
<summary>
  Looks up a localized string similar to Converts a value into a date time representation. Changes from text values using standard current culture formatting..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncDateAndTimeCategory">
<summary>
  Looks up a localized string similar to Date and Time.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncErrorSpecPathNotSet">
<summary>
  Looks up a localized string similar to #IO! The default specification folder has not been set..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncHelperCategory">
<summary>
  Looks up a localized string similar to Helper.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncIfEmptyDescription">
<summary>
  Looks up a localized string similar to Checks to see if its first argument is an empty value. If the value isn&apos;t an empty value it is returned as-is, otherwise, a secondary value is returned..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncIfErrorDescription">
<summary>
  Looks up a localized string similar to Checks to see if its first argument is an error. If the value isn&apos;t an error it is returned as-is, otherwise, a secondary value is returned..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncIfNonBooleanDescription">
<summary>
  Looks up a localized string similar to Checks to see if its first argument is a boolean. If the value is a boolean it is returned as-is, otherwise, a secondary value is returned..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncIfNonNumberDescription">
<summary>
  Looks up a localized string similar to Checks to see if its first argument is a number. If the value is a number it is returned as-is, otherwise, a secondary value is returned..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncIfTheIFFunctionReturnsOneValueIfAConditionYouSpecifyEvaluates">
<summary>
  Looks up a localized string similar to The IF function returns one value if a condition you specify evaluates to TRUE, and another value if that condition evaluates to FALSE..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncIsErrorDescription">
<summary>
  Looks up a localized string similar to Returns TRUE if any errors are found in the specified value..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncLogicalCategory">
<summary>
  Looks up a localized string similar to Logical.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncMyNameDescription">
<summary>
  Looks up a localized string similar to Gets the name assigned to the owner of the rule, this works for rules attached to items that have names such as variables and some form control properties..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamAllowStringsDescription">
<summary>
  Looks up a localized string similar to TRUE if string values should be counted as numbers, otherwise FALSE..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamAllowStringsName">
<summary>
  Looks up a localized string similar to Allow Strings.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamCondition">
<summary>
  Looks up a localized string similar to Condition.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamDateTimeDescription">
<summary>
  Looks up a localized string similar to Converts a value into a date time representation. Changes from text values using standard US English formatting..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamDescAValueThatReturnsEitherTRUEOrFALSE">
<summary>
  Looks up a localized string similar to A value that returns either TRUE or FALSE..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamDescValueIfConditionIsFalseIsARuleOrValueWhichIsReturned">
<summary>
  Looks up a localized string similar to A rule or value which is returned if the condition, when calculated, returns FALSE..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamDescValueIfConditionIsTrueIsARuleOrValueWhichIsReturned">
<summary>
  Looks up a localized string similar to A rule or value which is returned if the condition, when calculated, returns TRUE..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamErrorReplacementValueDescription">
<summary>
  Looks up a localized string similar to The value to use if the primary value is an error..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamErrorReplacementValueName">
<summary>
  Looks up a localized string similar to Error Replacement Value.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamIsErrorValueDescription">
<summary>
  Looks up a localized string similar to The value to check for an error..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamPrimaryValueName">
<summary>
  Looks up a localized string similar to Primary Value.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamText">
<summary>
  Looks up a localized string similar to Text.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamTypeBoolean">
<summary>
  Looks up a localized string similar to Boolean.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamTypeObject">
<summary>
  Looks up a localized string similar to Object.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamTypeReplacementValueDescription">
<summary>
  Looks up a localized string similar to The value which will be returned if the type of the first value fails the type test..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamTypeReplacementValueName">
<summary>
  Looks up a localized string similar to Alternative Value.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamTypeValueDescription">
<summary>
  Looks up a localized string similar to The value whose type should be tested..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamValueIfConditionIsFalse">
<summary>
  Looks up a localized string similar to Value If Condition Is False.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamValueIfConditionIsTrue">
<summary>
  Looks up a localized string similar to Value If Condition Is True.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamValueName">
<summary>
  Looks up a localized string similar to Value.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamValueToBooleanDescription">
<summary>
  Looks up a localized string similar to The value to convert to a boolean..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamValueToDateTimeDescription">
<summary>
  Looks up a localized string similar to The value to convert to a date time.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamValueToNumberDescription">
<summary>
  Looks up a localized string similar to The value to convert to a number..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncParamValueToString">
<summary>
  Looks up a localized string similar to The value to convert to string..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncStringDescription">
<summary>
  Looks up a localized string similar to Converts a value into a text representation. Changes to text values using standard US English formatting..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncStringLocalDescription">
<summary>
  Looks up a localized string similar to Converts a value into a text representation. Changes to text values using standard current culture formatting and spelling..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncTextCategory">
<summary>
  Looks up a localized string similar to Text.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncValidationCategory">
<summary>
  Looks up a localized string similar to Validation.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncValueDescription">
<summary>
  Looks up a localized string similar to Converts a value into a number representation. Changes from text values using standard US English formatting..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.FuncValueLocalDescription">
<summary>
  Looks up a localized string similar to Converts a value into a number representation. Changes from text values using standard current culture formatting..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_ComponentRelationsToSpecificationsBeCopiedOver">
<summary>
  Looks up a localized string similar to Component relations to specifications will be copied over..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_CopyingGenerationTaskInformation">
<summary>
  Looks up a localized string similar to Copying generation task information..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_CopyingReferenceDataForNewlyCopiedComponents">
<summary>
  Looks up a localized string similar to Copying reference data for {0} newly copied components..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_CopyingReleaseInformationFor">
<summary>
  Looks up a localized string similar to Copying release information for &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_MappingToSpecificationWithTheId">
<summary>
  Looks up a localized string similar to Mapping to specification with the Id &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_ReadingCurrentReleaseDataInTargetGroup">
<summary>
  Looks up a localized string similar to Reading current release data in target group..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_ReadingSourceGroupReleaseData">
<summary>
  Looks up a localized string similar to Reading source group release data..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_Remapping">
<summary>
  Looks up a localized string similar to Remapping &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_RemappingTheMasterPath">
<summary>
  Looks up a localized string similar to Remapping the master path of &apos;{0}&apos; from &apos;{1}&apos; to &apos;{2}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_ThereWasAProblemRemappingTheSourceMasterCouldNotBeFound">
<summary>
  Looks up a localized string similar to There was a problem remapping. The source master could not be found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupReleasedComponents_ImportReleaseData_ThereWasProblemRemappingSourceComponentCouldNotBeFound">
<summary>
  Looks up a localized string similar to There was a problem remapping. The source component could not be found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.GroupSpecifications_ImportSpecifications_RegisteringSpecification">
<summary>
  Looks up a localized string similar to Registering specification &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.MacroNameExistsMessage">
<summary>
  Looks up a localized string similar to A macro with the name &apos;{0}&apos; already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventCalculatingDocumentRules">
<summary>
  Looks up a localized string similar to Calculating Document Rules for &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventChildSpecificationInformation">
<summary>
  Looks up a localized string similar to Child specification information for &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventContinuingFromCheckingFileExistence">
<summary>
  Looks up a localized string similar to Continuing from Checking File Existence.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventContinuingFromCheckingFolderExistence">
<summary>
  Looks up a localized string similar to Continuing from Checking Folder Existence.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventEvaluatingProjectRules">
<summary>
  Looks up a localized string similar to Evaluating Project Rules.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventExecutingMacro">
<summary>
  Looks up a localized string similar to Executing Macro &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventInitializingProjectExtender">
<summary>
  Looks up a localized string similar to Initializing Project Extender.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventInitializingRules">
<summary>
  Looks up a localized string similar to Initializing Rules.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingCalculationTables">
<summary>
  Looks up a localized string similar to Loading Calculation Tables.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingChildSpecificationTables">
<summary>
  Looks up a localized string similar to Loading Child Specification Tables.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingConstants">
<summary>
  Looks up a localized string similar to Loading Constants.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingControls">
<summary>
  Looks up a localized string similar to Loading Controls.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingDocuments">
<summary>
  Looks up a localized string similar to Loading Documents.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingFormNavigation">
<summary>
  Looks up a localized string similar to Loading Form Navigation.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingFormsInformation">
<summary>
  Looks up a localized string similar to Loading Forms Information.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingMessages">
<summary>
  Looks up a localized string similar to Loading Messages.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingProject">
<summary>
  Looks up a localized string similar to Loading Project.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingProjectTables">
<summary>
  Looks up a localized string similar to Loading Project Tables.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingSharedProjectExtenders">
<summary>
  Looks up a localized string similar to Loading Shared Project Extenders.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingSpecialVariables">
<summary>
  Looks up a localized string similar to Loading Special Variables.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingSpecificationProperties">
<summary>
  Looks up a localized string similar to Loading Specification Properties.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventLoadingVariables">
<summary>
  Looks up a localized string similar to Loading Variables.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventProjectStateLoadProjectExtender">
<summary>
  Looks up a localized string similar to Loading Project Extender.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventSettingControlValue">
<summary>
  Looks up a localized string similar to Setting Control Value &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventSynchronizingGroupTable">
<summary>
  Looks up a localized string similar to Synchronizing Group Table &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProfileEventUpdatingFormContainerWidth">
<summary>
  Looks up a localized string similar to Updating Form Container Width.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProjectComponentProfileProcessCalculateRules">
<summary>
  Looks up a localized string similar to Evaluating rules for release process.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.ProjectInUseExceptionMessage">
<summary>
  Looks up a localized string similar to You cannot access this project because it is locked.

This may be because it is in use elsewhere or because DriveWorks closed unexpectedly.

If the project is not being used by another user, the lock file &apos;{0}&apos; can be removed by the administrator of your DriveWorks project.

The lock file is located here:
{1}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RpLongRunningtMacroAborted">
<summary>
  Looks up a localized string similar to Macro has been running for too long and will be aborted.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptClassChildSpecificationContinuousSynchronization">
<summary>
  Looks up a localized string similar to Child Specification Continuous Synchronization.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptErrInfiniteRecursiveLoopDrivingIntoChildConstant">
<summary>
  Looks up a localized string similar to An infinite recursive loop has been detected while driving a value continuously into constant &apos;{0}&apos; in specification &apos;{1}&apos; from its parent specification &apos;{2}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptErrInfiniteRecursiveLoopDrivingIntoChildConstantDetail">
<summary>
  Looks up a localized string similar to The constant will not be set in order to prevent a never ending loop..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptGenericMacroClassType">
<summary>
  Looks up a localized string similar to Macro.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptImportSpecComplete">
<summary>
  Looks up a localized string similar to Finished importing specifications, the next specification Id is {0}..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptImportSpecCopyTasks">
<summary>
  Looks up a localized string similar to Copying specification tasks..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptImportSpecRegRpt">
<summary>
  Looks up a localized string similar to Registering reports..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptLongRunningMacroAbortedDetail">
<summary>
  Looks up a localized string similar to This could be because there is an infinite loop in the calls to macros or that some tasks are taking a very long time to complete..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptMacroTooManyRecurse">
<summary>
  Looks up a localized string similar to Macro resulted in too many calls to child macros or tasks..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptMacroTooManyRecurseDetail">
<summary>
  Looks up a localized string similar to This could be caused by circular calls to macros..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.RptStringCannotConvertToTableArray">
<summary>
  Looks up a localized string similar to Specified string is not a table array..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.UsrMsgConfirmContinueMacroExecution">
<summary>
  Looks up a localized string similar to The current macro has been running for {0} seconds, would you like to continue running this macro?.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.UsrMsgSpecificationMacroTitle">
<summary>
  Looks up a localized string similar to Specification Macro.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.LocalizedResources.VariableNameInUseErrorMessage">
<summary>
  Looks up a localized string similar to A variable could not be created with the name &apos;{0}&apos; as this already exists..
</summary>
</member>
<member name="T:DriveWorks.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.DetermineGroupVersion">
<summary>
  Looks up a localized string similar to IF OBJECT_ID(&apos;{0}.dbo.GroupSettings&apos;) IS NOT NULL
	IF OBJECT_ID(&apos;{0}.dbo.CapturedComponents&apos;) IS NOT NULL
		SELECT 7
	ELSE
		SELECT -1
ELSE 
	IF OBJECT_ID(&apos;{0}.dbo.tab_PartParams&apos;) IS NOT NULL
		IF OBJECT_ID(&apos;{0}.dbo.CloneList&apos;) IS NOT NULL
			SELECT 6
		ELSE
			SELECT 5
	ELSE
		SELECT -1.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.DisplayNameNameRule">
<summary>
  Looks up a localized string similar to Component Name.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.DisplayNameParamRule">
<summary>
  Looks up a localized string similar to Parameter.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.DisplayNamePathRule">
<summary>
  Looks up a localized string similar to Component Path.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.DisplayNameTagsRule">
<summary>
  Looks up a localized string similar to Component Tag.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExAlreadyInitialized">
<summary>
  Looks up a localized string similar to An attempt was made to initialize an object which has already been initialized..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExArgNoProvider">
<summary>
  Looks up a localized string similar to No provider was specified..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExArgXElementHasParent">
<summary>
  Looks up a localized string similar to The specified XElement has a parent which is not allowed..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExCalcTableCannotRemoveCommonRule">
<summary>
  Looks up a localized string similar to Cannot remove a common rule.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExCalcTableColumnWithNameAlreadyExists">
<summary>
  Looks up a localized string similar to A column with the name &apos;{0}&apos; already exists.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExCalcTableCouldNotFindTableWithName">
<summary>
  Looks up a localized string similar to Could not find the table with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExCalcTableCouldNotFindTheColumnWithTheName">
<summary>
  Looks up a localized string similar to Could not find the column with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExCalcTableMultipleRulesInCalcTableColumnWithSameIndex">
<summary>
  Looks up a localized string similar to There are multiple rules in the calculation table column &apos;{0}&apos; with the same row index.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExCalcTableSpecifiedColumnNameIsInvalid">
<summary>
  Looks up a localized string similar to The specified column name is invalid..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExCalcTableSpecifiedTableNameAlreadyInUse">
<summary>
  Looks up a localized string similar to The specified name is already in use..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExCalcTableSpecifiedTableNameIsNotValid">
<summary>
  Looks up a localized string similar to The specified name is not valid..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExCalcTableTableWithNameAlreadyExists">
<summary>
  Looks up a localized string similar to A table with that name already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExComponentTaskNameInUse">
<summary>
  Looks up a localized string similar to A component task with the name &apos;{0}&apos; already exists.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExComponentTaskNotFoundMessage">
<summary>
  Looks up a localized string similar to Component Task with type &apos;{0}&apos; was not found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExComponentTypeInvalidException">
<summary>
  Looks up a localized string similar to The ComponentFactoryAttribute was either omitted or invalid..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExComponentTypeNotSupported">
<summary>
  Looks up a localized string similar to The component type &apos;{0}&apos; is not supported..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExConditionTypeNotFound">
<summary>
  Looks up a localized string similar to One or more conditions could not be loaded because the implementation for type &apos;{0}&apos; could not be found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExConstantsDataCorrupt">
<summary>
  Looks up a localized string similar to The constants for the project could not be loaded as the underlying data was not in the correct format..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExControlExists">
<summary>
  Looks up a localized string similar to A control with the name &apos;{0}&apos; already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDecisionNextStepChange">
<summary>
  Looks up a localized string similar to The NextStep property of a decision navigation step cannot be modified directly..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDesignMasterFileExists">
<summary>
  Looks up a localized string similar to The design master file could not be created as it already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDesignMasterFormat">
<summary>
  Looks up a localized string similar to The project&apos;s rules cannot be loaded because they are in a format that is not supported by the current version of DriveWorks, this may be because the project is an Excel Project..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDesignMasterNotFound">
<summary>
  Looks up a localized string similar to The design master file could not be found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDesignMasterReadOnly">
<summary>
  Looks up a localized string similar to The project cannot be opened because either it is already open, or it has been marked as read-only..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDialogClosingOptionNotSupported">
<summary>
  Looks up a localized string similar to Dialog closing option is not supported.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDirOrFileNameInvalid">
<summary>
  Looks up a localized string similar to The file or directory name &apos;{0}&apos; is invalid..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDisplayFileDataCorrupt">
<summary>
  Looks up a localized string similar to The display files for the project could not be loaded as the underlying data was not in the correct format..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDocumentDataCorrupt">
<summary>
  Looks up a localized string similar to The document &apos;{0}&apos; could not be loaded as the document provider has indicated the document data is corrupt..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDuplicateFunctionsInExtenders">
<summary>
  Looks up a localized string similar to The project extender &apos;{0}&apos; failed to load because it tried to register a function &apos;{1}&apos; that has already registered by another extension..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExDuplicateSpecialVarFound">
<summary>
  Looks up a localized string similar to The project cannot be opened because a duplicate special variable &apos;{0}&apos; was found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExEmbeddedSpecificationNotFound">
<summary>
  Looks up a localized string similar to Unable to find the specification with the Id {0} in embedded specifications..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExEnumerationInterrupted">
<summary>
  Looks up a localized string similar to The operation was interrupted, possibly due to a network disruption. Please try again..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExFailedMacro">
<summary>
  Looks up a localized string similar to Error while attempting to run macro..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExFinishNextStepChange">
<summary>
  Looks up a localized string similar to The NextStep property of the finish navigation step cannot be changed..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExFolderNotFound">
<summary>
  Looks up a localized string similar to The required folder &apos;{0}&apos; does not exist..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExFormDataCorrupt">
<summary>
  Looks up a localized string similar to The forms for the project could not be loaded as the underlying data was not in the correct format..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExFormDataCorrupt_MismatchedControls">
<summary>
  Looks up a localized string similar to The form data for the project is corrupt, the following controls exist in either the input sheet or the form file, but not both: {0}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExFormDataCorruptRule">
<summary>
  Looks up a localized string similar to The forms for the project could not be loaded as there is an invalid rule for &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupClosed">
<summary>
  Looks up a localized string similar to The operation is not valid because the group has been closed..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupConnection">
<summary>
  Looks up a localized string similar to The group could not be opened, check that it exists and you have permissions to access it..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupConnectionEndpointNotFound">
<summary>
  Looks up a localized string similar to Unable to connect to Pro Server {0} on &apos;{1}&apos;. 

Please ensure that:
* You are connected to the network.
* Pro Server is running.
* The correct ports are open. 
* All DriveWorks modules are on the same version.

See the help file for more information. .
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupContainsSpecsRemoveAllSpecs">
<summary>
  Looks up a localized string similar to Target group already contains specifications. Remove all specifications before beginning import..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupEdition">
<summary>
  Looks up a localized string similar to The group cannot be opened because it is from a different edition of DriveWorks..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupException">
<summary>
  Looks up a localized string similar to A connection to the specified group could not be established..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupExists">
<summary>
  Looks up a localized string similar to A file with the specified path already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupFileNotFound">
<summary>
  Looks up a localized string similar to The group could not be opened as the file cannot be found, check that it exists and you have permissions to access it..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupInvalidChars">
<summary>
  Looks up a localized string similar to The group could not be opened. Check the path to the group is correct and does not contain any of the following characters \ / : * ? &quot; &lt; &gt; |.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupRequiresUpgrade">
<summary>
  Looks up a localized string similar to This group requires an upgrade.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupSharingViolation">
<summary>
  Looks up a localized string similar to The group cannot be opened as it is already open by another user on the network. Engineer groups can only be accessed by a single user over a network..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupUpgradeAborted">
<summary>
  Looks up a localized string similar to The group cannot be opened because it was created in an earlier version of DriveWorks and the upgrade has been cancelled by the user..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExGroupVersionNewer">
<summary>
  Looks up a localized string similar to The group cannot be opened because it was created in a later version of DriveWorks..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExImportFail_DuplicateId">
<summary>
  Looks up a localized string similar to The import could not proceed because one or more source components have the same internal identifiers as components in the second target group, but don&apos;t have matching file paths, you may need to re-reference the files in the source or target groups first..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExImportFail_DuplicatePath">
<summary>
  Looks up a localized string similar to The import could not proceed because one or more components are duplicated in the target group..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExImportFail_NothingToImport">
<summary>
  Looks up a localized string similar to The import could not proceed as no components have been added to the import collection..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExIncompleteNavigation">
<summary>
  Looks up a localized string similar to The specified project cannot be specified at this time because its navigation is incomplete..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInitialStateInvalid">
<summary>
  Looks up a localized string similar to The specification could not be opened because there is no initial state..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidCapturedComponentId">
<summary>
  Looks up a localized string similar to An unregistered captured-component identifier was specified..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidCharactersInPath">
<summary>
  Looks up a localized string similar to Path contains an invalid character..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidDecisionStepNextMacroRule">
<summary>
  Looks up a localized string similar to Invalid next macro rule for decision step &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidDecisionStepNextStepRule">
<summary>
  Looks up a localized string similar to Invalid Next step rule for decision step &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidDecisionStepPreviousMacroRule">
<summary>
  Looks up a localized string similar to Invalid previous macro rule for decision step &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_CantCancelSpecInTransition">
<summary>
  Looks up a localized string similar to A specification cannot be cancelled from a transition task..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_CantDeleteInTransition">
<summary>
  Looks up a localized string similar to Can&apos;t delete a specification in a transition..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_CantGenerateIfNotSpecification">
<summary>
  Looks up a localized string similar to The Generate method cannot be called on a project unless it has been opened as part of a specification..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_CantInvokeNavBeforeNavReady">
<summary>
  Looks up a localized string similar to Can&apos;t navigate until the navigation is ready. If you are trying to navigate using the SkipToFormTask you may need to set the Defer property to true so that the task is run when the specification is ready..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_CantInvokeOpInTrans">
<summary>
  Looks up a localized string similar to Can&apos;t invoke an operation from another transition or operation..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_CantInvokeTransInTrans">
<summary>
  Looks up a localized string similar to Can&apos;t invoke a transition from another transition or operation..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_CantRegisterDocIfNotSpecification">
<summary>
  Looks up a localized string similar to The document cannot be registered because the project has not been opened as part of a specification..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_CloseDialogForItemList">
<summary>
  Looks up a localized string similar to Can&apos;t close a dialog opened by an item list..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_DialogFormActive">
<summary>
  Looks up a localized string similar to Cannot navigate while a dialog form is active..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_ExcelSnapshot">
<summary>
  Looks up a localized string similar to Can&apos;t create a snapshot of an Excel Project.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_NoActiveDialog">
<summary>
  Looks up a localized string similar to No dialog is active..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_PreviewWhenNotInASpec">
<summary>
  Looks up a localized string similar to Preview information can only be calculated in a specification..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_RequiresSpecification">
<summary>
  Looks up a localized string similar to This operation cannot be performed without an active specification..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_RunningSpecification_Archive">
<summary>
  Looks up a localized string similar to The archived status of a running specification cannot be modified using this API, instead, the equivalent API on a Specification Context should be used..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_RunStateToRunState">
<summary>
  Looks up a localized string similar to Can&apos;t transition from one running state to another running state..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidOp_VarCatNotEmpty">
<summary>
  Looks up a localized string similar to An attempt was made to delete a variable category which contains one or more children..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidPluginAssembly_FrameworkAssy">
<summary>
  Looks up a localized string similar to The extension library could not be loaded because it is a framework assembly..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidPluginAssembly_NoAttribute">
<summary>
  Looks up a localized string similar to The assembly could not be loaded as it is not marked as a extension library..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidPluginAssembly_NotFrameworkAssy">
<summary>
  Looks up a localized string similar to The extension library could not be loaded because it is not a framework assembly..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidPluginAssembly_UnexpectedName">
<summary>
  Looks up a localized string similar to The extension library could not be loaded as its invariant name does not match its registered information..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidRule">
<summary>
  Looks up a localized string similar to The rule contains one or more errors and could not be applied..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExInvalidSpecificationFlowFormat">
<summary>
  Looks up a localized string similar to Specification flow formating is invalid. Could not load specification flow..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExItemDeleted">
<summary>
  Looks up a localized string similar to The specified item has been deleted and cannot be modified..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExItemExists">
<summary>
  Looks up a localized string similar to The item already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExItemNotFound">
<summary>
  Looks up a localized string similar to The item was not found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExLocked">
<summary>
  Looks up a localized string similar to The object cannot be modified because it is locked..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExMessageDataCorrupt">
<summary>
  Looks up a localized string similar to The messages for the project could not be loaded as the underlying data was not in the correct format..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExMessageDataCorruptRule">
<summary>
  Looks up a localized string similar to The messages for the project could not be loaded as there is an invalid rule for message {0}..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExMissingApplicationMessage">
<summary>
  Looks up a localized string similar to The required application &apos;{0}&apos; is either missing or corrupt..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExMissingAttribute">
<summary>
  Looks up a localized string similar to The required attribute &apos;{0}&apos; is missing from the node &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExMissingElements">
<summary>
  Looks up a localized string similar to One or more required elements are missing..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExMissingPrerequisiteException">
<summary>
  Looks up a localized string similar to A required pre-requisite is either not installed or is unavailable: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExMissingSQLCEPrerequisiteException">
<summary>
  Looks up a localized string similar to SQL CE is either not installed or is unavailable: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExNavigationDataCorrupt">
<summary>
  Looks up a localized string similar to The navigation information for the project could not be loaded as the underlying data was not in the correct format..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExNavigationDataCorruptRule">
<summary>
  Looks up a localized string similar to The navigation information for the project could not be loaded as the underlying data was not in the correct format. {0}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExNoInitialState">
<summary>
  Looks up a localized string similar to A specification cannot be created because the project&apos;s specification flow does not have an initial state set..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExNotInitialized">
<summary>
  Looks up a localized string similar to The specified operation is not available at this time as the object has not been initialized..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExNotResolved">
<summary>
  Looks up a localized string similar to The capture information has not been resolved..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExNotSupp_MacroWithDeferredTask">
<summary>
  Looks up a localized string similar to The task with name &apos;{0}&apos; cannot be used in a macro..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExNotSupported_ProjectType">
<summary>
  Looks up a localized string similar to The specified control is not valid for the current type of project..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProblemRunningMacro">
<summary>
  Looks up a localized string similar to There was a problem while running the macro &apos;{0}&apos;. {1}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProjectCreation">
<summary>
  Looks up a localized string similar to The project could not be created..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProjectExtenderUdfParamTypeInvalid">
<summary>
  Looks up a localized string similar to The type of parameter &apos;{0}&apos; on the specified method is not supported. It must be Object, Double, Boolean, String, DateTime, or IArrayValue..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProjectExtenderUdfReturnTypeInvalid">
<summary>
  Looks up a localized string similar to The return type of the specified method is not supported. It must be Object, Double, Boolean, String, or DateTime.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProjectFileExists">
<summary>
  Looks up a localized string similar to One or more files for the new project could not be created because they already exist..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProjectInUse">
<summary>
  Looks up a localized string similar to The project is currently locked by another application or user..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProjectLoad">
<summary>
  Looks up a localized string similar to The project could not be loaded..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProjectNotLoaded">
<summary>
  Looks up a localized string similar to The operation is not valid because the project has not been loaded..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProjectSave">
<summary>
  Looks up a localized string similar to The project could not be saved. {0}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExProjectVersionNewer">
<summary>
  Looks up a localized string similar to The project cannot be opened because it was created in a later version of DriveWorks..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExPropertyInvalid">
<summary>
  Looks up a localized string similar to The property &apos;{0}&apos; could not be found, or was invalid, on a task/condition of type &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExReportNotFound">
<summary>
  Looks up a localized string similar to Report could not be found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExRuleCouldNotBeApplied">
<summary>
  Looks up a localized string similar to The rule could not be applied because it is invalid..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationExists">
<summary>
  Looks up a localized string similar to A specification with the given name already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationExists_WithName">
<summary>
  Looks up a localized string similar to A specification with the given name (&apos;{0}&apos;) already exists..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationNameInvalidRead">
<summary>
  Looks up a localized string similar to The specification name has invalid characters, starts or ends with whitespace, or is too long..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationNameInvalidSet">
<summary>
  Looks up a localized string similar to The specification information can not be updated because the specification name has invalid characters, starts or ends with whitespace, or is too long..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationNameNotSet">
<summary>
  Looks up a localized string similar to Please set a specification name before creating a specification..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationNameRuleInvalidRead">
<summary>
  Looks up a localized string similar to The specification&apos;s name rule is invalid..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationNameRuleNotSet">
<summary>
  Looks up a localized string similar to Please set a rule for the specification&apos;s name before creating a specification..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationNotFound">
<summary>
  Looks up a localized string similar to Specification could not be found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationNotOpen">
<summary>
  Looks up a localized string similar to The specification is not open..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationNotRunning">
<summary>
  Looks up a localized string similar to The specification is not running..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationOpen">
<summary>
  Looks up a localized string similar to The specification is already open..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationPoolExhausted">
<summary>
  Looks up a localized string similar to A specification cannot be created because there are no specification identifiers left in the pool..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExSpecificationRunning">
<summary>
  Looks up a localized string similar to The specification is already running..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExStateNotFound">
<summary>
  Looks up a localized string similar to The required state &apos;{0}&apos; was not found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExTableDataCorrupt">
<summary>
  Looks up a localized string similar to The tables for the project could not be loaded as the underlying data was not in the correct format..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExTaskExec">
<summary>
  Looks up a localized string similar to A problem occurred running the task {0}. {1}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExTaskListNotEmpty">
<summary>
  Looks up a localized string similar to The task list contains one or more tasks which must be resolved before proceeding..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExTaskTypeNotFound">
<summary>
  Looks up a localized string similar to One or more tasks could not be loaded because the implementation for type &apos;{0}&apos; could not be found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExTeamIdComma">
<summary>
  Looks up a localized string similar to Team identifiers cannot contain the comma character..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExTestEmailMissingEmailAttachments">
<summary>
  Looks up a localized string similar to The following attachments could not be found: 
{0}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExUnauthorizedAccessToGroup">
<summary>
  Looks up a localized string similar to Unauthorized access to the group. Ensure your credentials are correct and that you have permission to the group..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExUnauthorizedAccessToServer">
<summary>
  Looks up a localized string similar to Unauthorized access to DriveWorks Pro Server. Please check your credentials and try again..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExUnauthorizedFileAccessToGroup">
<summary>
  Looks up a localized string similar to Unauthorized access to group. Ensure you have permissions to edit the group file..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExUnexpectedNode">
<summary>
  Looks up a localized string similar to The node &apos;{0}&apos; with namespace &apos;{1}&apos; did not match the expected node &apos;{2}&apos; with namespace &apos;{3}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExUnknownDataTableProvider">
<summary>
  Looks up a localized string similar to The data table &apos;{0}&apos; could not be loaded as no provider has been registered which supports the data table type..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExUnknownDocumentProvider">
<summary>
  Looks up a localized string similar to The document &apos;{0}&apos; could not be loaded as no provider has been registered which supports the document type..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExVariableDataCorrupt">
<summary>
  Looks up a localized string similar to The variables for the project could not be loaded as the underlying data was not in the correct format..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExVariableDataCorruptRule">
<summary>
  Looks up a localized string similar to The variables for the project could not be loaded as there was an invalid rule for variable &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExWrongInitialStateType">
<summary>
  Looks up a localized string similar to A specification cannot be created because the initial state specified in the project&apos;s specification flow is not a Running state..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExXlDisconnected">
<summary>
  Looks up a localized string similar to Microsoft® Office Excel has been disconnected..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExXlLocaleBug">
<summary>
  Looks up a localized string similar to Your system regional settings are set to a language for which you do not have an installed version of Microsoft® Office. An issue with Microsoft® Excel prevents this configuration from working..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ExXlVbaAccess">
<summary>
  Looks up a localized string similar to Your installation of Microsoft® Office will not allow DriveWorks to access Visual Basic projects in Microsoft® Office documents, please alter your security settings to allow programmatic access to Visual Basic projects..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.GroupDocumentGenerationSettingBoth">
<summary>
  Looks up a localized string similar to Both.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.GroupDocumentGenerationSettingFinish">
<summary>
  Looks up a localized string similar to Finish.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.GroupDocumentGenerationSettingRelease">
<summary>
  Looks up a localized string similar to Release.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.GroupUpgradeRequiredMessage">
<summary>
  Looks up a localized string similar to This group needs to be upgraded before it can be opened in DriveWorks {0}. This will prevent it from being opened in earlier versions of DriveWorks.

Would you like to upgrade the group now? .
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.GroupUpgradeRequiredTitle">
<summary>
  Looks up a localized string similar to Group Upgrade Required.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MissingMessage">
<summary>
  Looks up a localized string similar to A message code of &apos;{0}&apos; was used, but no corresponding message was found..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgAutopilotPreviewTimedOut">
<summary>
  Looks up a localized string similar to The preview took longer than the specified timeout of {0} second(s)..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgGeneratedComponentPreviewFailedUnknown">
<summary>
  Looks up a localized string similar to The already generated component could not be opened or a preview created from it..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgGeneratingDocumentClass">
<summary>
  Looks up a localized string similar to Generating Document.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgOnDemandPreviewNoMatchingAgentsFound">
<summary>
  Looks up a localized string similar to No agents were found that could process the preview..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgPreviewFailedNoPreviewAgentsAvailable">
<summary>
  Looks up a localized string similar to No preview agents are connected. Check that Autopilot is running with 3D Preview enabled..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgQueuedPreviewChildComponentFailed">
<summary>
  Looks up a localized string similar to Unable to generate a child component. Check the Autopilot logs for more information..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgQueuedPreviewComponentFailed">
<summary>
  Looks up a localized string similar to Unable to generate a component. Check the Autopilot logs for more information..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgQueuedPreviewGroupClosed">
<summary>
  Looks up a localized string similar to The group is being closed..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgQueuedPreviewLocalGroupNotSupported">
<summary>
  Looks up a localized string similar to Queued previews are not supported in individual groups..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgQueuedPreviewNoAgentsConnected">
<summary>
  Looks up a localized string similar to Unable to create the preview, there were no model generation agents connected..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.MsgQueuedPreviewNoAvailableAgents">
<summary>
  Looks up a localized string similar to No model generation agents were found that could process one or more of the components in this preview..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.ProfileEventSpecialVariableUpdated">
<summary>
  Looks up a localized string similar to &apos;{0}&apos; Updated.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.RptDocumentWasNotGeneratedByPreference">
<summary>
  Looks up a localized string similar to Document was not generated by preference..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.SoloGroupUpgradeRequiredMessage">
<summary>
  Looks up a localized string similar to This project needs to be upgraded before it can be opened in DriveWorks {0}. This will prevent it from being opened in earlier versions of DriveWorks.

Would you like to upgrade the project now?.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.TmVBOM">
<summary>
  Looks up a localized string similar to No access to Visual Basic object model..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.TsTraceUnknownServiceRequest">
<summary>
  Looks up a localized string similar to An unknown service &apos;{0}&apos; was requested..
</summary>
</member>
<member name="P:DriveWorks.My.Resources.Resources.TsVBOM">
<summary>
  Looks up a localized string similar to Visual Basic object model access exception..
</summary>
</member>
<member name="T:DriveWorks.My.Resources.SearchProcessLocalizedResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.AdditionalFoldersTitle">
<summary>
  Looks up a localized string similar to Additional Folders.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ChildProjectLocationPart">
<summary>
  Looks up a localized string similar to Child Project: &quot;{0}&quot;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ChildSpecificationListConstantRuleType">
<summary>
  Looks up a localized string similar to Child Specification List Constant Rule.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentConfigurationRuleDisplayName">
<summary>
  Looks up a localized string similar to Configuration.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentFileNameRuleDisplayName">
<summary>
  Looks up a localized string similar to File Name.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentLoopCountRuleDisplayName">
<summary>
  Looks up a localized string similar to Loop Count.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentRelativePathRuleDisplayName">
<summary>
  Looks up a localized string similar to Relative Path.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentSetsLocation">
<summary>
  Looks up a localized string similar to [Components].
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentSetType">
<summary>
  Looks up a localized string similar to Component Set.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentTagsRuleDisplayName">
<summary>
  Looks up a localized string similar to Tags.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentTaskAddressPostDrive">
<summary>
  Looks up a localized string similar to {0}\Post Drive\{1}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentTaskAddressPreDrive">
<summary>
  Looks up a localized string similar to {0}\Pre Drive\{1}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentTaskConditionType">
<summary>
  Looks up a localized string similar to Component Task Condition.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentTaskLocation">
<summary>
  Looks up a localized string similar to [Component Tasks]\{0}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ComponentTaskRule">
<summary>
  Looks up a localized string similar to Component Task Rule.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ConditionLocation">
<summary>
  Looks up a localized string similar to , Condition: &quot;{0}&quot;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ConditionsLocation">
<summary>
  Looks up a localized string similar to Conditions.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.ControlPropertyType">
<summary>
  Looks up a localized string similar to Control Property.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.DialogItemNameType">
<summary>
  Looks up a localized string similar to Dialog Item Name.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.DocumentsLocation">
<summary>
  Looks up a localized string similar to [Documents]\{0}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.DocumentType">
<summary>
  Looks up a localized string similar to Document.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.EventOnEnterLocation">
<summary>
  Looks up a localized string similar to Event: &quot;On Enter&quot;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.EventOnLeaveLocation">
<summary>
  Looks up a localized string similar to Event: &quot;On Leave&quot;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.FormAndControlLocationPart">
<summary>
  Looks up a localized string similar to [Navigation]\Form: &quot;{0}&quot;, Control: &quot;{1}&quot;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.MessagesLocation">
<summary>
  Looks up a localized string similar to [Messages].
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.MessageType">
<summary>
  Looks up a localized string similar to Message.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.NavigationDecisionRuleType">
<summary>
  Looks up a localized string similar to Decision Rule.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.NavigationLocation">
<summary>
  Looks up a localized string similar to [Navigation]\Decision Rules.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.OnEnterEventTasksLocation">
<summary>
  Looks up a localized string similar to \On Enter Event Tasks.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.OnLeaveEventTasksLocation">
<summary>
  Looks up a localized string similar to \On Leave Event Tasks.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.OperationLocation">
<summary>
  Looks up a localized string similar to Operation: &quot;{0}&quot;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.Properties">
<summary>
  Looks up a localized string similar to Properties.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionAll">
<summary>
  Looks up a localized string similar to All.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionCalculationTables">
<summary>
  Looks up a localized string similar to Calculation Tables.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionComponentSets">
<summary>
  Looks up a localized string similar to Component Sets.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionComponentTasks">
<summary>
  Looks up a localized string similar to Component Tasks.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionControls">
<summary>
  Looks up a localized string similar to Controls.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionDecisions">
<summary>
  Looks up a localized string similar to Decisions.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionDocuments">
<summary>
  Looks up a localized string similar to Documents.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionMessages">
<summary>
  Looks up a localized string similar to Messages.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionSpecificationFlow">
<summary>
  Looks up a localized string similar to Specification Flow.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionSpecificationMacros">
<summary>
  Looks up a localized string similar to Specification Macros.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionSpecificationProperties">
<summary>
  Looks up a localized string similar to Specification Properties.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionSpecificationSetting">
<summary>
  Looks up a localized string similar to Specification Setting.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.RuleSectionVariables">
<summary>
  Looks up a localized string similar to Variables.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.SpecificationFlowLocation">
<summary>
  Looks up a localized string similar to [Specification Flow]\.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.SpecificationFlowPropertyType">
<summary>
  Looks up a localized string similar to Specification Flow Property.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.SpecificationMacrosLocation">
<summary>
  Looks up a localized string similar to [Specification Macros]\{0}.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.SpecificationNameTitle">
<summary>
  Looks up a localized string similar to Specification Name.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.SpecificationPathTitle">
<summary>
  Looks up a localized string similar to Specification Path.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.SpecificationPropertiesLocation">
<summary>
  Looks up a localized string similar to [Specification Properties].
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.SpecificationPropertyType">
<summary>
  Looks up a localized string similar to Specification Property.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.SpecificationSettingsLocation">
<summary>
  Looks up a localized string similar to [Specification Settings].
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.SpecificationSettingType">
<summary>
  Looks up a localized string similar to Specification Setting.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.StateLocation">
<summary>
  Looks up a localized string similar to State: &quot;{0}&quot;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.TaskLocation">
<summary>
  Looks up a localized string similar to , Task: &quot;{0}&quot;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.TasksLocation">
<summary>
  Looks up a localized string similar to Tasks.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.TransitionLocation">
<summary>
  Looks up a localized string similar to Transition: &quot;{0}&quot;.
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.VariablesLocation">
<summary>
  Looks up a localized string similar to [Variables].
</summary>
</member>
<member name="P:DriveWorks.My.Resources.SearchProcessLocalizedResources.VariableType">
<summary>
  Looks up a localized string similar to Variable.
</summary>
</member>
<member name="T:DriveWorks.DataSourceLevel">
 <summary>
 Indicates at which level a data source is defined.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DataSourceLevel.System">
 <summary>
 The data source is defined at the system level.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DataSourceLevel.User">
 <summary>
 The data source is defined at the user level.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SqlUtility.GetConnection(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Creates a connection to the specified data source.
 </summary>
 <param name="serverName">The name of the server we want to connect to.</param>
 <param name="databaseName">The name of the database we want to connect to.</param>
 <param name="username">The username needed to connect to the server.</param>
 <param name="password">The password needed to connect to the server.</param>
 <param name="open">Whether to open the connection, once it has been created.</param>
 <returns>Returns the SqlConnection to the specified data source.</returns>
</member>
<member name="T:DriveWorks.Abstractions.BufferedRule">
 <summary>
 Provides an implementation of the <see cref="T:DriveWorks.Abstractions.IHasRule" /> implementation which acts as a buffer 
 between a rule, and a rule consumer.
 </summary>
</member>
<member name="M:DriveWorks.Abstractions.BufferedRule.#ctor(DriveWorks.Abstractions.IHasRule)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Abstractions.BufferedRule" /> type.
 </summary>
 <param name="sourceRule">The rule which will be buffered.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Abstractions.BufferedRule.Id">
 <summary>
 Gets the invariant identifier of the source rule if it implements <see cref="T:DriveWorks.Abstractions.IHasRuleId" />,
 otherwise null (Nothing in VB).
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.BufferedRule.Source">
 <summary>
 Gets the rule which will be buffered.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.BufferedRule.Comment">
 <summary>
 Gets/sets the rule comment.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.BufferedRule.Rule">
 <summary>
 Gets/sets the rule formula.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.BufferedRule.Type">
 <summary>
 Gets the rule type.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.BufferedRule.DisplayName">
 <summary>
 Gets the rule id.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.BufferedRule.IsWritable">
 <summary>
 Determines whether the rule is writable (always returns true).
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.BufferedRule.Context">
 <summary>
 The rules context for this rule.
 </summary>
</member>
<member name="M:DriveWorks.Abstractions.BufferedRule.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment at the same time.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.BufferedRule.Flush">
 <summary>
 Flushes the buffered values to the rule which is being buffered.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.BufferedRuleWithVersionHistory">
 <summary>
 Provides an implementation of the <see cref="T:DriveWorks.Abstractions.IHasRule" /> implementation which acts as a buffer 
 between a rule, and a rule consumer.
 </summary>
</member>
<member name="M:DriveWorks.Abstractions.BufferedRuleWithVersionHistory.#ctor(DriveWorks.Abstractions.IHasRule)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Abstractions.BufferedRuleWithVersionHistory" /> type.
 </summary>
 <param name="sourceRule">The rule which will be buffered.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.BufferedRuleWithVersionHistory.GetVersionHistory">
 <summary>
 Gets the version history for the rule.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Abstractions.IHasRuleName">
 <summary>
 Implemented by items which have names which can be referenced in rules.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Abstractions.IHasRuleName.Name">
 <summary>
 Gets the referenceable name.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.GenericRule">
 <summary>
 Provides a simple implementation of the <see cref="T:DriveWorks.Abstractions.IHasRule" /> implementation.
 </summary>
</member>
<member name="M:DriveWorks.Abstractions.GenericRule.#ctor(DriveWorks.Abstractions.IHasRule)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Abstractions.GenericRule" /> type.
 </summary>
 <param name="hasRule">The existing rule from which to copy values.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.GenericRule.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Abstractions.GenericRule" /> type.
 </summary>
 <param name="displayName">The display name of the rule.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.GenericRule.#ctor(System.String,System.String[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Abstractions.GenericRule" /> type.
 </summary>
 <param name="displayName">The display name of the rule.</param>
 <param name="type">The type of the rule.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.GenericRule.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Abstractions.GenericRule" /> type.
 </summary>
 <param name="displayName">The display name of the rule.</param>
 <param name="formula">The formula which defines the rule.</param>
 <param name="comment">The comment which describes the operation of the rule.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.GenericRule.#ctor(System.String,System.String[],System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Abstractions.GenericRule" /> type.
 </summary>
 <param name="displayName">The display name of the rule.</param>
 <param name="type">The type of the rule.</param>
 <param name="formula">The formula which defines the rule.</param>
 <param name="comment">The comment which describes the operation of the rule.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Abstractions.GenericRule.Comment">
 <summary>
 Gets/sets the rule comment.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.GenericRule.Rule">
 <summary>
 Gets/sets the rule formula.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.GenericRule.Type">
 <summary>
 Gets the rule type.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.GenericRule.Id">
 <summary>
 Gets the rule id.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.GenericRule.DisplayName">
 <summary>
 Gets the rule display name.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.GenericRule.IsWritable">
 <summary>
 Determines whether the rule is writable (always returns true).
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.GenericRule.Name">
 <summary>
 The reference name of this rule.
 </summary>
</member>
<member name="M:DriveWorks.Abstractions.GenericRule.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment at the same time.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.GenericRule.SetRuleName(System.String)">
 <summary>
 Sets the reference name for this rule.
 </summary>
 <param name="name">The name to apply to this rule.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Abstractions.ICustomizable">
 <summary>
 Represents an object which supports customization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.ICustomizable.Customize">
 <summary>
 Customizes the object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Abstractions.IHasRuleId">
 <summary>
 Implemented by rules which have invariant identifiers.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Abstractions.IHasRuleId.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.INotifyRuleChanged">
 <summary>
 Provides a contract for an object to notify when its rule changes.
 </summary>
</member>
<member name="E:DriveWorks.Abstractions.INotifyRuleChanged.RuleChanged">
 <summary>
 Raised when the rule for the object has changed.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.AliasRule">
 <summary>
 Provides a <see cref="T:DriveWorks.Abstractions.IHasRule" /> implementation which
 acts as an alias for another <see cref="T:DriveWorks.Abstractions.IHasRule" />.
 </summary>
</member>
<member name="M:DriveWorks.Abstractions.AliasRule.#ctor(DriveWorks.Abstractions.IHasRule,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Abstractions.AliasRule" /> class.
 </summary>
 <param name="rule">The rule to create an alias for.</param>
 <param name="displayName">The display name to show.</param>
</member>
<member name="P:DriveWorks.Abstractions.AliasRule.InnerRule">
 <summary>
 Gets the wrapped rule.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.AliasRule.Id">
 <summary>
 Gets the invariant identifier of the inner rule if the inner rule implements <see cref="T:DriveWorks.Abstractions.IHasRuleId" />,
 otherwise null (Nothing in VB).
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.AliasRule.Comment">
 <summary>
 Gets/sets the comment for the rule.
 </summary>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
</member>
<member name="P:DriveWorks.Abstractions.AliasRule.DisplayName">
 <summary>
 Gets an identifier which uniquely identifies the rule.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.AliasRule.IsWritable">
 <summary>
 Determines whether the rule and comment can be written to.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.AliasRule.Rule">
 <summary>
 Gets/sets the rule.
 </summary>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
</member>
<member name="M:DriveWorks.Abstractions.AliasRule.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
</member>
<member name="M:DriveWorks.Abstractions.AliasRule.GetVersionHistory">
 <summary>
 Gets the version history for the item.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.IHasRuleType">
 <summary>
 Provides a contract for items which have a rule which is typed.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Abstractions.IHasRuleType.RuleType">
 <summary>
 Gets an array of type names which qualify the type of rule provided by the 
 implementing class.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.ILockable">
 <summary>
 Provides a contract for objects which can be locked to prevent modification.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.ILockable.IsLocked">
 <summary>
 Determines whether the object has been locked.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.Lock">
 <summary>
 Provides an object which can be used to help implement the <see cref="T:DriveWorks.Abstractions.ILockable" /> interface.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.Lock.Lock">
 <summary>
 Locks the object.
 </summary>
</member>
<member name="M:DriveWorks.Abstractions.Lock.AssertUnlocked">
 <summary>
 Throws an <see cref="T:System.InvalidOperationException" /> if the object is locked.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.Lock.IsLocked">
 <summary>
 Gets whether the object has been locked.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.LockableObjectBase">
 <summary>
 Internal Use Only. Provides a convenient base class for lockable objects.
 </summary>
</member>
<member name="M:DriveWorks.Abstractions.LockableObjectBase.LockCore">
 <summary>
 Locks the object.
 </summary>
</member>
<member name="M:DriveWorks.Abstractions.LockableObjectBase.AssertUnlocked">
 <summary>
 Throws an <see cref="T:System.InvalidOperationException" /> if the object is locked.
 </summary>
</member>
<member name="P:DriveWorks.Abstractions.LockableObjectBase.IsLocked">
 <summary>
 Gets whether the object has been locked.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.IHasRule">
 <summary>
 Provides a contract for items which have a rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Abstractions.IHasRule.DisplayName">
 <summary>
 Gets an identifier which uniquely identifies the rule.
 </summary>
 <returns></returns>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Abstractions.IHasRule.Comment">
 <summary>
 Gets/sets the comment for the rule.
 </summary>
 <returns></returns>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Abstractions.IHasRule.Rule">
 <summary>
 Gets/sets the rule.
 </summary>
 <returns></returns>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.IHasRule.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Abstractions.IHasRule.IsWritable">
 <summary>
 Determines whether the rule and comment can be written to.
 </summary>
</member>
<member name="T:DriveWorks.Abstractions.IHasRuleVersionHistory">
 <summary>
 Provides a contract for items which have a rule version history.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Abstractions.IHasRuleVersionHistory.GetVersionHistory">
 <summary>
 Gets the version history for the item.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.IHasRuleContext">
 <summary>
 provides a contract for rules that have context associated with them.
 </summary>
</member>
<member name="P:DriveWorks.IHasRuleContext.Context">
 <summary>
 Gets the context for this rule object
 </summary>
 <remarks>This should be used during rule evaluation.</remarks>
</member>
<member name="T:DriveWorks.IListenForSpecificationContextCreation">
 <summary>
 Interface that is used on objects that would like to be notifed when specifications are created.
 </summary>
</member>
<member name="M:DriveWorks.IListenForSpecificationContextCreation.NotifySpecificationContextCreated(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Called whenever a specification context is created.
 </summary>
 <param name="context">The specification context that was created.</param>
</member>
<member name="T:DriveWorks.ILiveRule">
 <summary>
 Provides a contract for items that have a rule, result and a notification when the result changes.
 </summary>
</member>
<member name="E:DriveWorks.ILiveRule.ValueChanged">
 <summary>
 Raised when the Value changes.
 </summary>
</member>
<member name="P:DriveWorks.ILiveRule.Rule">
 <summary>
 Gets/sets the rule for this item.
 </summary>
</member>
<member name="P:DriveWorks.ILiveRule.Value">
 <summary>
 Gets the result of the current rule.
 </summary>
</member>
<member name="T:DriveWorks.INotifyChanged">
 <summary>
 Provide a very simple contract for an object notifying observers when it has changed.
 </summary>
</member>
<member name="E:DriveWorks.INotifyChanged.Changed">
 <summary>
 Raise when the owning object has changed.
 </summary>
</member>
<member name="T:DriveWorks.IHandleServerPreviewStarted">
 <summary>
 Provides a contract for an object that gets notified when a 3d preview that will be round tripped through SOLIDWORKS has started.
 </summary>
</member>
<member name="M:DriveWorks.IHandleServerPreviewStarted.NotifyServerPreviewStarted(System.Double)">
 <summary>
 Called when a preview has been requested that will be round tripped through SOLIDWORKS.
 </summary>
 <param name="timeout">The timeout that this preview needs to adhere to.</param>
</member>
<member name="T:DriveWorks.ApplicationProductIds">
 <summary>
 Provides the names of the DriveWorks applications.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.ExecutableNodeBase">
 <summary>
 Represents a <see cref="T:DriveWorks.EventFlow.IFlowNode"/> that is executable.
 </summary>
</member>
<member name="F:DriveWorks.EventFlow.ExecutableNodeBase.MIN_LEFT">
 <summary>
 The minimum allowed value of the <see cref="P:DriveWorks.EventFlow.ExecutableNodeBase.Left"/> property.
 </summary>
</member>
<member name="F:DriveWorks.EventFlow.ExecutableNodeBase.MIN_TOP">
 <summary>
 The minimum allowed value of the <see cref="P:DriveWorks.EventFlow.ExecutableNodeBase.Top"/> property.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.ExecutableNodeBase.LeftChanged">
 <summary>
 Occurs whenever the <see cref="P:DriveWorks.EventFlow.ExecutableNodeBase.Left"/> property's value has changed.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.ExecutableNodeBase.TopChanged">
 <summary>
 Occurs whenever the <see cref="P:DriveWorks.EventFlow.ExecutableNodeBase.Top"/> property's value has changed.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.ExecutableNodeBase.ExecutionTimeChanged">
 <summary>
 Occurs whenever the <see cref="P:DriveWorks.EventFlow.ExecutableNodeBase.ExecutionTime"/> property's value has changed.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.ExecutableNodeBase.StateChanged">
 <summary>
 Occurs whenever the <see cref="P:DriveWorks.EventFlow.ExecutableNodeBase.State"/> property's value has changed.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.ExecutableNodeBase.InputsChanged">
 <summary>
 Occurs whenever a property has been added or removed from the <see cref="P:DriveWorks.EventFlow.ExecutableNodeBase.Properties"/> collection.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.ExecutableNodeBase.NameChanged">
 <summary>
 Occurs when the name of the node has changed.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Flow">
 <summary>
 Gets the flow this node is associated with.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.NavigationInput">
 <summary>
 Gets the navigation input of this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.NavigationOutput">
 <summary>
 Gets the navigation output of this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Outputs">
 <summary>
 Gets a collection of all outputs of this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Left">
 <summary>
 Gets the left position of this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Top">
 <summary>
 Gets the top position of this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Title">
 <summary>
 Gets/sets the human-readable title of the node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Properties">
 <summary>
 Gets access to the property registration service.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Result">
 <summary>
 Gets the result of this node (if it has executed).
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.ResultDetails">
 <summary>
 Gets additional information about the result of this node (if it has executed).
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.State">
 <summary>
 Gets the execution state of this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeBase.ExecutionTime">
 <summary>
 Gets the amount of time it took for this node to execute.
 </summary>
 <returns>The time it took for this node to execute, or an empty TimeSpan if it hasn't executed.</returns>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
 <summary>
 Attempts to retrieve the output end point with the given name.
 </summary>
 <param name="name">The name of the end point to find.</param>
 <param name="isNavigation">True if the requested end point is expected to be a navigation end point.</param>
 <param name="output">The end point (if found), otherwise a null reference.</param>
 <returns>True if the end point was found, otherwise false.</returns>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.TryGetInputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.InputConnectionEndpoint@)">
 <summary>
 Attempts to find an input with the given name.
 </summary>
 <param name="name">The name of the input to find.</param>
 <param name="isNavigation">True if the requested input is expected to be a navigation end point.</param>
 <param name="endpoint">The end point (if found), otherwise a null reference.</param>
 <returns>True if the end point was found, otherwise false.</returns>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.GetEditor">
 <summary>
 Gets the editor for this node.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.SetState(DriveWorks.EventFlow.NodeExecutionState)">
 <summary>
 Sets the result of executing this node.
 </summary>
 <param name="state">The resultant state of executing this node.</param>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.SetState(DriveWorks.EventFlow.NodeExecutionState,System.String)">
 <summary>
 Sets the result of executing this node.
 </summary>
 <param name="state">The resultant state of executing this node.</param>
 <param name="result">The result of this node.</param>
 <remarks>The message passed into <paramref name="result"/> will be written to the specification report.</remarks>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.SetState(DriveWorks.EventFlow.NodeExecutionState,System.String,System.String)">
 <summary>
 Sets the result of executing this node.
 </summary>
 <param name="state">The resultant state of executing this node.</param>
 <param name="result">The result of this node.</param>
 <param name="details">A detailed message clarifying the result.</param>
 <remarks>The message passed into <paramref name="result"/> will be written to the specification report.</remarks>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.RaiseLeftChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.EventFlow.ExecutableNodeBase.LeftChanged"/> event.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.RaiseTopChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.EventFlow.ExecutableNodeBase.TopChanged"/> event.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.RaiseInputsChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.EventFlow.ExecutableNodeBase.InputsChanged"/> event.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.ExecutableNodeBase.RaiseNameChanged(System.String,System.String)">
 <summary>
 Raises the <see cref="E:DriveWorks.EventFlow.ExecutableNodeBase.NameChanged"/> event.
 </summary>
 <param name="oldName">The name before it was changed.</param>
 <param name="newName">The new name.</param>
</member>
<member name="T:DriveWorks.EventFlow.ExecutableNodeEventArgs">
 <summary>
 Represents event data for events involving <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/> objects.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeEventArgs.Node">
 <summary>
 The node that participated in the event.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeWithStatus.WarningOutput">
 <summary>
 Gets the end point that allows logical navigation connections to be made from this node when this node produces a warning as it's state.
 </summary>
 <remarks>This end point can be mapped to a <see cref="T:DriveWorks.EventFlow.NodeNavigationInput"/> to set up the order in which the nodes will execute.</remarks>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeWithStatus.FailedOutput">
 <summary>
 Gets the end point that allows logical navigation connections to be made from this node when this node fails during execution.
 </summary>
 <remarks>This end point can be mapped to a <see cref="T:DriveWorks.EventFlow.NodeNavigationInput"/> to set up the order in which the nodes will execute.</remarks>
</member>
<member name="P:DriveWorks.EventFlow.ExecutableNodeWithStatus.SuccessOutput">
 <summary>
 Gets the end point that allows logical navigation connections to be made from this node when this node successfully executes.
 </summary>
 <remarks>This end point can be mapped to a <see cref="T:DriveWorks.EventFlow.NodeNavigationInput"/> to set up the order in which the nodes will execute.</remarks>
</member>
<member name="T:DriveWorks.EventFlow.FlowNodeCollection">
 <summary>
 Represents a collection of <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/> objects.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.FlowNodeCollection.NodeCreated">
 <summary>
 The event raised when a node has been added to the collection.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.FlowNodeCollection.NodeDeleted">
 <summary>
 The event raised when a node has been deleted from the collection.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.FlowNodeCollection.Count">
 <summary>
 Gets the number of nodes in the collection.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.FlowNodeCollection.Item(System.Int32)">
 <summary>
 Gets the node at the specified index.
 </summary>
 <param name="index">The zero-based index of the node to retrieve.</param>
 <exception cref="T:System.IndexOutOfRangeException">Thrown if the specified index is out of range.</exception>
</member>
<member name="M:DriveWorks.EventFlow.FlowNodeCollection.IndexOf(DriveWorks.EventFlow.ExecutableNodeBase)">
 <summary>
 Gets the index of the given node.
 </summary>
 <param name="node">The node whose index to retrieve.</param>
 <returns>The index of the node, or -1 if the node is not in this collection.</returns>
</member>
<member name="M:DriveWorks.EventFlow.FlowNodeCollection.GetEnumerator">
 <summary>
 Gets an enumerator suitable for enumerating the nodes in the collection.
 </summary>
 <returns>An IEnumerator specialized for the <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase" /> type.</returns>
</member>
<member name="M:DriveWorks.EventFlow.FlowNodeCollection.IEnumerable_GetEnumerator">
 <summary>
 Gets an enumerator suitable for enumerating the nodes in the collection.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.FlowNodeCollection.RaiseNodeCreated(DriveWorks.EventFlow.ExecutableNodeBase)">
 <summary>
 Raise the <see cref="E:DriveWorks.EventFlow.FlowNodeCollection.NodeCreated"/> event.
 </summary>
 <param name="node">The node that was created.</param>
</member>
<member name="M:DriveWorks.EventFlow.FlowNodeCollection.RaiseNodeDeleted(DriveWorks.EventFlow.ExecutableNodeBase)">
 <summary>
 Raise the <see cref="E:DriveWorks.EventFlow.FlowNodeCollection.NodeDeleted"/> event.
 </summary>
 <param name="node">The node that was deleted.</param>
</member>
<member name="T:DriveWorks.EventFlow.InputConnectionEndpoint">
 <summary>
 Represents the common base class for all input connection endpoints on nodes.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.InputConnectionEndpoint.#ctor(DriveWorks.EventFlow.INodeEndpointCollection,System.String,System.String,System.String,System.Type)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.EventFlow.InputConnectionEndpoint"/> class.
 </summary>
 <param name="collection">The collection this end point belongs to.</param>
 <param name="name">The name of the end point.</param>
 <param name="displayName">The user-friendly display name of this end point.</param>
 <param name="description">The localized description of the end point.</param>
 <param name="valueType">The underlying CLR type of the end point.</param>
</member>
<member name="E:DriveWorks.EventFlow.InputConnectionEndpoint.ConnectionAdded">
 <summary>
 Occurs when a connection has been added to this input.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.InputConnectionEndpoint.ConnectionRemoved">
 <summary>
 Occurs when a connection has been removed from this input.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.InputConnectionEndpoint.Connect(DriveWorks.EventFlow.NodeOutput)">
 <summary>
 Connects this input to the given output.
 </summary>
 <param name="output">The output to map this input value to.</param>
</member>
<member name="M:DriveWorks.EventFlow.InputConnectionEndpoint.GetConnections">
 <summary>
 Retrieves a collection of all connections.
 </summary>
 <remarks>
 Note: This is internal because data inputs inherit from this as well,
 and just allows us to internally treat all nodes with inputs the same whilst
 maintaining a nice and simple API for consumers.
 </remarks>
</member>
<member name="M:DriveWorks.EventFlow.InputConnectionEndpoint.RaiseConnectionAdded(DriveWorks.EventFlow.Connection)">
 <summary>
 Raises the <see cref="E:DriveWorks.EventFlow.InputConnectionEndpoint.ConnectionAdded"/> event.
 </summary>
 <param name="connection">The connection that was added.</param>
</member>
<member name="M:DriveWorks.EventFlow.InputConnectionEndpoint.RaiseConnectionRemoved(DriveWorks.EventFlow.Connection)">
 <summary>
 Raises the <see cref="E:DriveWorks.EventFlow.InputConnectionEndpoint.ConnectionRemoved"/> event.
 </summary>
 <param name="connection">The connection that was removed.</param>
</member>
<member name="T:DriveWorks.EventFlow.MacroConditionRedirector">
 <summary>
 In DW 16 conditions for Tasks in Specification Macros were moved, from the Task's Condition collection
 to a new Condition collection on the macro itself. This class serves as an intermediate that redirects API
 calls to the old collection in case any of our API consumers still use the old API
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.OutputCreatingEventArgs">
 <summary>
 Provides event data for the output creating event.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.OutputCreatingEventArgs.Name">
 <summary>
 Gets the name of the ouput being created.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.OutputCreatingEventArgs.IsCondition">
 <summary>
 Gets whether the output being created is a condition.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.Connection">
 <summary>
 Represents a connection between one node's input and another node's output.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.Connection.Element">
 <summary>
 The element used as the backing store for this connection.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.Connection.Input">
 <summary>
 The input the connection is made to.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.Connection.Output">
 <summary>
 The output the connection is made from.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.ConnectionEventArgs">
 <summary>
 Provides data for events relating to <see cref="T:DriveWorks.EventFlow.Connection"/>.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ConnectionEventArgs.Connection">
 <summary>
 The <see cref="T:DriveWorks.EventFlow.Connection"/> for the event.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.ConnectionEventArgs.#ctor(DriveWorks.EventFlow.Connection)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.EventFlow.ConnectionEventArgs"/> class.
 </summary>
 <param name="connection">The <see cref="T:DriveWorks.EventFlow.Connection"/> for the event.</param>
</member>
<member name="T:DriveWorks.EventFlow.ConditionOutput">
 <summary>
 Represents the base class for all logical condition outputs within a <see cref="T:DriveWorks.EventFlow.IFlowNode"/>.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ConditionOutput.Unlocked">
 <summary>
 Gets whether this condition path has been unlocked.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.ConditionOutput.Unlock">
 <summary>
 Unlocks this condition path. Letting the <see cref="T:DriveWorks.EventFlow.IFlowNode"/> execution engine know that it should
 follow the connections made to this output.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.FlowBase">
 <summary>
 Provides the base for all flows that allow nodes to be connected.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.FlowBase.Executed">
 <summary>
 Raised when this flow has been executed and can no longer be edited.
 </summary>
 <remarks>You can reset the execution of this flow by calling <see cref="M:Microsoft.VisualBasic.FileSystem.Reset"/>.</remarks>
</member>
<member name="P:DriveWorks.EventFlow.FlowBase.Name">
 <summary>
 Gets the name of this flow.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.FlowBase.StartNode">
 <summary>
 Gets the first node in this flow that serves as the start point to which
 all other <see cref="T:DriveWorks.EventFlow.IFlowNode"/>s should be connected.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.FlowBase.HasExecuted">
 <summary>
 Gets whether this flow has executed.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.FlowBase.Nodes">
 <summary>
 Gets a collection of all nodes that have been added to this flow.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.FlowBase.TryGetNode(System.String,DriveWorks.EventFlow.IFlowNode@)">
 <summary>
 Attempt to retrieve a <see cref="T:DriveWorks.EventFlow.IFlowNode"/> from this flow.
 </summary>
 <param name="name">The name of the <see cref="T:DriveWorks.EventFlow.IFlowNode"/> to retrieve.</param>
 <param name="node">The node if found, or a null reference (Nothing in Visual Basic) if a node with that name could not be found.</param>
 <returns>True if a node was found, otherwise False.</returns>
</member>
<member name="M:DriveWorks.EventFlow.FlowBase.PushExecutionState">
 <summary>
 Stores the current execution result and resets the state.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.FlowBase.PopExecutionState">
 <summary>
 Restores the previous execution result.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.FlowEngine.NodeExecuted">
 <summary>
 Raised whenever a <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/> has been executed.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.FlowPropertyEventArgs">
 <summary>
 Represents event data for events pertaining to <see cref="T:DriveWorks.Specification.FlowProperty"/> objects.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.FlowPropertyEventArgs.PropertyName">
 <summary>
 The name of the property for this event.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.INodeEndpointCollection">
 <summary>
 Represents the owner of a <see cref="T:DriveWorks.Specification.FlowProperty"/> or <see cref="T:DriveWorks.EventFlow.NodeOutput"/>.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.INodeEndpointCollection.NotifyNameChanged(DriveWorks.EventFlow.ConnectionEndpoint,System.String)">
 <summary>
 Called by <see cref="T:DriveWorks.Specification.FlowProperty"/>s and <see cref="T:DriveWorks.EventFlow.NodeOutput"/>s to let the owner know its name has changed.
 </summary>
 <param name="endpoint">The end point whose name has changed.</param>
 <param name="oldName">The old name of the end point before the name was changed.</param>
</member>
<member name="T:DriveWorks.EventFlow.IFlowNode">
 <summary>
 Represents a common interface for all nodes in a flow.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.IFlowNode.LeftChanged">
 <summary>
 Occurs when the value of the <see cref="P:DriveWorks.EventFlow.IFlowNode.Left"/> property has changed.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.IFlowNode.TopChanged">
 <summary>
 Occurs when the value of the <see cref="P:DriveWorks.EventFlow.IFlowNode.Top"/> property has changed.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.IFlowNode.Left">
 <summary>
 Gets the left position of this node in the visual editor.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.IFlowNode.Top">
 <summary>
 Gets the top position of this node in the visual editor.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.IFlowNode.Name">
 <summary>
 Gets the name of the node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.IFlowNode.Flow">
 <summary>
 Gets the flow this node is associated with.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.IFlowNode.Outputs">
 <summary>
 Gets a collection of all outputs of this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.IFlowNode.NavigationOutput">
 <summary>
 Gets the navigation output of this node.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.IFlowNode.NotifyRequirementsChanged">
 <summary>
 Called whenever the value of any mapped inputs or connections have changed
 And this node should reevaluate whether it can execute or not.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.IFlowNode.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
 <summary>
 Attempts to retrieve the output end point with the given name.
 </summary>
 <param name="name">The name of the end point to find.</param>
 <param name="isNavigation">True if the requested end point is expected to be a navigation end point.</param>
 <param name="endpoint">The end point (if found), otherwise a null reference.</param>
 <returns>True if the end point was found, otherwise false.</returns>
</member>
<member name="T:DriveWorks.EventFlow.INodeEditor">
 <summary>
 Represents a visual editor for a <see cref="T:DriveWorks.EventFlow.IFlowNode"/>.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.INodeEditor.EditNode(DriveWorks.EventFlow.ExecutableNodeBase)">
 <summary>
 Shows the editor for the given node.
 </summary>
 <param name="node">The node to edit.</param>
 <returns>True if the node was modified.</returns>
</member>
<member name="T:DriveWorks.EventFlow.InvalidFlowException">
 <summary>
 The exception thrown when an invalid / corrupt <see cref="T:DriveWorks.EventFlow.FlowBase"/> is encountered.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.InvalidFlowException.#ctor(System.String)">
 <summary>
 Creates a New instance of the <see cref="T:DriveWorks.EventFlow.InvalidFlowException"/> class.
 </summary>
 <param name="message">The message describing the issue with the <see cref="T:DriveWorks.EventFlow.FlowBase"/>.</param>
</member>
<member name="T:DriveWorks.EventFlow.ConnectionEndpoint">
 <summary>
 Represents the common base class for inputs and outputs.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.ConnectionEndpoint.#ctor(DriveWorks.EventFlow.INodeEndpointCollection,System.String,System.String,System.String,System.Type)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.EventFlow.ConnectionEndpoint"/> class.
 </summary>
 <param name="collection">The collection this end point belongs to.</param>
 <param name="name">The name of the end point.</param>
 <param name="displayName">The user-friendly display name of this end point.</param>
 <param name="description">The localized description of the end point.</param>
 <param name="valueType">The underlying CLR type of the end point.</param>
</member>
<member name="P:DriveWorks.EventFlow.ConnectionEndpoint.Name">
 <summary>
 The name of the end point.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ConnectionEndpoint.DisplayName">
 <summary>
 Gets the user-friendly display name of this end point.
 </summary>
 <returns></returns>
</member>
<member name="P:DriveWorks.EventFlow.ConnectionEndpoint.Description">
 <summary>
 The localized description of this end point.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ConnectionEndpoint.ValueType">
 <summary>
 The underlying CLR type of the end point.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ConnectionEndpoint.Node">
 <summary>
 Gets the node this data end point belongs to.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.ConnectionEndpoint.Collection">
 <summary>
 Gets the collection this end point is a part of.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.ConnectionEndpoint.Initialize(System.Xml.Linq.XElement,DriveWorks.RuleVersionManager)">
 <summary>
 Initializes this end point.
 </summary>
 <param name="element">The main xml element for this end point.</param>
 <param name="ruleVersionManager">The rule version manager for this <see cref="T:DriveWorks.EventFlow.ConnectionEndpoint"/>.</param>
</member>
<member name="T:DriveWorks.EventFlow.SubFlow">
 <summary>
 Represents a part of a <see cref="T:DriveWorks.EventFlow.FlowBase"/> that can contain other nodes and can be executed separately.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.SubFlow.InputMappingAdded">
 <summary>
 The event that gets raised whenever a new input has been exposed by this sub flow.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.SubFlow.InputMappingRemoved">
 <summary>
 The event that gets raised whenever an input that was exposed by this sub flow is no longer exposed.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.SubFlow.OutputMappingAdded">
 <summary>
 The event that gets raised whenever a new output has been exposed by this sub flow.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.SubFlow.OutputMappingRemoved">
 <summary>
 The event that gets raised whenever an output that was exposed by this sub flow is no longer exposed.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.SubFlow.NameChanged">
 <summary>
 The event that gets raised when the name has changed.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.SubFlow.Name">
 <summary>
 Gets/sets the name of this sub flow.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.SubFlow.StartNode">
 <summary>
 SubFlows does not have a Start Node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.SubFlow.Tasks">
 <summary>
 Gets a collection of all nodes in this flow.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.SubFlow.Nodes">
 <summary>
 Gets all nodes in the sub flow.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.SubFlow.SubFlowInputs">
 <summary>
 The node that represents the inputs to this subflow.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.SubFlow.SubFlowOutputs">
 <summary>
 The node that represents outputs of this subflow.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.SubFlow.InputMappings">
 <summary>
 Gets all inputs exposed by this sub flow.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.SubFlow.OutputMappings">
 <summary>
 Gets all outputs exposed by this sub flow.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.SubFlow.Element">
 <summary>
 Gets the XElement used to serialize this sub flow.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.SubFlow.PushExecutionState">
 <summary>
 Stores the current state of the flow and resets all state.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.SubFlow.PopExecutionState">
 <summary>
 Restores a previously stored state of the flow.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.SubFlow.TryGetNode(System.String,DriveWorks.EventFlow.IFlowNode@)">
 <summary>
 Try to retrieve a <see cref="T:DriveWorks.EventFlow.IFlowNode"/> in the sub flow with the given name.
 </summary>
 <param name="nodeName">The name of the node to find.</param>
 <param name="node">The node, or Nothing if a node with the given name could not be found.</param>
 <returns>True if the node was found, otherwise False.</returns>
</member>
<member name="T:DriveWorks.EventFlow.SubFlowInputsNode">
 <summary>
 This node represents the inputs to a SubFlow.
 </summary>
 <remarks>Expose an input of a node in the SubFlow by making a connection to this node's last output.</remarks>
</member>
<member name="T:DriveWorks.EventFlow.SubFlowOutputsNode">
 <summary>
 Represents the outputs of a <see cref="T:DriveWorks.EventFlow.SubFlow"/>.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.NodeExecutionState">
 <summary>
 Represents the state of a <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/>.
 </summary>
</member>
<member name="F:DriveWorks.EventFlow.NodeExecutionState.NotStarted">
 <summary>
 The <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/> is ready to be executed.
 </summary>
</member>
<member name="F:DriveWorks.EventFlow.NodeExecutionState.Skipped">
 <summary>
 The <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/>'s inputs were never fulfilled and thus it was never executed.
 </summary>
</member>
<member name="F:DriveWorks.EventFlow.NodeExecutionState.InputsMissing">
 <summary>
 The <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/> has inputs that need to be fulfilled before the <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/> can execute.
 </summary>
</member>
<member name="F:DriveWorks.EventFlow.NodeExecutionState.Failed">
 <summary>
 The execution of the <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/> failed.
 </summary>
</member>
<member name="F:DriveWorks.EventFlow.NodeExecutionState.Successful">
 <summary>
 The execution of the <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/> was successful.
 </summary>
</member>
<member name="F:DriveWorks.EventFlow.NodeExecutionState.SuccessfulWithWarnings">
 <summary>
 The execution of the <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase"/> was successful but there are some warnings.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.NodeNavigationInput">
 <summary>
 Represents a logical flow input endpoint for a <see cref="T:DriveWorks.EventFlow.IFlowNode"/>.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.NodeNavigationInput.Connections">
 <summary>
 Gets a collection of all connections that have been made to this input.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.NodeNavigationInput.Connect(DriveWorks.EventFlow.NodeOutput)">
 <summary>
 Create a connection between this input and the given <see cref="T:DriveWorks.EventFlow.NodeOutput"/>, scheduling the <see cref="T:DriveWorks.EventFlow.IFlowNode"/>
 that owns this input to be executed if the mapped output is fulfilled during execution.
 </summary>
 <param name="output">The condition output to map this input to.</param>
 <exception cref="T:System.InvalidOperationException"><paramref name="output"/> is not a <see cref="T:DriveWorks.EventFlow.ConditionOutput"/> or a <see cref="T:DriveWorks.EventFlow.NodeNavigationOutput"/>.</exception>
</member>
<member name="M:DriveWorks.EventFlow.NodeNavigationInput.Disconnect(DriveWorks.EventFlow.Connection)">
 <summary>
 Removes the given connection from this input.
 </summary>
 <param name="connection">The connection to remove.</param>
 <returns>True if the connection was removed, otherwise False.</returns>
</member>
<member name="T:DriveWorks.EventFlow.NodeNavigationOutput">
 <summary>
 Represents a logical endpoint on a <see cref="T:DriveWorks.EventFlow.IFlowNode"/> that allows logical connections to be made
 between the node this output belongs to and the node a <see cref="T:DriveWorks.EventFlow.NodeNavigationInput"/> belongs to.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.NodeNavigationOutput.IsStatus">
 <summary>
 Gets whether this output represents a conditional output that depends on the state of it's owning node.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.NodeNavigationOutput.RemoveConnections">
 <summary>
 Warning: Never call this method from an input!
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.NodeOutput">
 <summary>
 Represents a data output of a <see cref="T:DriveWorks.EventFlow.IFlowNode"/>.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.NodeOutput.ValueChanged">
 <summary>
 Raised whenever the value of this output has been set.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.NodeOutput.ConnectionAdded">
 <summary>
 Raised whenever a connection has been made to this output.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.NodeOutput.ConnectionRemoved">
 <summary>
 Raised whenever a connection has been removed from this output.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.NodeOutput.Value">
 <summary>
 Gets the value of this output.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.NodeOutput.IsFulfilled">
 <summary>
 Gets whether this output has been given a value.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.NodeOutput.Fulfill(System.Object)">
 <summary>
 Assign a static value to this input.
 </summary>
 <param name="value">The value to assign to this output.</param>
</member>
<member name="M:DriveWorks.EventFlow.NodeOutput.GetConnections">
 <summary>
 Gets all connections that has been made to this output.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.NodeOutput.RemoveConnection(DriveWorks.EventFlow.Connection)">
 <summary>
 Warning: This should only be called by the input that owns the connection.
 Outputs merely expose the connections made to them for convenience. The input is
 authoritative when it comes to connections.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.NodeOutputCollection">
 <summary>
 Represents a collection of <see cref="T:DriveWorks.EventFlow.NodeOutput"/>.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.NodeOutputCollection.Register(System.String,System.String,System.Type)">
 <summary>
 Adds a new output to the collection.
 </summary>
 <param name="name">The name of the output to create.</param>
 <param name="description">The user-friendly description of the output.</param>
 <param name="valueType">The type of the value this output stores.</param>
 <returns>The newly created output.</returns>
</member>
<member name="M:DriveWorks.EventFlow.NodeOutputCollection.Register(System.String,System.String,System.Type,System.String)">
 <summary>
 Adds a new output to the collection.
 </summary>
 <param name="name">The name of the output to create.</param>
 <param name="description">The user-friendly description of the output.</param>
 <param name="valueType">The type of the value this output stores.</param>
 <param name="displayName">The user-friendly name of the output.</param>
 <returns>The newly created output.</returns>
</member>
<member name="M:DriveWorks.EventFlow.NodeOutputCollection.CreateCondition(System.String,System.String)">
 <summary>
 Adds a condition output to the collection.
 </summary>
 <param name="name">The user-friendly name of the condition.</param>
 <param name="description">The user-friendly description of the condition.</param>
 <returns>The newly created condition output.</returns>
</member>
<member name="M:DriveWorks.EventFlow.NodeOutputCollection.CreateCondition(System.String,System.String,System.String)">
 <summary>
 Adds a condition output to the collection.
 </summary>
 <param name="name">The user-friendly name of the condition.</param>
 <param name="description">The user-friendly description of the condition.</param>
 <param name="displayName">the user-friendly name of the condition.</param>
 <returns>The newly created condition output.</returns>
</member>
<member name="M:DriveWorks.EventFlow.NodeOutputCollection.Delete(System.String)">
 <summary>
 Removes an output from the collection.
 </summary>
 <param name="name">The name of the output to remove.</param>
 <returns>True if the output was removed, otherwise False.</returns>
</member>
<member name="T:DriveWorks.EventFlow.NodeOutputEventArgs">
 <summary>
 Provides event data for events pertaining to <see cref="T:DriveWorks.EventFlow.NodeOutput"/> objects.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.NodeOutputEventArgs.OutputName">
 <summary>
 The name of the <see cref="T:DriveWorks.EventFlow.NodeOutput"/> for the event.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.MacroStartNode">
 <summary>
 Represents the very first task to execute in a <see cref="T:DriveWorks.Specification.SpecificationMacro"/>.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.MacroStartNode.ArgumentOutput">
 <summary>
 Gets the output that will contain the macro argument during execution.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.MacroStartNode.CallerOutput">
 <summary>
 Gets the output that will contain the macro caller during execution.
 </summary>
</member>
<member name="T:DriveWorks.EventFlow.StartNode">
 <summary>
 Represents the very first node in a <see cref="T:DriveWorks.EventFlow.FlowBase"/> where execution will begin.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.StartNode.LeftChanged">
 <summary>
 Occurs whenever the <see cref="P:DriveWorks.EventFlow.StartNode.Left"/> property's value has changed.
 </summary>
</member>
<member name="E:DriveWorks.EventFlow.StartNode.TopChanged">
 <summary>
 Occurs whenever the <see cref="P:DriveWorks.EventFlow.StartNode.Top"/> property's value has changed.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.StartNode.Name">
 <summary>
 Gets the name of the start node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.StartNode.Flow">
 <summary>
 Gets the <see cref="T:DriveWorks.EventFlow.FlowBase"/> that owns this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.StartNode.Left">
 <summary>
 Gets the left position of this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.StartNode.Top">
 <summary>
 Gets the top position of this start node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.StartNode.Outputs">
 <summary>
 Gets a collection of all outputs of this node.
 </summary>
</member>
<member name="P:DriveWorks.EventFlow.StartNode.NavigationOutput">
 <summary>
 Gets the logical navigation end point of this node.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.StartNode.NotifyRequirementsChanged">
 <summary>
 Called whenever the value of any mapped inputs or connections have changed
 and this node should re-evaluate whether it can execute or not.
 </summary>
</member>
<member name="M:DriveWorks.EventFlow.StartNode.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
 <summary>
 Attempts to retrieve the end point with the given name.
 </summary>
 <param name="name">The name of the end point to find.</param>
 <param name="isNavigation">True if the requested end point is a navigation end point.</param>
 <param name="output">The end point (if found), otherwise a null reference.</param>
 <returns>True if the end point was found, otherwise false.</returns>
</member>
<member name="T:DriveWorks.ProjectClosingEventArgs">
 <summary>
 Represents event data for project closing.
 </summary>
</member>
<member name="M:DriveWorks.ProjectClosingEventArgs.#ctor(System.Boolean)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.ProjectClosingEventArgs" /> class.
 </summary>
 <param name="isSaving">The value to determine if the project is being saved or not.</param>
</member>
<member name="P:DriveWorks.ProjectClosingEventArgs.IsSaving">
 <summary>
 Gets whether the project is to be saved or not.
 </summary>
</member>
<member name="T:DriveWorks.INotifyResourceChanged">
 <summary>
 Provide a contract for an object notifying observers when one of it's resources changes.
 </summary>
</member>
<member name="E:DriveWorks.INotifyResourceChanged.ResourceChanged">
 <summary>
 Raise when an owning object's resource has changed has changed.
 </summary>
</member>
<member name="T:DriveWorks.PreviewResourceChangedEventArgs">
 <summary>
 Event args for when a 3D Preview's resource has been changed.
 </summary>
</member>
<member name="M:DriveWorks.PreviewResourceChangedEventArgs.#ctor(System.String)">
 <summary>
 Event args for when a 3D Preview's resource has been changed.
 </summary>
 <param name="resourceName">The name of 3D Preview's resource which has changed.</param>
</member>
<member name="P:DriveWorks.PreviewResourceChangedEventArgs.ResourceName">
 <summary>
 The name of the changed 3D Preview resource.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction">
 <summary>
 Action that will add a user to a team.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.#ctor(DriveWorks.Security.UserDetails,DriveWorks.Security.TeamDetails,DriveWorks.Group,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction"/>.
 </summary>
 <param name="user">The user to add.</param>
 <param name="team">The team to add.</param>
 <param name="sourceGroup">The source group to copy from.</param>
 <param name="targetGroup">The target group to copy to.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="P:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.WillExecute">
 <summary>
 Returns whether or not this action wants to execute.
 </summary>
 <returns>True if it this action wants to execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.AddGroupUserToTeamStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.ClearTempPackAndGoSecurityAction">
 <summary>
 Action that will clean up pack and go security information that was added as part of the process.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.ClearTempPackAndGoSecurityAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.ClearTempPackAndGoSecurityAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyCapturedComponentAction">
 <summary>
 Action that will copy a captured component.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.#ctor(DriveWorks.Components.CapturedComponentInfo,System.String,DriveWorks.Group,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyCapturedComponentAction"/>.
 </summary>
 <param name="captureInfo">The info to copy.</param>
 <param name="targetPath">The target path of the component.</param>
 <param name="sourceGroup">The original group.</param>
 <param name="targetGroup">The target group.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.CopyCapturedComponentStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopyCapturedComponentAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyFileAction">
 <summary>
 Action that will copy a file.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyFileAction.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyFileAction"/>.
 </summary>
 <param name="sourceFile">The file to copy.</param>
 <param name="targetFile">The location to copy to.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyFileAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyFileAction.SourceFile">
 <summary>
 The file to be copied.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyFileAction.TargetFile">
 <summary>
 The path to place the file.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyFileAction.ErrorMessage">
 <summary>
 An error message from attempting to read / copy the file.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyFileAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyFileAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyFileAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyFileAction.CopyFileActionStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopyFileAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupConnectorAction">
 <summary>
 Action that will copy a group connector.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupConnectorAction.#ctor(DriveWorks.GroupConnectorInformation,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyGroupConnectorAction"/>.
 </summary>
 <param name="connector">The connector to copy.</param>
 <param name="targetGroup">The target group to copy into.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupConnectorAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupConnectorAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupConnectorAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupConnectorAction.CopyConnectorStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopyGroupConnectorAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupTableAction">
 <summary>
 Action that will copy a group table.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTableAction.#ctor(DriveWorks.GroupDataTable,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyGroupTableAction"/>.
 </summary>
 <param name="table">The table to copy.</param>
 <param name="targetGroup">The target group to copy into.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupTableAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupTableAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTableAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupTableAction.CopyGroupTableStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopyGroupTableAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamAction">
 <summary>
 Action that will copy a team.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamAction.#ctor(DriveWorks.Security.TeamDetails,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyGroupTeamAction"/>.
 </summary>
 <param name="team">The team to copy.</param>
 <param name="targetGroup">The target group.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamAction.CopyGroupTeamStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopyGroupTeamAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction">
 <summary>
 Action that will copy a team table permission.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.#ctor(DriveWorks.Security.TeamGroupTablePermission,DriveWorks.Group,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction"/>.
 </summary>
 <param name="permission">The permission to copy.</param>
 <param name="sourceGroup">The source group.</param>
 <param name="targetGroup">The target group.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.CopyGroupTablePermisionStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction">
 <summary>
 Action that will team project permission.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.#ctor(DriveWorks.Security.TeamProjectPermission,DriveWorks.Group,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction"/>.
 </summary>
 <param name="permission">The permission to copy.</param>
 <param name="sourceGroup">The source group.</param>
 <param name="targetGroup">the target group.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.CopyProjectPermisionStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupUserAction">
 <summary>
 Action that will copy a user.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupUserAction.#ctor(DriveWorks.Security.UserDetails,DriveWorks.Group,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyGroupUserAction"/>.
 </summary>
 <param name="user">The user to copy.</param>
 <param name="sourceGroup">The source group.</param>
 <param name="targetGroup">The target group.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupUserAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupUserAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupUserAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupUserAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupUserAction.CopyUserStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopyGroupUserAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyProjectDetailsAction">
 <summary>
 Action that will copy project registration information.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.#ctor(DriveWorks.ProjectDetails,System.String,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyProjectDetailsAction"/>.
 </summary>
 <param name="sourceProject">The project to copy.</param>
 <param name="targetPath">The new project path.</param>
 <param name="targetGroup">The target group.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.CopyProjectDetailsStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopyProjectDetailsAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyProjectRuleHistoryAction">
 <summary>
 Action that will copy rule history.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyProjectRuleHistoryAction.#ctor(DriveWorks.ProjectDetails,DriveWorks.Group,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyProjectRuleHistoryAction"/>.
 </summary>
 <param name="project">the project to copy.</param>
 <param name="sourceGroup">the source group.</param>
 <param name="targetGroup">The target group.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyProjectRuleHistoryAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyProjectRuleHistoryAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyReleasedComponents">
 <summary>
 Action that will copy component release information.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyReleasedComponents.#ctor(DriveWorks.Group,DriveWorks.Group,System.Func{System.String,System.String},System.Boolean,System.Boolean)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopyReleasedComponents"/>.
 </summary>
 <param name="sourceGroup">The source group.</param>
 <param name="targetGroup">The target group.</param>
 <param name="pathTranslator">The function used to convert paths.</param>
 <param name="copyReleaseDataReports">Whether or not to copy release data reports.</param>
 <param name="mapToSpecifications">Whether or not to map to specifications.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyReleasedComponents.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyReleasedComponents.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopySpecificationsAction">
 <summary>
 Action that will copy specification information.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopySpecificationsAction.#ctor(DriveWorks.Group,DriveWorks.Group,System.Func{System.String,System.String},System.Boolean,System.Boolean)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CopySpecificationsAction"/>.
 </summary>
 <param name="sourceGroup">The source group.</param>
 <param name="targetGroup">The target group.</param>
 <param name="pathTranslator">The function to use to change paths with.</param>
 <param name="copyReports">Whether or not to copy reports.</param>
 <param name="copyTasks">Whether or not to copy specification tasks.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopySpecificationsAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopySpecificationsAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopySpecificationsAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopySpecificationsAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopySpecificationsAction.CopySpecificationsStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CopySpecificationsAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CreateDirectoryAction">
 <summary>
 Action that will create a directory.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CreateDirectoryAction.#ctor(System.String)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.CreateDirectoryAction"/>.
 </summary>
 <param name="directory">The path of the directory to create.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CreateDirectoryAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CreateDirectoryAction.Directory">
 <summary>
 The directory path that will be made.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CreateDirectoryAction.ErrorMessage">
 <summary>
 The error message from attempting to view the target directory.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CreateDirectoryAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.CreateDirectoryAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.CreateDirectoryAction.CreateDirectoryStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.CreateDirectoryAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.PackageGroupDirectoryAction">
 <summary>
 Action that will create a drivepkg from a directory.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.PackageGroupDirectoryAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.PackageGroupDirectoryAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.RemapComponentsAction">
 <summary>
 Action that will remap component paths.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.RemapComponentsAction.#ctor(System.String,System.String,DriveWorks.Group)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.RemapComponentsAction"/>.
 </summary>
 <param name="sourceBasePath">The original base path.</param>
 <param name="targetBasePath">The new base path.</param>
 <param name="targetGroup">The group to edit.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.RemapComponentsAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.RemapComponentsAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.RemapComponentsAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.RemapComponentsAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.RemapComponentsAction.RemapComponentsStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.RemapComponentsAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.RemapGroupFoldersAction">
 <summary>
 Action that will remap group folder paths.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.#ctor(DriveWorks.Group,DriveWorks.Group,System.Func{System.String,System.String})">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.RemapGroupFoldersAction"/>.
 </summary>
 <param name="sourceGroup">The original group.</param>
 <param name="targetGroup">The target group.</param>
 <param name="pathConverter">The converter of paths function.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.Status">
 <summary>
 The current status of the action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.ContentFolder">
 <summary>
 The new content folder.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.SpecificationsFolder">
 <summary>
 The new specification folder.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="T:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.RemapGroupFoldersStatus">
 <summary>
 Presents the status of a <see cref="T:DriveWorks.GroupMaintenance.RemapGroupFoldersAction"/>.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.ReportMethod">
 <summary>
 Signature for a delegate that is used for reporting.
 </summary>
 <param name="message">The message to record.</param>
 <param name="isError">Whether or not the message is an error.</param>
</member>
<member name="T:DriveWorks.GroupMaintenance.ProcessActionBase">
 <summary>
 Provides a base for all actions used in maintenance processes.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.ProcessActionBase.StatusMessage">
 <summary>
 The current human readable status of this action.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.ProcessActionBase.IsIgnored">
 <summary>
 This is not implemented currently
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.ProcessActionBase.DependentActions">
 <summary>
 All actions that are required to have executed for this action to run.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.ProcessActionBase.GetCanExecute(System.Boolean)">
 <summary>
 Checks to see if the action can be executed or not.
 </summary>
 <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
 <returns>True if it can execute.</returns>
</member>
<member name="P:DriveWorks.GroupMaintenance.ProcessActionBase.WillExecute">
 <summary>
 Returns whether or not this action wants to execute.
 </summary>
 <returns>True if it this action wants to execute.</returns>
</member>
<member name="P:DriveWorks.GroupMaintenance.ProcessActionBase.HasExecuted">
 <summary>
 Whether or not this action has executed.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.ProcessActionBase.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
 <summary>
 Executes this action.
 </summary>
 <param name="report">A method that can be used for reporting status.</param>
 <returns>False if there is a critical error that means the entire transfer process should end.</returns>
</member>
<member name="M:DriveWorks.GroupMaintenance.ProcessActionBase.RaisePropertyChanged(System.String)">
 <summary>
 Raises the <see cref="E:DriveWorks.GroupMaintenance.ProcessActionBase.PropertyChanged"/> event.
 </summary>
 <param name="propertyName">The name of the property that has changed.</param>
</member>
<member name="E:DriveWorks.GroupMaintenance.ProcessActionBase.PropertyChanged">
 <summary>
 Raised when a property on this object changes.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupProcess">
 <summary>
 Provides a mechanism for copying information from one group to another.
 </summary>
</member>
<member name="E:DriveWorks.GroupMaintenance.CopyGroupProcess.StatusMessage">
 <summary>
 Raised whenever there is a status message event from the process.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.CreateCopyGroupProcess(DriveWorks.Group,DriveWorks.Group,DriveWorks.GroupMaintenance.CopyGroupOptions)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.GroupMaintenance.CopyGroupProcess"/>.
 </summary>
 <param name="sourceGroup">The source group.</param>
 <param name="targetGroup">The target group.</param>
 <param name="options">The options to use.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupProcess.IsStopped">
 <summary>
 Whether or no the process has been stopped.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupProcess.SourceGroup">
 <summary>
 The source group to copy from.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupProcess.Actions">
 <summary>
 The current actions to be executed.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.StopCopy">
 <summary>
 Stops the process from executing (if it was).
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.CheckStopped">
 <summary>
 Checks to see if the process is canceled.
 </summary>
 <returns>If the process is canceled.</returns>
 <remarks>This will cancel the operation if it is marked for cancellation.</remarks>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.Start">
 <summary>
 Starts the process of copying a group.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.GetActions">
 <summary>
 Gets a collection of all actions.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupOptions">
 <summary>
 Provides a set of options to be used in <see cref="T:DriveWorks.GroupMaintenance.CopyGroupProcess"/> and <see cref="T:DriveWorks.GroupMaintenance.PackageGroupProcess"/>.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.Projects">
 <summary>
 A collection of projects to copy.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.ProjectRuleRevisions">
 <summary>
 A collection projects for which rule revisions will be copied.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.GroupTables">
 <summary>
 A collection of group tables that will be copied.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CapturedComponents">
 <summary>
 A collection of captured components that will be copied.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.FileOptions">
 <summary>
 Gets/sets file copying options.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.TargetFolder">
 <summary>
 The target folder to copy the group and it's files to.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopySpecifications">
 <summary>
 Whether or not specifications will be copied.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopySpecificationReports">
 <summary>
 Whether or not specification's reports will be copied.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyTasks">
 <summary>
 Whether or not specification tasks will be copied.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyReleaseData">
 <summary>
 Whether or not release data will be copied.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyReleaseDataReports">
 <summary>
 Whether or not release reports will be copied.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyNewSecurityObjects">
 <summary>
 Whether or not new users and teams will be copied over.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyGroupConnectors">
 <summary>
 Whether or not all group connectors will be copied over.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.CopyGroupResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.AddGroupUserToTeamAction_Execute_CouldNotFindTeamInTargetGroup">
<summary>
  Looks up a localized string similar to Could not find a team in the target group with a matching Id for team &apos;{0}&apos;, to add the user &apos;{1}&apos; to..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.AddGroupUserToTeamAction_Execute_RptCouldNotFindTheUserInTargetGroup">
<summary>
  Looks up a localized string similar to Could not find the user in the target group with the login name &apos;{0}&apos;, to add to team &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.AddGroupUserToTeamAction_Execute_SourceAndTargetTeamNameDiffer">
<summary>
  Looks up a localized string similar to The source team name &apos;{0}&apos; and the target team name &apos;{1}&apos; differ. User &apos;{2}&apos; will not be added as we can&apos;t be sure this is intended..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.AddGroupUserToTeamAction_Execute_UserAddedToTeam">
<summary>
  Looks up a localized string similar to User &apos;{0}&apos; added to the team &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.AddGroupUserToTeamAction_Execute_UserNotAddedToTeam">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; was not added to the team &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.AddGroupUserToTeamAction_Header_Unknown">
<summary>
  Looks up a localized string similar to Unknown.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.AddGroupUserToTeamAction_Header_UserIsAlreadyInTeam">
<summary>
  Looks up a localized string similar to User &apos;{0}&apos; is already in the team &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.AddGroupUserToTeamAction_Header_UserIsntInTeamButTeamAndUserAlreadyExist">
<summary>
  Looks up a localized string similar to User &apos;{0}&apos; isn&apos;t in the team &apos;{1}&apos;, but the team and the user already exist. No action will be performed..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.AddGroupUserToTeamAction_Header_UserWillBeAddedToTeam">
<summary>
  Looks up a localized string similar to User &apos;{0}&apos; will be added to the team &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.ClearTempPackAndGoSecurityAction_Execute_RemovingTemporarySecurityInformation">
<summary>
  Looks up a localized string similar to Removing temporary security information.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.ClearTempPackAndGoSecurityAction_Execute_SigningIntoTargetGroup">
<summary>
  Looks up a localized string similar to Signing into the target group as &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.ClearTempPackAndGoSecurityAction_Header">
<summary>
  Looks up a localized string similar to Remove temporary security information from the package group..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyCapturedModelAction_Execute_MigratingCaptureData">
<summary>
  Looks up a localized string similar to Migrating capture data for &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyCapturedModelAction_Header_CopyExistingCapturedInfo">
<summary>
  Looks up a localized string similar to Copy existing captured information to &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyCapturedModelAction_Header_CopyNewCapturedInfo">
<summary>
  Looks up a localized string similar to Copy the new captured information to &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyCapturedModelAction_Header_CopyOverDeletedCaptureData">
<summary>
  Looks up a localized string similar to &apos;{0}&apos; is captured in the target group but is deleted. The capture data will be copied across and the component revision incremented..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyCapturedModelAction_Header_UnableToCopyAsMasterPathIsInUse">
<summary>
  Looks up a localized string similar to Unable to copy as the master path is in use on the target group &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyCapturedModelAction_Header_UnableToCopyComponentAsIsNotCapturedButTheTargetPathAlreadyTaken">
<summary>
  Looks up a localized string similar to Unable to copy component as the component is not captured but the target path already taken &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyCapturedModelAction_Header_UnableToCopyComponentCapturedButTargetPathDifferentFromExpectedValue">
<summary>
  Looks up a localized string similar to Unable to copy component as the component is captured but the target path is different from the expected value &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyFileAction_Execute_Copying">
<summary>
  Looks up a localized string similar to Copying &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyFileAction_Execute_ErrorCopying">
<summary>
  Looks up a localized string similar to Unable to copy &apos;{0}&apos; to &apos;{1}&apos;. {2}.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyFileAction_Header_CheckingFile">
<summary>
  Looks up a localized string similar to Checking file &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyFileAction_Header_CopyNewFile">
<summary>
  Looks up a localized string similar to Copy new file &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyFileAction_Header_FileSameAsTargetFileAndWillNotBeCopied">
<summary>
  Looks up a localized string similar to File &apos;{0}&apos; is the same as the target file and will not be copied..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyFileAction_Header_OverwriteFile">
<summary>
  Looks up a localized string similar to Overwrite file &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyFileAction_Header_ThereIsAProblemWith">
<summary>
  Looks up a localized string similar to There is a problem with &apos;{0}&apos;. {1}.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupConnectorAction_Execute_CopyingGroupConnectorDetails">
<summary>
  Looks up a localized string similar to Copying Group Connector information for &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupConnectorAction_Execute_CreatingGroupConnector">
<summary>
  Looks up a localized string similar to Creating Group Connector &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupConnectorAction_Execute_IgnoringGroupConnector">
<summary>
  Looks up a localized string similar to Ignoring Group Connector &apos;{0}&apos;. A connector of the same name but different type exists in target group &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupConnectorAction_Header_CopyGroupConnectorInformation">
<summary>
  Looks up a localized string similar to Copy information for the existing Group Connector &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupConnectorAction_Header_CopyNewGroupConnector">
<summary>
  Looks up a localized string similar to Copy the new Group Connector &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupConnectorAction_Header_IgnoreGroupConnectorTypeMismatch">
<summary>
  Looks up a localized string similar to Ignore the Group Connector &apos;{0}&apos;. A connector of the same name but different type exists in target group &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTableAction_Execute_CopyingGroupTableData">
<summary>
  Looks up a localized string similar to Copying Group Table data for &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTableAction_Execute_CreatingGroupTable">
<summary>
  Looks up a localized string similar to Creating Group Table &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTableAction_Header_CopyGroupTableData">
<summary>
  Looks up a localized string similar to Copy data for the existing Group Table &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTableAction_Header_CopyNewGroupTableData">
<summary>
  Looks up a localized string similar to Copy the new Group Table &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamAction_Execute_CreatingTeam">
<summary>
  Looks up a localized string similar to Creating team &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTEamAction_Execute_ProblemCreatingTheTeam">
<summary>
  Looks up a localized string similar to There was a problem creating the team. {0}.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamAction_Header_AlreadyTeamCalledButHasDifferentID">
<summary>
  Looks up a localized string similar to There is already a team called &apos;{0}&apos;, but it has a different Id..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamAction_Header_CopyNewTeam">
<summary>
  Looks up a localized string similar to Copy new team &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamAction_Header_TeamWillNotBeCopiedAsAlreadyExists">
<summary>
  Looks up a localized string similar to Team &apos;{0}&apos; will not be copied as it already exists..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamGroupTablePermissionAction_Execute_SettingPermissionForGroupTableForTeam">
<summary>
  Looks up a localized string similar to Setting permission for group table &apos;{0}&apos; for team &apos;{1}&apos; to &apos;{2}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamGroupTablePermissionAction_Header_AddPermissionForGroupTableForTeam">
<summary>
  Looks up a localized string similar to Add permission &apos;{0}&apos; for group table &apos;{1}&apos; for team &apos;{2}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamGroupTablePermissionAction_Header_CantFindGroupWithId">
<summary>
  Looks up a localized string similar to Cannot find the Group Table with the Id &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamGroupTablePermissionAction_Header_CantFindTheTeamWithTheId">
<summary>
  Looks up a localized string similar to Cannot find the team with the Id &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamGroupTablePermissionAction_Header_ChangeTeamPermissionForGroupTable">
<summary>
  Looks up a localized string similar to Change team &apos;{0}&apos; permission for group table &apos;{1}&apos; to &apos;{2}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamGroupTablePermissionAction_Header_CopyGroupPermissionForTeam">
<summary>
  Looks up a localized string similar to Copy group table &apos;{0}&apos; permission for team &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamGroupTablePermissionAction_Header_TeamAlreadyHasPermissionForGroupTable">
<summary>
  Looks up a localized string similar to Team &apos;{0}&apos; already has the permission &apos;{1}&apos; for group table &apos;{2}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamGroupTablePermissionAction_TryGetTargetDetails_CouldNotFindTheGroupTable">
<summary>
  Looks up a localized string similar to Could not find the group table &apos;{0}&apos;. This permission will be skipped..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamGroupTablePermissionAction_TryGetTargetDetails_CouldNotFindTheTeam">
<summary>
  Looks up a localized string similar to Could not find the team &apos;{0}&apos;. This permission will be skipped..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamProjectPermissionAction_Execute_NoFindProjectWithId">
<summary>
  Looks up a localized string similar to Could not find the project with the Id &apos;{0}&apos; ({1}). This permission will be skipped..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamProjectPermissionAction_Execute_NoFindTeamWithId">
<summary>
  Looks up a localized string similar to Could not find the team with the Id &apos;{0}&apos; ({1}). This permission will be skipped..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamProjectPermissionAction_Execute_ProblemSettingPermissionProjectOrTeamMayNoLongerExist">
<summary>
  Looks up a localized string similar to There was a problem setting the permission. The project or team may no longer exist..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamProjectPermissionAction_Execute_SettingPermissionForProjectForTeam">
<summary>
  Looks up a localized string similar to Setting permission for the project &apos;{0}&apos; for team &apos;{1}&apos; to &apos;{2}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamProjectPermissionAction_GetHeader_CannotFindAProjectWithTheIdToSetPermissionsForTeam">
<summary>
  Looks up a localized string similar to Cannot find a project with the Id &apos;{0}&apos; to set permissions for team &apos;{1}&apos; in the source group..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamProjectPermissionAction_GetHeader_CannotFindATeamWithTheIdToSetProjectPermissionsOn">
<summary>
  Looks up a localized string similar to Cannot find a team with the Id &apos;{0}&apos; to set project permissions on in the source group..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupTeamProjectPermissionAction_Header_CopyProjectTeamPermissionFor">
<summary>
  Looks up a localized string similar to Copy permissions for the project &apos;{0}&apos; for the &apos;{1}&apos; team.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupUserAction_Execute_CreatingUser">
<summary>
  Looks up a localized string similar to Creating user &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupUserAction_Header_CopyUser">
<summary>
  Looks up a localized string similar to Copy user &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupUserAction_Header_UserAlreadyExists">
<summary>
  Looks up a localized string similar to User &apos;{0}&apos; already exists..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyGroupUserAction_Header_UserNoExistButItsIDIsInUse">
<summary>
  Looks up a localized string similar to User &apos;{0}&apos; doesn&apos;t exist, but its Id is in use..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectDetailsAction_Execute_RegisteringProject">
<summary>
  Looks up a localized string similar to Registering project &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectDetailsAction_Execute_UpdatingProjectDetails">
<summary>
  Looks up a localized string similar to Updating project details for &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectDetailsAction_Execute_UpdatingProjectDetailsLocation">
<summary>
  Looks up a localized string similar to Updating project details from &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectDetailsAction_Header_CopyNewProjectInformation">
<summary>
  Looks up a localized string similar to Copy new project information for &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectDetailsAction_Header_ThereIsProjectWithIDButNameIsDifferent">
<summary>
  Looks up a localized string similar to There is a project with the Id for &apos;{0}&apos;, but the name is different.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectDetailsAction_Header_ThereIsProjectWithNameButDIsDifferent">
<summary>
  Looks up a localized string similar to There is a project with the name &apos;{0}&apos;, but the Id is different.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectDetailsAction_Header_UpdateProjectInformation">
<summary>
  Looks up a localized string similar to Update project information for &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectRuleHistoryAction_Execute_ClearingRuleHistoryForProjectInTargetGroup">
<summary>
  Looks up a localized string similar to Clearing rule history for project &apos;{0}&apos; in the target group..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectRuleHistoryAction_Execute_CopyingRuleRevisions">
<summary>
  Looks up a localized string similar to Copying {0} rule revisions..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyProjectRuleHistoryAction_Header_CopyAcrossRuleHistory">
<summary>
  Looks up a localized string similar to Copy across rule history for project &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopyReleasedComponents_Header">
<summary>
  Looks up a localized string similar to Copy Release Information.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopySpecificationsAction_Header_CopyAllSpecifications">
<summary>
  Looks up a localized string similar to Copy all specifications.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopySpecificationsAction_Header_ThereAreNoSpecificationsToCopy">
<summary>
  Looks up a localized string similar to There are no specifications to copy.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CopySpecificationsAction_Header_TheTargetGroupHasSpecifications">
<summary>
  Looks up a localized string similar to The target group has specifications. They must be cleared before any more specifications can be copied over to it..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CreateDirectoryAction_Execute_Creating">
<summary>
  Looks up a localized string similar to Creating &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CreateDirectoryAction_Execute_ErrorCreating">
<summary>
  Looks up a localized string similar to There was a problem creating &apos;{0}&apos;. {1}.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CreateDirectoryAction_Header_CreateDirectory">
<summary>
  Looks up a localized string similar to Create directory &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CreateDirectoryAction_Header_DirectoryAlreadyExists">
<summary>
  Looks up a localized string similar to Directory &apos;{0}&apos; already exists.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.CreateDirectoryAction_Header_ErrorLookingAtDirectory">
<summary>
  Looks up a localized string similar to A problem occurred looking at directory &apos;{0}&apos;. {1}.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.EditPermissionName">
<summary>
  Looks up a localized string similar to Edit.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.PackageGroupDirectoryAction_Execute_CopyingAllFiles">
<summary>
  Looks up a localized string similar to Copying all files from &apos;{0}&apos; into &apos;{1}&apos;. This may take a few minutes..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.PackageGroupDirectoryAction_Execute_ThereWasAProblemAccessingTheFilePath">
<summary>
  Looks up a localized string similar to There was a problem accessing the file path. {0}.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.PackageGroupDirectoryAction_Header">
<summary>
  Looks up a localized string similar to Package files into &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.PermissionNone">
<summary>
  Looks up a localized string similar to None.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.PermissionSpecifyName">
<summary>
  Looks up a localized string similar to Specify.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.PermissionView">
<summary>
  Looks up a localized string similar to View.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapComponentsAction_Execute_Changed">
<summary>
  Looks up a localized string similar to Changed &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapComponentsAction_Execute_RemappingComponentsAndTheirReferences">
<summary>
  Looks up a localized string similar to Remapping components and their references in &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapComponentsAction_Header_NoComponentRemapNeededAsPathsAreTheSame">
<summary>
  Looks up a localized string similar to No component remap needed as paths are the same.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapComponentsAction_Header_RemapAllComponentPathsInTargetGroup">
<summary>
  Looks up a localized string similar to Remap all component paths in the target group from &apos;{0}&apos; to &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapGroupFoldersAction_Execute_Changed">
<summary>
  Looks up a localized string similar to Group content folder changed to &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapGroupFoldersAction_Execute_ContentFolderSame">
<summary>
  Looks up a localized string similar to Group content folder not changed as it is not a sub folder of the copied folder..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapGroupFoldersAction_Execute_SpecFolderChanged">
<summary>
  Looks up a localized string similar to Group default specifications folder changed to &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapGroupFoldersAction_Execute_SpecificationFoldersSame">
<summary>
  Looks up a localized string similar to Group default specifications folder not changed as it is not a sub folder of the copied folder..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapGroupFoldersAction_StatusMessage_AllFoldersDifferent">
<summary>
  Looks up a localized string similar to Update group content folder and the default specifications folder..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapGroupFoldersAction_StatusMessage_AllFoldersSame">
<summary>
  Looks up a localized string similar to Unable to remap the group content folder or the default specifications folder as they are sub directories of the folder that will be copied..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapGroupFoldersAction_StatusMessage_ContentFolderSame">
<summary>
  Looks up a localized string similar to Unable to remap the group content folder as it is not a sub directory of the folder that will be copied..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.RemapGroupFoldersAction_StatusMessage_SpecificationsFolderSame">
<summary>
  Looks up a localized string similar to Unable to remap the default specifications folder as it is not a sub directory of the folder that will be copied..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.StatusCopyProcessFullyStopped">
<summary>
  Looks up a localized string similar to Copy process fully stopped..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.StatusStoppingCopyProcess">
<summary>
  Looks up a localized string similar to Stopping copy process..
</summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.CopyGroupResources.UnknownPermission">
<summary>
  Looks up a localized string similar to Unknown.
</summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.DirectoryStorageItemModel">
 <summary>
 Represents a directory in a file system.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.DirectoryStorageItemModel.#ctor(System.String)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.DirectoryStorageItemModel"/>.
 </summary>
 <param name="path">The full path of the directory.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.DirectoryStorageItemModel.Children">
 <summary>
 An aggregate collection of files and folders in this directory.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.DirectoryStorageItemModel.ErrorMessage">
 <summary>
 Gets and sets any error messages that were encountered whilst interacting with this directory.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.FilePickingOptions">
 <summary>
 Represents a set of choices for selecting files.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.FilePickingOptions.#ctor(System.String)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.FilePickingOptions"/>.
 </summary>
 <param name="rootFolder">The top most directory to select files from.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.RootFolder">
 <summary>
 The top most directory to select files from.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.IncludeFolders">
 <summary>
 Designed to negate excluded folders, not add folders outside the root.
 </summary>
 <remarks>
 Having things outside the root folder would mean either: 
 1. Some unpredictable/complex copying/extracting behaviour
 2. Some things would have to be referenced or impossible due to rules etc
 </remarks>
</member>
<member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.ExcludeFolders">
 <summary>
 Collection of directories that should not be included.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.IncludeFiles">
 <summary>
 Designed to negate exclude folders, not include files outside the root.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.ExcludeFiles">
 <summary>
 Collection of files that should not be included.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.FilePickingOptions.GetModel">
 <summary>
 Creates a new representation of all files and folders within the root and their inclusion state.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.FilePickingOptions.UpdateModel(DriveWorks.GroupMaintenance.DirectoryStorageItemModel)">
 <summary>
 Takes an existing model and updates it to match the current file system.
 </summary>
 <param name="root">The folder to start from.</param>
</member>
<member name="M:DriveWorks.GroupMaintenance.FilePickingOptions.GetFiles">
 <summary>
 Gets an effective collection of all files that are included based on the current options.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.PackageGroupProcess">
 <summary>
 Contains the implemented code for packaging a group.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.PackageGroupProcess.CreatePackageGroupProcess(DriveWorks.Group,System.String,System.String,DriveWorks.GroupMaintenance.CopyGroupOptions)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.GroupMaintenance.PackageGroupProcess"/> class.
 </summary>
 <param name="sourceGroup">The group to copy from.</param>
 <param name="packagePath">the path of the package file to create.</param>
 <param name="targetGroupName">The name of the group to create inside the package.</param>
 <param name="options">The options to use to pack the group.</param>
</member>
<member name="T:DriveWorks.GroupMaintenance.StatusMessageEventArgs">
 <summary>
 Event args that describe a status message.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.StatusMessageEventArgs.#ctor(System.String,System.Boolean)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.GroupMaintenance.StatusMessageEventArgs"/> class.
 </summary>
 <param name="message">The message for this status event.</param>
 <param name="isError">Whether or not this message is an error.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.StatusMessageEventArgs.CreationTime">
 <summary>
 Gets the creation time of this event in UTC.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.StatusMessageEventArgs.CreatedAt">
 <summary>
 Gets the creation date of this event in a localized local long time string.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.StatusMessageEventArgs.Message">
 <summary>
 Gets the message for this status event.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.StatusMessageEventArgs.IsError">
 <summary>
 Whether or not this message is an error.
 </summary>
</member>
<member name="T:DriveWorks.GroupMaintenance.StorageItemModel">
 <summary>
 Represents a file or folder on disk.
 </summary>
</member>
<member name="M:DriveWorks.GroupMaintenance.StorageItemModel.#ctor(System.String)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupMaintenance.StorageItemModel"/>.
 </summary>
 <param name="path">The location of the item on disk.</param>
</member>
<member name="P:DriveWorks.GroupMaintenance.StorageItemModel.FullPath">
 <summary>
 The location of the item on disk.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsLocked">
 <summary>
 Whether or not this item can change its inclusion/exclusion state.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsIncluded">
 <summary>
 Whether or not this item will effectively be included in selection.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsExplicitlyIncluded">
 <summary>
 Whether or not this item is specifically included in selection.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsExplicitlyExcluded">
 <summary>
 Whether or not this item is specifically excluded from selection.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.StorageItemModel.Name">
 <summary>
 The file name of this item.
 </summary>
</member>
<member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsIncludedCheckState">
 <summary>
 A combination of the included state, distinguishing between explicitly included (true) or just included (nothing) or not included at all (false)
 </summary>
</member>
<member name="T:DriveWorks.IArrayValueConverter">
 <summary>
 Implements a type converter for array values.
 </summary>
</member>
<member name="T:DriveWorks.Components.IReleaseExistingComponentTracker">
 <summary>
 Provides a contract for an object that will track existing components within the release process.
 </summary>
</member>
<member name="M:DriveWorks.Components.IReleaseExistingComponentTracker.NotifyEvaluatedAsReleasedComponent(DriveWorks.Components.ReleasedComponentDetails)">
 <summary>
 Called when the component has been evaluated as having already been released to the group.
 </summary>
 <param name="componentReleaseDetails">The release details for the component.</param>
</member>
<member name="M:DriveWorks.Components.IReleaseExistingComponentTracker.NotifyExistingComponentTagsChanged(DriveWorks.Components.ReleasedComponentDetails,System.String[])">
 <summary>
 Called when an existing component's tags change.
 </summary>
 <param name="componentReleaseDetails">The release details for the existing component.</param>
 <param name="newTags">An array of new tags for the existing components.</param>
 <remarks>This is not used by anything at the moment. It will need to be re-instated if we add support for updating existing components' tags.</remarks>
</member>
<member name="T:DriveWorks.Components.ReleasePreviewExistingComponentTracker">
 <summary>
 Responsible for tracking information during the release process necessary to create a 
 preview from it.
 </summary>
</member>
<member name="T:DriveWorks.Components.ReleaseExistingComponentTrackerProxyBase">
 <summary>
 Creates a proxy to a target instance of <see cref="T:DriveWorks.Components.IReleaseTracker"/> with an empty implementation
 for the <see cref="T:DriveWorks.Components.IReleaseExistingComponentTracker"/> specific methods.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskConditionEventArgs">
 <summary>
 Represents the event data that pertains to events related to component task conditions.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionEventArgs.Condition">
 <summary>
 Gets the condition involved in the event.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskConditionInfo">
 <summary>
 Provides additional information about a <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/>.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Title">
 <summary>
 Gets the title of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Description">
 <summary>
 Gets the description of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Image">
 <summary>
 Gets the image resource uri of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Category">
 <summary>
 Gets the category of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Type">
 <summary>
 Gets the type of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.TypeName">
 <summary>
 Gets the full type name used to serialize/deserialize the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Parameters">
 <summary>
 Gets the collection of parameter info describing the rules of the condition.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskConditionProperties">
 <summary>
 Represents a collection of <see cref="T:DriveWorks.Components.Tasks.ComponentTaskProperty"/> objects.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskConditionProperties.RuleChanged">
 <summary>
 The event that gets raised whenever a rule in the collection has changed.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionProperties.Count">
 <summary>
 Gets the number of elements in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionProperties.Item(System.Int32)">
 <summary>
 Gets the rule at the specified index in the read-only list.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionProperties.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through the collection.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskConditions">
 <summary>
 Represents a collection of <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/>s that are evaluated at runtime.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskConditions.Removed">
 <summary>
 The event that gets raised whenever a condition has been removed from this collection.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskConditions.Added">
 <summary>
 The event that gets raised whenever a condition is added to this collection.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskConditions.ConditionTitleChanged">
 <summary>
 The event that gets raised whenever the title of a condition in the collection changes.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditions.Task">
 <summary>
 Gets the task this condition is associated with.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditions.Count">
 <summary>
 Gets the number of conditions in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditions.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to get.</param>
 <returns>The condition at the specified index.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">Index is not a valid index for the collection.</exception>
 <exception cref="T:System.NotSupportedException">Attempting to call the setter of this property.</exception>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditions.IsReadOnly">
 <summary>
 Gets whether this collection is read only.
 </summary>
 <remarks>This is always False.</remarks>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Add``1(System.String)">
 <summary>
 Creates and adds a new condition of the specified type to the collection.
 </summary>
 <typeparam name="T">The type of the condition to add (Must inherit from <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition" />).</typeparam>
 <param name="title">The title of the condition to create.</param>
 <returns>The newly created condition.</returns>
 <exception cref="T:System.ArgumentException">The specified type is not a valid <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/> type.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Add(System.Type,System.String)">
 <summary>
 Creates and adds a new condition of the specified type to the collection.
 </summary>
 <param name="type">The type of the condition to add (Must inherit from <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition" />).</param>
 <param name="title">The title of the condition to create.</param>
 <returns>The newly created condition.</returns>
 <exception cref="T:System.ArgumentException">The specified type is not a valid <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/> type.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Add``1(System.String,System.Int32)">
 <summary>
 Creates and adds a new condition of the specified type to the collection.
 </summary>
 <typeparam name="T">The type of the condition to add (Must inherit from <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition" />).</typeparam>
 <param name="title">The title of the condition to create.</param>
 <param name="index">The index to insert the newly condition at.</param>
 <returns>The newly created condition.</returns>
 <exception cref="T:System.ArgumentException">The specified type is not a valid <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/> type.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Add(System.Type,System.String,System.Int32)">
 <summary>
 Creates and adds a new condition of the specified type to the collection.
 </summary>
 <param name="type">The type of the condition to add (Must inherit from <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition" />).</param>
 <param name="title">The title of the condition to create.</param>
 <param name="index">The index to insert the newly condition at.</param>
 <returns>The newly created condition.</returns>
 <exception cref="T:System.ArgumentException">The specified type is not a valid <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/> type.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Save">
 <summary>
 Saves the conditions in this collection to the highest bidder.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Remove(DriveWorks.Components.Tasks.ComponentTaskCondition)">
 <summary>
 Removes a condition from the collection.
 </summary>
 <param name="condition">The condition to remove.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through the collection. 
 </summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be used to iterate through the collection.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.IndexOf(DriveWorks.Components.Tasks.ComponentTaskCondition)">
 <summary>
 Determines the index of the specific condition in the collection.
 </summary>
 <param name="item">The condition to locate in the collection.</param>
 <returns>The index of condition if found in the collection, otherwise -1.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.RemoveAt(System.Int32)">
 <summary>
 Removes the condition at the specified index.
 </summary>
 <param name="index">The index of the condition to remove.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Clear">
 <summary>
 Removes all conditions from the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.CopyTo(DriveWorks.Components.Tasks.ComponentTaskCondition[],System.Int32)">
 <summary>
 Copies the elements of the System.Collections.Generic.ICollection`1 to an System.Array, starting at a particular System.Array index. 
 </summary>
 <param name="array">The one-dimensional System.Array that is the destination of the elements copied from this collection.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Contains(DriveWorks.Components.Tasks.ComponentTaskCondition)">
 <summary>
 Determines whether the collection contains a specific condition.
 </summary>
 <param name="condition">The condition to locate in the collection.</param>
 <returns>True if the condition was found in the collection, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Insert(System.Int32,DriveWorks.Components.Tasks.ComponentTaskCondition)">
 <summary>
 This method is not supported.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Add(DriveWorks.Components.Tasks.ComponentTaskCondition)">
 <summary>
 This method is not supported.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionEventArgs">
 <summary>
 Represents the event data that pertains to events related to component task conditions.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionEventArgs.Condition">
 <summary>
 Gets the condition involved in the event.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo">
 <summary>
 Provides additional information about a <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/>.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Title">
 <summary>
 Gets the title of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Description">
 <summary>
 Gets the description of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Image">
 <summary>
 Gets the image resource uri of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Category">
 <summary>
 Gets the category of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Type">
 <summary>
 Gets the type of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.TypeName">
 <summary>
 Gets the full type name used to serialize/deserialize the condition.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentSpecificComponentTaskCollection">
 <summary>
 Represents a collection of tasks that are specific to a component.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition">
 <summary>
 Represents a condition which governs whether a <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/> getes released during the release process.
 </summary>
 <example>
 <code lang="VB" title="Condition Example">
 <![CDATA[
 <ComponentTaskCondition("Check Value", 
                         "Passes the condition if the rule written for the Condition Result property results in the value TRUE.", 
                         "embedded://MyTasksAndConditions.Puzzle-16x16.png", 
                         "Logic")>
 Public Class CheckValueCondition
     Inherits ComponentTaskReleaseCondition

     Private myProperty As FlowProperty(Of Boolean) = Me.Properties.RegisterBooleanProperty("Condition Result", "TRUE to pass the condition")
 
     Protected Overrides Function Evaluate(ByVal specificationContext As SpecificationContext) As Boolean 
         Return myProperty.Value
     End Function
 End Class]]>
 </code>
 </example>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.TitleChanged">
 <summary>
 The event that gets raised whenever the value of the <see cref="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Title"/> property has changed.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.#ctor">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition"/> class.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Negated">
 <summary>
 Determins whether the condition evaluation is to be negated (have not applied to it).
 </summary>
 <returns></returns>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Index">
 <summary>
 Gets the index of this condition within the parent collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Id">
 <summary>
 Gets the unique identifier of this condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Title">
 <summary>
 Gets/sets the title of this condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Properties">
 <summary>
 Represents all properties of the task that can have rules written for them.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Parent">
 <summary>
 Gets the collection this condition belongs to.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Info">
 <summary>
 Gets additional meta information about the condition, such as the localized title and description.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Save">
 <summary>
 Pushes the current condition information into the backing store.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Initialize(DriveWorks.Components.Tasks.ComponentTaskReleaseConditions,DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo,System.Xml.Linq.XElement,DriveWorks.RuleVersionManager)">
 <summary>
 Initializes the condition with serialized data.
 </summary>
 <param name="collection">The collection that owns this condition.</param>
 <param name="element">The root XML element of this condition in the serialized data.</param>
 <param name="versionManager">The version manager to use for this condition.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.InvokeEvaluate(DriveWorks.Specification.SpecificationContext,System.Boolean)">
 <summary>
 Invokes the Protected Evaluate method and returns the result.
 </summary>
 <param name="ctx">The active <see cref="T:DriveWorks.Specification.SpecificationContext"/>.</param>
 <returns>True if the condition passed, False if the condition should prevent the 
 associated task from being released.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Evaluate(DriveWorks.Specification.SpecificationContext)">
 <summary>
 When overridden by a derived class, evaluates the condition.
 </summary>
 <param name="specificationContext">The active execution context.</param>
 <returns>True if the condition passes, otherwise false.</returns>
 <remarks>Returning False from this method in a derived class will prevent the <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/> from being released.</remarks>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute">
 <summary>
 Attribute to be assigned to implementors of the <see cref="T:DriveWorks.Components.Tasks.IComponentTaskCondition" /> interface to provide additional information about the condition.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.#ctor(System.String)">
 <summary>
 Creates a new instance of the see <see cref="T:DriveWorks.Components.Tasks.ComponentTaskAttribute" /> class.
 </summary>
 <param name="title">The title to show the user when administrating the condition.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of the see <see cref="T:DriveWorks.Components.Tasks.ComponentTaskAttribute" /> class.
 </summary>
 <param name="title">The title to show the user when administrating the condition.</param>
 <param name="description">The description providing the user with additional information about this condition.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.#ctor(System.String,System.String,System.String)">
 <summary>
 Creates a new instance of the see <see cref="T:DriveWorks.Components.Tasks.ComponentTaskAttribute" /> class.
 </summary>
 <param name="title">The title to show the user when administrating the condition.</param>
 <param name="description">The description providing the user with additional information about this condition.</param>
 <param name="image">The resource uri to the image used to represent the associated condition.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Creates a new instance of the see <see cref="T:DriveWorks.Components.Tasks.ComponentTaskAttribute" /> class.
 </summary>
 <param name="title">The title to show the user when administrating the condition.</param>
 <param name="description">The description providing the user with additional information about this condition.</param>
 <param name="image">The resource uri to the image used to represent the associated condition.</param>
 <param name="category">The category of the condition.</param>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.Title">
 <summary>
 The title of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.Description">
 <summary>
 Gets the description of this condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.Image">
 <summary>
 Gets the description of this condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.Category">
 <summary>
 Gets/sets the category of this condition.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions">
 <summary>
 Represents a collection of conditions that governs whether a <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/> gets released.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Added">
 <summary>
 The event that gets raised whenever a task has been added to the collection.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Removed">
 <summary>
 The event that gets raised whenever a task has been removed from the collection.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.ConditionTitleChanged">
 <summary>
 The event that gets raised whenever the title of a condition in the collection changes.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Task">
 <summary>
 Gets the task this collection of conditions is associated with.
 </summary>
 <returns></returns>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Item(System.Int32)">
 <summary>
 Gets the element at the specified index in the collection.
 </summary>
 <param name="index">The zero-based index of the element to get.</param>
 <returns>The element at the specified index in the read-only list.</returns>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Count">
 <summary>
 Gets the number of elements in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.IsReadOnly">
 <summary>
 Gets a value indicating whether the collection is read-only.
 </summary>
 <remarks>This is always False.</remarks>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Initialize(DriveWorks.Hosting.LibraryManager,DriveWorks.Components.Tasks.ComponentTask,System.Xml.Linq.XElement,DriveWorks.RuleVersionManager)">
 <summary>
 Initializes the collection of conditions with the serialized condition data.
 </summary>
 <param name="libraryManager">The library manager used to look up condition types.</param>
 <param name="element">The root XML element of the collection containing the serialized conditions.</param>
 <param name="ruleManager">The rule version manager for this collection.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Add(System.Type,System.String)">
 <summary>
 Creates a new <see cref="T:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition"/> of the given type and adds it to the collection.
 </summary>
 <param name="type">The type of the condition to create. This type must inherit from <see cref="T:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition"/>.</param>
 <param name="title">The title of the condition to create.</param>
 <returns>The newly created condition.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Add``1(System.String)">
 <summary>
 Creates a new <see cref="T:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition"/> of type <typeparamref name="T"/> and
 adds it to the collection.
 </summary>
 <typeparam name="T">The type of the condition to create. This type must inherit from <see cref="T:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition"/>.</typeparam>
 <param name="title">The title of the condition to create.</param>
 <returns>The newly created condition.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through the collection. 
 </summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be used to iterate through the collection.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.IndexOf(DriveWorks.Components.Tasks.ComponentTaskReleaseCondition)">
 <summary>
 Determines the index of the specific condition in the collection.
 </summary>
 <param name="item">The condition to locate in the collection.</param>
 <returns>The index of condition if found in the collection, otherwise -1.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.RemoveAt(System.Int32)">
 <summary>
 Removes the condition at the specified index.
 </summary>
 <param name="index">The index of the condition to remove.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Clear">
 <summary>
 Removes all conditions from the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.CopyTo(DriveWorks.Components.Tasks.ComponentTaskReleaseCondition[],System.Int32)">
 <summary>
 Copies the elements of the System.Collections.Generic.ICollection`1 to an System.Array, starting at a particular System.Array index. 
 </summary>
 <param name="array">The one-dimensional System.Array that is the destination of the elements copied from this collection.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Contains(DriveWorks.Components.Tasks.ComponentTaskReleaseCondition)">
 <summary>
 Determines whether the collection contains a specific condition.
 </summary>
 <param name="condition">The condition to locate in the collection.</param>
 <returns>True if the condition was found in the collection, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Remove(DriveWorks.Components.Tasks.ComponentTaskReleaseCondition)">
 <summary>
 Removes the first occurrence of the given condition within the collection.
 </summary>
 <param name="item">The item to remove.</param>
 <returns>True if the item was successfully removed, otherwise False.</returns>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskEventArgs">
 <summary>
 Provides data for events related to <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskEventArgs.Task">
 <summary>
 Gets the task associated with this event.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData">
 <summary>
 Represents additional information about a parameter for a <see cref="T:DriveWorks.Components.Tasks.ComponentTaskParameterInfo"/>. 
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.#ctor(DriveWorks.Forms.DataModel.PropertyBehavior)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData"/> class. 
 </summary>
 <param name="behavior">The behavior of the property.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.#ctor(DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,System.Object)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData"/> class. 
 </summary>
 <param name="behaviour">The behavior of the property.</param>
 <param name="valueType">The CLR type of the property when it is static (if supported).</param>
 <param name="defaultValue">The default value of the property when it has just been created.</param>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.#ctor(DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,System.Object,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData"/> class. 
 </summary>
 <param name="behaviour">The behavior of the property.</param>
 <param name="ruleTypes">The rule type of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskProperty"/>.</param>
 <param name="defaultValue">The default value of the property when it has just been created.</param>
 <param name="valueType">The CLR type of the property when it is static (if supported).</param>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.RuleTypes">
 <summary>
 Gets the type the rule represents.
 </summary>
 <remarks>For a list of rule types see <see cref="T:DriveWorks.StandardRuleTypes"/>.</remarks>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.Behavior">
 <summary>
 Gets the behavior of this property describing whether it can be made dynamic and/or static.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.Type">
 <summary>
 Gets the value type the property holds if it supports being static and holds a static value.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.DefaultValue">
 <summary>
 Gets the default value of the property.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskProperty">
 <summary>
 Represents a property on a <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>. 
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskProperty.IsDynamicChanged">
 <summary>
 The event that gets raised when the <see cref="P:DriveWorks.Components.Tasks.ComponentTaskProperty.IsDynamic"/> property has changed. 
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.Type">
 <summary>
 Gets the CLR type of the value the parameter holds if <see cref="P:DriveWorks.Components.Tasks.ComponentTaskProperty.IsDynamic"/> is False.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.CanMakeStatic">
 <summary>
 Gets whether this property can be made static.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.CanMakeDynamic">
 <summary>
 Gets whether this property can be made dynamic.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.IsDynamic">
 <summary>
 Gets whether this property is dynamic.
 </summary>
 <remarks>To switch a dynamic state of a property ensure <see cref="P:DriveWorks.Components.Tasks.ComponentTaskProperty.CanMakeDynamic"/> is True 
 use <see cref="M:DriveWorks.Components.Tasks.ComponentTaskProperty.SetIsDynamic(System.Boolean)"/> to update the property.</remarks>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.Value">
 <summary>
 Gets/sets the value of the rule.
 </summary>
 <remarks>This should only be called when <see cref="P:DriveWorks.Components.Tasks.ComponentTaskProperty.IsDynamic"/> is False.</remarks>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.DefaultValue">
 <summary>
 Gets the default value of the property.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskProperty.SetIsDynamic(System.Boolean)">
 <summary>
 Changes whether this property is bound to a rule, or a static value.
 </summary>
 <param name="isDynamic">True if this property should be bound to a rule, False for it to be bound
 to a static value.</param>
 <exception cref="T:System.InvalidOperationException">The property does not support being made dynamic.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskProperty.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation and updates the version history.
 </summary>
 <param name="newRule">The new rule to set.</param>
 <param name="newComment">The new comment to set.</param>
 <remarks>The version history will not be updated if neither the rule nor the comment has changed.</remarks>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskProperty.SetDynamicAndConvertValue(DriveWorks.Components.Tasks.ComponentTaskProperty,System.Boolean)">
 <summary>
 Modifies the <see cref="P:DriveWorks.Components.Tasks.ComponentTaskProperty.IsDynamic"/> property, and if the property is static converts the static value
 into a rule. If the property is dynamic, it'll evaluate the rule and assign the result of the rule to the value property.
 </summary>
 <param name="prop">The property to switch the <see cref="P:DriveWorks.Components.Tasks.ComponentTaskProperty.IsDynamic"/> property of.</param>
 <param name="isDynamic">True to make the property dynamic, False to make it static.</param>
 <remarks>The default value will be assigned to the property if the conversion from dynamic to static fails due to a type mismatch.</remarks>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskSequenceLocation">
 <summary>
 Represents the different locations in the generation sequence that tasks can scheduled for execution.
 </summary>
</member>
<member name="F:DriveWorks.Components.Tasks.ComponentTaskSequenceLocation.Before">
 <summary>
 Indicates that the task should run before the core generation sequence.
 </summary>
</member>
<member name="F:DriveWorks.Components.Tasks.ComponentTaskSequenceLocation.After">
 <summary>
 Indicates that the task should run after the core generation sequence.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskAccessor">
 <summary>
 Provides access to the <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>s for a component or type of component.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Clear">
 <summary>
 Removes all tasks managed by this accessor from the project.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Remove(DriveWorks.Components.Tasks.ComponentTask)">
 <summary>
 Removes the given task from the collection and deletes it from the project.
 </summary>
 <param name="task">The task to remove.</param>
 <returns>True if the task was successfully removed.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Insert``1(System.String,System.Int32)">
 <summary>
 Creates and inserts a new <see cref="T:DriveWorks.Components.Tasks.ComponentTask" /> at the given index.
 </summary>
 <typeparam name="T">The type of the task to create.</typeparam>
 <param name="name">The name of the task to create.</param>
 <param name="index">The index to insert the newly created task in.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
 <exception cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Insert``1(System.String,System.Int32,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
 <summary>
 Creates and inserts a new <see cref="T:DriveWorks.Components.Tasks.ComponentTask" /> at the given index.
 </summary>
 <typeparam name="T">The type of the task to create.</typeparam>
 <param name="name">The name of the task to create.</param>
 <param name="index">The index to insert the newly created task in.</param>
 <param name="location">The location of the task to insert.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
 <exception cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Insert(System.Type,System.String,System.Int32)">
 <summary>
 Creates and inserts a new <see cref="T:DriveWorks.Components.Tasks.ComponentTask" /> at the given index.
 </summary>
 <param name="type">The type of the task to create.</param>
 <param name="name">The name of the task to create.</param>
 <param name="index">The index to insert the newly created task in.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
 <exception cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Insert(System.Type,System.String,System.Int32,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
 <summary>
 Creates and inserts a new <see cref="T:DriveWorks.Components.Tasks.ComponentTask" /> at the given index.
 </summary>
 <param name="type">The type of the task to create.</param>
 <param name="name">The name of the task to create.</param>
 <param name="index">The index to insert the newly created task in.</param>
 <param name="location">The location of the task to insert.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
 <exception cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Add``1(System.String)">
 <summary>
 Adds a new task to the collection and returns the newly created task.
 </summary>
 <typeparam name="T">The type of the task to create.</typeparam>
 <param name="name">The name of the task to create.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Add``1(System.String,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
 <summary>
 Adds a new task to the collection and returns the newly created task.
 </summary>
 <typeparam name="T">The type of the task to create.</typeparam>
 <param name="name">The name of the task to create.</param>
 <param name="location">The location of the task.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Add(System.Type,System.String)">
 <summary>
 Adds a new task to the collection and returns the newly created task.
 </summary>
 <param name="type">The type of the task to create.</param>
 <param name="name">The name of the task to create.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Add(System.Type,System.String,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
 <summary>
 Adds a new task to the collection and returns the newly created task.
 </summary>
 <param name="type">The type of the task to create.</param>
 <param name="name">The name of the task to create.</param>
 <param name="location">The location of the task.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Get(System.Guid)">
 <summary>
 Gets the task with the given id in the collection (or a null reference if the task doesn't exist).
 </summary>
 <param name="taskId">The id of the task to get.</param>
 <returns>The task with the given id if it's present in the collection, otherwise a null reference.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Get(System.String)">
 <summary>
 Gets the task with the given name in the collection (or a null reference if the task doesn't exist).
 </summary>
 <param name="name">The name of the task to get.</param>
 <returns>The task with the given name if it's present in the collection, otherwise a null reference.</returns>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskAccessor.TotalTaskCount">
 <summary>
 Gets the total number of tasks in the accessor.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.IsNameTaken(System.String)">
 <summary>
 Checks if the given name is occupied by a task in any of the collections managed by this accessor.
 </summary>
 <param name="name">The name to check.</param>
 <returns>True if a task exists in the accessor with the given name.</returns>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskAccessor.Item(DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
 <summary>
 Gets the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCollection"/> for the tasks with the specified location.
 </summary>
 <param name="location">The sequence location of the task collection to retrieve.</param>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskAccessor.Collections">
 <summary>
 Gets the task collections this accessor manages.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.EnsureCollection(DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
 <summary>
 Ensures that a task collection for the given location has been created.
 </summary>
 <param name="location">The location of the task collection.</param>
 <returns>A task collection for the given location.</returns>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskCondition">
 <summary>
 Represents a <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/> condition that is released alongside <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>s
 and are evaluated at the time of executing the task.
 </summary>
</member>
<member name="F:DriveWorks.Components.Tasks.ComponentTaskCondition.CONDITION_RELEASE_TYPE_ID">
 <summary>
 The id of the released condition within the parents collection of released conditions.
 </summary>
</member>
<member name="F:DriveWorks.Components.Tasks.ComponentTaskCondition.INDEX_PARAM_TYPE_ID">
 <summary>
 The index of the task within the parents collection.
 </summary>
</member>
<member name="F:DriveWorks.Components.Tasks.ComponentTaskCondition.TITLE_PARAM_TYPE_ID">
 <summary>
 Gets the unique identifier of the <see cref="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Title"/> parameter in the release data.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskCondition.#ctor(System.Xml.Linq.XElement,DriveWorks.Components.Tasks.ComponentTaskConditions,DriveWorks.Components.Tasks.ComponentTaskConditionInfo,DriveWorks.Project)">
 <summary>
 Only invoked via the shared helpers.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskCondition.IndexChanged">
 <summary>
 The event that is raised whenever the index of this task within the parent collection changes.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskCondition.TitleChanged">
 <summary>
 The event that is raised whenever the <see cref="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Title"/> property's value has changed.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Parent">
 <summary>
 Gets the collection of conditions this condition belongs to.
 </summary>
 <returns></returns>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Info">
 <summary>
 Gets the meta data describing the type of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Properties">
 <summary>
 Gets the collection of properties for this condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.TypeName">
 <summary>
 Gets the type of the type of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Id">
 <summary>
 Gets the id of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Title">
 <summary>
 Gets/sets the title of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Index">
 <summary>
 Gets the index of the condition in the parent collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskCondition.Save">
 <summary>
 Saves the condition to the backing XML store.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskCondition.SetIndex(System.Int32)">
 <summary>
 Sets the index of this task.
 </summary>
 <param name="newIndex"></param>
 <remarks>This method only updates the cached value in the condition (and notifies
 event listeners) it doesn't actually move the condition. 
 This method should only be invoked from the collection that owns this condition.</remarks>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskCondition.Load(DriveWorks.Components.Tasks.ComponentTaskConditionInfo,System.Xml.Linq.XElement,DriveWorks.Project,DriveWorks.Components.Tasks.ComponentTaskConditions)">
 <summary>
 Deserializes a <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/> stored in XML.
 </summary>
 <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> that holds the condition's information.</param>
 <param name="project">The <see cref="T:DriveWorks.Project"/> to which the condition belongs.</param>
 <param name="parent">The collection that owns the condition to deserialize.</param>
 <returns>The deserialized condition.</returns>
</member>
<member name="T:DriveWorks.Components.Tasks.StandardConditions.CheckValueComponentTaskReleaseCondition">
 <summary>
 A component task condition which determines whether the value entered is TRUE/YES/1.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.StandardConditions.CheckValueComponentTaskReleaseCondition.Value">
 <summary>
 Gets the value to check for.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.StandardConditions.ReleaseToAutopilotCondition">
 <summary>
 A Component Task condition which determines whether the ReleaseToAutoPilot setting is turned on. 
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.StandardConditions.ReleaseToAutopilotCondition.SettingValue">
 <summary>
 Gets/sets the desires setting value to check for when
 this condition is evaluated.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.IComponentTask">
 <summary>
 Represents the common interface for all <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.IComponentTask.Parameters">
 <summary>
 Gets all capturable parameters for the task.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTask">
 <summary>
 Represents a component task that has been added to the project.
 </summary>
</member>
<member name="F:DriveWorks.Components.Tasks.ComponentTask.TASK_RELEASE_TYPE_ID">
 <summary>
 The element type id of released <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>s in the underlying release data.
 </summary>
</member>
<member name="F:DriveWorks.Components.Tasks.ComponentTask.LOCATION_PARAM_TYPE_ID">
 <summary>
 The type id of the <see cref="P:DriveWorks.Components.Tasks.ComponentTask.Location"/> parameter the release data for <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>s.
 </summary>
</member>
<member name="F:DriveWorks.Components.Tasks.ComponentTask.INDEX_PARAM_TYPE_ID">
 <summary>
 The type id of the <see cref="P:DriveWorks.Components.Tasks.ComponentTask.Index"/> parameter the release data for <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>s.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTask.NameChanged">
 <summary>
 The event that gets raised when the name of the task has changed.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTask.IndexChanged">
 <summary>
 The event that gets raised when the index of the task has changed in the parent collection.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTask.LocationChanged">
 <summary>
 The even that gets raised when the location of the task has changed.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.ReleaseConditions">
 <summary>
 Gets the collection of conditions that governs whether this task gets released alongside the associated component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.RuntimeConditions">
 <summary>
 Gets the collection of conditions that will be released alongside the component and evaluated at run time.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.Id">
 <summary>
 Gets the unique identifier of this task.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.Name">
 <summary>
 Gets/sets the title of the task.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.Type">
 <summary>
 Gets the type of the task.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.Index">
 <summary>
 Gets the index of this task in the parent collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.Parameters">
 <summary>
 Gets the collection of parameters for this task.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.Location">
 <summary>
 Gets/sets the location of this task in the generation sequence.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.Path">
 <summary>
 Gets the path to the task.
 </summary>
 <remarks>This is the base for the MyName() result in task properties.</remarks>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.XElement">
 <summary>
 Gets the XML element used to store this task in the project.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.ComponentId">
 <summary>
 Gets the id of the component this task is associated with.
 </summary>
 <remarks>If this task is not associated with a component, this will return null.
 In which case the <see cref="P:DriveWorks.Components.Tasks.ComponentTask.Scope" /> property should be used instead.</remarks>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTask.Scope">
 <summary>
 Gets the scope the task has been added to.
 </summary>
 <remarks>This property only holds a value if the task has been added to a scope. If the task
 has been added to a <see cref="T:DriveWorks.Components.ProjectComponent"/> this property will be null.</remarks>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTask.Load(DriveWorks.Components.Tasks.ComponentTaskInfo,System.Xml.Linq.XElement,DriveWorks.Project)">
 <summary>
 Deserializes a <see cref="T:DriveWorks.Components.Tasks.ComponentTask" /> from the given XML.
 </summary>
 <param name="element">The serialized task to deserialize.</param>
 <param name="project">THe project associated with the given task.</param>
 <returns>The newly created task.</returns>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskAttribute">
 <summary>
 Attribute to be assigned to implementors of the <see cref="T:DriveWorks.Components.Tasks.IComponentTask" /> interface to provide additional information about the task.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskAttribute.#ctor(System.String,System.String,System.String,System.String[],System.String)">
 <summary>
 Creates a new instance of the see <see cref="T:DriveWorks.Components.Tasks.ComponentTaskAttribute" /> class.
 </summary>
 <param name="name">The title to show the user when administrating the task.</param>
 <param name="description">The description providing the user with additional information about this task.</param>
 <param name="image">The resource uri to the image used to represent the associated task.</param>
 <param name="scopes">Specifies with types of components this task supports.</param>
 <param name="category">The category of the task.</param>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskAttribute.Name">
 <summary>
 The name of the task as shown to the end user when administrating tasks.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskAttribute.Description">
 <summary>
 Gets the description of this task providing additional information about this task.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskAttribute.Image">
 <summary>
 Gets the description of this task providing additional information about this task.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskAttribute.ScopeNames">
 <summary>
 Gets the name of the scopes supported by this task.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskAttribute.Category">
 <summary>
 Gets/sets the category of this task.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskCollection">
 <summary>
 Represents a collection of <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskCollection.Added">
 <summary>
 The event that gets raised when a task has been added to the collection.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskCollection.Removed">
 <summary>
 The event that gets raised when a task has been removed from the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Remove(DriveWorks.Components.Tasks.ComponentTask,System.Boolean)">
 <summary>
 Note: deleteFromProject should only be False when moving a task between two collections
 without recreating the task.
 </summary>
 <remarks>This should only be called directly from outside of this class by the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskAccessor"/>!</remarks>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Add(System.Type,System.String)">
 <summary>
 Adds a new task to the collection and returns the newly created task.
 </summary>
 <param name="type">The type of the task to create.</param>
 <param name="name">The name of the task to create.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Insert(System.Type,System.String,System.Int32)">
 <summary>
 Creates and inserts a new <see cref="T:DriveWorks.Components.Tasks.ComponentTask" /> at the given index.
 </summary>
 <param name="type">The type of the task to create.</param>
 <param name="name">The name of the task to create.</param>
 <param name="index">The index to insert the newly created task in.</param>
 <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
 <exception cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Move(System.Int32,System.Int32)">
 <summary>
 Moves the task at <paramref name="oldIndex" /> to <paramref name="newIndex" />.
 </summary>
 <param name="oldIndex">The index of the task to move.</param>
 <param name="newIndex">The new index of the task.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Remove(DriveWorks.Components.Tasks.ComponentTask)">
 <summary>
 Removes the given task from the collection and deletes it from the project.
 </summary>
 <param name="task">The task to remove.</param>
 <returns>True if the task was successfully removed.</returns>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskInfo">
 <summary>
 Helper class that stores information about a Component Task
 as loaded from the LibraryManager.
 </summary>
 <remarks>This is used to create new tasks in the project of this task's type.</remarks>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskParameterInfo">
 <summary>
 Represents the capturable parameters of a <see cref="T:DriveWorks.Components.Tasks.IComponentTask" />.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskParameterInfo"/> class.
 </summary>
 <param name="name">The name of the parameter.</param>
 <param name="displayName">The name of the parameter to show end end user.</param>
 <exception cref="T:System.ArgumentException"><paramref name="name"/> is null or empty.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.#ctor(System.String,System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskParameterInfo"/> class.
 </summary>
 <param name="name">The name of the parameter.</param>
 <param name="displayName">The name of the parameter to show end end user.</param>
 <param name="description">The description of the parameter.</param>
 <exception cref="T:System.ArgumentException"><paramref name="name"/> is null or empty.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskParameterInfo"/> class.
 </summary>
 <param name="name">The name of the parameter.</param>
 <param name="displayName">The name of the parameter to show end end user.</param>
 <param name="description">The description of the parameter.</param>
 <param name="category">The category this parameter belongs to.</param>
 <exception cref="T:System.ArgumentException"><paramref name="name"/> is null or empty.</exception>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.#ctor(System.String,System.String,System.String,System.String,DriveWorks.Components.Tasks.ComponentTaskParameterMetaData)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskParameterInfo"/> class.
 </summary>
 <param name="name">The name of the parameter.</param>
 <param name="displayName">The name of the parameter to show end end user.</param>
 <param name="description">The description of the parameter.</param>
 <param name="category">The category this parameter belongs to.</param>
 <param name="metaData">Additional meta data describing the parameter.</param>
 <exception cref="T:System.ArgumentException"><paramref name="name"/> is null or empty.</exception>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.Name">
 <summary>
 Gets the name of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.DisplayName">
 <summary>
 Gets the name of the task to display to the end user.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.Description">
 <summary>
 Gets the description of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.Category">
 <summary>
 Gets the category of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.MetaData">
 <summary>
 Gets the rule types of the parameter.
 </summary>
 <returns></returns>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskRuleCollection">
 <summary>
 Represents a collection of rules for a <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.RuleChanged">
 <summary>
 The event that gets raised whenever a rule in the collection has changed.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.Task">
 <summary>
 Gets the task this rule collection belongs to.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.Count">
 <summary>
 Gets the number of items in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.GetEnumerator">
 <summary>
 Gets an enumerator that iterates over the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.GetEnumerator1">
 <summary>
 Gets an enumerator that iterates over the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.GetVersionHistory(DriveWorks.Components.Tasks.ComponentTaskRule)">
 <summary>
 Gets the version history of the specified rule.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.AddVersionHistory(DriveWorks.Components.Tasks.ComponentTaskRule)">
 <summary>
 Adds a new rule revision of the specified rule with it's currently rule and comment.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskCorruptException">
 <summary>
 Represents the exception throw when the project contains invalid XML for the <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskRule">
 <summary>
 Represents the rule for a <see cref="T:DriveWorks.Components.Tasks.ComponentTask" /> parameter.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskRule.#ctor(DriveWorks.Components.Tasks.ComponentTaskParameterInfo,System.Xml.Linq.XElement,DriveWorks.IComponentTaskRuleCollection)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskRule" /> class.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Category">
 <summary>
 Gets the category of this rule.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Description">
 <summary>
 Gets the user friendly description of this rule.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Parent">
 <summary>
 Gets the rules collection this rule belongs to.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.IdGuid">
 <summary>
 Gets the id of this rule as a <see cref="T:System.Guid" />.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Comment">
 <summary>
 Gets/sets the comment for the rule.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.DisplayName">
 <summary>
 Gets the display name of the rule.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.IsWritable">
 <summary>
 Gets whether the rule and comment can be written to.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Rule">
 <summary>
 Gets/sets the rule.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskRule.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation and updates the version history.
 </summary>
 <param name="newRule">The new rule to set.</param>
 <param name="newComment">The new comment to set.</param>
 <remarks>The version history will not be updated if neither the rule nor the comment has changed.</remarks>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.RuleType">
 <summary>
 Gets an array of type names which qualify the type of the rule.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Name">
 <summary>
 Gets the invariant name of the rule.
 </summary>
 <devnote>This would get removed, but we can't because of backwards compatibility.
 As long as we don't implement IHasRuleName it doesn't affect us. And we don't want
 to implement IHasRuleName here as this is not a referenceable rule.</devnote>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskRule.GetVersionHistory">
 <summary>
 Retrieves the version history of the rule.
 </summary>
</member>
<member name="E:DriveWorks.Components.Tasks.ComponentTaskRule.RuleChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Components.Tasks.ComponentTaskRule.Rule" /> property has changed.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ComponentTaskManager">
 <summary>
 Represents the class that manages <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s in the project.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskManager.GetTasksByScope(System.String)">
 <summary>
 Gets all tasks in the specified scope.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskManager.TryGetTasksForComponent(System.Guid,System.Collections.Generic.IEnumerable{DriveWorks.Components.Tasks.ComponentTask}@)">
 <summary>
 Attempts to retrieve all tasks for the component with the given id.
 </summary>
</member>
<member name="M:DriveWorks.Components.Tasks.ComponentTaskManager.RemoveTasksOfType(DriveWorks.ProjectFile,System.String)">
 <summary>
 Forcefully removes all registered <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>s of the specific type from the given project file.
 </summary>
 <param name="projectFile">The project to remove the tasks from.</param>
 <param name="taskType">The type of the task to remove.</param>
 <remarks>The removal of these tasks is not buffered, and will get pushed to the project straight away.</remarks>
</member>
<member name="T:DriveWorks.Components.Tasks.IComponentTaskCondition">
 <summary>
 Represents the basic contract of a <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/> that is evaluated at run time.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.IComponentTaskCondition.Title">
 <summary>
 Gets the title of this task.
 </summary>
</member>
<member name="P:DriveWorks.Components.Tasks.IComponentTaskCondition.Parameters">
 <summary>
 Gets all capturable parameters for the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition"/>.
 </summary>
</member>
<member name="T:DriveWorks.Components.Tasks.ScopedComponentTaskCollection">
 <summary>
 Represents a collection of <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s that are specific to a scope.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ProjectComponentData">
 <summary>
 Provides the base data for a project component.
 </summary>
 <remarks>
 This type is only exposed to component implementations, i.e. there are no
 public accessors.
 </remarks>    
</member>
<member name="F:DriveWorks.Components.Data.ProjectComponentData.mComponentSet">
 <summary>
 If this component data instance is the root component data for a component
 set, this stores the component set so that we can update it's component
 name rule when our file name rule changes (they are the same thing)
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ProjectComponentData.MarkRoot(DriveWorks.ProjectComponentSet)">
 <summary>
 Marks the component data instance as a root.
 </summary>
 <param name="componentSet">The component set for which the component data is the root.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectComponentData.Load(DriveWorks.ProjectState,System.Xml.Linq.XElement,DriveWorks.Components.Data.ProjectComponentData)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Components.Data.ProjectComponentData" /> type 
 which is populated with the serialized data from the specified component XML element.
 </summary>
 <param name="projectState">The project state.</param>
 <param name="componentElement">The XML element containing the serialized component data.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Components.Data.ProjectComponentData" /> type which has been populated with the specified component data.</returns>
 <remarks></remarks>
 <devdoc>
 This code is written with the assumption that schema validation has already taken place.
 </devdoc>
</member>
<member name="M:DriveWorks.Components.Data.ProjectComponentData.Create(DriveWorks.ProjectState,DriveWorks.Components.Data.ProjectComponentData,System.Guid,DriveWorks.Components.Data.ICaptureDataResolver)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Components.Data.ProjectComponentData" /> type 
 which is populated with the correct structure of the specified captured component.
 </summary>
 <param name="projectState">The project state.</param>
 <param name="parentComponent">The parent component if this component is not the root.</param>
 <param name="capturedComponentId">The identifier of the captured component on which the project component is based.</param>
 <param name="resolver">A resolver used to resolve captured components.</param>
 <remarks></remarks>
 <returns>An instance of the newly created project component data, or a null reference if the captured component doesn't exist.</returns>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Project">
 <summary>
 Gets the project to which the component data belongs.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Id">
 <summary>
 Gets the unique tracking identifier assigned to the project component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Attributes">
 <summary>
 Gets the component's attributes.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.IsRoot">
 <summary>
 Determines whether the component is a root component.
 </summary>
 <returns>True if the component is a root component, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.ComponentSet">
 <summary>
 For a root component, returns the component set to which the component
 belongs.
 </summary>
 <returns>The component set, or a null reference if the component is not a root component.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.CapturedComponentId">
 <summary>
 Gets the unique identifier of the captured component on which the project component is based.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Type">
 <summary>
 Gets the type of the component if the capture data has been resolved, otherwise throws an exception.
 </summary>
 <exception cref="T:DriveWorks.Components.Data.NotResolvedException">The capture data isn't resolved.</exception>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.MasterPath">
 <summary>
 Gets the full path to the component master file if the capture data has been resolved, otherwise throws an exception.
 </summary>
 ''' <exception cref="T:DriveWorks.Components.Data.NotResolvedException">The capture data isn't resolved.</exception>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Elements">
 <summary>
 Gets the component's elements.
 </summary>
 <remarks>
 This is a helper property that calls the <see cref="P:DriveWorks.Components.Data.ProjectElementData.Elements" /> property on the <see cref="P:DriveWorks.Components.Data.ProjectComponentData.RootElement" />.
 </remarks>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Parameters">
 <summary>
 Gets the component's parameters.
 </summary>
 <remarks>
 This is a helper property that calls the <see cref="P:DriveWorks.Components.Data.ProjectElementData.Parameters" /> property on the <see cref="P:DriveWorks.Components.Data.ProjectComponentData.RootElement" />.
 </remarks>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.RootElement">
 <summary>
 Gets the root element of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.IsResolved">
 <summary>
 Determines whether the underlying capture data has been resolved.
 </summary>
 <returns>True if the capture data has been resolved, otherwise false.</returns>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.ResolutionState">
 <summary>
 Gets the component's resolution state.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Name">
 <summary>
 Provides access to the rule and comment used for the component name.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Path">
 <summary>
 Provides access to the rule and comment used for the component path.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.ParentComponent">
 <summary>
 Gets the parent component for this component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.LoopEnabled">
 <summary>
 Gets/whether this component should be looped.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.IncludeFileFormatsInloop">
 <summary>
 Gets/sets whether additional file formats should be included in the loop.
 </summary>
 <returns>Whether additional file formats should be included in the loop.</returns>
 <remarks>This property has no effect if <see cref="P:DriveWorks.Components.Data.ProjectComponentData.LoopEnabled"/> is False.</remarks>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.LoopCount">
 <summary>
 Provides access to the rule and commed used for the component's loop count.
 </summary>
 <remarks>This rule has no effect if <see cref="P:DriveWorks.Components.Data.ProjectComponentData.LoopEnabled"/> is False.</remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectComponentData.Resolve">
 <summary>
 Resolves the capture data for this instance, but not its children.
 </summary>
 <remarks>
 This method is the same as calling <see cref="M:DriveWorks.Components.Data.Resolve(System.Boolean)" /> and passing
 false to the resolveChildren parameter.
 </remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectComponentData.Resolve(System.Boolean)">
 <summary>
 Resolves the capture data for this instance, and optionally resolves its children too.
 </summary>
 <param name="resolveChildren">True to resolve child components recursively.</param>
 <returns>True if the component and all child components were resolved, false if any component was not resolved.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.XElement">
 <summary>
 Gets the XML element which backs the project component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Host">
 <summary>
 Gets the Engine host.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.CaptureData">
 <summary>
 Gets the capture data, or throws an exception if the capture data hasn't been loaded.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectComponentData.Tags">
 <summary>
 Provides access to the rule and comment used for the component's tags.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ProjectComponentData.Prune">
 <summary>
 Removes unresolved components, elements, and parameters from the component data.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectComponentData.GetChildren">
 <summary>
 Gets the child components of this component.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ProjectAttributeData">
 <summary>
 Rerpesents an attribute that was registered in the capture data for 
 a component or element that has been added to a project.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ProjectAttributeData.Name">
 <summary>
 Gets the name of the attribute.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectAttributeData.Value">
 <summary>
 Gets the value of the attribute.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ProjectAttributes">
 <summary>
 Provides access to the attributes that was registered in the capture data for 
 a component or element that has been added to a project.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ProjectAttributes.Count">
 <summary>
 Gets the number of attributes in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectAttributes.Item(System.Int32)">
 <summary>
 Gets the attribute at the specified index in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ProjectAttributes.Find(System.String)">
 <summary>
 Finds an attribute with the given name.
 </summary>
 <param name="name">The name of the attribute to find.</param>
 <returns>The named attribute, or a null reference if once can't be found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectAttributes.Add(DriveWorks.Components.Data.ProjectAttributeData)">
 <summary>
 Adds the specified attribute to the collection.
 </summary>
 <param name="item">The attribute to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectAttributes.RemoveAt(System.Int32)">
 <summary>
 Removes the specified attribute from the collection.
 </summary>
 <param name="index">The index of the attribute to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectAttributes.GetEnumerator">
 <summary>
 Gets an enumerator which can be used to enumerate the attributes in the collection.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ReleasedComponentData">
 <summary>
 Provides access to raw component data.
 </summary>
 <remarks>
 This type is only exposed to component implementations, i.e. there are no
 public accessors.
 </remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.Id">
 <summary>
 Gets the unique identifier of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.Type">
 <summary>
 Gets the type of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.TargetName">
 <summary>
 Gets the name of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.MasterPath">
 <summary>
 Gets/sets the full path to the component master file.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.TargetPath">
 <summary>
 Gets/sets the full path to the component target file.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.Elements">
 <summary>
 Gets the component's elements.
 </summary>
 <remarks>
 This is a helper property that calls the <see cref="P:DriveWorks.Components.Data.ReleasedElementData.Elements" /> property on the <see cref="P:DriveWorks.Components.Data.ReleasedComponentData.RootElement" />.
 </remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.Parameters">
 <summary>
 Gets the component's parameters.
 </summary>
 <remarks>
 This is a helper property that calls the <see cref="P:DriveWorks.Components.Data.ReleasedElementData.Parameters" /> property on the <see cref="P:DriveWorks.Components.Data.ReleasedComponentData.RootElement" />.
 </remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.RootElement">
 <summary>
 Gets the root element of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.Attributes">
 <summary>
 Gets the component's custom attributes.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.NestedComponentData">
 <summary>
 Gets the nested component data for looped variations of the associated component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.LoopFileFormats">
 <summary>
 Gets whether file formats are included in the loop of this component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.Tags">
 <summary>
 Gets the component's tags.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedComponentData.Flags">
 <summary>
 Gets/sets the flags for this component.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedComponentData.Create(System.Guid,System.String,System.String,System.String,System.String,System.String[],DriveWorks.Components.ReleasedComponentFlags,System.Boolean)">
 <summary>
 Creates a new component with the specified type.
 </summary>
 <param name="id">The unique identifier of the component.</param>
 <param name="masterPath">The path to the component master file.</param>
 <param name="targetName">The name of the component.</param>
 <param name="targetPath">The path to the component target file.</param>
 <param name="type">The type of the component.</param>
 <param name="tags">A pipe-bar delimited string of tags to associate with the component, or null if the component doesn't support tags.</param>
 <returns>A new instance of a released component.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedComponentData.Load(System.Byte[])">
 <summary>
 Loads a captured component from the specified byte array containing UTF-8 encoded
 XML.
 </summary>
 <param name="componentData">The UTF-8 encoded component data.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Components.Data.CapturedComponentData" /> type.</returns>
 <remarks></remarks>
 <exception cref="T:System.FormatException">The format of <paramref name="componentData" /> is invalid.</exception>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedComponentData.Load(System.Xml.Linq.XElement)">
 <summary>
 Loads a captured component from the specified element.
 </summary>
 <param name="componentData">The XElement containing the captured component data.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Components.Data.CapturedComponentData" /> type.</returns>
 <remarks></remarks>
 <exception cref="T:System.FormatException">The format of <paramref name="componentData" /> is invalid.</exception>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedComponentData.Save">
 <summary>
 Saves the component to a string and returns it.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedComponentData.Save(System.IO.Stream)">
 <summary>
 Safes the component to the specified stream using UTF-8 encoding.
 </summary>
 <param name="stream"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedComponentData.Save(System.IO.TextWriter)">
 <summary>
 Saves the component to the specified text writer.
 </summary>
 <param name="writer"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedComponentData.SaveXml">
 <summary>
 Saves the component as an XElement.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedComponentData.Save(System.Xml.XmlWriter)">
 <summary>
 Saves the component to the specified XML writer.
 </summary>
 <param name="writer"></param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.Data.ReleasedAttributes">
 <summary>
 Provides access to a released component or element's attributes.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedAttributes.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedAttributes.Count">
 <summary>
 Gets the number of attributes in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedAttributes.Find(System.String)">
 <summary>
 Finds an attribute with the given name.
 </summary>
 <param name="name">The name of the attribute to find.</param>
 <returns>The named attribute, or a null reference if once can't be found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedAttributes.FindOrCreate(System.String,System.String)">
 <summary>
 Finds an attribute with the given name, and optionally creates it if it doesn't exist.
 </summary>
 <param name="name">The name of the attribute to find.</param>
 <param name="valueIfCreate">True to create the attribute if it can't be found.</param>
 <returns>The named attribute, or a null reference if once can't be found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedAttributes.Add(System.String,System.String)">
 <summary>
 Adds a new attribute with the specified details to the collection.
 </summary>
 <param name="name">The short name used to refer to the attribute.</param>
 <param name="value">The value of the attribute.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedAttributes.RemoveAt(System.Int32)">
 <summary>
 Removes the attribute at the specified index from the collection.
 </summary>
 <param name="index">The index of the item to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedAttributes.Remove(DriveWorks.Components.Data.ReleasedAttributeData)">
 <summary>
 Removes the given attribute from the collection.
 </summary>
 <param name="attribute">The attribute to remove.</param>
 <returns>True if the attribute was removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedAttributes.CommittedCount">
 <summary>
 Gets the count of the items in the collection, less the number
 that haven't been synchronized.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedAttributes.GetAddedForSynchronize">
 <summary>
 Gets the XML elements for any attributes which have been added since the last
 load/save operation.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedAttributes.AddExisting(DriveWorks.Components.Data.ReleasedAttributeData)">
 <summary>
 Adds the specified attribute.
 </summary>
 <param name="attribute">The attribute to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedAttributes.GetEnumerator">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.Data.ReleasedAttributeData">
 <summary>
 Represents a custom attribute applied to a released component or element.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedAttributeData.Name">
 <summary>
 Gets the name of the attribute.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedAttributeData.Value">
 <summary>
 Gets/sets the value of the attribute.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ReleasedElements">
 <summary>
 Provides a collection of elements which have been released for a given
 parent element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElements.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElements.Count">
 <summary>
 Gets the number of elements in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedElements.Add(System.Guid,System.String,System.String,System.String)">
 <summary>
 Adds a new element with the specified details to the collection.
 </summary>
 <param name="type">The type of the element.</param>
 <param name="subType">The subtype of the element.</param>
 <param name="name">The name of the element.</param>
 <param name="address">The address of the element.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedElements.RemoveAt(System.Int32)">
 <summary>
 Removes the element at the specified index from the collection.
 </summary>
 <param name="index">The index of the item to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedElements.Remove(DriveWorks.Components.Data.ReleasedElementData)">
 <summary>
 Removes the given element from the collection.
 </summary>
 <param name="element">The element to remove.</param>
 <returns>True if the element was removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElements.CommittedCount">
 <summary>
 Gets the count of the items in the collection, less the number
 that haven't been synchronized.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedElements.GetAddedForSynchronize">
 <summary>
 Gets the XML elements for any alternatives which have been added since the last
 load/save operation.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedElements.AddExisting(DriveWorks.Components.Data.ReleasedElementData)">
 <summary>
 Adds the specified element to the collection.
 </summary>
 <param name="element">The element to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedElements.GetEnumerator">
 <summary>
 Gets an enumerator which can be used to enumerate the elements in the collection.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ReleasedElementData">
 <summary>
 Provides the base data for a released element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElementData.Name">
 <summary>
 Gets the name of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElementData.Address">
 <summary>
 Gets the type-specific address of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElementData.Type">
 <summary>
 Gets the GUID which uniquely identifies the type of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElementData.SubType">
 <summary>
 Gets the type-specific sub-type of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElementData.Elements">
 <summary>
 Gets the element's child elements.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElementData.Parameters">
 <summary>
 Gets the element's parameters.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedElementData.Attributes">
 <summary>
 Gets the element's custom attributes.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedElementData.Load(System.Xml.Linq.XElement)">
 <summary>
 Loads the element data from an XElement.
 </summary>
 <param name="elementData"></param>
</member>
<member name="T:DriveWorks.Components.Data.ReleasedParameters">
 <summary>
 Provides a collection of parameters which have been released for a given element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedParameters.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedParameters.Count">
 <summary>
 Gets the number of additional file formats in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedParameters.Add(System.Guid,System.String,System.String,System.String,System.String)">
 <summary>
 Adds a new parameter with the specified details to the collection.
 </summary>
 <param name="type">The type of the parameter.</param>
 <param name="subType">The subtype of the parameter.</param>
 <param name="name">The name of the parameter.</param>
 <param name="address">The address of the parameter.</param>
 <param name="value">The value of the parameter.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedParameters.RemoveAt(System.Int32)">
 <summary>
 Removes the parameter at the specified index from the collection.
 </summary>
 <param name="index">The index of the item to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedParameters.Remove(DriveWorks.Components.Data.ReleasedParameterData)">
 <summary>
 Removes the given parameter from the collection.
 </summary>
 <param name="parameter">The parameter to remove.</param>
 <returns>True if the parameter was removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedParameters.CommittedCount">
 <summary>
 Gets the count of the items in the collection, less the number
 that haven't been synchronized.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedParameters.GetAddedForSynchronize">
 <summary>
 Gets the XML elements for any alternatives which have been added since the last
 load/save operation.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedParameters.AddExisting(DriveWorks.Components.Data.ReleasedParameterData)">
 <summary>
 Adds the specified parameter to the collection.
 </summary>
 <param name="parameter">The parameter to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedParameters.GetEnumerator">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.Data.ReleasedParameterData">
 <summary>
 Provides the base data for a released parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedParameterData.Name">
 <summary>
 Gets/sets the name of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedParameterData.Address">
 <summary>
 Gets/sets the type-specific address of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedParameterData.Type">
 <summary>
 Gets the GUID which uniquely identifies the type of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedParameterData.SubType">
 <summary>
 Gets the type-specific sub-type of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ReleasedParameterData.Value">
 <summary>
 Gets the value of the parameter.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ReleasedParameterData.Load(System.Xml.Linq.XElement)">
 <summary>
 Loads the parameter data from an XElement.
 </summary>
 <param name="parameterData"></param>
</member>
<member name="T:DriveWorks.Components.Data.CapturedAttributeData">
 <summary>
 Represents a custom attribute applied to a captured component or element.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAttributeData.Name">
 <summary>
 Gets the name of the attribute.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAttributeData.Value">
 <summary>
 Gets/sets the value of the attribute.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.CapturedAttributes">
 <summary>
 Provides access to a captured component or element's attributes.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAttributes.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAttributes.Count">
 <summary>
 Gets the number of attributes in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAttributes.Find(System.String)">
 <summary>
 Finds an attribute with the given name.
 </summary>
 <param name="name">The name of the attribute to find.</param>
 <returns>The named attribute, or a null reference if once can't be found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAttributes.Find(System.String,System.Boolean)">
 <summary>
 Finds an attribute with the given name, and optionally creates it if it doesn't exist.
 </summary>
 <param name="name">The name of the attribute to find.</param>
 <param name="create">True to create the attribute if it can't be found.</param>
 <returns>The named attribute, or a null reference if once can't be found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAttributes.Add(System.String,System.String)">
 <summary>
 Adds a new attribute with the specified details to the collection.
 </summary>
 <param name="name">The short name used to refer to the attribute.</param>
 <param name="value">The value of the attribute.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAttributes.RemoveAt(System.Int32)">
 <summary>
 Removes the attribute at the specified index from the collection.
 </summary>
 <param name="index">The index of the item to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAttributes.Remove(DriveWorks.Components.Data.CapturedAttributeData)">
 <summary>
 Removes the given attribute from the collection.
 </summary>
 <param name="attribute">The attribute to remove.</param>
 <returns>True if the attribute was removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAttributes.CommittedCount">
 <summary>
 Gets the count of the items in the collection, less the number
 that haven't been synchronized.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAttributes.GetAddedForSynchronize">
 <summary>
 Gets the XML elements for any attributes which have been added since the last
 load/save operation.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAttributes.AddExisting(DriveWorks.Components.Data.CapturedAttributeData)">
 <summary>
 Adds the specified attribute.
 </summary>
 <param name="attribute">The attribute to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAttributes.GetEnumerator">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.Data.CachingCaptureDataResolver">
 <summary>
 Wraps a capture data resolver with a caching layer to minimize the hit on the backing store of many requests 
 for the same components.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.Data.CapturedAlternativeData">
 <summary>
 Represents a registered alternative file.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAlternativeData.AlternativePath">
 <summary>
 Gets/sets the path to the alternative file.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAlternativeData.AlternativeName">
 <summary>
 Gets/sets the short name of the alternative which can be used to refer to the alternative
 quickly in the file name rule of a project component.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.CapturedAlternatives">
 <summary>
 Provides access to a captured component's registered alternatives.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAlternatives.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAlternatives.Count">
 <summary>
 Gets the number of additional file formats in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAlternatives.Find(System.String,System.Boolean)">
 <summary>
 Looks for an alternative with the given alternative name.
 </summary>
 <param name="name">The name of the alternative to look for.</param>
 <param name="throwIfMissing">True to throw an exception if an alternative with the given name can't be found, otherwise, a null reference is returned.</param>        
 <returns>An alternative for the specified name.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">An alternative with the given name couldn't be found.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAlternatives.Add(System.String,System.String)">
 <summary>
 Adds a new alternative with the specified details to the collection.
 </summary>
 <param name="name">The short name used to refer to the alternative.</param>
 <param name="path">The path to the alternative file.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAlternatives.RemoveAt(System.Int32)">
 <summary>
 Removes the alternative at the specified index from the collection.
 </summary>
 <param name="index">The index of the item to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAlternatives.Remove(DriveWorks.Components.Data.CapturedAlternativeData)">
 <summary>
 Removes the given alternative from the collection.
 </summary>
 <param name="alternative">The alternative to remove.</param>
 <returns>True if the alternative was removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedAlternatives.CommittedCount">
 <summary>
 Gets the count of the items in the collection, less the number
 that haven't been synchronized.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAlternatives.GetAddedForSynchronize">
 <summary>
 Gets the XML elements for any alternatives which have been added since the last
 load/save operation.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAlternatives.AddExisting(DriveWorks.Components.Data.CapturedAlternativeData)">
 <summary>
 Adds the specified alternative file.
 </summary>
 <param name="alternative">The alternative to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedAlternatives.GetEnumerator">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.Data.ICaptureDataResolver">
 <summary>
 Used to resolve capture data for projects and specifications
 because capture data is persisted to the DB for a project,
 and to the file system for a specification.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ICaptureDataResolver.ResolveCapturedComponent(System.Guid)">
 <summary>
 Gets the captured component data for the specified component.
 </summary>
 <param name="componentId">The unique identifier of the captured component to retrieve.</param>
 <returns>The specified captured component, or a null reference (Nothing in Visual Basic) if the component is not located.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.Data.CapturedReferenceData">
 <summary>
 Represents a reference from a parent component to a child component.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.CapturedReferenceData.#ctor(System.Guid)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Components.Data.CapturedReferenceData" /> type.
 </summary>
 <param name="referencedComponentId">The unique identifier of the referenced component.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedReferenceData.Id">
 <summary>
 Gets/sets the identifier of the referenced component.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.CapturedReferences">
 <summary>
 Provides access to a captured component's references.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedReferences.Count">
 <summary>
 Gets the number of additional file formats in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedReferences.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedReferences.Add(System.Guid)">
 <summary>
 Adds the specified reference to the collection.
 </summary>
 <param name="reference">The reference to add.</param>
 <returns>The added reference.</returns>
 <remarks></remarks>        
</member>
<member name="M:DriveWorks.Components.Data.CapturedReferences.RemoveAt(System.Int32)">
 <summary>
 Removes the reference at the specified index from the collection.
 </summary>
 <param name="index">The index of the item to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedReferences.Remove(DriveWorks.Components.Data.CapturedReferenceData)">
 <summary>
 Removes the specified reference from the collection.
 </summary>
 <param name="reference">The reference to remove.</param>
 <returns>True if the specified reference was removed.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedReferences.ToIdArray">
 <summary>
 Creates and returns an array of GUIDs from the reference data.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedReferences.AddExisting(DriveWorks.Components.Data.CapturedReferenceData)">
 <summary>
 Adds the specified reference to the collection.
 </summary>
 <param name="reference">The reference to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedReferences.GetEnumerator">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.Data.CapturedElementData">
 <summary>
 Provides the base data for a captured element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElementData.Id">
 <summary>
 Gets the GUID which uniquely identifies the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElementData.Name">
 <summary>
 Gets/sets the name of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElementData.Address">
 <summary>
 Gets/sets the type-specific address of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElementData.Type">
 <summary>
 Gets the GUID which uniquely identifies the type of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElementData.SubType">
 <summary>
 Gets/sets the type-specific sub-type of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElementData.Elements">
 <summary>
 Gets the element's child elements.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElementData.Parameters">
 <summary>
 Gets the element's parameters.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElementData.Attributes">
 <summary>
 Gets the element's custom attributes.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.CapturedElementData.Load(System.Xml.Linq.XElement)">
 <summary>
 Loads the element data from an XElement.
 </summary>
 <param name="elementData"></param>
 <remarks>This method must only be called on an empty instance.</remarks>
</member>
<member name="T:DriveWorks.Components.Data.CapturedElements">
 <summary>
 Provides a collection of elements which have been captured for a given
 parent element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElements.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElements.Count">
 <summary>
 Gets the number of additional file formats in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.CapturedElements.Add(System.Guid,System.String,System.String,System.String)">
 <summary>
 Adds a new element with the specified details to the collection.
 </summary>
 <param name="type">The type of the element.</param>
 <param name="subType">The subtype of the element.</param>
 <param name="name">The name of the element.</param>
 <param name="address">The address of the element.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedElements.RemoveAt(System.Int32)">
 <summary>
 Removes the element at the specified index from the collection.
 </summary>
 <param name="index">The index of the item to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedElements.Remove(DriveWorks.Components.Data.CapturedElementData)">
 <summary>
 Removes the given element from the collection.
 </summary>
 <param name="element">The element to remove.</param>
 <returns>True if the element was removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedElements.CommittedCount">
 <summary>
 Gets the count of the items in the collection, less the number
 that haven't been synchronized.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedElements.GetAddedForSynchronize">
 <summary>
 Gets the XML elements for any alternatives which have been added since the last
 load/save operation.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedElements.AddExisting(DriveWorks.Components.Data.CapturedElementData)">
 <summary>
 Adds the specified element to the collection.
 </summary>
 <param name="element">The element to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedElements.GetEnumerator">
 <summary>
 Gets an enumerator which can be used to enumerate the elements in the collection.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.CapturedParameterData">
 <summary>
 Provides the base data for a captured parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedParameterData.Id">
 <summary>
 Gets the GUID which uniquely identifies the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedParameterData.Name">
 <summary>
 Gets/sets the name of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedParameterData.Address">
 <summary>
 Gets/sets the type-specific address of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedParameterData.Type">
 <summary>
 Gets the GUID which uniquely identifies the type of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedParameterData.SubType">
 <summary>
 Gets/sets the type-specific sub-type of the parameter.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.CapturedParameterData.Load(System.Xml.Linq.XElement)">
 <summary>
 Loads the parameter data from an XElement.
 </summary>
 <param name="parameterData"></param>
 <remarks>This method must only be called on an empty instance.</remarks>
</member>
<member name="T:DriveWorks.Components.Data.CapturedParameters">
 <summary>
 Provides a collection of parameters which have been captured for a given element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedParameters.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedParameters.Count">
 <summary>
 Gets the number of additional file formats in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.CapturedParameters.Add(System.Guid,System.String,System.String,System.String)">
 <summary>
 Adds a new parameter with the specified details to the collection.
 </summary>
 <param name="type">The type of the parameter.</param>
 <param name="subType">The subtype of the parameter.</param>
 <param name="name">The name of the parameter.</param>
 <param name="address">The address of the parameter.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedParameters.RemoveAt(System.Int32)">
 <summary>
 Removes the parameter at the specified index from the collection.
 </summary>
 <param name="index">The index of the item to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedParameters.Remove(DriveWorks.Components.Data.CapturedParameterData)">
 <summary>
 Removes the given parameter from the collection.
 </summary>
 <param name="parameter">The parameter to remove.</param>
 <returns>True if the parameter was removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedParameters.CommittedCount">
 <summary>
 Gets the count of the items in the collection, less the number
 that haven't been synchronized.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedParameters.GetAddedForSynchronize">
 <summary>
 Gets the XML elements for any alternatives which have been added since the last
 load/save operation.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedParameters.AddExisting(DriveWorks.Components.Data.CapturedParameterData)">
 <summary>
 Adds the specified parameter to the collection.
 </summary>
 <param name="parameter">The parameter to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedParameters.GetEnumerator">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.Data.NotResolvedException">
 <summary>
 Thrown when the capture information has not been resolved for one of the types related to project components.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ProjectElementData">
 <summary>
 Provides the base data for a project element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.Component">
 <summary>
 Gets the component to which the element belongs.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.ParentElement">
 <summary>
 Gets the parent element to which the element belongs, or a null reference if the element is a root element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.Name">
 <summary>
 Gets the name of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.Address">
 <summary>
 Gets the type-specific address of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.Type">
 <summary>
 Gets the GUID which uniquely identifies the type of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.SubType">
 <summary>
 Gets the type-specific sub-type of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.Elements">
 <summary>
 Gets the element's child elements.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.Parameters">
 <summary>
 Gets the element's parameters.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.Attributes">
 <summary>
 Gets the element's attributes.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.ResolutionState">
 <summary>
 Gets the element's resolution state.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.CaptureId">
 <summary>
 Gets the unique id of the backing capture element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.CaptureData">
 <summary>
 Gets the capture data, or throws an exception if the capture data hasn't been loaded.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElementData.XElement">
 <summary>
 Gets the XML element which backs the project element.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ProjectElementData.Bind(DriveWorks.Components.Data.CapturedElementData)">
 <summary>
 Called by the <see cref="T:DriveWorks.Components.Data.ProjectComponentData" /> class to bind the element to its captured equivalent.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ProjectElements">
 <summary>
 A collection of project elements.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElements.Count">
 <summary>
 Gets the number of elements in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectElements.Item(System.Int32)">
 <summary>
 Gets the element at the specified index in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ProjectElements.RemoveAt(System.Int32)">
 <summary>
 Removes the specified element from the collection.
 </summary>
 <param name="index">The index of the element to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectElements.Add(DriveWorks.Components.Data.ProjectElementData)">
 <summary>
 Adds the specified element to the collection.
 </summary>
 <param name="item">The element to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectElements.GetEnumerator">
 <summary>
 Gets an enumerator which can be used to enumerate the elements in the collection.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ProjectParameterData">
 <summary>
 Provides the base data for a project parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.Component">
 <summary>
 Gets the component to which the element belongs.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.ParentElement">
 <summary>
 Gets the parent element to which the element belongs, or a null reference if the element is a root element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.RuleId">
 <summary>
 Gets the unique identifier assigned to the rule.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.Name">
 <summary>
 Gets the name of the element.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.Address">
 <summary>
 Gets the type-specific address of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.Type">
 <summary>
 Gets the GUID which uniquely identifies the type of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.SubType">
 <summary>
 Gets the type-specific sub-type of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.Value">
 <summary>
 Provides access to the rule and comment which controls the value of the parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.ResolutionState">
 <summary>
 Gets the element's resolution state.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.XElement">
 <summary>
 Gets the XML element which backs the project parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.CaptureId">
 <summary>
 Gets the unique id of the backing capture parameter.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameterData.CaptureData">
 <summary>
 Gets the capture data, or throws an exception if the capture data hasn't been loaded.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ProjectParameterData.TryGetCaptureData(DriveWorks.Components.Data.CapturedParameterData@,System.Boolean)">
 <summary>
 Gets the capture data, or optionally throws a <see cref="T:DriveWorks.Components.Data.NotResolvedException" /> if the capture data hasn't been loaded.
 </summary>
 <param name="throwOnNotResolved">Throw a <see cref="T:DriveWorks.Components.Data.NotResolvedException" /> if the capture data hasn't been loaded.</param>
 <returns>The capture data for this parameter.</returns>
</member>
<member name="M:DriveWorks.Components.Data.ProjectParameterData.Bind(DriveWorks.Components.Data.CapturedParameterData)">
 <summary>
 Called by the <see cref="T:DriveWorks.Components.Data.ProjectElementData" /> class to bind the parameter to its captured equivalent.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ProjectParameters">
 <summary>
 A collection of project parameters.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameters.Count">
 <summary>
 Gets the number of parameters in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.ProjectParameters.Item(System.Int32)">
 <summary>
 Gets the parameter at the specified index in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.ProjectParameters.RemoveAt(System.Int32)">
 <summary>
 Removes the specified parameter from the collection.
 </summary>
 <param name="index">The index of the parameter to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectParameters.Add(DriveWorks.Components.Data.ProjectParameterData)">
 <summary>
 Adds the specified parameter to the collection.
 </summary>
 <param name="item">The parameter to add.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.ProjectParameters.GetEnumerator">
 <summary>
 Gets an enumerator which can be used to enumerate the parameters in the collection.
 </summary>
</member>
<member name="T:DriveWorks.Components.Data.ResolutionState">
 <summary>
 Represents the resolution state of a project component or one of its related
 types.
 </summary>
</member>
<member name="F:DriveWorks.Components.Data.ResolutionState.Unresolved">
 <summary>
 No attempt to load the capture information has been made.
 </summary>
</member>
<member name="F:DriveWorks.Components.Data.ResolutionState.Resolved">
 <summary>
 The capture information has been successfully resolved.
 </summary>
</member>
<member name="F:DriveWorks.Components.Data.ResolutionState.Missing">
 <summary>
 The capture information was not found. 
 </summary>
 <remarks>
 When the project is saved, the project
 item will be removed.
 </remarks>
</member>
<member name="T:DriveWorks.Components.Data.CapturedComponentData">
 <summary>
 Provides access to raw component data.
 </summary>
 <remarks>
 This type is only exposed to component implementations, i.e. there are no
 public accessors.
 </remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedComponentData.Type">
 <summary>
 Gets the type of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedComponentData.Id">
 <summary>
 Gets the GUID which uniquely identifies the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedComponentData.MasterPath">
 <summary>
 Gets/sets the full path to the component master file.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedComponentData.References">
 <summary>
 Gets the references to other captured components.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedComponentData.Alternatives">
 <summary>
 Gets alternative components which can be used in place of this component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedComponentData.Elements">
 <summary>
 Gets the component's elements.
 </summary>
 <remarks>
 This is a helper property that calls the <see cref="P:DriveWorks.Components.Data.CapturedElementData.Elements" /> property on the <see cref="P:DriveWorks.Components.Data.CapturedComponentData.RootElement" />.
 </remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedComponentData.Parameters">
 <summary>
 Gets the component's parameters.
 </summary>
 <remarks>
 This is a helper property that calls the <see cref="P:DriveWorks.Components.Data.CapturedElementData.Parameters" /> property on the <see cref="P:DriveWorks.Components.Data.CapturedComponentData.RootElement" />.
 </remarks>
</member>
<member name="P:DriveWorks.Components.Data.CapturedComponentData.RootElement">
 <summary>
 Gets the root element of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.Data.CapturedComponentData.Attributes">
 <summary>
 Gets the component's custom attributes.
 </summary>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.Create(System.Guid,System.String,System.String)">
 <summary>
 Creates a new component with the specified type.
 </summary>
 <param name="id">The unique id of the component.</param>
 <param name="path">The path to the component.</param>
 <param name="type">The type of the component.</param>
 <returns>A new instance of a captured component.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.Load(System.Byte[],System.Guid[])">
 <summary>
 Loads a captured component from the specified byte array containing UTF-8 encoded
 XML.
 </summary>
 <param name="componentData">The UTF-8 encoded component data.</param>
 <param name="references">The identifiers of the components referenced by the component.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Components.Data.CapturedComponentData" /> type.</returns>
 <remarks></remarks>
 <exception cref="T:System.FormatException">The format of <paramref name="componentData" /> is invalid.</exception>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.Load(System.Xml.Linq.XElement,System.Guid[])">
 <summary>
 Loads a captured component from the specified element.
 </summary>
 <param name="componentData">The XElement containing the captured component data.</param>
 ''' <param name="references">The identifiers of the components referenced by the component.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Components.Data.CapturedComponentData" /> type.</returns>
 <remarks></remarks>
 <exception cref="T:System.FormatException">The format of <paramref name="componentData" /> is invalid.</exception>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.Save">
 <summary>
 Saves the component to a string and returns it.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.Save(System.IO.Stream)">
 <summary>
 Safes the component to the specified stream using UTF-8 encoding.
 </summary>
 <param name="stream"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.Save(System.IO.TextWriter)">
 <summary>
 Saves the component to the specified text writer.
 </summary>
 <param name="writer"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.Save(System.Xml.XmlWriter)">
 <summary>
 Saves the component to the specified XML writer.
 </summary>
 <param name="writer"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.Clone">
 <summary>
 Clones the captured component data.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.InternalChangeId(System.Guid)">
 <summary>
 Changes the unique identifier stored in the component. This is for use
 by the Capture Import Manager and other advanced scenarios.
 </summary>
 <param name="newId">The new unique identifier of the component.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.Data.CapturedComponentData.NormalizeType(System.String)">
 <summary>
 This method takes a Library type and ensures that it is in the form "[typeName], [invariantName]"
 this is to work around a bug in early migrated data which migrated components with type names
 that didn't include the space
 </summary>
 <param name="type"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.ReleasedComponentFlags">
 <summary>
 Specifies additional behaviour for <see cref="T:DriveWorks.Components.ReleasedComponent"/>s.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentFlags.None">
 <summary>
 No additional behaviour or status has been attached to the component.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentFlags.ForceOverwrite">
 <summary>
 Flags a component for overwrite so that if the component has not been marked as generated
 but the file exist, the file will be regenerated.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentFlags.Deferred">
 <summary>
 Flags a component to be ineligable for generation until this flag gets toggled off.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentFlags.AwaitingPreview">
 <summary>
 Flags a component as needing a 3d preview creating for it.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentFlags.Previewed">
 <summary>
 Flags a component as being attempted via a preview.
 </summary>
 <remarks>The preview could have been a success or not.</remarks>
</member>
<member name="T:DriveWorks.Components.ReleasedComponentTaskCondition">
 <summary>
 Represents a released <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/>. 
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleasedComponentTaskCondition.#ctor(DriveWorks.Components.Data.ReleasedElementData)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Components.ReleasedComponentTaskCondition"/> from serialized data.
 </summary>
 <param name="data">The serialized XML data to deserialize.</param>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentTaskCondition.ConditionType">
 <summary>
 Gets the type of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentTaskCondition.Title">
 <summary>
 Gets the title of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentTaskCondition.Index">
 <summary>
 Gets the index of the condition within the parent collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentTaskCondition.Data">
 <summary>
 Gets the underlaying release data for this condition.
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleasedComponentTaskCondition.Create(DriveWorks.Components.Tasks.ComponentTaskCondition,DriveWorks.Project,System.Collections.Generic.IDictionary{System.Guid,System.Object})">
 <summary>
 Creates the underlaying XML for the condition, storing the evaluated value of the rules.
 NOTE: This is only used for scoped tasks.
 </summary>
</member>
<member name="T:DriveWorks.Components.ProjectComponentRuleProxy">
 <summary>
 Provides a base for inheriting from ProjectComponentRule.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ProjectComponentRuleProxy.#ctor(DriveWorks.Components.ProjectComponentRule)">
 <summary>
 Creates a new instance of the ProjectComponentRuleProxy class.
 </summary>
 <param name="innerRule">The rule that this instance should initially wrap.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ProjectComponentRuleProxy.InnerRule">
 <summary>
 Gets or sets the rule that is being wrapped.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponentRuleProxy.Component">
 <summary>
 Gets the parent component for the wrapped rule.
 </summary>
</member>
<member name="T:DriveWorks.Components.IHasReferences">
 <summary>
 provides a contract for an object that has external file references associated with it.
 </summary>
</member>
<member name="M:DriveWorks.Components.IHasReferences.GetExternalReferencePaths">
 <summary>
 Gets a collection of all references paths that this object has.
 </summary>
</member>
<member name="M:DriveWorks.Components.IHasReferences.ChangeExternalReferencePath(System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 Changes all matching references in this object using the provided map.
 </summary>
 <param name="newPathsByOldPaths">Map of old paths to new paths to change in this object.</param>
 <returns>Whether or not any paths were changed.</returns>
</member>
<member name="T:DriveWorks.Components.ReleaseEnvironment">
 <summary>
 Provides the environment required for releasing one or more components.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseEnvironment.OverwriteReleasedComponents">
 <summary>
 Gets/sets whether, during the release of components, components that already
 exist are overwritten or used as-is.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseEnvironment.Flags">
 <summary>
 Gets/sets the flags to apply to the released components.
 </summary>
 <remarks>The default is <see cref="F:DriveWorks.Components.ReleasedComponentFlags.None"/>.</remarks>
</member>
<member name="P:DriveWorks.Components.ReleaseEnvironment.TagOverrides">
 <summary>
 Gets/sets a list of tags that should be applied to ALL components, thereby overriding their tag rules.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseEnvironment.TestMode">
 <summary>
 Gets/sets whether the release is happening in Test Mode.
 This means that during the release of components, duplicate ones should be fully processed.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseEnvironment.IsLocked">
 <summary>
 Determines whether the object has been locked.
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleaseEnvironment.Lock">
 <summary>
 Used internally to lock a settings object to prevent further modification.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseEnvironment.Clone">
 <summary>
 Get an unlocked clone of the current enviroment.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.ComponentFactoryAttribute">
 <summary>
 Used to indicate to DriveWorks the factory that is responsible
 for creating components of a given type.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ComponentFactoryAttribute.#ctor(System.Type)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Components.ComponentFactoryAttribute" /> class.
 </summary>
 <param name="componentFactoryType">The factory class responsible for creating components.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ComponentFactoryAttribute.ComponentFactoryType">
 <summary>
 Gets the type of the factory class.
 </summary>
</member>
<member name="T:DriveWorks.Components.ProjectComponentRule">
 <summary>
 Represents a rule on a project component or parameter.
 </summary>
</member>
<member name="E:DriveWorks.Components.ProjectComponentRule.RuleChanged">
 <summary>
 Raised when the rule has been changed.
 </summary>
</member>
<member name="E:DriveWorks.Components.ProjectComponentRule.CommentChanged">
 <summary>
 Raised when the comment has been changed.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponentRule.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponentRule.Name">
 <summary>
 Gets the name for this rule.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponentRule.Comment">
 <summary>
 Gets/sets the comment for the rule.
 </summary>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
</member>
<member name="P:DriveWorks.Components.ProjectComponentRule.Rule">
 <summary>
 Gets/sets the rule.
 </summary>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
</member>
<member name="M:DriveWorks.Components.ProjectComponentRule.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
</member>
<member name="M:DriveWorks.Components.ProjectComponentRule.GetVersionHistory">
 <summary>
 Gets the version history for the item.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponentRule.IsWritable">
 <summary>
 Determines whether the rule and comment can be written to.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponentRule.DisplayName">
 <summary>
 Gets an identifier which uniquely identifies the rule.
 </summary>
 <exception cref="T:System.NotSupportedException">The rule is not writable.</exception>
</member>
<member name="P:DriveWorks.Components.ProjectComponentRule.Component">
 <summary>
 Gets the parent component for this rule.
 </summary>
</member>
<member name="M:DriveWorks.Components.ProjectComponentRule.RaiseRuleChanged(DriveWorks.ValueChangedEventArgs{System.String})">
 <summary>
 Raises the RuleChanged event.
 </summary>
 <param name="args">Argument to raise in the event.</param>
</member>
<member name="M:DriveWorks.Components.ProjectComponentRule.RaiseCommentChanged(DriveWorks.ValueChangedEventArgs{System.String})">
 <summary>
 Raises the <see cref="E:DriveWorks.Components.ProjectComponentRule.CommentChanged"/> event.
 </summary>
 <param name="args">The arguments to pass to the event.</param>
</member>
<member name="T:DriveWorks.Components.IReleaseParameterTracker">
 <summary>
 Provides support for a component being released to 
 provide diagnosting information about a parameter which was released.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseParameterTracker.NotifyParameterResult(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Called when a parameter result is finalized.
 </summary>
 <param name="parameterTypeName">The invariant name of the parameter's type.</param>
 <param name="parameterTypeDisplayName">The display name of the parameter's type.</param>
 <param name="parameterName">The display name of the parameter.</param>
 <param name="parameterRule">The rule which was used to calculate the parameter's result.</param>
 <param name="parameterResult">The result of calculating the parameter's rule.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.IReleaseTracker">
 <summary>
 Provides a contract for an object which is used to track
 the release of components.
 </summary>
 <remarks>
 <para>
 When evaluation of a component begins, it is assigned a unique tracking identifier, which 
 is passed to the <see cref="M:DriveWorks.Components.IReleaseTracker.NotifyBeginEvaluate(DriveWorks.ProjectComponentSet,System.Nullable{System.Guid},DriveWorks.Components.ProjectComponent,System.Guid,System.String,System.String,System.String,System.String,System.String)" /> method. This identifier
 can be used to track hierarchy and release information. Also, if the component
 is evaluated and determined to be a new component (i.e. not an alternative, driven component,
 or existing component), then the tracking identifier is used as the identifier assigned to
 the new component when it is registered.
 </para>
 <para>
 The release tracker gets called in three phases:
 </para>
 <list>
 <item>Component Set Candidacy Evaluation (the NotifyComponentSetXXX methods)</item>
 <item>Component Reference Evaluation (the NotifyBeginEvaluate, NotifyEndEvaluate, and NotifyEvaluateXXX methods)</item>
 <item>Component Release</item>
 </list>
 </remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.Finish">
 <summary>
 Informs the trackers that the release process has finished.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyComponentSetAccepted(DriveWorks.ProjectComponentSet,System.String,System.String)">
 <summary>
 Called when a component set has its rule
 evaluated as "delete".
 </summary>
 <param name="componentSet">The component set that was evaluated.</param>
 <param name="rule">The rule which resulted in the the acceptance of the component set.</param>
 <param name="result">The textual version of the result.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyComponentSetDeleted(DriveWorks.ProjectComponentSet,System.String,System.String)">
 <summary>
 Called when a component set has its rule
 evaluated as "delete".
 </summary>
 <param name="componentSet">The component set that was evaluated.</param>
 <param name="rule">The rule which resulted in the "delete" value.</param>
 <param name="result">The textual version of the result.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyComponentSetSuppressed(DriveWorks.ProjectComponentSet,System.String,System.String)">
 <summary>
 Called when a component set has its rule
 evaluated as "suppress".
 </summary>
 <param name="componentSet">The component set that was evaluated.</param>
 <param name="rule">The rule which resulted in the "suppress" value.</param>
 <param name="result">The textual version of the result.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyComponentSetLoadFailed(DriveWorks.ProjectComponentSet)">
 <summary>
 Called when a component set's root compoent could not be loaded.
 </summary>
 <param name="componentSet">The component set which failed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyBeginEvaluate(DriveWorks.ProjectComponentSet,System.Nullable{System.Guid},DriveWorks.Components.ProjectComponent,System.Guid,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Called when the evaluation of a component has begun.
 </summary>
 <param name="rootComponentSet">The component set to which the root component belongs.</param>
 <param name="parentTrackingId">The tracking identifier of the parent component if there is one.</param>
 <param name="component">The component being evaluated.</param>
 <param name="componentTrackingId">A unique identifier which can be used to track the component, see remarks for more details.</param>
 <param name="componentPath">The path to the component.</param>
 <param name="nameRule">The rule which was evaluated to generate the component's name.</param>
 <param name="nameResult">The result of evaluating the component's name rule.</param>
 <param name="pathRule">The rule which was evaluated to generate the component's path.</param>
 <param name="pathResult">The result of evaluating the component's path rule.</param>
 <remarks>
 <para>
 The <paramref name="componentTrackingId" /> can be used to track a component as it is evaluated
 and released. If the component is evaluated to be a new component (as opposed to an alternative, 
 driven component, or existing component), then the tracking id is the id that is assigned to the 
 released component.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyTrackingIdChanged(System.Guid)">
 <summary>
 Called when the current component is going to be used to
 overwriting an existing component and so the tracking id
 needs to be changed
 </summary>
 <param name="newTrackingId">The replacement tracking identifier.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsAction(DriveWorks.Components.ReleasedComponentReferenceAction,System.Boolean)">
 <summary>
 Called when the current component is determined to need
 a non-replacement action applying.
 </summary>
 <param name="action">The action to be taken.</param>
 <param name="isValid">True if the action is valid for the type of component, otherwise false.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsStandardAlternative(System.String)">
 <summary>
 Called when the current component is determined to need
 swapping for a standard alternative.
 </summary>
 <param name="alternativePath"></param>
 <remarks>
 Note, if the current component is a root component, i.e. it doesn't have 
 a parent, then the receipt of this call indicates that the rule for the component
 is invalid because a root component can't be swapped for an alternative.
 </remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsStandardAlternativeWithInvalidPath(System.String)">
 <summary>
 Called when the current component is determined to need swapping for a standard alternative that 
 has an invalid full path.
 </summary>
 <param name="invalidPath">The invalid path to the standard alternative.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsDrivenAlternative(System.Guid,System.String,System.String)">
 <summary>
 Called when the current component is determined to need swapping for a driven alternative.
 </summary>
 <param name="alternativeId">The unique identifier of the driven alternative.</param>
 <param name="alternativeMasterPath">The path to the file on which the driven alternative was based.</param>
 <param name="alternativeTargetPath">The path to the driven alternative.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsExistingComponent(System.Guid,System.String)">
 <summary>
 Called when the current component is determined to have already been evaluated.
 </summary>
 <param name="existingComponentId">The unique identifier of the existing component.</param>
 <param name="existingComponentPath">The full path to the existing component.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsNewComponentWithInvalidPath(System.String)">
 <summary>
 Called when the current component is determined to have an invalid full path.
 </summary>
 <param name="invalidPath">The path which was generated.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsNewComponent(System.String)">
 <summary>
 Called when the current component is determined to be a new component.
 </summary>
 <param name="fullPath">The path which was generated.</param>
 <remarks>
 <para>
 The unique identifier assigned to the new component is the same as the component 
 tracking identifier provided to the <see cref="M:DriveWorks.Components.IReleaseTracker.NotifyBeginEvaluate(DriveWorks.ProjectComponentSet,System.Nullable{System.Guid},DriveWorks.Components.ProjectComponent,System.Guid,System.String,System.String,System.String,System.String,System.String)" /> method.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsInvalidName(System.String)">
 <summary>
 Called when the current component is determined to have an invalid name.
 </summary>
 <param name="nameResult">The result of the name rule.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsDuplicatePath(System.String)">
 <summary>
 Called when the current component is determined to have the same path
 as an existing component, but a different target name.
 </summary>
 <param name="fullPath">The evaluated path to the new component.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEndEvaluate">
 <summary>
 Called when the evaluation of the current component has ended.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyBeginRelease(System.Guid)">
 <summary>
 Called when the release of an evaluated component has started.
 </summary>
 <param name="componentTrackingId">The tracking identifier of the component.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyInReleaseComponentParameterResult(System.Guid,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Called when a parameter result is finalized.
 </summary>
 <param name="componentTrackingId">The component tracking identifier assigned to the component.</param>
 <param name="parameterTypeName">The invariant name of the parameter's type.</param>
 <param name="parameterTypeDisplayName">The display name of the parameter's type.</param>
 <param name="parameterName">The parameter's display name.</param>
 <param name="parameterRule">The rule which was used to calculate the parameter's result.</param>
 <param name="parameterResult">The result of calculating the parameter's rule.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.IReleaseTracker.NotifyEndRelease">
 <summary>
 Called when the release of the current component has ended.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.ReleaseComponentController">
 <summary>
 Provided to a component during its release to give it 
 the opportunity to control certain aspects of its release 
 process.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentController.ReleasedComponentId">
 <summary>
 Gets the unique identifier that is assigned to the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentController.IsRoot">
 <summary>
 Determines whether the component being released is a root component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentController.SpecificationContext">
 <summary>
 Gets the specification context associated with the current release process.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentController.Tracker">
 <summary>
 Gets the release tracker for the current release process.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentController.DeferAllDrawings">
 <summary>
 Gets whether all drawings should be flagged for generation at a later stage.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentController.DrawingsToDefer">
 <summary>
 Gets the name of the drawings that should be flagged for generation at a later stage.
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentController.GetTasksInScope(System.String)">
 <summary>
 Gets all scoped tasks in the given scope.
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentController.GetComponentByName(System.String)">
 <summary>
 Gets a component with the given name from the local release results. See remarks for details.
 </summary>
 <param name="name">The name of the component to retrieve.</param>
 <returns>The component with the given name, or a null reference if no component was found with the given name.</returns>
 <remarks>
 <para>
 This method looks for a component with the given name in the release results, but does not search against
 the group.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentController.GetComponentByComponentSetName(System.String)">
 <summary>
 Gets the root component for the component set with the given name from the local release results. See remarks for details.
 </summary>
 <returns>The root component for the component set with the given name, or a null reference if no component set was found with the given name, or the component set root component was deleted/suppressed.</returns>
 <remarks>
 <para>
 This method looks for a component set with the given name in the release results, but does not search against
 the group.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentController.GetReferenceByComponentSetName(System.String)">
 <summary>
 Gets the root component reference for the component set with the given name from the local release results. See remarks for details.
 </summary>
 <returns>The root component reference for the component set with the given name, or a null reference if no component set was found with the given name.</returns>
 <remarks>
 <para>
 This method will return the results of evaluating the given component set, even if it was deleted/suppressed/an alternative/etc.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentController.AddChildComponentFromComponentSet(System.String,System.String)">
 <summary>
 Adds the named component set as a child of the component being released.
 </summary>
 <param name="childMasterPath">The path to the child component to replace.</param>
 <param name="componentSetName">The name of the component set to replace the child with.</param>
 <returns>True if the component set was found and added, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentController.AddChildComponentFromComponentSet(System.String,System.String,System.String)">
 <summary>
 Adds the named component set as a child of the component being released.
 </summary>
 <param name="childMasterPath">The path to the child component to replace.</param>
 <param name="childMasterAddress">The optional address which further qualifies the child component to replace.</param>
 <param name="componentSetName">The name of the component set to replace the child with.</param>
 <returns>True if the component set was found and added, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentController.AddDrivenChildComponent(System.String,DriveWorks.Components.ReleasedComponent)">
 <summary>
 Adds a new component as a child of the component being released.
 </summary>
 <param name="childMasterPath">The path to the child component to replace.</param>
 <param name="childComponent">The component to add as a child.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentController.AddDrivenChildComponent(System.String,System.String,DriveWorks.Components.ReleasedComponent)">
 <summary>
 Adds a new component as a child of the component being released.
 </summary>
 <param name="childMasterPath">The path to the child component to replace.</param>
 <param name="childMasterAddress">The optional address which further qualifies the child component to replace.</param>
 <param name="childComponent">The component to add as a child.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentController.AddStaticChildReplacement(System.String,System.String,System.String,System.Guid)">
 <summary>
 Adds a new static child replacement for the child with the given master path
 </summary>
 <param name="childMasterPath">The path of the child to replace.</param>
 <param name="childAddress">The address of the child (if applicable).</param>
 <param name="alternativePath">The path to the alternative to swap in.</param>
 <param name="parentId">The id of the parent.</param>
 <returns>True if the static replacement was added, False if a replacement has already been registered for the given child.</returns>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentController.Context">
 <summary>
 Gets the specification context from which the release process
 is being called.
 </summary>
</member>
<member name="T:DriveWorks.Components.ReleaseComponentReportTracker">
 <summary>
 Create a tracker to report on the release process of a component.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentReportTracker.#ctor(DriveWorks.Reporting.IReportWriter)">
 <summary>
 Create a new report tracker that reports release component information to the supplied report writer.
 </summary>
 <param name="reportWriter">The report writer to use for the release component process.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentTrackerProcessItem.MasterName">
 <summary>
 Sets the Master Name of the process
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentTrackerProcessItem.SubProcesses">
 <summary>
 Provides a list of all sub processes for this process.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.ReleasedComponentDetails">
 <summary>
 Provides information about a released component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.Id">
 <summary>
 Gets/sets the unique identifier of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.MasterPath">
 <summary>
 Gets/sets the master path of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.Type">
 <summary>
 Gets/sets the string which identifies the type of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.TargetPath">
 <summary>
 Gets/sets the path of the component when it is generated.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.TargetName">
 <summary>
 Gets/sets the name of the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.Generating">
 <summary>
 Gets/sets whether the component is being generated.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.Generated">
 <summary>
 Gets/sets whether the component has been generated.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.Failed">
 <summary>
 Gets/sets whether the component has failed to be generated.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.Tags">
 <summary>
 Gets/sets the tags associated with this released component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.Flags">
 <summary>
 Gets/sets the flags associated with this released component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.ParentId">
 <summary>
 The unique identifier of the parent component (if any).
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.PreviewPath">
 <summary>
 Gets/sets the path to the .drive3d file to use if requested via a preview.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentDetails.DateReleased">
 <summary>
 Gets/sets the date and time that this component was released.
 </summary>
</member>
<member name="T:DriveWorks.Components.IComponentFactory">
 <summary>
 Provides a means for dynamically constructing components of a certain type.
 </summary>
</member>
<member name="M:DriveWorks.Components.IComponentFactory.CreateProjectComponent">
 <summary>
 Creates a new project component.
 </summary>
</member>
<member name="M:DriveWorks.Components.IComponentFactory.CreateCapturedComponent">
 <summary>
 Creates a new captured component.
 </summary>
</member>
<member name="M:DriveWorks.Components.IComponentFactory.CreateReleasedComponent">
 <summary>
 Creates a new released component.
 </summary>
</member>
<member name="T:DriveWorks.Components.MissingProjectComponent">
 <summary>
 Provides a project component implementation for project components whose underlying
 capture data can't be resolved.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.MissingProjectComponent.#ctor">
 <devdoc>
 Change access level to prevent 3rd party code instantiating directly.
 </devdoc>
</member>
<member name="P:DriveWorks.Components.MissingProjectComponent.CapturedComponentId">
 <summary>
 Gets the unique identifier of the captured component on which the project component is based.
 </summary>
</member>
<member name="T:DriveWorks.Components.ProjectComponents">
 <summary>
 Provides a collection of project components.
 </summary>
 <remarks></remarks>
 
</member>
<member name="P:DriveWorks.Components.ProjectComponents.Count">
 <summary>
 Gets the number of items in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponents.Item(System.Int32)">
 <summary>
 Gets the component at the specified index.
 </summary>
 <param name="index">The index of the item to get.</param>
 <value></value>
 <returns>The specified item.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ProjectComponents.Extract(System.String)">
 <summary>
 Removes components of the specified type from the collection and returns them in a new collection.
 </summary>
 <param name="componentType">The type of component to remove.</param>
 <returns>A collection containing the extracted components.</returns>
 <remarks>
 This method will cause all immediate children's capture data to be resolved.
 </remarks>
</member>
<member name="M:DriveWorks.Components.ProjectComponents.GetEnumerator">
 <summary>
 Gets an enumerator which supports enumeration of the components in the collection.
 </summary>
</member>
<member name="T:DriveWorks.Components.ReleasedComponentReferenceAction">
 <summary>
 Specifies the action to take for a released component reference.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Derive">
 <summary>
 Derive, the child component is derived from the parent component, e.g. additional file formats.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.None">
 <summary>
 Take no action, the reference entry exists only to ensure correct model generation ordering.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Replace">
 <summary>
 Replace the reference to the child in the parent and unsuppress the child component.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Delete">
 <summary>
 Delete the reference to the child in the parent.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Suppress">
 <summary>
 Leave the reference as it is, and suppress the child component.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Unsuppress">
 <summary>
 Leave the reference as it is, and unsuppress the child component.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Hide">
 <summary>
 Leave the reference as it is, and hide the child component.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Show">
 <summary>
 Leave the reference as it is, and show the child component.
 </summary>
</member>
<member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.DerivedDeferred">
 <summary>
 Derive, the child component is derived from the parent component, e.g. additional file formats,
 but is to be generated separately from the parent.
 </summary>
</member>
<member name="T:DriveWorks.Components.ReleasedComponentReferenceDetails">
 <summary>
 Provides information about a reference from one driven component to another.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.Id">
 <summary>
 Gets/sets the unique id of the reference.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.ParentId">
 <summary>
 The unique id of the parent driven component to which the reference applies.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.ChildId">
 <summary>
 The unique id of the child driven component to which the reference applies, if appropriate.
 </summary>
 <remarks>
 This value is only specified if the reference is to a driven component.
 </remarks>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.ChildMasterPath">
 <summary>
 The full path to the original child component in the seed parent component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.ChildMasterAddress">
 <summary>
 The address of the reference in the parent component if applicable.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.TargetPath">
 <summary>
 Contains the full path of the file to be swapped into parent component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.Action">
 <summary>
 Specifies the action to take on the reference's parent component.
 </summary>
</member>
<member name="T:DriveWorks.Components.StandardReleasedComponentReferenceTree">
 <summary>
 Provides a basic implementation of the <see cref="T:DriveWorks.Components.IReleasedComponentReferenceTree" /> interface.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.CapturedComponentInfo">
 <summary>
 Provides information about a captured component.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.CapturedComponentInfo.#ctor(System.Guid,System.String,System.String,System.Guid[],System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Components.CapturedComponentInfo" /> type.
 </summary>
 <param name="id">The unique identifier assigned to the group.</param>
 <param name="type">The component's type.</param>
 <param name="path">The path to the component.</param>
 <param name="references">An array of identifiers of components referenced as children of the component.</param>
 <param name="isDeleted">A value which indicates whether the component is deleted.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.CapturedComponentInfo.Id">
 <summary>
 Gets the unique identifier assigned to the group.
 </summary>
</member>
<member name="P:DriveWorks.Components.CapturedComponentInfo.Type">
 <summary>
 Gets the component's type.
 </summary>
</member>
<member name="P:DriveWorks.Components.CapturedComponentInfo.Path">
 <summary>
 Gets the path to the component.
 </summary>
</member>
<member name="P:DriveWorks.Components.CapturedComponentInfo.References">
 <summary>
 Gets an array of identifiers of components referenced as children of the component.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.CapturedComponentInfo.IsDeleted">
 <summary>
 Determines whether the component is deleted.
 </summary>
</member>
<member name="T:DriveWorks.Components.IReleasedComponentReferenceTree">
 <summary>
 Provides information about one or more released components and their relationships.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.IReleasedComponentReferenceTree.RootComponentIds">
 <summary>
 Gets the unique identifiers of all of the root components in the reference tree.
 </summary>
</member>
<member name="P:DriveWorks.Components.IReleasedComponentReferenceTree.ReferencesByParentId">
 <summary>
 Gets a map from a parent component's identifier to the references for that component.
 </summary>
</member>
<member name="T:DriveWorks.Components.CapturedComponent">
 <summary>
 Provides the base class for captured components, which should be implemented by a
 component provider.
 </summary>
 <remarks>
 <para>
 When retrieving a component from DriveWorks, you will need to cast from the
 <c>CapturedComponent</c> base type to the specific type of component you are dealing
 with, for example:
 <code lang="VB">
 &apos; Import the component namespace from DriveWorks.Engine.dll
 Imports DriveWorks.Components
 
 &apos; Import the SolidWorks specific namespace from DriveWorks.SolidWorks.dll
 Imports DriveWorks.Components
 ...
 
 Public Sub LoadComponent(ByVal group As Group, ByVal componentId As Guid)
     Dim myComponent As CapturedComponent = group.CapturedComponents.GetComponent(componentId)
     
     If TypeOf myComponent Is DriveWorks.SolidWorks.CapturedAssembly Then
         DoSomethingWithAssembly(DirectCast(myComponent, DriveWorks.SolidWorks.ProjectAssembly))
 
     ElseIf TypeOf myComponent Is DriveWorks.SolidWorks.CapturedPart Then
         DoSomethingWithPart(DirectCast(myComponent, DriveWorks.SolidWorks.ProjectPart))
 
     ElseIf TypeOf myComponent Is DriveWorks.SolidWorks.CapturedDrawing Then
         DoSomethingWithDrawing(DirectCast(myComponent, DriveWorks.SolidWorks.ProjectDrawing))
 
     Else 
         MessageBox.Show("Not a SolidWorks component.")
     End If
 End Sub
 </code>
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Components.CapturedComponent.#ctor">
 <summary>
 Initializes an instance of a type derived from <see cref="T:DriveWorks.Components.CapturedComponent" />.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.CapturedComponent.Initialize">
 <summary>
 When overridden by a derived class, performs any required initialization
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.CapturedComponent.Data">
 <summary>
 Gets the component data instance which provides the data for the component.
 </summary>
</member>
<member name="T:DriveWorks.Components.ReleasedComponent">
 <summary>
 Provides the base class for drive components, which should be implemented by a
 component provider.
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleasedComponent.#ctor">
 <summary>
 Initializes an instance of a type derived from <see cref="T:DriveWorks.Components.CapturedComponent" />.
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleasedComponent.Initialize">
 <summary>
 When overridden by a derived class, performs any required initialization
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleasedComponent.PreProcessReleaseData(DriveWorks.Components.ReleaseComponentController,DriveWorks.Components.Data.ReleasedComponentData)">
 <summary>
 When overridden by a component, provides an opportunity to preprocess the release 
 data for a component that is in the process of being released.
 </summary>
 <param name="controller">An object which provides the ability to control the release process for the component being released.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleasedComponent.TrackParameterRelease(DriveWorks.Components.IReleaseParameterTracker,DriveWorks.Components.Data.ProjectParameterData,System.String)">
 <summary>
 Provides support for logging diagnostic information about the release of a parameter.
 </summary>
 <param name="tracker">The component to use to log the diagnostic information.</param>
 <param name="parameter">The parameter being released.</param>
 <param name="value">The calculated value of the parameter.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ReleasedComponent.DateReleased">
 <summary>
 Gets/sets the date/time that this component has been released.
 </summary>
 <remarks>
 This is ONLY used during the release process and will be null at any other time. 
 If this needs to be retrieved after release then <see cref="P:DriveWorks.Components.ReleasedComponentDetails.DateReleased"/> 
 should be used instead.
 </remarks>
</member>
<member name="P:DriveWorks.Components.ReleasedComponent.Flags">
 <summary>
 Gets the flags that have been set on this component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponent.IncludeFileFormatsInLoop">
 <summary>
 Gets whether file formats should be generated in the loop.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponent.LoopVariations">
 <summary>
 Gets the variations of this component that was created during the release loop.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponent.Tasks">
 <summary>
 Gets the released tasks for this component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponent.ScopedTasks">
 <summary>
 Gets the scoped component tasks for this component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleasedComponent.Data">
 <summary>
 Gets the component data instance which provides the data for the component.
 </summary>
</member>
<member name="T:DriveWorks.Components.ComponentReferenceType">
 <summary>
 Specifies whether a component is a standard or a derived component.
 </summary>
 <remarks>
 <para>
 Derived components with blank component names inherits their name from their parent component.
 </para>
 <para>
 Derived components do not register their component names in the group.
 </para>
 </remarks>
</member>
<member name="F:DriveWorks.Components.ComponentReferenceType.Derived">
 <summary>
 The component is derived from another component and when released has a reference
 action of <see cref="F:DriveWorks.Components.ReleasedComponentReferenceAction.Derive" />.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Components.ComponentReferenceType.Standard">
 <summary>
 The component is a standard child component and when released has a reference
 action of <see cref="F:DriveWorks.Components.ReleasedComponentReferenceAction.Replace" />.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.ProjectComponent">
 <summary>
 Provides the base class for project components, which should be implemented by a
 component provider.
 </summary>
 <remarks>
 <para>
 The DriveWorks Engine is independant of the SolidWorks implementation and providers
 can implement additional capturing and generation capabilities.
 </para>
 <para>
 When retrieving a component from DriveWorks, you will need to cast from the
 <c>ProjectComponent</c> base type to the specific type of component you are dealing
 with, for example:
 <code lang="VB">
 &apos; Import the component namespace from DriveWorks.Engine.dll
 Imports DriveWorks.Components
 
 &apos; Import the SolidWorks specific namespace from DriveWorks.SolidWorks.dll
 Imports DriveWorks.SolidWorks.Components
 ...
 
 Public Sub LoadComponent(ByVal project As Project, ByVal componentId As Guid)
     Dim myComponent As ProjectComponent = project.Components(componentId)
     
     If TypeOf myComponent Is DriveWorks.SolidWorks.ProjectAssembly Then
         DoSomethingWithAssembly(DirectCast(myComponent, DriveWorks.SolidWorks.Components.ProjectAssembly))
 
     ElseIf TypeOf myComponent Is DriveWorks.SolidWorks.ProjectPart Then
         DoSomethingWithPart(DirectCast(myComponent, DriveWorks.SolidWorks.Components.ProjectPart))
 
     ElseIf TypeOf myComponent Is DriveWorks.SolidWorks.ProjectDrawing Then
         DoSomethingWithDrawing(DirectCast(myComponent, DriveWorks.SolidWorks.Components.ProjectDrawing))
 
     Else 
         MessageBox.Show("Not a SolidWorks component.")
     End If
 End Sub
 </code>
 </para>
 </remarks>
</member>
<member name="E:DriveWorks.Components.ProjectComponent.IsLoopEnabledChanged">
 <summary>
 Raised whenever the <see cref="P:DriveWorks.Components.ProjectComponent.IsLoopEnabled" /> property changes.
 </summary>
</member>
<member name="E:DriveWorks.Components.ProjectComponent.IncludeFileFormatsInLoopChanged">
 <summary>
 Raised whenever the <see cref="P:DriveWorks.Components.ProjectComponent.IncludeFileFormatsInLoop"/> property changes.
 </summary>
</member>
<member name="M:DriveWorks.Components.ProjectComponent.#ctor">
 <summary>
 Initializes an instance of a type derived from <see cref="T:DriveWorks.Components.ProjectComponent" />.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ProjectComponent.#ctor(DriveWorks.Components.ComponentReferenceType)">
 <summary>
 Initializes an instance of a type derived from <see cref="T:DriveWorks.Components.ProjectComponent" />.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ProjectComponent.Scopes">
 <summary>
 Gets the scope(s) of this component, or null if this component
 does not support scopes.
 </summary>
</member>
<member name="M:DriveWorks.Components.ProjectComponent.Initialize">
 <summary>
 When overridden by a derived class, performs any required initialization
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ProjectComponent.Tasks">
 <summary>
 Gets the tasks associated with this component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponent.IsLoopEnabled">
 <summary>
 Gets/sets whether looping is enabled for this component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponent.LoopCount">
 <summary>
 Gets the rule that controls how many times this component should be looped during release.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponent.IncludeFileFormatsInLoop">
 <summary>
 Gets/sets whether file formats should be generated in the loop.
 </summary>
 <returns></returns>
</member>
<member name="P:DriveWorks.Components.ProjectComponent.InnerChildren">
 <summary>
 Gets the component's children.
 </summary>
</member>
<member name="P:DriveWorks.Components.ProjectComponent.Data">
 <summary>
 Gets the component data instance which provides the data for the component.
 </summary>
</member>
<member name="M:DriveWorks.Components.ProjectComponent.IsValidAction(DriveWorks.Components.ReleasedComponentReferenceAction)">
 <summary>
 Determines whether the given action is valid for the type of component.
 </summary>
 <param name="action">The action to validation.</param>
 <returns>True if the action is valid for the type of component, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ProjectComponent.ReferenceType">
 <summary>
 Gets the reference type.
 </summary>
</member>
<member name="M:DriveWorks.Components.ProjectComponent.ShouldFlagAsDeferred(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets/sets whether components released based on this component should be flagged as deferred.
 </summary>
 <param name="deferredComponentNames">The list of master names the user has requested to be deferred.</param>
 <returns>True if this component should be flagged as deferred and not be generated until that flag has been removed.</returns>
</member>
<member name="M:DriveWorks.Components.ProjectComponent.ReleaseComponent(DriveWorks.Components.ReleaseComponentController,System.String,System.String,DriveWorks.Components.ReleasedComponentFlags,System.String[],System.Boolean,System.Boolean,System.Boolean,System.Int32,DriveWorks.Components.IReleaseTracker)">
 <summary>
 Releases the specified component and produces a drive component.
 </summary>
 <param name="controller">The controller for the component being released.</param>
 <param name="targetName">The name of the component.</param>
 <param name="targetPath">The full path to the component target file.</param>
 <param name="flags">The flags for this component.</param>
 <param name="tags">The tags for this component.</param>
 <param name="trackParameters">True to report parameter evaluation to the given <see cref="T:DriveWorks.Components.IReleaseTracker"/>.</param>
 <param name="trackTags">True to report tags to the given <see cref="T:DriveWorks.Components.IReleaseTracker"/>.</param>
 <param name="trackTasks">True to report task evaluation to the given <see cref="T:DriveWorks.Components.IReleaseTracker"/>.</param>
 <param name="loopCount">The amount of times this component is being looped (not used if looping is not enabled).</param>
 <param name="tracker">The tracker used to track the release process.</param>
</member>
<member name="T:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails">
 <summary>
 Provides a read-only wrapper around an instance of 
 the <see cref="T:DriveWorks.Components.ReleasedComponentReferenceDetails" /> class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.#ctor(DriveWorks.Components.ReleasedComponentReferenceDetails)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails" /> class.
 </summary>
 <param name="details">The details instance to wrap.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.Id">
 <summary>
 Gets the unique id of the reference.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.ParentId">
 <summary>
 Gets the unique id of the parent driven component to which the reference applies.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.ChildId">
 <summary>
 Gets the unique id of the child driven component to which the reference applies, if appropriate.
 </summary>
 <remarks>
 This value is only specified if the reference is to a driven component.
 </remarks>
</member>
<member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.ChildMasterPath">
 <summary>
 Gets the full path to the original child component in the seed parent component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.ChildMasterAddress">
 <summary>
 Gets the address of the reference in the parent component if applicable.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.TargetPath">
 <summary>
 Gets the full path of the file to be swapped into parent component.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.Action">
 <summary>
 Gets the action to take on the reference's parent component.
 </summary>
</member>
<member name="T:DriveWorks.Components.ReleaseComponentsResults">
 <summary>
 Encapsulates the results of releasing one or more component sets.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentsResults.References">
 <summary>
 Gets all of the component references which were released.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentsResults.Components">
 <summary>
 Gets all of the components which were released.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentsResults.Dependencies">
 <summary>
 Gets the identifiers of all of the driven components on which the specification is dependent.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentsResults.SpecificationId">
 <summary>
 Gets the identifier of the specification to which the release results belong.
 </summary>
 <remarks>This will be the root specification if we are an embedded child specification.</remarks>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentsResults.Flags">
 <summary>
 Gets the flags for all components released within this cycle.
 </summary>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentsResults.DescendantId">
 <summary>
 Gets the identifier of the descendant specification to which the release results belong.
 </summary>
 <remarks>This will return null if we are not an embedded child specification.</remarks>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentsResults.RootComponents">
 <summary>
 Gets the components that exist at root level.
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.GetComponent(System.Guid)">
 <summary>
 Gets a released component based on it's unique identifier.
 </summary>
 <param name="componentId">The unique identifier of the released component to retrieve.</param>
 <returns>The component with the given identifier, or a null reference if no component exists with the given identifier.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Components.ReleaseComponentsResults.ScopedTasks">
 <summary>
 Gets the scoped <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s that were released.
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.GetComponentReferences(System.Guid)">
 <summary>
 Gets the references for the component with the specified identifer.
 </summary>
 <param name="componentId">The unique identifier of the released component for which to retrieve references.</param>
 <returns>An array of references for the specified component, or a null reference if no component exists with the given identifier.</returns>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.GetRootComponent(System.String)">
 <summary>
 Gets a root component based on the name of the component set 
 </summary>
 <param name="componentSetName">Gets the root component for the component set with the given name.</param>
 <returns>A released component for the given component set, or a null reference if the component set</returns>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.GetUniqueDescendantIds(System.Guid)">
 <summary>
 Gets a collection of all components parented by the specified component id.
 </summary>
 <param name="componentId">The unique identifier of the component to retrieve the descendants for.</param>
 <remarks>This will not include the passed in component id in the collection.</remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.ConvertToReferenceTree(DriveWorks.Group)">
 <summary>
 Converts the release results to a complete component reference tree by copying across reference information
 from this release session, and retrieving information for precedent components that were released in other
 sessions from the group.
 </summary>
 <param name="group">The group to use to load preexisting component reference information.</param>
 <returns>A released component reference tree.</returns>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.Save">
 <summary>
 Saves the released component results as an XML document.
 </summary>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.Load(DriveWorks.Specification.SpecificationContext,System.Xml.Linq.XElement)">
 <summary>
 Loads the released component results from the given XML. 
 </summary>
 <param name="specificationContext">The specification loading the results.</param>
 <param name="savedResults">The saved release results.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.Load(DriveWorks.Project,System.Xml.Linq.XElement)">
 <summary>
 Loads the released component results from the given XML. 
 </summary>
 <param name="project">The project loading the results.</param>
 <param name="savedResults">The saved release results.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.Load(DriveWorks.Group,System.Xml.Linq.XElement)">
 <summary>
 Loads the released component results from the given XML. 
 </summary>
 <param name="group">The group loading the results.</param>
 <param name="savedResults">The saved release results.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentsResults.Load(DriveWorks.Hosting.EngineHost,System.Xml.Linq.XElement)">
 <summary>
 Loads the released component results from the given XML. 
 </summary>
 <param name="engineHost">The engine host.</param>
 <param name="savedResults">The saved release results.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Components.ReleaseComponentHelper">
 <summary>
 Implements the release process for components.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Specification.SpecificationContext,System.String)">
 <summary>
 Releases the components specified by the given string and returns the results.
 </summary>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The names of the components to release separated by commas, or a "*" to release all components.</param>
 <returns>The release results.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Specification.SpecificationContext,System.String,DriveWorks.Components.IReleaseTracker)">
 <summary>
 Releases the components specified by the given string and returns the results.
 </summary>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The names of the components to release separated by commas, or a "*" to release all components.</param>
 <param name="tracker">An implementation of the <see cref="T:DriveWorks.Components.IReleaseTracker" /> interface, or a null reference.</param>
 <returns>The release results.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet})">
 <summary>
 Releases the given components.
 </summary>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The components to release.</param>
 <returns>The release results.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet},DriveWorks.Components.IReleaseTracker)">
 <summary>
 Releases the given components.
 </summary>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The components to release.</param>
 <param name="tracker">An implementation of the <see cref="T:DriveWorks.Components.IReleaseTracker" /> interface, or a null reference.</param>
 <returns>The release results.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.String)">
 <summary>
 Releases the components specified by the given string and returns the results.
 </summary>
 <param name="environment">The environment which controls the release process.</param>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The names of the components to release separated by commas, or a "*" to release all components.</param>
 <returns>The release results.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.String,DriveWorks.Components.IReleaseTracker)">
 <summary>
 Releases the components specified by the given string and returns the results.
 </summary>
 <param name="environment">The environment which controls the release process.</param>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The names of the components to release separated by commas, or a "*" to release all components.</param>
 <param name="tracker">An implementation of the <see cref="T:DriveWorks.Components.IReleaseTracker" /> interface, or a null reference.</param>
 <returns>The release results.</returns>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.String,DriveWorks.Components.IReleaseTracker,System.String)">
 <summary>
 Releases the components specified by the given string and returns the results.
 </summary>
 <param name="environment">The environment which controls the release process.</param>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The names of the components to release separated by a pipe-bar '|', or a "*" to release all components.</param>
 <param name="tracker">An implementation of the <see cref="T:DriveWorks.Components.IReleaseTracker" /> interface, or a null reference.</param>
 <param name="derivedComponentsToDefer">The names of the derived components to put on hold, not to be generated at the same time as the associated models.</param>
 <returns>The release results.</returns>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet})">
 <summary>
 Releases the given components.
 </summary>
 <param name="environment">The environment which controls the release process.</param>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The components to release.</param>
 <returns>The release results.</returns>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet},DriveWorks.Components.IReleaseTracker)">
 <summary>
 Releases the given components.
 </summary>
 <param name="environment">The environment which controls the release process.</param>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The components to release.</param>
 <param name="tracker">An implementation of the <see cref="T:DriveWorks.Components.IReleaseTracker" /> interface, or a null reference.</param>
 <returns>The release results.</returns>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet},DriveWorks.Components.IReleaseTracker,System.String)">
 <summary>
 Releases the given components.
 </summary>
 <param name="environment">The environment which controls the release process.</param>
 <param name="context">The specification context for which to release components.</param>
 <param name="components">The components to release.</param>
 <param name="tracker">An implementation of the <see cref="T:DriveWorks.Components.IReleaseTracker" /> interface, or a null reference.</param>
 <param name="derivedComponentsToDefer">The names of the derived components to put on hold, not to be generated at the same time as the associated models.</param>
 <returns>The release results.</returns>
</member>
<member name="M:DriveWorks.Components.ReleaseComponentHelper.ReleasePreview(DriveWorks.Specification.SpecificationContext,System.String[])">
 <summary>
 Releases all components and flags the bottom most model as requiring a 3d preview to be saved.
 </summary>
 <param name="context">The specification for which to release the components.</param>
 <param name="newTags">Optionally, the new tags to apply to all components. These will override anything set up in Model Rules.</param>
 <returns>The results of the release process.</returns>
</member>
<member name="T:DriveWorks.Forms.VerticalTextAlignment">
 <summary>
 Controls the vertical alignment of a piece of text.
 </summary>
</member>
<member name="F:DriveWorks.Forms.VerticalTextAlignment.Top">
 <summary>
 The text is aligned to the top.
 </summary>
</member>
<member name="F:DriveWorks.Forms.VerticalTextAlignment.Bottom">
 <summary>
 The text is aligned to the bottom.
 </summary>
</member>
<member name="F:DriveWorks.Forms.VerticalTextAlignment.Center">
 <summary>
 The text is centrally aligned.
 </summary>
</member>
<member name="T:DriveWorks.Forms.IPreviewResourceHandler">
 <summary>
 Handles resource fetching and caching for a particular preview result.
 </summary>
</member>
<member name="M:DriveWorks.Forms.IPreviewResourceHandler.EagerLoadResources">
 <summary>
 Begins loading resources from the preview so that GetPreviewResource returns results quicker.
 </summary>
</member>
<member name="M:DriveWorks.Forms.IPreviewResourceHandler.GetPreviewResource(System.String)">
 <summary>
 Attempts to get a resource from the preview object.
 This is typically for fetching model data in a JSON format or an image binary.
 </summary>
 <param name="key">The name of the resource to fetch.</param>
 <returns>A stream to the resource or null if nothing was found.</returns>
 <remarks>
 The result will be cached if it was a fresh result, and if <see cref="M:DriveWorks.Forms.IPreviewResourceHandler.EagerLoadResources"/> has been called then other new resources will begin loading too.
 </remarks>
</member>
<member name="M:DriveWorks.Forms.IPreviewResourceHandler.InvalidateResource(System.String)">
 <summary>
 Invalidates the resource in the event it is changed.
 </summary>
 <param name="resourceName">The name of the scene resource.</param>
</member>
<member name="T:DriveWorks.Forms.PreviewGenerationMethod">
 <summary>
 Defines the different options for generating models during a 3d preview.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewGenerationMethod.OnDemand">
 <summary>
 The preview will be generated using On Demand generation.
 </summary>
 <remarks>This is the default and is our legacy behaviour.</remarks>
</member>
<member name="F:DriveWorks.Forms.PreviewGenerationMethod.Queued">
 <summary>
 The preview will be generated using Queued generation.
 </summary>
 <remarks>This allows for generation tasks and load balancing of models.</remarks>
</member>
<member name="T:DriveWorks.Forms.IPreviewService">
 <summary>
 Represents a service responsible for serving 3D Previews.
 </summary>
</member>
<member name="M:DriveWorks.Forms.IPreviewService.Preview(DriveWorks.Forms.PreviewRequest)">
 <summary>
 Generates a preview of the specified release data.
 </summary>
 <param name="requestData">The request data for the 3D Preview.</param>
 <returns>Information about the files belonging to the preview, or a null reference if the release data doesn't contain a root model.</returns>
</member>
<member name="T:DriveWorks.Forms.ControlDynamicPropertyRule">
 <summary>
 Provides a wrapper around the rule of a control's dynamic property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ControlDynamicPropertyRule.#ctor(DriveWorks.Forms.ControlBase,DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Forms.ControlDynamicPropertyRule"/> class.
 </summary>
 <param name="control">The control that the dynamic property belongs to.</param>
 <param name="prop">The dynamic property.</param>
</member>
<member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Comment">
 <summary>
 Gets/sets the comment on the rule.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.DisplayName">
 <summary>
 Gets the display name for this rule.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.IsWritable">
 <summary>
 Returns whether this rule is writable. This will always be True.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Rule">
 <summary>
 Gets/sets the rule's formula.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ControlDynamicPropertyRule.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the formula and comment for this rule.
 </summary>
 <param name="newRule">The new formula.</param>
 <param name="newComment">The new comment.</param>
</member>
<member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Id">
 <summary>
 Gets the unique identifier for this rule.
 </summary>
 <remarks>This will be the name of the control and the name of the property formatted as {controlName}:{propertyName}.</remarks>
</member>
<member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Name">
 <summary>
 Gets the referencable name of the rule.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ControlDynamicPropertyRule.GetVersionHistory">
 <summary>
 Gets the version history for this rule.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.RuleType">
 <summary>
 Gets an array of type names which qualify this rule.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Context">
 <summary>
 Gets the context that the rule should be evaluated using.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.ScopeAddress">
 <summary>
 Gets the scopes that the rule should be evaluated in.
 </summary>
</member>
<member name="T:DriveWorks.Forms.DataTableControl">
 <summary>
 Implements a data table control.
 </summary>
 <remarks>
 This control is not supported for projects using Microsoft Excel as a rules-engine.
 </remarks>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.ItemsProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataTableControl.Items" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.SelectedRowIndexProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataTableControl.SelectedRowIndex" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.SelectedRowIdentityProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataTableControl.SelectedRowIdentity" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.IdentityFieldsProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataTableControl.IdentityFields" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.HiddenFieldsProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataTableControl.HiddenFields" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.DefaultRowIndexProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataTableControl.DefaultRowIndex" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.DefaultRowIdentityProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataTableControl.DefaultRowIdentity" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.ColumnWidthsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.ColumnWidths" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.HeaderFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.HeaderFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective text font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.EffectiveHeaderFontProperty">
 <summary>
 Provides the property store for the effective header font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.TextFontColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.TextFontColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.HeaderFontColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.HeaderFontColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.RowHoverBackgroundColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.RowHoverBackgroundColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.RowHoverTextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.RowHoverTextColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.ShowGridLinesProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.ShowGridLines"/> property. 
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.RowHeightProperty">
 <summary>
 Provides the property store for the row height.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.HeaderBackgroundColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.HeaderBackgroundColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.RowBackgroundColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.RowBackgroundColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.RowTextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.RowTextHorizontalAlignment"/> property.  
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.RowTextVerticalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.RowTextVerticalAlignment"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.HeaderTextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.HeaderTextHorizontalAlignment"/> property.  
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.HeaderTextVerticalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.HeaderTextVerticalAlignment"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.SelectedRowTextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.SelectedRowTextColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.SelectedRowBackgroundColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.SelectedRowBackgroundColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.SelectedRowFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DataTableControl.SelectedRowFont"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataTableControl.EffectiveSelectedRowFontProperty">
 <summary>
 Provides the property store for the effective selected row font.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataTableControl.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.DataTableControl" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.ColumnWidths">
 <summary>
 Gets/sets the width of the columns.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.RowHeight">
 <summary>
 Gets the height value to apply to all rows in the data table, including the header row.
 </summary>
 <remarks>
 When this is 0 it is treated as an auto size value.
 </remarks>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.Items">
 <summary>
 Gets/sets the items in the table.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.IdentityFields">
 <summary>
 Gets/sets the names of fields that should be used as an identity specification for a row.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.HiddenFields">
 <summary>
 Gets/sets the names of fields that should not be shown in the table.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.SelectedRowIndex">
 <summary>
 Gets/sets the current value of the selected row index property which can be used
 to alter the currently selected row.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.SelectedRowIdentity">
 <summary>
 Gets/sets the current value of the selected row identity property which can be used
 to alter the currently selected row.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.DefaultRowIndex">
 <summary>
 Gets the current value of the default row index property which can be used
 to alter the currently selected row.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.DefaultRowIdentity">
 <summary>
 Gets the current value of the default row identity property which can be used
 to alter the currently selected row.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.TextFont">
 <summary>
 Gets/sets the font used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.HeaderFont">
 <summary>
 Gets/sets the font used for the control's header text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.TextEffectiveFont">
 <summary>
 Gets the font that will be used for rendering the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.HeaderEffectiveFont">
 <summary>
 Gets the font that will be used for rendering the control's headers.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.RowHoverBackgroundColor">
 <summary>
 Gets/sets the color used for the background of the row the cursor is currently on.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.RowHoverTextColor">
 <summary>
 Gets/sets the color used for the foreground of the row the cursor is currently on.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.TextFontColor">
 <summary>
 Gets/sets the color used for the control's body text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.HeaderFontColor">
 <summary>
 Gets/sets the color used for the control's header text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.ShowGridLines">
 <summary>
 Gets/sets whether the data table's grid lines should be displayed.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.HeaderBackgroundColor">
 <summary>
 Gets/sets the color used for the control's header background color.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.RowBackgroundColor">
 <summary>
 Gets/sets the color used for the background color of all rows.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.RowTextHorizontalAlignment">
 <summary>
 Gets/sets the horizontal alignment of the data table's row text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.RowTextVerticalAlignment">
 <summary>
 Gets/sets the vertical alignment of the data table's row text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.HeaderTextHorizontalAlignment">
 <summary>
 Gets/sets the horizontal alignment of the data table's header text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.HeaderTextVerticalAlignment">
 <summary>
 Gets/sets the vertical alignment of the data table's header text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.SelectedRowTextColor">
 <summary>
 Gets/sets the color used for the text of the selected row.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.SelectedRowBackgroundColor">
 <summary>
 Gets/sets the color used for the background of the selected row.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.SelectedRowFont">
 <summary>
 Gets/sets the font used for the selected row's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataTableControl.EffectiveSelectedRowFont">
 <summary>
 Gets the font that will be used for rendering the control's text
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataTableControl.GetInputValue">
 <summary>
 Gets the selected index.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataTableControl.SetInputValue(System.Object)">
 <summary>
 Sets the selected index.
 </summary>
 <param name="value">The new selected index.</param>
</member>
<member name="T:DriveWorks.Forms.EffectivePreviewResult">
 <summary>
 Represents the result of requesting a preview from a 
 preview control. If the preview control has a static file, then
 the static file name will be returned.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.EffectivePreviewResult.#ctor(System.String)">
 <summary>
 Initializes a new instance of an effective preview result.
 </summary>
 <param name="previewFilePath">The fully qualified path to the preview file.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.EffectivePreviewResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Initializes a new instance of an effective preview result.
 </summary>
 <param name="previewFilePath">The fully qualified path to the preview file.</param>
 <param name="supportingFilePaths">A collection of fully qualified paths to additional files that belong to the preview and may be requested.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.EffectivePreviewResult.PreviewFilePath">
 <summary>
 Gets the fully qualified path to the preview file.
 </summary>
</member>
<member name="P:DriveWorks.Forms.EffectivePreviewResult.SupportingFilePaths">
 <summary>
 Gets a collection of fully qualified paths to additional files that belong to the preview and may be requested.
 </summary>
</member>
<member name="T:DriveWorks.Forms.RuleTechnologyAttribute">
 <summary>
 Provides support for filtering a control's applicability to a given rule technology.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.RuleTechnologyAttribute.#ctor(DriveWorks.ProjectRuleTechnology)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.RuleTechnologyAttribute" /> class.
 </summary>
 <param name="technology">The technology which is enabled.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.RuleTechnologyAttribute.Technology">
 <summary>
 Gets the technology which is enabled.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.SpecificationHostControl">
 <summary>
 A control that can host specifications.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpecificationHostControl.InputValuesProperty">
 <summary>
 Property for the InputValues property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpecificationHostControl.OnTransitionedMacroNameProperty">
 <summary>
 Property for the OnTransitionedMacroName property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpecificationHostControl.OnCancelledMacroNameProperty">
 <summary>
 Property for the OnCancelledMacroName property.
 </summary>
</member>
<member name="E:DriveWorks.Forms.SpecificationHostControl.HostedContextChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Forms.SpecificationHostControl.HostedContext"/> value changes.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpecificationHostControl.Value">
 <summary>
 The resulting value of this control.
 This will be a table of specification details and specification properties.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpecificationHostControl.InputValues">
 <summary>
 An optional table that has two columns (Name and Value). The values will be driven into the hosted specification based on the name column.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpecificationHostControl.OnTransitionedMacroName">
 <summary>
 The name of the macro to execute when the hosted specification is transitioned.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpecificationHostControl.OnCancelledMacroName">
 <summary>
 The name of the macro to execute when the hosted specification is cancelled.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpecificationHostControl.HostedContext">
 <summary>
 The current specification context that is being hosted or null.
 </summary>
</member>
<member name="T:DriveWorks.Forms.DuplicateFileHandlingBehavior">
 <summary>
 Provides options for how to handle duplicate file situations.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DuplicateFileHandlingBehavior.Overwrite">
 <summary>
 File should be overwritten.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DuplicateFileHandlingBehavior.AppendNumber">
 <summary>
 New file should have a unique number appended to its name.
 </summary>
</member>
<member name="T:DriveWorks.Forms.HyperlinkBehavior">
 <summary>
 Provides options which govern the behavior of an Hyperlink control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.HyperlinkBehavior.CurrentWindow">
 <summary>
 The Hyperlink, when clicked will open the link in the current window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.HyperlinkBehavior.NewWindow">
 <summary>
 The Hyperlink, when clicked will open the link in a new window/tab.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ScrollBarVisibility">
 <summary>
 The visibility style of a scroll bar.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ScrollBarVisibility.Auto">
 <summary>
 The scroll bar will shown when needed, but is otherwise hidden.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ScrollBarVisibility.Visible">
 <summary>
 The scroll bar is visible at all times, but is disabled when not needed.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ScrollBarVisibility.Hidden">
 <summary>
 The scroll bar is always hidden and scrolling is disabled.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DatePicker">
 <summary>
 Provides an implementation of a date picker control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.DateProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DatePicker.DateValue"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.DateSourceProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DatePicker.DateValue" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.DefaultValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DatePicker.DefaultValue" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.DateFormatProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DatePicker.DateFormat"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.FormattedValueProperty">
 <summary>
 Provides the property store for the formatted date string.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.MinimumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DatePicker.Minimum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.MaximumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DatePicker.Maximum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DatePicker.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.TextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DatePicker.TextHorizontalAlignment" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective text font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DatePicker.TextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DatePicker.TextColor" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DatePicker.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.DatePicker" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.DatePicker.DateValue">
 <summary>
 Gets/sets the date that will be used within the date picker.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.DateFormat">
 <summary>
 Gets/sets the format which the date value will be converted into.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.FormattedValue">
 <summary>
 Gets the selected date, formatted using the specified <see cref="P:DriveWorks.Forms.DatePicker.DateFormat"/> value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.DefaultValue">
 <summary>
 Gets/sets the default value of the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.Minimum">
 <summary>
 Gets/sets the date picker's minimum selectable value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.Maximum">
 <summary>
 Gets/sets the date picker's maximum selectable value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.TextFont">
 <summary>
 Gets/sets the font used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.TextColor">
 <summary>
 Gets/sets the color used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.TextHorizontalAlignment">
 <summary>
 Gets/sets the horizontal alignment of the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.EffectiveMinimum">
 <summary>
 Gets the effective minimum date.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.EffectiveMaximum">
 <summary>
 Gets the effective maximum date, adjusted for empty values and if the minimum is greater than it.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DatePicker.EffectiveDate">
 <summary>
 Gets the effective date, adjusted based on the minimum and maximum date values.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DatePicker.ClearInputValue">
 <summary>
 Sets the date value to an empty string.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DatePicker.GetInputValue">
 <summary>
 Returns the date picker's date value.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DatePicker.SetInputValue(System.Object)">
 <summary>
 Sets the date picker's date value.
 </summary>
 <param name="value">The value to set to the input property.</param>
</member>
<member name="P:DriveWorks.Forms.DatePicker.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.TextAlignment">
 <summary>
 Controls the alignment of a piece of text.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextAlignment.Left">
 <summary>
 The text is aligned to the left.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextAlignment.Right">
 <summary>
 The text is aligned to the right.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextAlignment.Center">
 <summary>
 The text is centrally aligned.
 </summary>
</member>
<member name="T:DriveWorks.Forms.UploadControl">
 <summary>
 Provides an implementation of a file uploading control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.FinalFileNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.FinalFileName"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.OriginalFileNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.OriginalFileName"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.DefaultFileNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.DefaultFileName"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.DuplicateFileBehaviorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.DuplicateFileBehavior"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.FileFilterProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.FileFilter"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.FileSizeLimitProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.FileSizeLimit"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.UploadCompleteMacroProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.UploadCompleteMacro"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.PictureDefaultProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.PictureDefault"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.PictureHoverProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.PictureHover"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.PicturePressedProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.PicturePressed"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.PictureStyleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.PictureStyle"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.UploadControl.PictureSizeModeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.UploadControl.PictureSizeMode"/> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.UploadControl.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.UploadControl"/> type.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.FinalFileName">
 <summary>
 Gets the resulting file name of the file after saving.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.OriginalFileName">
 <summary>
 Gets the file name of the uploaded file (on the client's machine).
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.DefaultFileName">
 <summary>
 Gets/sets the file path to use for the next uploaded file.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.DuplicateFileBehavior">
 <summary>
 Gets/sets how duplicate file names will be handled.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.FileFilter">
 <summary>
 Gets/sets the filter to use when picking a file to upload.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.FileSizeLimit">
 <summary>
 Gets/sets the limit on the size of the file that can be uploaded.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.UploadCompleteMacro">
 <summary>
 Gets/sets the name of the macro to call when uploading of a file is complete.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.PictureDefault">
 <summary>
 Gets/sets the location of the default picture to use as the default image for this macro button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.PictureHover">
 <summary>
 Gets/sets the location of the picture to use as the image for this macro button when
 it's in a hover state.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.PicturePressed">
 <summary>
 Gets/sets the location of the picture to use as the image for this macro button when
 it's in a pressed state.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.PictureStyle">
 <summary>
 Gets/sets the picture appearance style for this macro button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.PictureSizeMode">
 <summary>
 Gets/sets the picture sizing mode for this macro button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.UploadControl.SupportsTooltips">
 <summary>
 Gets whether this control supports tooltips.
 </summary>
 <returns>True if this control supports tooltips.</returns>
</member>
<member name="M:DriveWorks.Forms.UploadControl.GetAllowedFileExtensions">
 <summary>
 Gets a list of extensions for the files that are allowed to be uploaded with this control.
 </summary>
 <returns>A collection of extensions parsed from the <see cref="P:DriveWorks.Forms.UploadControl.FileFilter"/> property.</returns>
 <remarks>The Hashset is case insensitive.</remarks>
</member>
<member name="M:DriveWorks.Forms.UploadControl.HandleUploadAsync(System.IO.Stream,System.String)">
 <summary>
 Takes the specified inputs and completes the upload process for this control asynchronously.
 </summary>
 <param name="inputStream">The stream to read the file information from.</param>
 <param name="uploadingFileName">The name of the file as specified by the client.</param>
 <returns>Task that will complete when the process is complete.</returns>
</member>
<member name="T:DriveWorks.Forms.WebFrameControl">
 <summary>
 Represents a control that can display a web page.
 </summary>
</member>
<member name="F:DriveWorks.Forms.WebFrameControl.UrlProperty">
 <summary>
 Provides the backing store for the <see cref="P:DriveWorks.Forms.WebFrameControl.Url" /> property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.WebFrameControl.Url">
 <summary>
 Gets/sets the URL of the page to display in the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.WebFrameControl.SupportsTooltips">
 <summary>
 Gets whether this control supports tooltips.
 </summary>
 <returns>True if this control supports tooltips.</returns>
</member>
<member name="T:DriveWorks.Forms.DataModel.InvalidNumberHandling">
 <summary>
 Controls the way invalid values such as <see cref="T:System.Double" /> and <see cref="T:System.Double" /> will get handled in a <see cref="T:DriveWorks.Forms.DataModel.DynamicProperty" />.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.InvalidNumberHandling.AllowInvalidValues">
 <summary>
 Invalid numbers are allowed.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.InvalidNumberHandling.ResetToDefault">
 <summary>
 Invalid values will be set to the default value of the <see cref="T:DriveWorks.Forms.DataModel.DynamicProperty" />.
 </summary>
</member>
<member name="T:DriveWorks.Forms.DataModel.DynamicPropertyData">
 <summary>
 Additional data that used by an instance of <see cref="T:DriveWorks.Forms.DataModel.DynamicProperty"/>.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.DisplayName">
 <summary>
 Gets and sets a localized display name for the property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.Description">
 <summary>
 Gets and sets a localized description of the property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.Category">
 <summary>
 Gets and sets the category associated with the property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.PropertyTypes">
 <summary>
 The semantic types that apply to the property.
 </summary>
 <remarks>
 See <see cref="T:DriveWorks.StandardRuleTypes"/> for typical values.
 </remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.IsLocked">
 <summary>
 Determines if the object has been locked.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.InvalidNumberHandling">
 <summary>
 Gets/sets whether <see cref="T:System.Double" /> values are allowed in this property (only applies to <see cref="T:System.Double" /> values).
 </summary>
 <remarks>This also covers <see cref="T:System.Double" />.</remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.DynamicProperty">
 <summary>
 Represents a dynamic property on a DriveWorks control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.GlobalIndex">
 <summary>
 Gets the unique index of the property which uniquely identifies it from all other properties, even those
 registered against different types.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.Index">
 <summary>
 Gets the index of the property local to the control type against which it is registered.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.Behavior">
 <summary>
 Controls the dynamic behavior of the property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.StandardStoreOption">
 <summary>
 Gets the standard store to which the property is mapped if
 it is mapped to a standard store.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.CustomStoreName">
 <summary>
 Gets the name of the property in a custom store if 
 the property isn't mapped on to a standard store.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.SerializeAs">
 <summary>
 Gets the name of the property used for XML serialization/deserialization.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.DisplayName">
 <summary>
 Gets a localized display name for the property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.Description">
 <summary>
 Gets a localized description of the property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.DefaultValue">
 <summary>
 Gets the default value of the property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.LegacyBehaviorDefault">
 <summary>
 Gets the default value to use if this is a legacy behaviour that is now being exposed in a property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.InvalidNumberHandling">
 <summary>
 Gets how invalid values (such as <see cref="T:System.Double"/>) are treated in this property.
 </summary>
 <remarks>This only applies to property values of type <see cref="T:System.Double" />. Note that <see cref="T:System.Double" /> is also covered.</remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.Converter">
 <summary>
 Gets the converter which handles moving the property value between the store and the control.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.Category">
 <summary>
 Gets the category associated with the property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.DynamicProperty.PropertyTypes">
 <summary>
 The semantic types of this property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetVersionHistory(DriveWorks.Forms.ControlBase)">
 <summary>
 Returns the rule and comment history for given control.
 </summary>
 <param name="control">The control to get the version history of.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.ToStoreValue(System.Object)">
 <summary>
 Converts the specified native value into the type 
 expected by the backing store.
 </summary>
 <param name="value">The value to convert.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.ToNativeValue(DriveWorks.Forms.ControlBase,System.Object)">
 <summary>
 Converts the specified value from the backing store into the type expected 
 according to the property registration.
 </summary>
 <param name="control">The control for which to convert the value.</param>
 <param name="value">The store value to convert.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStoreName(DriveWorks.Forms.ControlBase)">
 <summary>
 Gets the store name for a dynamic extended property.
 </summary>
 <param name="control">The control for which to get the property's store name.</param>
 <returns>The store name for the dynamic extended property on the given control.</returns>
 <exception cref="T:System.ArgumentNullException">The control was not specified.</exception>
 <exception cref="T:DriveWorks.NotInitializedException">The control isn't initialized.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The property isn't supported for the specified control, or the property isn't a dynamic extended property.</exception>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStoreName(System.String)">
 <summary>
 Gets the store name for a dynamic extended property.
 </summary>
 <param name="controlName">The name of the control for which to get the property's store name.</param>
 <returns>The store name for the dynamic extended property on the given control.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStoreValue(DriveWorks.Forms.ControlBase)">
 <summary>
 Gets the current unconverted value of the property from the specified control.
 </summary>
 <param name="control">The control from which to get the property value.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetValue(DriveWorks.Forms.ControlBase)">
 <summary>
 Gets the current value of the property from the specified control, and converts it to the proper type.
 </summary>
 <param name="control">The control from which to get the property value.</param>
 <returns>The value of the property, converted using the Converter specified when the property was registered if one was specified.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetValue``1(DriveWorks.Forms.ControlBase)">
 <summary>
 Gets the current value of the property from the specified control, and converts it to the proper type.
 </summary>
 <typeparam name="T">The type to which to cast the return value.</typeparam>
 <param name="control">The control from which to get the property value.</param>
 <returns>The value of the property, converted using the Converter specified when the property was registered if one was specified.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.SetValue(DriveWorks.Forms.ControlBase,System.Object)">
 <summary>
 Sets the value of the property on the specified control.
 </summary>
 <param name="control">The control on which to set the property.</param>
 <param name="value">The new value of the property.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.IsDynamic(DriveWorks.Forms.ControlBase)">
 <summary>
 Determines whether the property is dynamic.
 </summary>
 <param name="control">The control instance on which to check the property.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.IsDynamicNotNoRule(DriveWorks.Forms.ControlBase)">
 <summary>
 Determines whether the property is dynamic, and doesn't have the <see cref="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagNoRuleAllowed" /> flag set.
 </summary>
 <param name="control">The control instance on which to check the property.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.CanSetIsExtended(DriveWorks.Forms.ControlBase)">
 <summary>
 Determines whether the property can be extended.
 </summary>
 <param name="control">The control to check.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.SetIsExtended(DriveWorks.Forms.ControlBase,System.Boolean)">
 <summary>
 Sets whether the property is extended on the given control.
 </summary>
 <param name="control">The control on which to set the store name for the property.</param>
 <param name="isExtended">True if the property should be extended, otherwise false.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetIsExtended(DriveWorks.Forms.ControlBase)">
 <summary>
 Gets whether the property is extended on the given control.
 </summary>
 <param name="control">The control to check whether this property is extended or not.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,DriveWorks.Forms.DataModel.StandardStoreOptions,System.String,System.String,System.String,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type)">
 <summary>
 Registers a dynamic property for the given type of control.
 </summary>
 <param name="controlType">The type of the control.</param>
 <param name="standardStore">One of a number of predefined property backing stores.</param>
 <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
 <param name="displayName">The name of the property as it should be shown in UI.</param>
 <param name="description">The description of the property which should be shown in UI.</param>
 <param name="category">The category of the property when shown in UI.</param>
 <param name="defaultValue">The default value of the property.</param>
 <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
 <param name="clrType">The CLR type of the value stored by the property.</param>
 <returns>A dynamic property for the control.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,DriveWorks.Forms.DataModel.StandardStoreOptions,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,DriveWorks.Forms.DataModel.DynamicPropertyData)">
 <summary>
 Registers a dynamic property for the given type of control.
 </summary>
 <param name="controlType">The type of the control.</param>
 <param name="standardStore">One of a number of predefined property backing stores.</param>
 <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
 <param name="defaultValue">The default value of the property.</param>
 <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
 <param name="clrType">The CLR type of the value stored by the property.</param>
 <param name="data">Additional settings for the property.</param>
 <returns>A dynamic property for the control.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.RegisterStatic(System.Type,System.String,System.String,System.String,System.String,System.String,System.Object,System.Type)">
 <summary>
 Registers a static property, which has the same backing store name as serialization name, for the given type of control.
 </summary>
 <param name="controlType">The type of the control.</param>
 <param name="storeName">The name of a custom backing data store.</param>
 <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
 <param name="displayName">The name of the property as it should be shown in UI.</param>
 <param name="description">The description of the property which should be shown in UI.</param>
 <param name="category">The category of the property when shown in UI.</param>
 <param name="defaultValue">The default value of the property.</param>
 <param name="clrType">The CLR type of the value stored by the property.</param>
 <returns>A dynamic property for the control.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.RegisterStatic(System.Type,System.String,System.String,System.String,System.String,System.Object,System.Type)">
 <summary>
 Registers a static property, which has the same backing store name as serialization name, for the given type of control.
 </summary>
 <param name="controlType">The type of the control.</param>
 <param name="storeName">The name of a custom backing data store.</param>
 <param name="displayName">The name of the property as it should be shown in UI.</param>
 <param name="description">The description of the property which should be shown in UI.</param>
 <param name="category">The category of the property when shown in UI.</param>
 <param name="defaultValue">The default value of the property.</param>
 <param name="clrType">The CLR type of the value stored by the property.</param>
 <returns>A dynamic property for the control.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,System.String,System.String,System.String,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type)">
 <summary>
 Registers a dynamic property, which has the same backing store name as serialization name, for the given type of control.
 </summary>
 <param name="controlType">The type of the control.</param>
 <param name="storeName">The name of a custom backing data store.</param>
 <param name="displayName">The name of the property as it should be shown in UI.</param>
 <param name="description">The description of the property which should be shown in UI.</param>
 <param name="category">The category of the property when shown in UI.</param>
 <param name="defaultValue">The default value of the property.</param>
 <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
 <param name="clrType">The CLR type of the value stored by the property.</param>
 <returns>A dynamic property for the control.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,DriveWorks.Forms.DataModel.DynamicPropertyData)">
 <summary>
 Registers a dynamic property, which has the same backing store name as serialization name, for the given type of control.
 </summary>
 <param name="controlType">The type of the control.</param>
 <param name="storeName">The name of a custom backing data store.</param>
 <param name="defaultValue">The default value of the property.</param>
 <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
 <param name="clrType">The CLR type of the value stored by the property.</param>
 <param name="data">Additional settings for the property.</param>
 <returns>A dynamic property for the control.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,System.String,System.String,System.String,System.String,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type)">
 <summary>
 Registers a dynamic property for the given type of control.
 </summary>
 <param name="controlType">The type of the control.</param>
 <param name="storeName">The name of a custom backing data store.</param>
 <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
 <param name="displayName">The name of the property as it should be shown in UI.</param>
 <param name="description">The description of the property which should be shown in UI.</param>
 <param name="category">The category of the property when shown in UI.</param>
 <param name="defaultValue">The default value of the property.</param>
 <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
 <param name="clrType">The CLR type of the value stored by the property.</param>
 <returns>A dynamic property for the control.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,System.String,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,DriveWorks.Forms.DataModel.DynamicPropertyData)">
 <summary>
 Registers a dynamic property for the given type of control.
 </summary>
 <param name="controlType">The type of the control.</param>
 <param name="storeName">The name of a custom backing data store.</param>
 <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
 <param name="defaultValue">The default value of the property.</param>
 <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
 <param name="clrType">The CLR type of the value stored by the property.</param>
 <param name="data">Additional settings for the property.</param>
 <returns>A dynamic property for the control.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.OverrideDefaultValue(System.Type,DriveWorks.Forms.DataModel.DynamicProperty,System.Object)">
 <summary>
 Overrides the default value of the property for the given type, which derives from the type which defines the property.
 </summary>
 <param name="controlType">The type of the control for which to override the default value.</param>
 <param name="dynamicProperty">The dynamic property to override.</param>
 <param name="defaultValue">The new default value for the specified control type.</param>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.RemoveProperty(System.Type,DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Removes a dynamic property from the list of properties for the given control.
 </summary>
 <param name="controlType">The type of the control from which to remove the property.</param>
 <param name="dynamicProperty">The property to remove from the control property list.</param>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetConverter(System.Type,System.Boolean)">
 <summary>
 Gets the property value converter for the given CLR type.
 </summary>
 <param name="clrType">The CLR type for which to get a property value converter.</param>
 <param name="throwOnError">True to throw an <see cref="T:System.ArgumentOutOfRangeException" /> if no converter is found, otherwise false.</param>
 <returns>The property value converter for the given CLR type, or a null reference if none is found and <paramref name="throwOnError" /> is false.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStandardStoreName(System.String,System.Nullable{DriveWorks.Forms.DataModel.StandardStoreOptions})">
 <summary>
 Gets the reference name that will be used for the specified control name and store option combination.
 </summary>
 <param name="controlName">The name of the control that has the store option.</param>
 <param name="opt">The standard store option to get the reference for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">Thrown when unknown <paramref name="opt"/> value is given.</exception>
 <returns>Returns the store name for the specified combination, when <paramref name="opt"/> has a value, otherwise null.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStandardStoreName(System.String,DriveWorks.Forms.DataModel.StandardStoreOptions)">
 <summary>
 Gets the reference name that will be used for the specified control name and store option combination.
 </summary>
 <param name="controlName">The name of the control that has the store option.</param>
 <param name="opt">The standard store option to get the reference for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">Thrown when unknown <paramref name="opt"/> value is given.</exception>
 <returns>Returns the store name for the specified combination, else throws an exception.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.DynamicProperty.IsRegisteredToControl(DriveWorks.Forms.ControlBase)">
 <summary>
 Determines whether the given control has this <see cref="T:DriveWorks.Forms.DataModel.DynamicProperty"/> registered to it.
 </summary>
 <param name="control">The control to check</param>
</member>
<member name="T:DriveWorks.Forms.DataModel.EnumPropertyValueConverter">
 <summary>
 Provides support for using enumerated values with form controls.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.EnumPropertyValueConverter.#ctor(System.Type)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.DataModel.EnumPropertyValueConverter" /> class.
 </summary>
 <param name="nativeType">The type of the enumeration supported by the instance.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.EnumPropertyValueConverter.NativeValueType">
 <summary>
 Gets the type of the value as it is when converted.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.EnumPropertyValueConverter.StoreValueType">
 <summary>
 Gets the type of the value as it is when converted.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.FormControlDataProvider">
 <summary>
 Provides an implementation of the <see cref="T:DriveWorks.Forms.DataModel.IControlDataProvider" /> interface which is suitable 
 for a form to use.
 </summary>
</member>
<member name="T:DriveWorks.Forms.DataModel.FormsDataManager">
 <summary>
 Manages related control data providers.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.#ctor(DriveWorks.ProjectState)">
 <summary>
 Initializes a new instance of the forms host and loads the forms from the specified XML element.
 </summary>
 <param name="projectState">The project state.</param>
</member>
<member name="E:DriveWorks.Forms.DataModel.FormsDataManager.FormsUpdated">
 <summary>
 Raised when any of the controls on any given form has changed (should only be fired once
 for a batch of changes to prevent spurious updates)
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.FormsDataManager.ProjectState">
 <summary>
 Gets the project state for the host project.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.FormsDataManager.SupportsExtendedProperties">
 <summary>
 Determines whether the data provider supports extended properties.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.SynchronizeChanges">
 <summary>
 Synchronizes the changes made to the forms being hosted, with the XML stored by the project
 state ready for the project file to be saved.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.GetControlDefaultRule(DriveWorks.Forms.ControlBase)">
 <summary>
 Gets the default formula for the specified control.
 </summary>
 <param name="control">The control for which to get the default formula.</param>
 <returns>The default formula for the given control.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.IsControlNameFree(System.String)">
 <summary>
 Determines whether a control with the given name can exist.
 </summary>
 <param name="controlName">Name of control to check.</param>
 <returns>True if the control name is available.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.IsExistingControl(System.String)">
 <summary>
 Determines whether a control with the given name exists.
 </summary>
 <param name="controlName">The name of the control.</param>
 <returns>True if a control with the given name exists, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.FormsDataManager.FormsElement">
 <summary>
 Gets the XML which describes the forms.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.ChangeFormName(DriveWorks.Forms.Form,System.String)">
 <summary>
 Changes the name of a form.
 </summary>
 <param name="form">The form whose name is to be changed.</param>
 <param name="newName">The new name of the form.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.CreateFormInternal(System.String,DriveWorks.Forms.DataModel.Serialization.ControlData)">
 <summary>
 Creates and returns a new form.
 </summary>
 <param name="formName">The name to give to the form.</param>
 <param name="formData">The data to set up the form with.</param>
 <returns>A new instance of a form.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.RaiseFormsUpdated(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Forms.DataModel.FormsDataManager.FormsUpdated" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.UpdateNamesInRule(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Updates any references in the given rule according to the specified updated name mappings.
 </summary>
 <param name="ruleText">The text of the rule to be changed.</param>
 <param name="updatedNames">A dictionary of old name to new name mappings.</param>
 <returns>The updated rule.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.ProposeNewControlName(System.String,System.String[])">
 <summary>
 Proposes a new control name, for example in a copy and paste operation.
 </summary>
 <param name="currentControlName">The current name of the control.</param>
 <param name="reservedNames">An array of names which must not be used as the proposed control name.</param>
 <returns>A new control name, optionally suffixed with an index which makes the name unique.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.LoadForms">
 <summary>
 Loads forms, called after the design master values have been calculated.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.CreateForm(System.String)">
 <summary>
 Creates and returns a new form.
 </summary>
 <param name="name">The name to give to the form.</param>
 <returns>The newly created form.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.CreateRefactorProcess(DriveWorks.Forms.ControlBase,DriveWorks.Forms.DataModel.IControlDataProvider,System.String,System.String)">
 <summary>
 Called by a control when a rename process is requested.
 </summary>
 <param name="control">The control whose name is to be changed.</param>
 <param name="provider">The control's data provider.</param>
 <param name="oldName">The old name of the control.</param>
 <param name="newName">The new name of the control.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.RenameControlDataProvider(DriveWorks.Forms.ControlBase,DriveWorks.Forms.DataModel.IControlDataProvider,System.String,System.String)">
 <summary>
 Called by a control when its name is changed.
 </summary>
 <param name="control">The control whose name is to be changed.</param>
 <param name="provider">The control's data provider.</param>
 <param name="oldName">The old name of the control.</param>
 <param name="newName">The new name of the control.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.CreateControlDataProvider(DriveWorks.Forms.ControlBase)">
 <summary>
 Creates a new data provider for a form control.
 </summary>
 <param name="control">The control for which to create the data provider.</param>
 <returns>A new data provider for the control.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.ResolveControlDataProvider(DriveWorks.Forms.ControlBase,System.Collections.Generic.IDictionary{System.String,DriveWorks.Forms.DataModel.Serialization.PropertyData})">
 <summary>
 Resolves an existing data provider for a form control.
 </summary>
 <param name="control">The control for which to resolve the data provider.</param>
 <param name="properties">The serialized property information to load in to the data provider.</param>
 <returns>The control data provider for the specified control.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.BeginUpdate">
 <summary>
 Informs the forms data manager that an update is about to take place which may
 involve changing multiple controls.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.EndUpdate">
 <summary>
 Informs the forms data manage that an update which has changed multiple controls
 has been completed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.DeleteControlDataProviders(DriveWorks.Forms.DataModel.IControlDataProvider[])">
 <summary>
 Deletes the specified control data providers.
 </summary>
 <param name="providers">The data providers to delete.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.GetControlNames">
 <summary>
 Gets the names of all known controls as an array for use primarily
 by the <see cref="M:DriveWorks.Forms.DataModel.FormsDataManager.ProposeNewControlName(System.String,System.String[])" /> method.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.FormsDataManager.GetControlByName(System.String)">
 <summary>
 Gets a control given its name.
 </summary>
 <param name="name">The name of the control to get.</param>
 <returns>The named control, or a null reference if a control with the given name can't be located.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.IControlDataProvider">
 <summary>
 Provides data for a DriveWorks control.
 </summary>
 <remarks>
 <para>
 A note about values, all values passed to/returned from the control data provider must be one of the following types:
 <list>
 <item>An empty value.</item>
 <item>A double.</item>
 <item>A string.</item>
 <item>A boolean.</item>
 <item>A date/time.</item>
 <item>An array wrapped in an ITableValue.</item>
 </list>
 </para>
 <para>
 Values generated internally by the underlying data provider that don't fall into this set of types must be converted
 before passing them into the control framework.
 </para>
 </remarks>
</member>
<member name="E:DriveWorks.Forms.DataModel.IControlDataProvider.ValueChanged">
 <summary>
 Raised when the value of a property changes.
 </summary>
</member>
<member name="E:DriveWorks.Forms.DataModel.IControlDataProvider.RuleChanged">
 <summary>
 Raised when the rule for a property changes.
 </summary>
</member>
<member name="E:DriveWorks.Forms.DataModel.IControlDataProvider.ControlUpdating">
 <summary>
 Raised when property changes are about to be applied to the control.
 </summary>
</member>
<member name="E:DriveWorks.Forms.DataModel.IControlDataProvider.ControlUpdated">
 <summary>
 Raised when property changes have been completely applied to the control
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.IControlDataProvider.Control">
 <summary>
 Gets the control for which the data provider is providing data.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.IControlDataProvider.Manager">
 <summary>
 Gets the object responsible for managing related control data providers.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.SetIsExtended(DriveWorks.Forms.DataModel.DynamicProperty,System.Boolean)">
 <summary>
 Sets whether the given property is extended.
 </summary>
 <param name="dynamicProperty">The dynamic property to update.</param>
 <param name="isExtended">True if the property should be extended, otherwise false..</param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.GetValue(DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Gets the current normalized store value for the given dynamic control property.
 </summary>
 <param name="dynamicProperty">The property whose value is to be retrieved.</param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.GetSourceValue(DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Gets the raw value from the slot, or if this is a form, the static value.
 </summary>
 <param name="dynamicProperty">The property whose raw value should be retrieved.</param>
 <remarks>This is the value before it has gone through GetStoreValue and ToNativeValue.</remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.SetValue(DriveWorks.Forms.DataModel.DynamicProperty,System.Object)">
 <summary>
 Sets the current value of the given dynamic control property.
 </summary>
 <param name="dynamicProperty"></param>
 <param name="value"></param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.HasRule(DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Gets whether the given dynamic control property has an associated rule.
 </summary>
 <param name="dynamicProperty"></param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.GetRule(DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Gets the current rule for the given dynamic control property.
 </summary>
 <param name="dynamicProperty"></param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.SetRule(DriveWorks.Forms.DataModel.DynamicProperty,System.String)">
 <summary>
 Sets the current rule for the given dynamic control property.
 </summary>
 <param name="dynamicProperty"></param>
 <param name="value"></param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.GetComment(DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Gets the current comment for the given dynamic control property.
 </summary>
 <param name="dynamicProperty"></param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.SetComment(DriveWorks.Forms.DataModel.DynamicProperty,System.String)">
 <summary>
 Sets the current comment for the given dynamic control property.
 </summary>
 <param name="dynamicProperty"></param>
 <param name="value"></param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.SetRuleAndComment(DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String)">
 <summary>
 Sets the current rule and comment for the given dynamic control property.
 </summary>
 <param name="dynamicProperty">The property for which to get the store name.</param>
 <param name="rule">The rule to set.</param>
 <param name="comment">The comment to set.</param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.IsDynamic(DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Gets whether the given property is dynamic on the control to which the data provider is bound.
 </summary>
 <param name="dynamicProperty"></param>
</member>
<member name="M:DriveWorks.Forms.DataModel.IControlDataProvider.NotifyDeleted">
 <summary>
 Called when the owning control is deleted.
 </summary>
 <remarks>
 This is used for letting the data provider clean up any stores etc
 </remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.IPropertyValueConverter">
 <summary>
 Provides a mechanism for converting values to and from their native representations in the backing store.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.IPropertyValueConverter.StoreValueType">
 <summary>
 Gets the type of the value as it is in the store.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.IPropertyValueConverter.NativeValueType">
 <summary>
 Gets the type of the value as it is when converted.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.IPropertyValueConverter.ToNative(System.Object)">
 <summary>
 Takes the value from the backing store and converts it to its native type.
 </summary>
 <param name="value">The value from the backing store.</param>
 <returns>A value of the native type.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.IPropertyValueConverter.ToStore(System.Object)">
 <summary>
 Takes a native value, and converts it to one of the types understood by the backing store.
 </summary>
 <param name="value">The native value to convert.</param>
 <returns>A value in one of the types understood by the backing store.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.PropertyBehavior">
 <summary>
 Controls the dynamic behavior of a property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagDynamicDefault">
 <summary>
 Determines whether the default state of the property is to be dynamic.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagDynamicAllowed">
 <summary>
 Determines whether the property is allowed to be dynamic.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagStaticAllowed">
 <summary>
 Determines whether the property is allowed to be static.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagNoRuleAllowed">
 <summary>
 Determines whether the property is allowed to have a rule.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagPreventSourceMerge">
 <summary>
 Determines whether a property stored in the <see cref="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Value" /> store
 should be merged with the <see cref="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Source" /> store.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagHideFromDesigners">
 <summary>
 Determines whether a property should be hidden from designers.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicDisabled">
 <summary>
 The property is static and is not allowed to be dynamic.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicDefault">
 <summary>
 The property is dynamic by default.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicManual">
 <summary>
 The property is static by default, but can be manually set to be dynamic.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicEnforced">
 <summary>
 The property is dynamic by default and can not be made static.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicEnforcedNoRule">
 <summary>
 The property is dynamic by default, can not be made static, and does not and must not have a rule.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicEnforcedNoMerge">
 <summary>
 The property is dynamic by default, can not be made static, and must not be merged with the source value
 </summary>
</member>
<member name="T:DriveWorks.Forms.DataModel.PropertyValueConverterAttribute">
 <summary>
 Marks a CLR type with a corresponding property value converter.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.PropertyValueConverterAttribute.#ctor(System.Type)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.DataModel.PropertyValueConverterAttribute" />.
 </summary>
 <param name="converterType">The type of the property value converter which handles the marked CLR type.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.PropertyValueConverterAttribute.ConverterType">
 <summary>
 Gets the type of the property value converter which handles the marked CLR type.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.PropertyValueConverterBase">
 <summary>
 Provides a base class to make implementing the <see cref="T:DriveWorks.Forms.DataModel.IPropertyValueConverter" /> interface easier.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.PropertyValueConverterBase.NativeValueType">
 <inheritdoc />
</member>
<member name="P:DriveWorks.Forms.DataModel.PropertyValueConverterBase.StoreValueType">
 <inheritdoc />
</member>
<member name="M:DriveWorks.Forms.DataModel.PropertyValueConverterBase.ToNative(System.Object)">
 <inheritdoc />
</member>
<member name="M:DriveWorks.Forms.DataModel.PropertyValueConverterBase.ToStore(System.Object)">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Forms.DataModel.RuleChangedEventHandler">
 <summary>
 Represents the method that will handle a rule changed event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.RuleChangedEventArgs">
 <summary>
 Provides event data for the <see cref="T:DriveWorks.Forms.DataModel.RuleChangedEventHandler" /> event.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.RuleChangedEventArgs.#ctor(DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.DataModel.RuleChangedEventArgs" /> type.
 </summary>
 <param name="dp">The property which has changed.</param>
 <param name="oldRule">The rule for the property before it was changed.</param>
 <param name="newRule">The rule for the property after it was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.RuleChangedEventArgs.Property">
 <summary>
 Gets the property that was changed.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.RuleChangedEventArgs.OldRule">
 <summary>
 Gets the rule for the property as it was before the change.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.RuleChangedEventArgs.NewRule">
 <summary>
 Gets the rule for the property as it after the change.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.Serialization.ControlData">
 <summary>
 Provides the data required to build a control.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.ControlData.Name">
 <summary>
 The name of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.ControlData.Type">
 <summary>
 The type of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.ControlData.Index">
 <summary>
 Index of the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.ControlData.Properties">
 <summary>
 Information about the data assigned to properties of the instantiated control.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.Serialization.ControlTypeResolverDelegate">
 <summary>
 Represents a method which can resolve a control type based on its plugin-assembly qualified type name.
 </summary>
 <param name="fullTypeName">The plugin-assembly qualified type name of the control.</param>
 <returns>The type of the control or a null reference if no control was found.</returns>
</member>
<member name="T:DriveWorks.Forms.DataModel.Serialization.ControlDeserializer">
 <summary>
 Provides support for deserializing controls from their XML representation.
 </summary>
 <remarks></remarks>
 <devdoc>
 Convention in this class for reading XML elements is to always leave the reader positioned
 on the ending element, rather than automatically reading the next element, this makes
 it easy to write <code>While Reader.Read()</code> style code.
 </devdoc>
</member>
<member name="M:DriveWorks.Forms.DataModel.Serialization.ControlDeserializer.Deserialize(System.Xml.XmlReader,DriveWorks.Forms.DataModel.Serialization.ControlTypeResolverDelegate,System.Boolean)">
 <summary>
 Deserializes the control in the specified XML reader.
 </summary>
 <param name="reader">The XML reader which is positioned before the start of the control element.</param>
 <param name="typeResolver">The type resolver used to retrieve CLR types for controls.</param>
 <param name="deserializeInvariant">True to deserialize the control property values invariantly, otherwise False to deserialize them using the current culture.</param>
 <returns>The deserialized control data.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.Serialization.ControlDeserializer.DeserializeProperty(System.Xml.XmlReader,System.String,DriveWorks.Forms.DataModel.DynamicProperty,System.Boolean)">
 <remarks>
 This method assumes that the reader is currently positioned on the start tag of the property element, when this method returns, 
 the reader is positioned on the end stag of the property element.
 </remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.Serialization.PropertyData">
 <summary>
 Provides the data required by a property on a control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.PropertyName">
 <summary>
 The name of the property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.DynamicProperty">
 <summary>
 A reference to the control property itself.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.StoreName">
 <summary>
 The name of the property backing-store.
 </summary>
 <remarks>This is no longer used.</remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.StoreIndex">
 <summary>
 The index of the property backing-store.
 </summary>
 <remarks>This is no longer used.</remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.Rule">
 <summary>
 The rule assigned to the property, if applicable.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.Comment">
 <summary>
 The comment assigned to the property, if applicable.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.Value">
 <summary>
 The value of the property, if applicable.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.IsStatic">
 <summary>
 Whether or not the property is marked as static (no rule)
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataModel.Serialization.PropertyData.#ctor(System.String,DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.DataModel.Serialization.PropertyData" /> type.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="dp">The instance of the property.</param>
</member>
<member name="M:DriveWorks.Forms.DataModel.SimpleFontPropertyValueConverter.ToNative(System.Object)">
 <summary>
 Converts a font from a CSS string to a <see cref="T:DriveWorks.Forms.SimpleFont" /> object.
 </summary>
 <param name="value">A string containing CSS font data.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Forms.SimpleFont" /> type.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.StandardPropertyValueConverters">
 <summary>
 Provides access to standard property value converters
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.StringConverter">
 <summary>
 Gets a converter suitable for use with string properties.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.IntegerConverter">
 <summary>
 Gets a converter suitable for use with interger properties.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.BooleanConverter">
 <summary>
 Gets a converter suitable for use with boolean properties.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.DateTimeConverter">
 <summary>
 Gets a converter suitable for use with date/time properties.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.DoubleConverter">
 <summary>
 Gets a converter suitable for use with numeric properties.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.SimpleFontConverter">
 <summary>
 Gets a converter suitable for use with font properties.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.SimpleColorConverter">
 <summary>
 Gets a converter suitable for use with color properties.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.StringArrayConverter">
 <summary>
 Gets a converter suitable for use with properties which get and set arrays of strings.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.TableValueConverter">
 <summary>
 Gets a converter suitable for use with properties which get and set tables of values.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.StandardStoreOptions">
 <summary>
 Standard DriveWorks property stores.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Source">
 <summary>
 Identifies the backing store used for the pre-processed principal value of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Value">
 <summary>
 Identifies the backing store used for the post-processed principal value of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Minimum">
 <summary>
 Identifies the backing store used for the minimum value of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Maximum">
 <summary>
 Identifies the backing store used for the maximum value of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Increment">
 <summary>
 Identifies the backing store used principally for the increment value of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Enabled">
 <summary>
 Identifies the backing store used for the enabled value of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Visible">
 <summary>
 Identifies the backing store used for the visible value of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.MessageCode">
 <summary>
 Identifies the backing store used for the message code value of the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.ListData">
 <summary>
 Identifies the backing store used for the list data for the control.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.StoreConverter">
 <summary>
 Provides methods for converting between different types of store values.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.GetValueType(System.Object,System.Boolean)">
 <summary>
 Gets the store value type for the specified value.
 </summary>
 <param name="value">The value whose type is to be determined.</param>
 <returns>The store value type of the specified value.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.Convert(System.Object,DriveWorks.Forms.StoreValueType)">
 <summary>
 Converts the specified value from its current type to the specified type.
 </summary>
 <param name="value">The value to convert.</param>
 <param name="destinationType">The destination type.</param>
 <returns>The converted value.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.Convert(System.Object,DriveWorks.Forms.StoreValueType,DriveWorks.Forms.StoreValueType)">
 <summary>
 Converts the specified value from its current type to the specified type.
 </summary>
 <param name="value">The value to convert.</param>
 <param name="sourceType">The source type of the value.</param>
 <param name="destinationType">The destination type.</param>
 <returns>The converted value.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertStringToDouble(System.Object)">
 <summary>
 Converts the specified string to a double.
 </summary>
 <param name="value">The source value.</param>
 <returns>A double.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertStringToBoolean(System.Object)">
 <summary>
 Converts the specified string to a boolean.
 </summary>
 <param name="value">The source value.</param>
 <returns>A boolean.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertStringToDateTime(System.Object)">
 <summary>
 Converts the specified string to a date-time.
 </summary>
 <param name="value">The source value.</param>
 <returns>A date/time.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertStringToTableValue(System.Object)">
 <summary>
 Converts the specified string to a table.
 </summary>
 <param name="value">The source value.</param>
 <returns>A table.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertToArrayValue(System.String)">
 <summary>
 Converts the specified string to a IArrayValue.
 </summary>
 <param name="value">The source value.</param>
 <returns>A IArrayValue.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDoubleToString(System.Object)">
 <summary>
 Converts a double to a string.
 </summary>
 <param name="value">The source value.</param>
 <returns>A string.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDoubleToBoolean(System.Object)">
 <summary>
 Converts a double to a boolean.
 </summary>
 <param name="value">The value to convert.</param>
 <returns>A boolean.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDoubleToDateTime(System.Object)">
 <summary>
 Converts a double to a date/time.
 </summary>
 <param name="value">The source value.</param>
 <returns>A date/time.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertBooleanToString(System.Object)">
 <summary>
 Converts a boolean to a string.
 </summary>
 <param name="value">The source value.</param>
 <returns>A string.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertBooleanToDouble(System.Object)">
 <summary>
 Converts a boolean to a double.
 </summary>
 <param name="value">The source value.</param>
 <returns>A double.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertBooleanToDateTime(System.Object)">
 <summary>
 Converts a boolean to a date/time.
 </summary>
 <param name="value">The source value.</param>
 <returns>A date/time.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDateTimeToString(System.Object)">
 <summary>
 Converts a date/time to a string.
 </summary>
 <param name="value">The source value.</param>
 <returns>A date/time.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDateTimeToDouble(System.Object)">
 <summary>
 Converts a date/time to a double.
 </summary>
 <param name="value">The source value.</param>
 <returns>A double.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDateTimeToBoolean(System.Object)">
 <summary>
 Converts a date/time to a boolean.
 </summary>
 <param name="value">The source value.</param>
 <returns>A boolean.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTableToString(System.Object)">
 <summary>
 Converts a table to a string.
 </summary>
 <param name="value">The source value.</param>
 <returns>A table.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertToString(Titan.Rules.Execution.IArrayValue)">
 <summary>
 Converts a IArrayValue to a string.
 </summary>
 <param name="value">The source value.</param>
 <returns>A string.</returns>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTableToDouble(System.Object)">
 <summary>
 Converts a table to a double.
 </summary>
 <param name="value">The source value.</param>
 <returns>A table.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTableToBoolean(System.Object)">
 <summary>
 Converts a table to a boolean.
 </summary>
 <param name="value">The source value.</param>
 <returns>A table.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTableToDateTime(System.Object)">
 <summary>
 Converts a table to a date/time.
 </summary>
 <param name="value">The source value.</param>
 <returns>A table.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTypeForDriveWorks(System.Object)">
 <summary>
 Converts the specified value to a DriveWorks safe value.
 </summary>
 <param name="value">The value to convert.</param>
 <returns>The safe version of the value.</returns>
 <remarks>If value is already in a safe type then the original value is returned.</remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.ValueChangedEventHandler">
 <summary>
 Represents the method that will handle a value changed event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataModel.ValueChangedEventArgs">
 <summary>
 Provides event data for the <see cref="T:DriveWorks.Forms.DataModel.ValueChangedEventHandler" /> event.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataModel.ValueChangedEventArgs.#ctor(DriveWorks.Forms.DataModel.DynamicProperty,System.Object,System.Object)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.DataModel.ValueChangedEventArgs" /> type.
 </summary>
 <param name="dp">The property which has changed.</param>
 <param name="oldValue">The value of the property before it was changed.</param>
 <param name="newValue">The value of the property after it was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.ValueChangedEventArgs.Property">
 <summary>
 Gets the property that was changed.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.ValueChangedEventArgs.OldValue">
 <summary>
 Gets the value of the property as it was before the change.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataModel.ValueChangedEventArgs.NewValue">
 <summary>
 Gets the value of the property as it after the change.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.IPreviewProviderService">
 <summary>
 Interface for classes that work with 3D previews.
 </summary>
</member>
<member name="M:DriveWorks.Forms.IPreviewProviderService.LoadPreview(System.String,System.String)">
 <summary>
 Creates a 3D preview object that can be used in 3D preview based classes.
 </summary>
 <param name="filepath">The full file path to a Drive3D file.</param>
 <param name="lightPreset">Lighting preset to apply to the loaded preview.</param>
 <returns>
 The loaded and ready to use preview based on the file.
 This should always be disposed when no longer needed.
 </returns>
</member>
<member name="M:DriveWorks.Forms.IPreviewProviderService.GenerateScreenshot(System.Object,System.String,DriveWorks.Support.RotationZoom,System.Int32,System.Int32,System.String,System.Boolean)">
 <summary>
 Generates a screenshot image at the given path.
 </summary>
 <param name="preview">Preview Result to render image from.</param>
 <param name="outputPath">Path to save the image to.</param>
 <param name="rotationZoom">Camera rotation to take the screenshot from.</param>
 <param name="width">Pixel width of the output image.</param>
 <param name="height">Pixel height of the output image.</param>
 <param name="useAutoCenter">Whether we are panning from the bounds center or from the origin.</param>
</member>
<member name="M:DriveWorks.Forms.IPreviewProviderService.GenerateImageStream(System.Object,DriveWorks.Support.RotationZoom,System.Int32,System.Int32,System.String,System.Boolean)">
 <summary>
 Generates a screenshot image and return it as a stream in png format
 </summary>
 <param name="preview">Preview Result to render image from.</param>
 <param name="rotationZoom">Camera rotation to take the screenshot from.</param>
 <param name="width">Pixel width of the output image.</param>
 <param name="height">Pixel height of the output image.</param>
 <param name="useAutoCenter">Whether we are panning from the bounds center or from the origin.</param>
</member>
<member name="M:DriveWorks.Forms.IPreviewProviderService.ConvertPreviewToJson(System.Object)">
 <summary>
 Converts a preview object to a serialized version that be used for network transmission.
 </summary>
 <param name="preview">The Object to serialize.</param>
</member>
<member name="M:DriveWorks.Forms.IPreviewProviderService.ConvertNodeHierarchyToJsonString(System.Object)">
 <summary>
 Converts a preview object to a string version containing just the node hierarchy
 </summary>
 <param name="preview">The Object to stringify.</param>
</member>
<member name="M:DriveWorks.Forms.IPreviewProviderService.ApplyUpdate(System.Object,System.String)">
 <summary>
 Applies changes from the update string to the given preview.
 </summary>
 <param name="preview">The 3D Preview scene.</param>
 <param name="jsonUpdate">The changes to apply to it.</param>
</member>
<member name="M:DriveWorks.Forms.IPreviewProviderService.GetPreviewResourceHandler(System.Object)">
 <summary>
 Gets a resource handler for the specified preview.
 </summary>
 <param name="preview">The preview to get resources from.</param>
</member>
<member name="T:DriveWorks.Forms.PreviewFailureFault">
 <summary>
 Represents a failure due to a general error when previewing.
 </summary>
</member>
<member name="T:DriveWorks.Forms.PreviewRequest">
 <summary>
 Represents the information needed to request a 3D Preview.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewRequest.ReleaseDataXml">
 <summary>
 Gets/sets the XML containing the release data to use to perform the preview.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewRequest.OutputToRootModelTargetPath">
 <summary>
 Gets/sets whether to save the result to the same location as the root model's target path.
 By default this is False and the group content folder will be used instead.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewRequest.IncludeSWExtensionSuffix">
 <summary>
 Gets/sets whether to include the SOLIDWORKS file type extension as a suffix in the created file.
 </summary>
</member>
<member name="T:DriveWorks.Forms.PreviewResult">
 <summary>
 Represents the result of a 3D Preview.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewResult.PrimaryFilePath">
 <summary>
 Gets/sets the output location of the .drive3d file. 
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewResult.AdditionalFilePaths">
 <summary>
 Gets/sets a list of locations to find supporting files for the 3D Preview.
 </summary>
</member>
<member name="T:DriveWorks.Forms.IPreviewTranslator">
 <summary>
 Provides a contract to an <see cref="T:DriveWorks.Forms.EffectivePreviewResult" /> translator.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.IPreviewTranslator.TranslatePreview(System.String,DriveWorks.Forms.EffectivePreviewResult)">
 <summary>
 Attempts to translate the given <see cref="T:DriveWorks.Forms.EffectivePreviewResult" />. See remarks for details.
 </summary>
 <param name="desiredExtension">Extension of the file type the <see cref="T:DriveWorks.Forms.EffectivePreviewResult" /> should
 be translated to.</param>
 <param name="originalResult">Original <see cref="T:DriveWorks.Forms.EffectivePreviewResult" /> that is to be translated.</param>
 <returns>A version of the given <see cref="T:DriveWorks.Forms.EffectivePreviewResult" /> translated to the desired type if successful;
 otherwise returns a null reference (Nothing in Visual Basic).</returns>
 <remarks>
 <para>
 If the desired extension is not supported by the translator, then a null reference (Nothing in Visual Basic) will be returned
 and the translator will not attempt to translate the given <see cref="T:DriveWorks.Forms.EffectivePreviewResult" />.
 </para>
 </remarks>
</member>
<member name="T:DriveWorks.Forms.IPreviewHost">
 <summary>
 Provides a contract to a host responsible for translating an <see cref="T:DriveWorks.Forms.EffectivePreviewResult" />.
 See remarks for details.
 </summary>
 <remarks>
 <para>
 Implementations of this contract should be added as a service to the <see cref="T:System.IServiceProvider" /> held
 by the <see cref="T:DriveWorks.Hosting.EngineHost" />.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Forms.IPreviewHost.TranslatePreview(DriveWorks.Forms.EffectivePreviewResult)">
 <summary>
 Attempts to translate the given <see cref="T:DriveWorks.Forms.EffectivePreviewResult" />.
 </summary>
 <param name="originalResult">Original <see cref="T:DriveWorks.Forms.EffectivePreviewResult" /> to translate.</param>
 <returns>A translated version of the given <see cref="T:DriveWorks.Forms.EffectivePreviewResult" /> if translation was successful;
 otherwise returns a null reference (or Nothing in Visual Basic).</returns>
</member>
<member name="T:DriveWorks.Forms.FrameControl">
 <summary>
 Represents a control which can display a form inside another form.
 </summary>
</member>
<member name="F:DriveWorks.Forms.FrameControl.FormNameProperty">
 <summary>
 Provides the backing store for the <see cref="P:DriveWorks.Forms.FrameControl.FormName" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.FrameControl.HorizontalScrollVisibilityProperty">
 <summary>
 Provides the backing store for the <see cref="P:DriveWorks.Forms.FrameControl.HorizontalScrollBarVisibility" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.FrameControl.VerticalScrollVisibilityProperty">
 <summary>
 Provides the backing store for the <see cref="P:DriveWorks.Forms.FrameControl.VerticalScrollBarVisibility" /> property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.FrameControl.FormName">
 <summary>
 Gets/sets the form to display inline.
 </summary>
</member>
<member name="P:DriveWorks.Forms.FrameControl.HorizontalScrollBarVisibility">
 <summary>
 Gets/sets the horizontal visibility of the scroll bar for the frame's content.
 </summary>
</member>
<member name="P:DriveWorks.Forms.FrameControl.VerticalScrollBarVisibility">
 <summary>
 Gets/sets the vertical visibility of the scroll bar for the frame's content.
 </summary>
</member>
<member name="M:DriveWorks.Forms.FrameControl.GetForm">
 <summary>
 Gets the an instance of a form that matches the <see cref="P:DriveWorks.Forms.FrameControl.FormName"/> property.
 </summary>
</member>
<member name="T:DriveWorks.Forms.InputValueType">
 <summary>
 Specifies the type of the input value.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.InputValueType.User">
 <summary>
 Specifies that the input value should be treated as if the user
 has typed it.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.InputValueType.Processed">
 <summary>
 Specifies that the input value should be treated as if the control 
 has already formatted it.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.PreviewControl">
 <summary>
 Represents a control which can display a 3D preview.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.NONE_LIGHTING_PRESET_NAME">
 <summary>
 Gets the name of the None lighting preset.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.SIMPLE_LIGHTING_PRESET_NAME">
 <summary>
 Gets the name of the Simple lighting preset.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.HARD_LIGHTING_PRESET_NAME">
 <summary>
 Gets the name of the Hard lighting preset.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.SOFT_LIGHTING_PRESET_NAME">
 <summary>
 Gets the name of the Soft lighting preset.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.THREE_POINT_LIGHTING_PRESET_NAME">
 <summary>
 Gets the name of the Three Point lighting preset.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.PreviewEngineProperty">
 <summary>
 Provides the backing store for the <see cref="P:DriveWorks.Forms.PreviewControl.PreviewEngine" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.PreviewDocumentNameProperty">
 <summary>
 Provides the backing store for the <see cref="P:DriveWorks.Forms.PreviewControl.PreviewDocumentName" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.BorderStyleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.BorderStyle" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.FileNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.FileName" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.DefaultRotationZoomProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.DefaultRotationZoomValue" /> property. A pipe delimited value of horizontal rotation (in degrees), vertical pitch (in degrees) and zoom amount. e.g. 90|45|20
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.PreviewCompleteMacroNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.PreviewCompleteMacroName" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.EnableOrthographicProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.EnableOrthographic"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.ModelClickedMacroNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.ModelClickedMacroName" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.BackgroundClickedMacroNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.BackgroundClickedMacroName" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.LightingProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.Lighting" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.EnableImageModeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.EnableImageMode" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.EnablePanProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.EnablePan" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.AutoCenterProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.AutoCenter" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.RotationLimitsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.RotationLimitsValue" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.ZoomLimitsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.ZoomLimitsValue" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.PanMaxRadiusProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.PanMaxRadius" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.UseRelativePathRulesProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.UseRelativePathRules"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.UseSWExtensionSuffixProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.UseSWExtensionSuffix"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.TagsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.Tags"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.GenerationMethodProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.GenerationMethod"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.TimeoutProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PreviewControl.Timeout"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PreviewControl.AutopilotPreviewRequestedMacroNameProperty">
 <summary>
 Provides the proprety store for the <see cref="P:DriveWorks.Forms.PreviewControl.AutopilotPreviewRequestedMacroName"/> property.
 </summary>
</member>
<member name="E:DriveWorks.Forms.PreviewControl.PreviewInvalidated">
 <summary>
 Raised whenever the result of <see cref="M:DriveWorks.Forms.PreviewControl.GetPreview"/> has changed significantly.
 </summary>
</member>
<member name="E:DriveWorks.Forms.PreviewControl.PreviewStarting">
 <summary>
 Event for when model generation starts
 </summary>
</member>
<member name="E:DriveWorks.Forms.PreviewControl.PreviewSuccess">
 <summary>
 Event for when model generation finishes successfully.
 </summary>
</member>
<member name="E:DriveWorks.Forms.PreviewControl.PreviewFailed">
 <summary>
 Event for when model generation fails.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.PreviewEngine">
 <summary>
 Gets/sets the preview engine to use.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.PreviewDocumentName">
 <summary>
 Gets/sets the name of the document to use.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.EnableMenu">
 <summary>
 Gets/sets the availability of the control menu.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.DefaultRotationZoomValue">
 <summary>
 Gets/sets the default rotation and zoom as a string.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.DefaultRotationZoom">
 <summary>
 Gets/sets the default rotation and zoom as a struct.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.EnableOrthographic">
 <summary>
 Gets/sets whether the default camera's projection mode is orthographic or not(perspective).
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.PreviewDocument">
 <summary>
 Gets the <see cref="T:DriveWorks.IPreviewDocument" /> specified by the <see cref="P:DriveWorks.Forms.PreviewControl.PreviewDocumentName" /> property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.FileName">
 <summary>
 Gets/sets the absolute path, or path relative to the project file, of a supported static 3D file to show, if this is set, the preview functionality is disabled.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.BorderStyle">
 <summary>
 Gets/sets the style of the border around the picture box.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.PreviewCompleteMacroName">
 <summary>
 Gets/sets the name of the macro invoked by the control when preview generation is finished.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.ModelClickedMacroName">
 <summary>
 Gets/sets the name of the macro invoked by the control when the model is clicked.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.BackgroundClickedMacroName">
 <summary>
 Gets/sets the name of the macro invoked by the control when the background is clicked.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.Lighting">
 <summary>
 Gets/sets the lighting preset to be used for 3D rendering.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.EnableImageMode">
 <summary>
 Gets/sets whether to force image mode for the PreviewControl when viewed in a browser.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.EnablePan">
 <summary>
 Gets/sets whether to enable panning on the PreviewControl.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.AutoCenter">
 <summary>
 Gets/sets whether to make panning relative to the scene center rather than the origin.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.RotationLimitsValue">
 <summary>
 Gets/sets the limits for the default-camera's rotation from the default rotation.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.RotationLimits">
 <summary>
 Gets/sets the default rotation limits as a struct.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.ZoomLimitsValue">
 <summary>
 Gets/sets the limits for the default-camera's zoom distance.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.ZoomLimits">
 <summary>
 Gets/sets the default zoom limits as a struct.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.PanMaxRadius">
 <summary>
 Gets/sets the limits for panning from the default pan position.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.UseRelativePathRules">
 <summary>
 Gets/sets whether to store the .drive3d files created when using Autopilot Mode in the location specified by the relative path rules in Model Rules or
 in the group content folder (legacy).
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.UseSWExtensionSuffix">
 <summary>
 Gets/sets whether to include the SOLIDWORKS file type extension in the file name that will be created when using Autopilot mode.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.Tags">
 <summary>
 Gets/sets the tags associated with the models previewed through Autopilot.
 </summary>
 <remarks>The tags will be used to determine whether each Autopilot can process the preview.</remarks>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.GenerationMethod">
 <summary>
 Gets/sets the generation method that should be used to preview the model.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.Timeout">
 <summary>
 Gets/sets the number of seconds to wait for a queued preview to finish before timing out.
 </summary>
 <remarks>0 can be used to have specify no timeout.</remarks>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.AutopilotPreviewRequestedMacroName">
 <summary>
 Gets/sets the name of the macro to run before we start previewing the model via Autopilot.
 </summary>
</member>
<member name="P:DriveWorks.Forms.PreviewControl.CurrentScene">
 <summary>
 Gets a Json string version of the current scene.
 </summary>
 <returns>A Json string version of the current scene.</returns>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.GetPreview">
 <summary>
 Gets the preview for the control.
 </summary>
 <returns>A disposable object that contains the preview for this control.</returns>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.GetPreviewForExport">
 <summary>
 Gets the preview for a form export. 
 </summary>
 <returns>A disposable object that contains the preview for this control.</returns>
 <remarks>This will not use a cached version and will not cache the result.</remarks>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.ClearPreview">
 <summary>
 Clears the preview result from memory.
 </summary>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.CreatePreviewImage(System.String,System.Int32,System.Int32,System.String)">
 <summary>
 Generates a preview screenshot from the preview control
 </summary>
 <param name="outputPath">Path to save the image out to.</param>
 <param name="width">Pixel width of image to save out.</param>
 <param name="height">Pixel height of image to save out.</param>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.CreatePreviewImage(System.String,System.Int32,System.Int32,DriveWorks.Support.RotationZoom)">
 <summary>
 Generates a preview screenshot from the preview control
 </summary>
 <param name="outputPath">Path to save the image out to.</param>
 <param name="width">Pixel width of image to save out.</param>
 <param name="height">Pixel height of image to save out.</param>
 <param name="rotationZoom">Orientation to set the camera to.</param>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.CreatePreviewFromServer(System.String,System.String)">
 <summary>
 Creates a preview from the server.
 </summary>
 <param name="previewUrl">The full URL of the 3D Preview server.</param>
 <param name="previewEngineOverride">The preview engine to use if not the the value set on the control.</param>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.CreatePreviewFromServer">
 <summary>
 Creates a preview from the server.
 </summary>
 <remarks>This is a synchronous operation and so previews will be processed one at a time.</remarks>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.CreatePreviewFromServerAsync">
 <summary>
 Creates a preview from the server asynchronously.
 </summary>
 <returns>A task that can be awaited in order to get information from the server as to the status of the preview.</returns>
 <remarks>
 Previewing asynchronously will allow for multiple previews over the group connection.
 Note: Only one preview can be active per preview control.
 </remarks>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.GetDataForPreview">
 <summary>
 Releases the data in the specification and returns as XML
 suitable for sending to a preview server.
 </summary>
</member>
<member name="M:DriveWorks.Forms.PreviewControl.InvokePreviewCompleteMacro">
 <summary>
 Invokes the macro specified in the <see cref="P:DriveWorks.Forms.PreviewControl.PreviewCompleteMacroName" /> property.
 </summary>
</member>
<member name="T:DriveWorks.Forms.Slider">
 <summary>
 Provides an implementation of a slider control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.ValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.Value" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.ValueSourceProperty">
 <summary>
 Provides the property store for the source value for the <see cref="P:DriveWorks.Forms.Slider.Value" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.MinimumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.Minimum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.MaximumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.Maximum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.ReverseDirectionProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.ReverseDirection" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.IncrementProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.Increment"/> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.OrientationProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.Orientation" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.TextProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.Text" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective text font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.TextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.TextColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.ShowLimitsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.ShowLimits" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.DefaultValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.DefaultValue" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.ThumbImageProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.ThumbImage" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Slider.TrackColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Slider.TrackColor" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.Slider.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.Slider" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.Slider.Value">
 <summary>
 Gets/sets the current value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.Minimum">
 <summary>
 Gets/sets the slider's minimum value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.Maximum">
 <summary>
 Gets/sets the slider's maximum value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.ReverseDirection">
 <summary>
 Gets/Sets whether the direction of the slider is reversed.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.Increment">
 <summary>
 Gets/sets the slider's increment value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.Orientation">
 <summary>
 Gets/sets the slider orientation.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.Text">
 <summary>
 Gets/sets the text shown in the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.TextFont">
 <summary>
 Gets/sets the font used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.TextColor">
 <summary>
 Gets/sets the color used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.ShowLimits">
 <summary>
 Gets/sets whether to show the value limits on the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.EffectiveMinimum">
 <summary>
 Gets the effective minimum value of the spin button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.EffectiveMaximum">
 <summary>
 Gets the effective maximum value of the spin button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.EffectiveValue">
 <summary>
 Gets the effective value of the spin button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.DefaultValue">
 <summary>
 Gets/sets the default value of the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.ThumbImage">
 <summary>
 Gets/Sets the Image which will be used instead of the slider's thumb.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Slider.TrackColor">
 <summary>
 Gets/Sets the color of the slider's track.
 </summary>
</member>
<member name="M:DriveWorks.Forms.Slider.ClearInputValue">
 <summary>
 Sets the current value to zero.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.Slider.GetInputValue">
 <summary>
 Returns the current value of the control.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.Slider.SetInputValue(System.Object)">
 <summary>
 Sets the current value of the control.
 </summary>
 <param name="value">The value to set to the input property.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Slider.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.ControlOrientation">
 <summary>
 Provides options for specifying control render orientation.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ControlOrientation.Horizontal">
 <summary>
 Specifies that the control should be rendered in a horizontal orientation.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ControlOrientation.Vertical">
 <summary>
 Specifies that the control should be rendered in a vertical orientation.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.RenameItem">
 <summary>
 Provides data for rename operations.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.RenameItem.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Forms.RenameItem"/> class.
 </summary>
 <param name="oldName">Name to replace.</param>
 <param name="newName">Replacement name.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.RenameItem.OldName">
 <summary>
 Name to replace.
 </summary>
</member>
<member name="P:DriveWorks.Forms.RenameItem.NewName">
 <summary>
 Replacement name.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionButton.SelectedOptionSourceProperty">
 <summary>
 Provides the property store for the source value for the <see cref="P:DriveWorks.Forms.OptionButton.SelectedOption" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionButton.SelectedOptionProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionButton.SelectedOption" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionButton.GroupNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionButton.GroupName" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionButton.OptionAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="F:DriveWorks.Forms.OptionButton.OptionAlignmentProperty" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionButton.PictureSelectedProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionButton.PictureSelected" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionButton.PictureDefaultProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionButton.PictureDefault" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionButton.PictureStyleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionButton.PictureStyle" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionButton.PictureSizeModeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionButton.PictureSizeMode" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionButton.ShowCheckProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionButton.ShowCheck" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionButton.AllowClearSelectionProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionButton.AllowClearSelection" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.OptionButton.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.OptionButton" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.SelectedOption">
 <summary>
 Gets/sets the selected option within this option's group.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.GroupName">
 <summary>
 Gets/sets the name of the group to which this option belongs.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.OptionAlignment">
 <summary>
 Gets/sets whether options are left or right aligned.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.PictureSelected">
 <summary>
 Gets/sets the location of the picture to be displayed on this option
 when this option is selected.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.PictureDefault">
 <summary>
 Gets/sets the default location of the picture to be displayed on this option
 when this option is not selected.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.PictureStyle">
 <summary>
 Gets/sets the picture appearance style for this option control.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.PictureSizeMode">
 <summary>
 Gets/sets the picture sizing mode for this option control.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.ShowCheck">
 <summary>
 Gets/sets the radio button's visiblity.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.AllowClearSelection">
 <summary>
 Gets/sets whether users are given the option of clearing the selection.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.OptionButton.ClearInputValue">
 <summary>
 Clears the selection of the current control's option group.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.OptionButton.GetInputValue">
 <summary>
 Returns the current selection of the current control's option group.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.OptionButton.SetInputValue(System.Object)">
 <summary>
 Sets the selection of the current control's option group.
 </summary>
 <param name="value">The value to set to the input property.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.OptionButton.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.PictureStyle">
 <summary>
 How an picture will be displayed on a button or control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.PictureStyle.Text">
 <summary>
 Picture will not be displayed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.PictureStyle.TextAndPicture">
 <summary>
 Text will be displayed with picture.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.PictureStyle.Picture">
 <summary>
 Picture will be the only content on the control.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ExtendedPictureStyle">
 <summary>
 How an picture will be displayed on a button or control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ExtendedPictureStyle.Text">
 <summary>
 Picture will not be displayed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ExtendedPictureStyle.TextAndPicture">
 <summary>
 Text will be displayed with picture.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ExtendedPictureStyle.Picture">
 <summary>
 Picture will be the only content on the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ExtendedPictureStyle.PictureOnly">
 <summary>
 Picture will fully replace everything on control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ExtendedPictureStyle.TextOverPicture">
 <summary>
 Text will be displayed over the picture.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.Hyperlink">
 <summary>
 Implements a hyperlink control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.TextProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.Text" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective text font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.TextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.TextColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.TextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.TextHorizontalAlignment" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.LinkProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.Link" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.HoverColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.HoverColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.TextUnderlineProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.TextUnderline" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.HoverUnderlineProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.HoverUnderline" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.PictureDefaultProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.PictureDefault" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.PictureHoverProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.PictureHover" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.PictureStyleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.PictureStyle" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.PictureSizeModeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.PictureSizeMode" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.Hyperlink.LinkBehaviorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Hyperlink.LinkBehavior" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.Hyperlink.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.Hyperlink" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.Text">
 <summary>
 Gets/sets the label's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.TextFont">
 <summary>
 Gets/sets the font used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.TextColor">
 <summary>
 Gets/sets the color used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.TextHorizontalAlignment">
 <summary>
 Gets/Sets the horizontal alignment of the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.Link">
 <summary>
 Gets/sets the hyperlink's link value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.HoverColor">
 <summary>
 Gets/sets the hyperlink's hover color.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.TextUnderline">
 <summary>
 Gets/sets whether the link text should be underlined.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.HoverUnderline">
 <summary>
 Gets/sets whether the link text should be underlined when in hover state.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.PictureDefault">
 <summary>
 Gets/sets the default location for the picture to use as the image for this hyperlink
 when it's not in its hover state.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.PictureHover">
 <summary>
 Gets/sets the picture location to use as the image for this hyperlink
 when it is in its hover state.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.PictureStyle">
 <summary>
 Gets/sets the picture appearance style for this hyperlink.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.PictureSizeMode">
 <summary>
 Gets/sets the picture sizing mode for this hyperlink.
 </summary>
</member>
<member name="P:DriveWorks.Forms.Hyperlink.LinkBehavior">
 <summary>
 Gets/sets whether the link, when clicked on the web, should be opened in the current window or in a new window/tab.
 </summary>
</member>
<member name="M:DriveWorks.Forms.OptionButtonGroupManager.Register(DriveWorks.Forms.OptionButton)">
 <summary>
 Maps a control to a group.
 </summary>
 <param name="control">The control to register.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.OptionButtonGroupManager.Unregister(System.String,System.String)">
 <summary>
 Removes the reference to a control with the given name.
 </summary>
 <param name="controlName">Name of the control to remove.</param>
 <param name="groupName">Name of the group the control is mapped to.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.OptionButtonGroupManager.UpdateGroup(System.String,System.String,System.String)">
 <summary>
 Updates the group mapping for the given control.
 </summary>
 <param name="controlName">Name of the control to update.</param>
 <param name="oldGroupName">Name of the group the control was mapped to.</param>
 <param name="newGroupName">Name of the group to map the control to.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.OptionButtonGroupManager.SetSelectedControl(System.String,System.String)">
 <summary>
 Looks under the given group for the specified control and sets its selection state to true.
 </summary>
 <param name="controlName">The control which is selected.</param>
 <param name="groupName">The name of the group to check.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.OptionButtonGroupManager.ClearSelectedControl(System.String)">
 <summary>
 Sets the selected state of all selected controls within the given group to false.
 </summary>
 <param name="groupName">Name of the group to search under.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ICanConvert">
 <summary>
 Implemented by controls which can be converted to a different control type.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ICanConvert.GetConvertTypes">
 <summary>
 Returns an array of types that this control can be converted to.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ICanConvert.GetConversionData(System.Type)">
 <summary>
 Returns a <see cref="T:DriveWorks.Forms.DataModel.Serialization.ControlData" /> that when added to a <see cref="T:DriveWorks.Forms.ContainerControlBase" /> will create a new control of the given type.
 </summary>
 <param name="newType">The type of control to convert this control to.</param>
</member>
<member name="T:DriveWorks.Forms.MeasurementTextBox">
 <summary>
 Implements a text box designed for input of distances.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.NativeUnitsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.NativeUnits" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.NativeValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.NativeValue" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.DisplayUnitsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.DisplayUnits" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.DisplayValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.DisplayValue" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.TextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.TextHorizontalAlignment" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.UnitFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.UnitFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.EffectiveUnitFontProperty">
 <summary>
 Provides the property store for the effective <see cref="P:DriveWorks.Forms.MeasurementTextBox.UnitFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective <see cref="P:DriveWorks.Forms.MeasurementTextBox.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.TextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.TextColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.UnitColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.UnitColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.MinimumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.Minimum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.MaximumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.Maximum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MeasurementTextBox.DecimalPlacesProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MeasurementTextBox.DecimalPlaces" /> property.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.DisplayValue">
 <summary>
 Gets/sets the display value of the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.NativeValue">
 <summary>
 Gets the native value of the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.DisplayUnits">
 <summary>
 Gets/sets the measurement text box's display units.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.NativeUnits">
 <summary>
 Gets/sets the measurement text box's native units.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.TextFont">
 <summary>
 Gets/sets the font used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.TextHorizontalAlignment">
 <summary>
 Gets/sets the horizontal alignment used for the text in the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.UnitFont">
 <summary>
 Gets/sets the font used in the units dropdown.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.TextColor">
 <summary>
 Gets/sets the color used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.UnitColor">
 <summary>
 Gets/sets the color used for the unit's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.Minimum">
 <summary>
 Gets/sets the measurement text box's minimum value.
 </summary>
 <remarks>The minimum is not enforced.</remarks>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.Maximum">
 <summary>
 Gets/sets the measurement text box's maximum value.
 </summary>
 <remarks>The maximum is not enforced.</remarks>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.DecimalPlaces">
 <summary>
 Gets/Sets the maximum decimal places the measurement text box can have
 </summary>
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.EffectiveDecimalPlaces">
 <summary>
 Gets the effective decimal places value for the measurement text box
 </summary>
</member>
<member name="M:DriveWorks.Forms.MeasurementTextBox.ClearInputValue">
 <summary>
 Sets the display value to zero.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.MeasurementTextBox.GetInputValue">
 <summary>
 Returns the current display value of the control.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.MeasurementTextBox.SetInputValue(System.Object,DriveWorks.Forms.InputValueType)">
 <inheritdoc />
</member>
<member name="P:DriveWorks.Forms.MeasurementTextBox.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.NumericTextBox">
 <summary>
 Provides an implementation of a numeric text box control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.ValueProperty">
 <summary>
 Provides the property store for the <see cref="F:DriveWorks.Forms.NumericTextBox.ValueProperty" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.NumericTextBox.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective text font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.TextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.NumericTextBox.TextColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.TextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.NumericTextBox.TextHorizontalAlignment" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.MinimumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.NumericTextBox.Minimum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.MaximumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.NumericTextBox.Maximum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.DecimalPlacesProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.NumericTextBox.DecimalPlaces" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.DefaultValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.NumericTextBox.DefaultValue" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.ShowBorderProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.NumericTextBox.ShowBorder" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.NumericTextBox.InputBackgroundColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.NumericTextBox.InputBackgroundColor" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.NumericTextBox.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.Value">
 <summary>
 Gets the native value of the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.TextFont">
 <summary>
 Gets/sets the font used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.TextColor">
 <summary>
 Gets/sets the color used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.TextHorizontalAlignment">
 <summary>
 Gets/sets the horizontal alignment of the control's text
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.Minimum">
 <summary>
 Gets/sets the text box's minimum value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.Maximum">
 <summary>
 Gets/sets the text box's maximum value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.EffectiveMinimum">
 <summary>
 Gets the effective minimum value of the numeric text box.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.EffectiveMaximum">
 <summary>
 Gets the effective maximum value of the numeric text box.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.DecimalPlaces">
 <summary>
 Gets/Sets the maximum decimal places the numeric text box can have
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.EffectiveDecimalPlaces">
 <summary>
 Gets the effective decimal places value for the numeric text box
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.EffectiveValue">
 <summary>
 Gets the effective value of the numeric text box.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.DefaultValue">
 <summary>
 Gets/sets the default value of the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.ShowBorder">
 <summary>
 Gets/sets whether the border of the text box is shown.
 </summary>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.InputBackgroundColor">
 <summary>
 Gets/sets the color used for the background of the input area.
 </summary>
</member>
<member name="M:DriveWorks.Forms.NumericTextBox.ClearInputValue">
 <summary>
 Sets the current value to zero.
 </summary>
</member>
<member name="M:DriveWorks.Forms.NumericTextBox.GetInputValue">
 <summary>
 Returns the current value of the control.
 </summary>
</member>
<member name="M:DriveWorks.Forms.NumericTextBox.SetInputValue(System.Object)">
 <summary>
 Sets the current value of the control.
 </summary>
 <param name="value">The value to set to the input property.</param>
</member>
<member name="P:DriveWorks.Forms.NumericTextBox.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.ControlEventHandler">
 <summary>
 Represents a method which will handle an event for an operation which affects a control.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ControlsEventHandler">
 <summary>
 Represents a method which will handle an event for an operation which affects one or more controls.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ControlEventArgs">
 <summary>
 Provides the event data for events which involves a control.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlEventArgs.#ctor(DriveWorks.Forms.ControlBase)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ControlEventArgs" /> class.
 </summary>
 <param name="control">The control that was affected by the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.ControlEventArgs.Control">
 <summary>
 Gets the control that was affected by the event.
 </summary>
</member>
<member name="T:DriveWorks.Forms.ControlsEventArgs">
 <summary>
 Provides the event data for events which involve one or more controls.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlsEventArgs.#ctor(DriveWorks.Forms.ControlBase[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ControlsEventArgs" /> class.
 </summary>
 <param name="controls">The controls that were affected by the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.ControlsEventArgs.Controls">
 <summary>
 Gets the controls that were affected by the event.
 </summary>
</member>
<member name="T:DriveWorks.Forms.CreatingControlEventArgs">
 <summary>
 Provides the event data for control creation events, allows for control creation to be cancelled.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.CreatingControlEventArgs.#ctor(System.String,System.Type)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.CreatingControlEventArgs" /> class.
 </summary>
 <param name="controlName">The name of the control that is being created.</param>
 <param name="controlType">The type of control that is being created.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.CreatingControlEventArgs.ControlName">
 <summary>
 The name of the control that is being created.
 </summary>
</member>
<member name="P:DriveWorks.Forms.CreatingControlEventArgs.ControlType">
 <summary>
 The type of control that is being created.
 </summary>
</member>
<member name="P:DriveWorks.Forms.CreatingControlEventArgs.Cancel">
 <summary>
 Whether or not the creation of the control will be cancelled.
 </summary>
</member>
<member name="T:DriveWorks.Forms.ChildSpecificationRequestEventHandler">
 <summary>
 Raised when there is a request to show a child specification dialog.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">Data for the request.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ChildSpecificationRequestEventArgs">
 <summary>
 Provides data for opening up a child specification form.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ChildSpecificationRequestEventArgs.#ctor(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationContext" /> class.
 </summary>
 <param name="context">The child specification context.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationRequestEventArgs.ChildSpecificationContext">
 <summary>
 The child specification context to be used when opening the form.
 </summary>
</member>
<member name="T:DriveWorks.Forms.DefaultRuleAttribute">
 <summary>
 Specifies the default rule to apply to a control.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DefaultRuleAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.DefaultRuleAttribute" /> class.
 </summary>
 <param name="defaultRuleInvariant">The default rule for the control in the invariant language (US English) and with a leading equals sign.</param>
 <remarks>To use the control name in the rule, use {0} as a place holder.</remarks>
</member>
<member name="P:DriveWorks.Forms.DefaultRuleAttribute.DefaultRuleInvariant">
 <summary>
 Gets the default rule.
 </summary>
</member>
<member name="T:DriveWorks.Forms.BorderStyle">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.BorderStyle.None">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.BorderStyle.SingleLine">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.BorderStyle.Inset3D">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ButtonBase">
 <summary>
 Provides a base for button controls in DriveWorks.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ButtonBase.TextProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ButtonBase.Text" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ButtonBase.TextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ButtonBase.TextHorizontalAlignment" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ButtonBase.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ButtonBase.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ButtonBase.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective text font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ButtonBase.TextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ButtonBase.TextColor" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ButtonBase.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.ButtonBase.Text">
 <summary>
 Gets/sets the text shown in the button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ButtonBase.TextHorizontalAlignment">
 <summary>
 Gets/Sets the horizontal alignment of text on this button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ButtonBase.TextFont">
 <summary>
 Gets/sets the font used for the button's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ButtonBase.TextColor">
 <summary>
 Gets/sets the color used for the button's text.
 </summary>
</member>
<member name="T:DriveWorks.Forms.CaptionControlBase">
 <summary>
 Provides a base class for controls which have a caption.
 </summary>
</member>
<member name="F:DriveWorks.Forms.CaptionControlBase.CaptionProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CaptionControlBase.Caption" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.CaptionControlBase.CaptionWidthProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CaptionControlBase.CaptionWidth" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.CaptionControlBase.CaptionFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CaptionControlBase.CaptionFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.CaptionControlBase.CaptionHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CaptionControlBase.CaptionHorizontalAlignment" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.CaptionControlBase.EffectiveCaptionFontProperty">
 <summary>
 Provides the property store for the effective caption font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.CaptionControlBase.CaptionColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CaptionControlBase.CaptionColor" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.CaptionControlBase.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.CaptionControlBase.Caption">
 <summary>
 Gets/sets the control's caption.
 </summary>
</member>
<member name="P:DriveWorks.Forms.CaptionControlBase.CaptionWidth">
 <summary>
 Gets/sets the width of the control's caption.
 </summary>
</member>
<member name="P:DriveWorks.Forms.CaptionControlBase.CaptionHorizontalAlignment">
 <summary>
 Gets/sets the horizontal alignment used on the control's caption.
 </summary>
</member>
<member name="P:DriveWorks.Forms.CaptionControlBase.CaptionFont">
 <summary>
 Gets/sets the font used for the control's caption.
 </summary>
</member>
<member name="P:DriveWorks.Forms.CaptionControlBase.CaptionColor">
 <summary>
 Gets/sets the color used for the control's caption.
 </summary>
</member>
<member name="T:DriveWorks.Forms.CheckAlignment">
 <summary>
 Controls the alignment of the check region in check box.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckAlignment.Left">
 <summary>
 The check is aligned to the left of the text.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckAlignment.Right">
 <summary>
 The check is aligned to the right of the text.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.CheckBox">
 <summary>
 Implements a check box.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckBox.CheckedProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CheckBox.Checked" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckBox.CheckedSourceProperty">
 <summary>
 Provides the property store for the source value for the <see cref="P:DriveWorks.Forms.CheckBox.Checked" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckBox.CheckAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CheckBox.CheckAlignment"/> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckBox.ShowCheckProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CheckBox.ShowCheck" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckBox.PictureDefaultProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CheckBox.PictureDefault" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckBox.PictureCheckedProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CheckBox.PictureChecked" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckBox.PictureStyleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CheckBox.PictureStyle" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckBox.PictureSizeModeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CheckBox.PictureSizeMode" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.CheckBox.DefaultValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.CheckBox.DefaultValue" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.CheckBox.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.CheckBox.Checked">
 <summary>
 Gets/sets whether the check box control is checked.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.CheckBox.CheckAlignment">
 <summary>
 Gets/sets the alignment of the check box with respect to its caption.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.CheckBox.ShowCheck">
 <summary>
 Gets/sets whether the check box part of the control should be shown.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.CheckBox.PictureDefault">
 <summary>
 Gets/sets the default location for the picture to use as the image for this check box
 when it is not checked.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.CheckBox.PictureChecked">
 <summary>
 Gets/sets the picture location to use as the image for this check box
 when it is not checked.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.CheckBox.PictureStyle">
 <summary>
 Gets/sets the picture appearance style for this check box.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.CheckBox.PictureSizeMode">
 <summary>
 Gets/sets the picture sizing mode for this check box.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.CheckBox.DefaultValue">
 <summary>
 Gets/sets the default value of the control.
 </summary>
</member>
<member name="M:DriveWorks.Forms.CheckBox.ClearInputValue">
 <summary>
 Sets the checked state to false.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.CheckBox.GetInputValue">
 <summary>
 Returns the current checked state of the control.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.CheckBox.SetInputValue(System.Object)">
 <summary>
 Sets the checked state of the control.
 </summary>
 <param name="value">The value to set to the input property.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.CheckBox.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.ChildSpecificationBehavior">
 <summary>
 Provides options which govern the behavior of a child specification list control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationBehavior.MultipleChildren">
 <summary>
 The child specification list allows the addition of any number of children.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationBehavior.SingleChild">
 <summary>
 The child specification list allows only one child to be added.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ChildSpecificationList">
 <summary>
 Implements a child specification list control (known as the subproject control in DriveWorks 6).
 </summary>
 <remarks>
 <para>
 The child specification list control allows specifications to be nested. An example of a situation in 
 which you might want to do this is if you have multiple independent product lines which need specifying
 for a single given order. In this case, you could create a 'Contract' project, with a child specification list 
 control on one of its forms that allows you to add specifications based on other projects for each product line.
 </para>
 </remarks>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.ListFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.ListFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.EffectiveListFontProperty">
 <summary>
 Provides the property store for the effective list font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.ListColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.ListColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.HeaderFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.HeaderFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.EffectiveHeaderFontProperty">
 <summary>
 Provides the property store for the effective header font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.HeaderColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.HeaderColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.BehaviorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.Behavior" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.NameColumnVisibleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.NameColumnVisible" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.TypeColumnVisibleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.TypeColumnVisible" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.StateColumnVisibleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.StateColumnVisible" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.HiddenResultColumnsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.HiddenResultColumns" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ChildSpecificationList.ColumnWidthsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ChildSpecificationList.ColumnWidths" /> property.
 </summary>
</member>
<member name="E:DriveWorks.Forms.ChildSpecificationList.SpecificationContextStateChanged">
 <summary>
 Raised when a child specification's state is changed.
 </summary>
</member>
<member name="E:DriveWorks.Forms.ChildSpecificationList.SelectedIndexChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Forms.ChildSpecificationList.SelectedIndex" /> property changes.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ChildSpecificationList.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.ColumnWidths">
 <summary>
 Gets/sets the width of the columns.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.ListFont">
 <summary>
 Gets/sets the font used for list items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.ListColor">
 <summary>
 Gets/sets the color used for list items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.HeaderFont">
 <summary>
 Gets/sets the font used for header items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.HeaderColor">
 <summary>
 Gets/sets the color used for header items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.Behavior">
 <summary>
 Gets/sets the behavior of the child specification list.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.NameColumnVisible">
 <summary>
 Gets/sets if the name column is visible or not.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.TypeColumnVisible">
 <summary>
 Gets/sets if the type column is visible or not.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.StateColumnVisible">
 <summary>
 Gets/sets if the state column is visible or not.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.HiddenResultColumns">
 <summary>
 Gets/sets the result columns to be hidden from the child specification list.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.Definition">
 <summary>
 Gets the current definition for this item list.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.SelectedIndex">
 <summary>
 Gets/sets the selected item by its index.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.SelectedItem">
 <summary>
 Gets the selected item.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ChildSpecificationList.SelectedContext">
 <summary>
 Gets the specification context for the selected item.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ChildSpecificationList.GetAvailableChildProjects">
 <summary>
 Gets the available projects that can be used to create child specifications for this definition.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ChildSpecificationList.AddNewItem(DriveWorks.ProjectDetails,System.Boolean)">
 <summary>
 Creates a new child specification context.
 </summary>
 <param name="projectDetail">The project to base the child specification context on.</param>
 <param name="showUI">Whether or not the child specification's UI should be shown to the user.</param>
 <returns>The specification context that was created.</returns>
 <remarks>
 The specification context might have changed as there is a OnOpenChildSpecificationRequest event raised from the parent context.
 That will allow changes to be made to the context before this method is complete.
 </remarks>
</member>
<member name="M:DriveWorks.Forms.ChildSpecificationList.GetItemContext(System.String)">
 <summary>
 Gets the specification context for the item with the specified name.
 </summary>
 <param name="specificationName">The name of the item.</param>
</member>
<member name="M:DriveWorks.Forms.ChildSpecificationList.Rename(System.String)">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Forms.ComboBox">
 <summary>
 Implements a combo box.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ComboBox.ItemFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ComboBox.ListFont" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ComboBox.ItemColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ComboBox.ListColor" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ComboBox.EffectiveItemFontProperty">
 <summary>
 Provides the property store for the effective item font.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ComboBox.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.ComboBox.ListFont">
 <summary>
 Gets/sets the font used for items.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.ComboBox.ListColor">
 <summary>
 Gets/sets the color used for items.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ComboBox.ClearInputValue">
 <summary>
 Sets the selected item to null.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ComboBox.GetInputValue">
 <summary>
 Returns the current selected item of the control.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ComboBox.SetInputValue(System.Object)">
 <summary>
 Sets the selected item of the control.
 </summary>
 <param name="value">The value to set to the input property.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.ComboBox.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.ContainerControlBase">
 <summary>
 The base class for controls which contain other controls.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ContainerControlBase.DefaultFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ContainerControlBase.DefaultFont" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ContainerControlBase.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.ContainerControlBase.Controls">
 <summary>
 Gets the collection of controls contained by the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ContainerControlBase.DefaultFont">
 <summary>
 Gets/sets the default font for all controls on this form.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ContainerControlBase.IsValidChild(DriveWorks.Forms.ControlBase)">
 <summary>
 Validates whether the specified control can be added as a child.
 </summary>
 <param name="control">The candidate child control.</param>
</member>
<member name="M:DriveWorks.Forms.ContainerControlBase.GetAllControls">
 <summary>
 Gets collection of all child controls contained by the control. Including the control children's children.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ContainerControlBase.SerializeCore(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)">
 <summary>
 Overridden to serialize child controls.
 </summary>
 <param name="writer">The writer to which to write the serialized control contents.</param>
 <param name="options">Options which configure the serialization process.</param>
 <remarks>See the <see cref="M:DriveWorks.Forms.ControlBase.SerializeCore(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)" /> method for more information.</remarks>
</member>
<member name="M:DriveWorks.Forms.ContainerControlBase.OnDeleted(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Forms.ControlBase.Deleted" /> event.
 </summary>
 <param name="e">The event data.</param>
</member>
<member name="T:DriveWorks.Forms.ControlBase">
 <summary>
 The base class for all controls.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.LeftProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.Left" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.TopProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.Top" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.WidthProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.Width" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.HeightProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.Height" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.TabIndexProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.TabIndex" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.VisibleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.Visible" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.EnabledProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.Enabled" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.MessageCodeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.MessageCode" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.BackgroundColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.BackgroundColor" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ControlBase.TagProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.Tag" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.TooltipTextProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.TooltipText" />property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ControlBase.TooltipDurationProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ControlBase.TooltipDuration" /> property.
 </summary>
</member>
<member name="E:DriveWorks.Forms.ControlBase.NameChanged">
 <summary>
 Raised when the name of the control changes.
 </summary>
</member>
<member name="E:DriveWorks.Forms.ControlBase.NameValueChanged">
 <summary>
 Raised when the name of the control changes and provides information on the name change
 (Old name and new name).
 </summary>
</member>
<member name="E:DriveWorks.Forms.ControlBase.ValueChanged">
 <summary>
 Raised when the value of a property on the control changes.
 </summary>
</member>
<member name="E:DriveWorks.Forms.ControlBase.Validated">
 <summary>
 Raised when the control has had its values validated after one or more value changes.
 </summary>
</member>
<member name="E:DriveWorks.Forms.ControlBase.Deleted">
 <summary>
 Raised when the control is deleted.
 </summary>
</member>
<member name="E:DriveWorks.Forms.ControlBase.Initialized">
 <summary>
 Raised when the control has finished initalizing and is now ready to use.
 </summary>
</member>
<member name="E:DriveWorks.Forms.ControlBase.LayoutChanged">
 <summary>
 Raised when the top, left, width or height of the control is changed.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ControlBase.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ControlBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.InitializeName(System.String)">
 <summary>
 Initializes the control with its name.
 </summary>
 <param name="name">The name of the control.</param>
</member>
<member name="M:DriveWorks.Forms.ControlBase.InitializeForm(DriveWorks.Forms.DataModel.IControlDataProvider)">
 <summary>
 Initializes an instance of the form with its data provider.
 </summary>
 <param name="provider">The data provider for the control.</param>
 <remarks>
 </remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.InitializeControl(DriveWorks.Forms.DataModel.IControlDataProvider,DriveWorks.Forms.ContainerControlBase)">
 <summary>
 Initializes an instance of the control with its data provider.
 </summary>
 <param name="provider">The data provider for the control.</param>
 <param name="initialParent">The initial parent of the control.</param>
 <remarks>
 </remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.NotifyDeleted">
 <summary>
 Notifies the control that it has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.DataProvider">
 <summary>
 Gets the data provider responsible for providing control data.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.IsDeleted">
 <summary>
 Gets whether or not the current control has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Name">
 <summary>
 Gets the control name.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Form">
 <summary>
 Gets the parent form.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Parent">
 <summary>
 Gets/sets the parent control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Left">
 <summary>
 Gets/sets the control left.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Top">
 <summary>
 Gets/sets the control top.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Width">
 <summary>
 Gets/sets the control width.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Height">
 <summary>
 Gets/sets the control height.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Visible">
 <summary>
 Gets/sets whether the control is visible.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Enabled">
 <summary>
 Gets/sets whether the control is enabled.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.MessageCode">
 <summary>
 Gets/sets the message code shown by the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.TabIndex">
 <summary>
 Gets/sets the index of the control in the tab order.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.BackgroundColor">
 <summary>
 Gets/sets the control background color.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Tag">
 <summary>
 Gets/sets the control tag.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.SupportsTooltips">
 <summary>
 Gets whether this control supports tooltips.
 </summary>
 <returns>True if this control supports tooltips.</returns>
</member>
<member name="P:DriveWorks.Forms.ControlBase.TooltipText">
 <summary>
 Gets/sets the text to display in the control's tooltip.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.TooltipDuration">
 <summary>
 Gets/sets the duration in seconds that the tooltip remains visible for.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlBase.Project">
 <summary>
 Gets the project to which the form belongs.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ControlBase.CreateRefactorProcess(System.String)">
 <summary>
 Creates an object capable of refactoring all references to the control
 from its current name, to the given new name.
 </summary>
 <returns>A rename process.</returns>
 <remarks>
 The returned RenameProcess instance is responsible for refactoring, only, it does not rename the control,
 for that, the <see cref="M:DriveWorks.Forms.ControlBase.Rename(System.String)" /> method should be used.
 </remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.Rename(System.String)">
 <summary>
 Renames the control.
 </summary>
 <param name="newName">The new name of the control.</param>
 <remarks>
 References to the renamed control are not refactored, to refactor them, use the 
 <see cref="M:DriveWorks.Forms.ControlBase.CreateRefactorProcess(System.String)" /> method.
 </remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.GetDefaultRule">
 <summary>
 Gets the default rule for the control's input property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ControlBase.GetAdditionalNamesForRename(System.String,System.String)">
 <summary>
 Called when control is being renamed. 
 Allows control to specify additional names to be updated during the rename operation.
 </summary>
 <param name="oldName">The old name of the control.</param>
 <param name="newName">The new name of the control.</param>
 <returns>
 Collection of replacements to make while renaming.
 </returns>
</member>
<member name="M:DriveWorks.Forms.ControlBase.OnDeleted(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Forms.ControlBase.Deleted" /> event.
 </summary>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.OnValueChanged(DriveWorks.Forms.DataModel.ValueChangedEventArgs)">
 <summary>
 Raises the <see cref="M:DriveWorks.Forms.ControlBase.OnValueChanged(DriveWorks.Forms.DataModel.ValueChangedEventArgs)" /> event.
 </summary>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.OnValidated(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Forms.ControlBase.Validated" /> event.
 </summary>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.OnDataProviderInitialized">
 <summary>
 Called when the DataProvider for this control has been initialized.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.OnInitialized(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Forms.ControlBase.Initialized" /> event.
 </summary>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.AssertInSpecification">
 <summary>
 Throws an invalid operation exception if there is no active specification.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.OnParentDefaultFontChanged(DriveWorks.Forms.SimpleFont)">
 <summary>
 Gives child controls a chance to update the font properties when
 the default font changed.
 </summary>
 <param name="newFont"></param>
</member>
<member name="M:DriveWorks.Forms.ControlBase.RaiseLayoutChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.Forms.ControlBase.LayoutChanged"/> event.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ControlBase.Validate">
 <summary>
 When overridden by a derived control, validates the control's properties after a change.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.Serialize(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)">
 <summary>
 Serializes the control and any contents to the given XML writer.
 </summary>
 <param name="writer">The XML writer to which to write the serialized control data.</param>
 <param name="options">Options which configure the serialization process.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.Serialize_NoArgumentChecks(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)">
 <summary>
 Serializes the control and any contents to the given XML writer, without checking the validity of arguments.
 </summary>
 <param name="writer">The XML writer to which to write the serialized control data.</param>
 <param name="options">Options which configure the serialization process.</param>
 <remarks>
 This method is used during recursion to skip checks which could slow down the serialization process.
 </remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.SerializeCore(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)">
 <summary>
 Serializes the contents of the control.
 </summary>
 <param name="writer">The XML writer to which to write the serialized control data.</param>
 <param name="options">Options which configure the serialization process.</param>
 <remarks>
 <para>
 This method is called by the <see cref="M:DriveWorks.Forms.ControlBase.Serialize(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)" /> method after having
 already written the <c>&lt;Control Name="$(Name)"&gt; tag.</c>
 </para>
 <para>
 After the <see cref="M:DriveWorks.Forms.ControlBase.SerializeCore(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)" /> method has finished executing, the <see cref="M:DriveWorks.Forms.ControlBase.Serialize(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)" />
 method will write the ending <c>&lt;/Control&gt;</c> tag.
 </para>
 <para>
 By default, this method will serialize all the dynamic properties which have been registered for 
 the control type, and because properties should always come before other content in the control,
 anyone overriding this method should call <see cref="M:DriveWorks.Forms.ControlBase.SerializeCore(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)" /> before serializing custom 
 content.
 </para>
 <para>
 To perform custom serialization of a property in a control, specify a custom property converter
 (see the <see cref="T:DriveWorks.Forms.DataModel.IPropertyValueConverter" /> interface documentation for more details) when
 the property is registered using the <see cref="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,DriveWorks.Forms.DataModel.StandardStoreOptions,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,DriveWorks.Forms.DataModel.DynamicPropertyData)" /> method.
 </para>    
 </remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.IsValidParent(DriveWorks.Forms.ContainerControlBase)">
 <summary>
 Validates whether the control can be added to the specified parent.
 </summary>
 <param name="control">The candidate parent control.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.GetExceptionHandler">
 <summary>
 Gets the current exception handler.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.CreateControl(System.Type,System.String,DriveWorks.Forms.ContainerControlBase)">
 <summary>
 Performs the basic grunt work of creating a control and checking whether it can be a child of the specified parent.
 </summary>
 <param name="controlType">The type of the control.</param>
 <param name="name">The name of the control.</param>
 <param name="candidateParent">The control that will act as the new control's parent (see the remarks for more details).</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The control type does not inherit from <see cref="T:DriveWorks.Forms.ControlBase" />, or the control isn't a valid child of the <paramref name="candidateParent" /> control.</exception>
 <returns>The newly created control.</returns>
 <remarks>
 <para>
 The newly created control is not added to the parent, just checked to make sure it can be a child of the parent.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.ClearInputValue">
 <summary>
 Clears the input value of the control, if it has one.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.GetInputValue">
 <summary>
 Returns the current input value of the control, if has one.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.SetInputValue(System.Object)">
 <summary>
 Sets the current input value of the control, if it has one.
 </summary>
 <param name="value">The value to set to the input property.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.SetInputValue(System.Object,DriveWorks.Forms.InputValueType)">
 <summary>
 Sets the current input value of the control, if it has one.
 </summary>
 <param name="value">The value to set to the input property.</param>
 <param name="type">The type of the input value.</param>
 <remarks>Control implementers should not override <see cref="M:DriveWorks.Forms.ControlBase.SetInputValue(System.Object)" /> if they already override this method.</remarks>
</member>
<member name="P:DriveWorks.Forms.ControlBase.HasInputValue">
 <summary>
 Returns true if the current control has an input value.
 A control's input value is the main property of the control,
 editable through the control's interface.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlBase.AssertInitialized">
 <summary>
 Throws an exception if the control has not been initialized.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ControlCollection">
 <summary>
 Implements a collection of controls managed by an instance of a type derived from the <see cref="T:DriveWorks.Forms.ContainerControlBase" />
 class.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Forms.ControlCollection.ControlAdded">
 <summary>
 Raised when a control is added to the collection.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Forms.ControlCollection.ControlRemoved">
 <summary>
 Raised when a control is removed from the collection.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Forms.ControlCollection.ControlMoved">
 <summary>
 Raised when a control has its index changed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Forms.ControlCollection.ControlLayoutChanged">
 <summary>
 Raised when a control's layout changes.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ControlCollection.Item(System.Int32)">
 <summary>
 Gets the control at the given index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns>The item at the specified index.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.Add``1(System.String)">
 <summary>
 Creates and adds a new control with the specified name.
 </summary>
 <typeparam name="T">The type of the control to create.</typeparam>
 <param name="name">The name of the control to create.</param>
 <returns>The new control.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">The specified type is either not the type of a control, or else isn't a valid child of the parent.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.Add(System.Type,System.String)">
 <summary>
 Creates and adds a new control with the specified name.
 </summary>
 <param name="controlType">The type of the control to create.</param>
 <param name="name">The name of the control to create.</param>
 <returns>The new control.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">The specified type is either not the type of a control, or else isn't a valid child of the parent.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.Add(DriveWorks.Forms.DataModel.Serialization.ControlData[],System.Boolean)">
 <summary>
 Takes the given deserialized control information, creates new controls, adds them to the collection, and returns them.
 </summary>
 <param name="deserialized">The deserialized control information, retrieved by using the <see cref="T:DriveWorks.Forms.DataModel.Serialization.ControlDeserializer" /> class.</param>
 <param name="renameDuplicates">True if duplicate controls should be renamed, false if an exception should be thrown instead.</param>
 <returns>An array of the top-level controls that were added.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.EnsureNamesAvailable(DriveWorks.Forms.DataModel.Serialization.ControlData[],System.Boolean)">
 <summary>
 Ensures that the names of the given controls are not taken.
 </summary>
 <param name="deserialized">The deserialized control information, retrieved by using the <see cref="T:DriveWorks.Forms.DataModel.Serialization.ControlDeserializer" /> class.</param>
 <param name="renameDuplicates">True if duplicate controls should be renamed, false if an exception should be thrown instead.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.Find(System.String,System.Boolean)">
 <summary>
 Finds a control with the specified name by performing a linear search.
 </summary>
 <param name="name">The name of the control to find.</param>
 <param name="recursive">True to recurse, or false just to search immediate children.</param>
 <returns>The control that matches the given name, or a null reference (Nothing in Visual Basic) if nothing was found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.ProposeNewControlName(System.String)">
 <summary>
 Proposes a new control name, for example in a copy and paste operation.
 </summary>
 <param name="currentControlName">The current name of the control.</param>
 <returns>A new control name, optionally suffixed with an index which makes the name unique.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.ProposeNewControlName(System.String,System.String[])">
 <summary>
 Proposes a new control name, for example in a copy and paste operation.
 </summary>
 <param name="currentControlName">The current name of the control.</param>
 <param name="reservedNames">An array of names which must not be used as the proposed control name.</param>
 <returns>A new control name, optionally suffixed with an index which makes the name unique.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.Move(System.Int32,System.Int32)">
 <summary>
 Move a control from its current index to the specified index, to adjust it's z-index.
 </summary>
 <param name="oldIndex">The old index of the control.</param>
 <param name="newIndex">The new index of the control.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.AddInternal(DriveWorks.Forms.ControlBase,System.Boolean)">
 <summary>
 Used by the <see cref="T:DriveWorks.Forms.ControlBase" /> type to update the new parent's control collection
 when the <see cref="P:DriveWorks.Forms.ControlBase.Parent" /> property is changed.
 </summary>
 <param name="control">The control which has been added.</param>
 <param name="raiseAddedEvent">Whether or not the <see cref="E:DriveWorks.Forms.ControlCollection.ControlAdded"/> event should be raised.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.InsertInternal(System.Int32,DriveWorks.Forms.ControlBase,System.Boolean)">
 <summary>
 Used by the <see cref="T:DriveWorks.Forms.ControlBase" /> type to update the new parent's control collection
 when the control has been recreated and is being placed back into an previous index.
 </summary>
 <param name="index">The index at which to insert the control.</param>
 <param name="control">The control which has been added.</param>
 <param name="raiseAddedEvent">Whether or not the <see cref="E:DriveWorks.Forms.ControlCollection.ControlAdded"/> event should be raised.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.RemoveInternal(DriveWorks.Forms.ControlBase)">
 <summary>
 Used by the <see cref="T:DriveWorks.Forms.ControlBase" /> type to update the new parent's control collection
 when the <see cref="P:DriveWorks.Forms.ControlBase.Parent" /> property is changed.
 </summary>
 <param name="control">The control which has been removed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.ClearInternal">
 <summary>
 Used by the <see cref="T:DriveWorks.Forms.ContainerControlBase" /> type to clear the collection
 when the control is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.AddCore(DriveWorks.Forms.DataModel.Serialization.ControlData[])">
 <summary>
 Takes the given deserialized control information, creates new controls, adds them to the collection, and returns them.
 </summary>
 <param name="deserialized">The deserialized control information, retrieved by using the <see cref="T:DriveWorks.Forms.DataModel.Serialization.ControlDeserializer" /> class.</param>
 <returns>An array of the top-level controls that were added.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ControlCollection.GetEnumerator">
 <summary>
 Returns an enumerator that can be used to iterate through the items in the collection.
 </summary>
 <returns>
 An enumerator for the collection.
 </returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DataGrid">
 <summary>
 Implements a data grid control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataGrid.WhereClauseProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataGrid.WhereClause" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataGrid.DatabaseProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataGrid.Database" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataGrid.TableNameProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataGrid.TableName" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataGrid.UserNameProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataGrid.UserName" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataGrid.PasswordProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataGrid.Password" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.DataGrid.FieldNamesProperty">
 <summary>
 Provides the property store the for <see cref="P:DriveWorks.Forms.DataGrid.FieldNames" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Forms.DataGrid.QueryStringChanged">
 <summary>
 Raised when the value of the <see cref="P:DriveWorks.Forms.DataGrid.QueryString" /> property changes.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Forms.DataGrid.ConnectionStringChanged">
 <summary>
 Raised when the value of the <see cref="P:DriveWorks.Forms.DataGrid.ConnectionString" /> property changes.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.DataGrid.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.DataGrid" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.DataGrid.WhereClause">
 <summary>
 Gets/sets the where clause for the database query.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataGrid.Database">
 <summary>
 Gets/sets the data source name of the database to query.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataGrid.TableName">
 <summary>
 Gets/sets the name of the table to query.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataGrid.UserName">
 <summary>
 Gets/sets the name of the user to use when performing the query.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataGrid.Password">
 <summary>
 Gets/sets the password of the user to use when performing the query.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataGrid.FieldNames">
 <summary>
 Gets/sets the names of the fields to retrieve.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.DataGrid.QueryString">
 <summary>
 Gets the query string built from the <see cref="P:DriveWorks.Forms.DataGrid.WhereClause" />, <see cref="P:DriveWorks.Forms.DataGrid.TableName" />, and <see cref="P:DriveWorks.Forms.DataGrid.FieldNames" />
 properties.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DataGrid.ConnectionString">
 <summary>
 Gets the connection string built from the <see cref="P:DriveWorks.Forms.DataGrid.Database" />, <see cref="P:DriveWorks.Forms.DataGrid.UserName" />, and <see cref="P:DriveWorks.Forms.DataGrid.Password" />
 properties.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DataGrid.ExecuteQuery(System.Collections.Generic.IDictionary{System.String,System.Data.Odbc.OdbcConnection})">
 <summary>
 Executes the query represented by the data grid, and returns the result as a data table.
 </summary>
 <param name="connectionCache">An optional cache of open connections, represented by a writable dictionary keyed on connection string.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.DialogButton">
 <summary>
 Implements a dialog button control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DialogButton.DialogNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DialogButton.DialogName" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DialogButton.TaskListEnabledProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DialogButton.TaskListEnabled" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DialogButton.PictureDefaultProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DialogButton.PictureDefault" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DialogButton.PictureHoverProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DialogButton.PictureHover" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DialogButton.PicturePressedProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DialogButton.PicturePressed" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DialogButton.PictureStyleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DialogButton.PictureStyle" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.DialogButton.PictureSizeModeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.DialogButton.PictureSizeMode" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DialogButton.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.DialogButton.DialogName">
 <summary>
 Gets/sets the name of the dialog to show when the button is clicked.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DialogButton.TaskListEnabled">
 <summary>
 Gets/sets the enabled state of the dialog task list.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DialogButton.PictureDefault">
 <summary>
 Gets/sets the location of the default picture to use as the default image for this dialog button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DialogButton.PictureHover">
 <summary>
 Gets/sets the location of the picture to use as the image for this dialog button when
 it's in a hover state.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DialogButton.PicturePressed">
 <summary>
 Gets/sets the location of the picture to use as the image for this dialog button when
 it's in a pressed state.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DialogButton.PictureStyle">
 <summary>
 Gets/sets the picture appearance style for this dialog button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.DialogButton.PictureSizeMode">
 <summary>
 Gets/sets the picture sizing mode for this dialog button.
 </summary>
</member>
<member name="M:DriveWorks.Forms.DialogButton.Invoke">
 <summary>
 Shows the dialog named by the <see cref="P:DriveWorks.Forms.DialogButton.DialogName" /> property.
 </summary>
 <exception cref="T:System.InvalidOperationException">No specification is active.</exception>
 <exception cref="T:DriveWorks.ItemNotFoundException">The dialog doesn't exist.</exception>
 <returns>
 True if the dialog was activated. The only time false will be returned is if the dialog is found, but 
 a preexecution macro closes the specification, forcing the dialog not to be activated.
 </returns>
</member>
<member name="M:DriveWorks.Forms.DialogButton.Invoke(System.Boolean)">
 <summary>
 Shows the dialog named by the <see cref="P:DriveWorks.Forms.DialogButton.DialogName" /> property.
 </summary>
 <param name="showUserInterface">Whether or not to show the user interface.</param>
 <exception cref="T:System.InvalidOperationException">No specification is active.</exception>
 <exception cref="T:DriveWorks.ItemNotFoundException">The dialog doesn't exist.</exception>
 <returns>
 True if the dialog was activated. The only time false will be returned is if the dialog is found, but 
 a preexecution macro closes the specification, forcing the dialog not to be activated.
 </returns>
</member>
<member name="T:DriveWorks.Forms.DialogButton.DialogButtonDialogContext">
 <summary>
 Given to <see cref="T:DriveWorks.Specification.SpecificationForm"/> as it's owner.
 </summary>
</member>
<member name="T:DriveWorks.Forms.Form">
 <summary>
 A form which contains controls
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Form.ShowTaskListProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Form.ShowTaskList" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Form.ShowStandardNavigationProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Form.ShowStandardNavigation" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Form.BackgroundColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Form.BackgroundColor" /> property.
 </summary>
 <remarks>
 This is a static replacement for <see cref="T:DriveWorks.Forms.ControlBase" />'s <see cref="F:DriveWorks.Forms.ControlBase.BackgroundColorProperty" />.
 </remarks>
</member>
<member name="F:DriveWorks.Forms.Form.OnNextProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Form.OnNext" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Form.OnPreviousProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Form.OnPrevious" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Form.OnEnterProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Form.OnEnter" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Forms.Form.CreatingControl">
 <summary>
 Raised when a control is being created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Forms.Form.ControlsCreated">
 <summary>
 Raised when one or more controls are created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Forms.Form.ControlsDeleted">
 <summary>
 Raised when one or more controls are deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.Form.#ctor(DriveWorks.Forms.DataModel.FormsDataManager,DriveWorks.Forms.DataModel.Serialization.ControlData)">
 <summary>
 Initializes a new instance of the <see cref="P:DriveWorks.Forms.ControlBase.Form" /> type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Form.OnNext">
 <summary>
 Gets/sets the name of the macro to run before switching to the next form.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Form.OnPrevious">
 <summary>
 Gets/sets the name of the macro to run before switching to the previous form.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Form.OnEnter">
 <summary>
 Gets/sets the name of the macro to run before switching to this form.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Form.ShowTaskList">
 <summary>
 Gets/sets whether the form will display a task list.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Form.ShowStandardNavigation">
 <summary>
 Gets/Sets whether the default form navigation is shown.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Form.BackgroundColor">
 <summary>
 Gets/sets the background color of the form.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.Form.IsValidParent(DriveWorks.Forms.ContainerControlBase)">
 <summary>
 Overridden to prevent parenting the form to any other control.
 </summary>
 <param name="control">The candidate parent control.</param>
 <returns>Overridden to return false in all cases.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.Form.DeleteControls(DriveWorks.Forms.ControlBase)">
 <summary>
 Deletes the specified control from the form.
 </summary>
 <param name="control">The control to delete.</param>
 <returns>True if the control was found and deleted.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.Form.DeleteControls(DriveWorks.Forms.ControlBase[])">
 <summary>
 Deletes the specified controls from the form.
 </summary>
 <param name="controls">The controls to delete.</param>
 <returns>True if the controls were found and deleted.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.Form.NotifyControlsCreated(DriveWorks.Forms.ControlBase[])">
 <summary>
 Raises the <see cref="E:DriveWorks.Forms.Form.ControlsCreated" /> event.
 </summary>
 <param name="controls">The controls that were created.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.Form.NotifyCreatingControlReturnCancel(System.String,System.Type)">
 <summary>
 Raises the <see cref="E:DriveWorks.Forms.Form.CreatingControl" /> event.
 </summary>
 <param name="controlName">The name of the control that is being created.</param>
 <param name="controlType">The type of control that is being created.</param>
 <returns>Whether a listener wishes to cancel the control creation or not.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ItemList">
 <summary>
 Implements a list of items created using a dialog form.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.ListFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.ListFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.EffectiveListFontProperty">
 <summary>
 Provides the property store for the effective list font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.ListColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.ListColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.HeaderFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.HeaderFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.EffectiveHeaderFontProperty">
 <summary>
 Provides the property store for the effective list font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.HeaderColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.HeaderColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.ItemsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.Items" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.TypeColumnVisibleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.TypeColumnVisible" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.NameColumnVisibleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.NameColumnVisible" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.TaskListEnabledProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.TaskListEnabled" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.HiddenItemValuesProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.HiddenItemValues" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ItemList.ColumnWidthsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ItemList.ColumnWidths" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ItemList.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.ItemList.ColumnWidths">
 <summary>
 Gets/sets the width of the columns.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.ListFont">
 <summary>
 Gets/sets the font used for list items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.ListColor">
 <summary>
 Gets/sets the color used for list items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.HeaderFont">
 <summary>
 Gets/sets the font used for header items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.HeaderColor">
 <summary>
 Gets/sets the color used for header items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.Items">
 <summary>
 Gets/sets the names of the dialogs which can create items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.TypeColumnVisible">
 <summary>
 Gets/sets if the type column is visible or not.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.NameColumnVisible">
 <summary>
 Gets/sets if the Name column is visible or not.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.SelectedIndex">
 <summary>
 Gets/sets the selected item by its index
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.Definition">
 <summary>
 Gets the current defintion for this item list.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.TaskListEnabled">
 <summary>
 Gets/sets whether the dialog task list should be enabled.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ItemList.HiddenItemValues">
 <summary>
 Gets/sets the item values to be hidden from the Item List.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ItemList.BeginAdd(System.String)">
 <summary>
 Starts the adding process for this item list.
 Informs the specification context that a dialog is being opened etc.
 </summary>
 <param name="formName">The name of the form to use in the adding process.</param>
 <exception cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
</member>
<member name="M:DriveWorks.Forms.ItemList.BeginAdd(System.String,System.Boolean)">
 <summary>
 Starts the adding process for this item list.
 Informs the specification context that a dialog is being opened etc.
 </summary>
 <param name="formName">The name of the form to use in the adding process.</param>
 <param name="showUserInterface">Whether or not to show the user interface.</param>
 <exception cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
</member>
<member name="M:DriveWorks.Forms.ItemList.BeginCopy(System.String)">
 <summary>
 Starts the copying process for this item list.
 Informs the specification context that a dialog is being opened etc.
 </summary>
 <param name="formName">The name of the form to use in the copying process.</param>
 <exception cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
</member>
<member name="M:DriveWorks.Forms.ItemList.BeginCopy(System.String,System.Boolean)">
 <summary>
 Starts the copying process for this item list.
 Informs the specification context that a dialog is being opened etc.
 </summary>
 <param name="formName">The name of the form to use in the copying process.</param>
 <param name="showUserInterface">Whether or not to show the user interface.</param>
 <exception cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
</member>
<member name="M:DriveWorks.Forms.ItemList.BeginEdit(System.String)">
 <summary>
 Starts the editing process for this item list.
 Informs the specification context that a dialog is being opened etc.
 </summary>
 <param name="formName">The name of the form to use in the editing process.</param>
 <exception cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
</member>
<member name="M:DriveWorks.Forms.ItemList.BeginEdit(System.String,System.Boolean)">
 <summary>
 Starts the editing process for this item list.
 Informs the specification context that a dialog is being opened etc.
 </summary>
 <param name="formName">The name of the form to use in the editing process.</param>
 <param name="showUserInterface">Whether or not to show the user interface.</param>
 <exception cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
</member>
<member name="M:DriveWorks.Forms.ItemList.MoveItemUp">
 <summary>
 Invokes the move item up command.
 This works off of the <see cref="P:DriveWorks.Forms.ItemList.SelectedIndex">Selected Index</see> property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ItemList.MoveItemDown">
 <summary>
 Invokes the move item down command.
 This works off of the <see cref="P:DriveWorks.Forms.ItemList.SelectedIndex">Selected Index</see> property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ItemList.Delete">
 <summary>
 Removes the item at the specified index.
 This works off of the <see cref="P:DriveWorks.Forms.ItemList.SelectedIndex">Selected Index</see> property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ItemList.Rename(System.String)">
 <inheritdoc />
</member>
<member name="M:DriveWorks.Forms.ItemList.BeginEditCore(System.String,DriveWorks.Forms.ItemList.ItemEditType,System.Boolean)">
 <summary>
 Starts the add/edit/copy item process.
 </summary>
 <param name="formName">The form that you will be editing. This relates to an item type.</param>
 <param name="mode">
 The mode that the form will be edited. 
 If this is not the add mode then the existing item data will populate the form. 
 Existing item data will be gathered form the selected item.
 </param>
 <exception cref="T:System.InvalidOperationException">
 When there is no specification context.
 </exception>
</member>
<member name="M:DriveWorks.Forms.ItemList.EndEdit(System.String,DriveWorks.Forms.ItemList.ItemEditType,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Ends the item add/edit/copy process.
 </summary>
 <param name="formName">The name of the form that data has been filled out on</param>
 <param name="mode">The mode in which to update the defintion. Edit mode will edit the currently selected item.</param>
</member>
<member name="T:DriveWorks.Forms.ItemList.ItemListDialogContext">
 <summary>
 Given to <see cref="T:DriveWorks.Specification.SpecificationForm"/> as it's owner.
 </summary>
</member>
<member name="T:DriveWorks.Forms.ItemList.ItemEditType">
 <summary>
 Represents the type of edit being made to an item in an item list.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ItemList.ItemEditType.Add">
 <summary>
 A new item should be added.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ItemList.ItemEditType.Edit">
 <summary>
 The selected item should be edited.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ItemList.ItemEditType.Copy">
 <summary>
 The selected item should be copied.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ItemList.ItemEditType.Cancel">
 <summary>
 The current edit operation should be cancelled.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.Label">
 <summary>
 Implements a label control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Label.TextProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Label.Text" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Label.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Label.TextFont" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Label.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective text font.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Label.TextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Label.TextColor" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.Label.TextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.Label.TextHorizontalAlignment"/> property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.Label.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.Label" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.Label.Text">
 <summary>
 Gets/sets the label's text.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Label.TextFont">
 <summary>
 Gets/sets the font used for the control's text.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Label.TextEffectiveFont">
 <summary>
 Gets the font that will be used for rendering the control's text
 </summary>
</member>
<member name="P:DriveWorks.Forms.Label.TextColor">
 <summary>
 Gets/sets the color used for the control's text.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.Label.TextHorizontalAlignment">
 <summary>
 Gets/sets the horizontal alignment of the labels text.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.ListBox">
 <summary>
 Implements a list box control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ListBox.ListFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ListBox.ListFont" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ListBox.EffectiveListFontProperty">
 <summary>
 Provides the property store for the effective list font.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.ListBox.ListColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ListBox.ListColor" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ListBox.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.ListBox.ListFont">
 <summary>
 Gets/sets the font used for list items.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.ListBox.ListColor">
 <summary>
 Gets/sets the color used for list items.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ListBox.ClearInputValue">
 <summary>
 Sets the selected item to null.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ListBox.GetInputValue">
 <summary>
 Returns the current selected item of the control.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.ListBox.SetInputValue(System.Object)">
 <summary>
 Sets the selected item of the control.
 </summary>
 <param name="value">The value to set to the input property.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.ListBox.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.ListControlBase">
 <summary>
 Provides base functionality to all list controls
 </summary>
</member>
<member name="F:DriveWorks.Forms.ListControlBase.ItemsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ListControlBase.Items" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ListControlBase.SelectedItemProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ListControlBase.SelectedItem" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ListControlBase.SelectedItemSourceProperty">
 <summary>
 Provides the property store for the  source value for the <see cref="P:DriveWorks.Forms.ListControlBase.SelectedItem" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ListControlBase.SelectedItemRemovedBehaviorProperty">
 <summary>
 Provides the property store the <see cref="P:DriveWorks.Forms.ListControlBase.SelectedItemRemovedBehavior" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ListControlBase.AllowClearSelectionProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ListControlBase.AllowClearSelection" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.ListControlBase.DefaultValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.ListControlBase.DefaultValue" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ListControlBase.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.ListControlBase.Items">
 <summary>
 Gets/sets the available items in the list control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ListControlBase.SelectedItem">
 <summary>
 Gets/sets the selected item in the list control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ListControlBase.SelectedItemRemovedBehavior">
 <summary>
 Controls the behavior of the selection when the selected item is removed from the list of selectable items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ListControlBase.AllowClearSelection">
 <summary>
 Gets/sets whether users are given the option of clearing the selection.
 </summary>
</member>
<member name="P:DriveWorks.Forms.ListControlBase.SelectionIsValid">
 <summary>
 Gets a value indicating whether the current selection is valid.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 <para>
 This should always be true because we automatically update the selected item to be the first available item when the available
 items invalidate the current selection. 
 </para>
 <para>
 The one circumstance in which this property can return false, is when a rule has been built for the selected item, and is returning
 a value which is not in the list. In this case, the UI should pick-up on this property and warn the user what is going on. Additionally,
 when the validation routine runs, it will trace the condition to the implementation debugging log.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.ListControlBase.DefaultValue">
 <summary>
 Gets/sets the default value of the list control.
 </summary>
</member>
<member name="M:DriveWorks.Forms.ListControlBase.Validate">
 <summary>
 Overridden to validate the selected item.
 </summary>
</member>
<member name="T:DriveWorks.Forms.MacroButton">
 <summary>
 Implements a macro button control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MacroButton.MacroNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MacroButton.MacroName" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MacroButton.PictureDefaultProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MacroButton.PictureDefault" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MacroButton.PictureHoverProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MacroButton.PictureHover" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MacroButton.PicturePressedProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MacroButton.PicturePressed" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MacroButton.PictureStyleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MacroButton.PictureStyle" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MacroButton.PictureSizeModeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MacroButton.PictureSizeMode" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.MacroButton.MacroArgumentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.MacroButton.MacroArgument" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.MacroButton.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.MacroButton.MacroName">
 <summary>
 Gets/sets the name of the macro invoked by the button when it is clicked.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MacroButton.MacroArgument">
 <summary>
 Gets/sets the argument to the macro invoked by the button when it is clicked.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MacroButton.PictureDefault">
 <summary>
 Gets/sets the location of the default picture to use as the default image for this macro button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MacroButton.PictureHover">
 <summary>
 Gets/sets the location of the picture to use as the image for this macro button when
 it's in a hover state.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MacroButton.PicturePressed">
 <summary>
 Gets/sets the location of the picture to use as the image for this macro button when
 it's in a pressed state.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MacroButton.PictureStyle">
 <summary>
 Gets/sets the picture appearance style for this macro button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.MacroButton.PictureSizeMode">
 <summary>
 Gets/sets the picture sizing mode for this macro button.
 </summary>
</member>
<member name="M:DriveWorks.Forms.MacroButton.Invoke">
 <summary>
 Invokes the macro specified in the <see cref="P:DriveWorks.Forms.MacroButton.MacroName" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.MacroButton.Invoke(System.Drawing.Point)">
 <summary>
 Invokes the macro specified in the <see cref="P:DriveWorks.Forms.MacroButton.MacroName"/> property with the provided click position.
 </summary>
</member>
<member name="T:DriveWorks.Forms.OptionGroup">
 <summary>
 Implements an option group control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.OptionFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionGroup.OptionFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.EffectiveOptionFontProperty">
 <summary>
 Provides the property store for the effective option font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.OptionColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionGroup.OptionColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.OptionAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="F:DriveWorks.Forms.OptionGroup.OptionAlignmentProperty" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.OptionTextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="F:DriveWorks.Forms.OptionGroup.OptionTextHorizontalAlignmentProperty" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.MaximumRowsProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionGroup.MaximumRows" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.PictureSelectedProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionGroup.PictureSelected" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.PictureDefaultProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionGroup.PictureDefault" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.PictureStyleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionGroup.PictureStyle" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.PictureSizeModeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionGroup.PictureSizeMode" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.ShowOptionProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionGroup.ShowOption" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.OptionGroup.ShowBorderProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.OptionGroup.ShowBorder" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.OptionGroup.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.OptionFont">
 <summary>
 Gets/sets the font used for option items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.OptionColor">
 <summary>
 Gets/sets the color used for option items.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.OptionAlignment">
 <summary>
 Gets/sets whether options are left or right aligned.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.MaximumRows">
 <summary>
 Gets/sets the maximum number of rows that options can be added to before spilling into another column, where zero means that there is no limit.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.PictureSelected">
 <summary>
 Gets/sets the location of the picture to be displayed on an option
 when that option is selected.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.PictureDefault">
 <summary>
 Gets/sets the default location of the picture to be displayed on an option
 when that option is not selected.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.PictureStyle">
 <summary>
 Gets/sets the picture appearance style for this option group.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.PictureSizeMode">
 <summary>
 Gets/sets the picture sizing mode for this option group.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.ShowOption">
 <summary>
 Gets/sets the radio button's visibility.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.ShowBorder">
 <summary>
 Gets/Sets whether the border of the option group is shown.
 </summary>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.OptionTextHorizontalAlignment">
 <summary>
 Gets/Sets the horizontal alignment of the option text.
 </summary>
</member>
<member name="M:DriveWorks.Forms.OptionGroup.ClearInputValue">
 <summary>
 Sets the selected item to null.
 </summary>
</member>
<member name="M:DriveWorks.Forms.OptionGroup.GetInputValue">
 <summary>
 Returns the current selected item of the control.
 </summary>
</member>
<member name="M:DriveWorks.Forms.OptionGroup.SetInputValue(System.Object)">
 <summary>
 Sets the selected item of the control.
 </summary>
 <param name="value">The value to set to the input property.</param>
</member>
<member name="P:DriveWorks.Forms.OptionGroup.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.OptionGroupItemAlignment">
 <summary>
 Specifies the alignment of items in an option group.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionGroupItemAlignment.Left">
 <summary>
 Options are left aligned.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.OptionGroupItemAlignment.Right">
 <summary>
 Options are right aligned.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.PictureBox">
 <summary>
 Implements a picture box control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.PictureBox.FileNameProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PictureBox.FileName" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.PictureBox.SizeModeProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PictureBox.SizeMode" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.PictureBox.BorderStyleProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.PictureBox.BorderStyle" /> property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.PictureBox.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.PictureBox.FileName">
 <summary>
 Gets/sets the file name of the picture to be shown.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.PictureBox.SizeMode">
 <summary>
 Gets/sets the sizing mode of the picture in the picture box.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.PictureBox.BorderStyle">
 <summary>
 Gets/sets the style of the border around the picture box.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.PictureSizeMode">
 <summary>
 Specifies the behaviour used to size a picture in a picture box.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.PictureSizeMode.Normal">
 <summary>
 Use the pictures native size
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.PictureSizeMode.StretchImage">
 <summary>
 Size the picture to fit the picture box and ignore the aspect ratio of the picture.
 </summary>
 <devdoc>
 This must have the same name as the equivalent
 enum in WinForms otherwise we would need to 
 update the migration to change any size mode's in 
 form files when migrating from 6 to 7.
 </devdoc>
</member>
<member name="F:DriveWorks.Forms.PictureSizeMode.Zoom">
 <summary>
 Size the picture to fit the picture box but preserve the aspect ratio of the picture.
 </summary>
</member>
<member name="F:DriveWorks.Forms.PictureSizeMode.Center">
 <summary>
 Center the picture
 </summary>
</member>
<member name="T:DriveWorks.Forms.SelectedItemRemovedBehavior">
 <summary>
 Controls the behavior of a selection control when the selected item is removed.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SelectedItemRemovedBehavior.SelectNone">
 <summary>
 Clears the selection.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SelectedItemRemovedBehavior.SelectFirst">
 <summary>
 Selects the first item in the control.
 </summary>
</member>
<member name="T:DriveWorks.Forms.SerializationMode">
 <summary>
 Controls the serialization of a control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.SerializationMode.Display">
 <summary>
 Serializes the information required to display the control to and end-user.
 </summary>
 <remarks>
 This mode produces output which contains the values of any static properties, and the
 calculated results of any dynamic properties.
 </remarks>
</member>
<member name="F:DriveWorks.Forms.SerializationMode.Save">
 <summary>
 Serializes the information required to save the control to a file as part of 
 the project, and reload it when the project is loaded.
 </summary>
 <remarks>
 This mode produces output which contains the values of any static properties,
 and the backing-store information and comments for any dynamic properties.
 </remarks>
</member>
<member name="F:DriveWorks.Forms.SerializationMode.Copy">
 <summary>
 Serializes the information required to duplicate the control.
 </summary>
 <remarks>
 This method produces output which contains the values of any static properties,
 and the rules and comments for any dynamic properties.
 </remarks>
</member>
<member name="F:DriveWorks.Forms.SerializationMode.Backup">
 <summary>
 Serializes the information required to backup the control.
 </summary>
 <remarks>
 This method produces output which contains index of the control, values of any static properties,
 and the rules and comments for any dynamic properties.
 </remarks>
</member>
<member name="T:DriveWorks.Forms.SimpleColor">
 <summary>
 Represents a 24-bit color.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.SimpleColor.sHtmlNames">
 <remarks>
 Names gathered from ColorTranslator source.
 </remarks>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.FromName(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.SimpleColor" /> class.
 </summary>
 <param name="name">The name of the color.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.FromColor(System.Drawing.Color)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.SimpleColor" /> class.
 </summary>
 <param name="color">The GDI color on which to base the simple color.</param>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.FromRgb(System.Byte,System.Byte,System.Byte)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.SimpleColor" /> class.
 </summary>
 <param name="red">The red component of the color.</param>
 <param name="green">The green component of the color.</param>
 <param name="blue">The blue component of the color.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.SimpleColor" /> class.
 </summary>
 <param name="alpha">The alpha component of the color.</param>
 <param name="red">The red component of the color.</param>
 <param name="green">The green component of the color.</param>
 <param name="blue">The blue component of the color.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.FromRgb(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.SimpleColor" /> class.
 </summary>
 <param name="rgb">An integer containing the red, green, and blue color information.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.#ctor(System.String,System.Byte,System.Byte,System.Byte,System.Byte)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.SimpleColor" /> class.
 </summary>
 <param name="name">The name of the color.</param>
 <param name="a">The alpha component of the color.</param>
 <param name="r">The red component of the color.</param>
 <param name="g">The green component of the color.</param>
 <param name="b">The blue component of the color.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleColor.Name">
 <summary>
 Gets the display name of the color.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SimpleColor.Alpha">
 <summary>
 Gets the alpha component of the color.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleColor.Red">
 <summary>
 Gets the red component of the color.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleColor.Green">
 <summary>
 Gets the green component of the color.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleColor.Blue">
 <summary>
 Gets the blue component of the color.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.ToColor">
 <summary>
 Converts the simple color to its GDI representation.
 </summary>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.ToInt32">
 <summary>
 Converts the color to an integer in the order ARGB.
 </summary>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.Equals(System.Object)">
 <inheritdoc/>
</member>
<member name="M:DriveWorks.Forms.SimpleColor.ToString">
 <summary>
 Returns the string version of the color.
 </summary>
</member>
<member name="T:DriveWorks.Forms.SimpleColorConverter">
 <summary>
 Implements a type converter for simple colors.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.SimpleColorEditor">
 <summary>
 Provides editor support for colors.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.SimpleFont">
 <summary>
 Represents a font.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.SimpleFont.#ctor(System.String,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.SimpleFont" /> type.
 </summary>
 <param name="family">The family name of the font.</param>
 <param name="size">The size of the font in points.</param>
 <param name="isBold">Whether the font is displayed in bold face.</param>
 <param name="isItalic">Whether the font is displayed in italics.</param>
 <param name="hasUnderline">Whether the font has an underline.</param>
 <param name="hasStrikethrough">Whether the font has a strikethrough.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleFont.Family">
 <summary>
 Gets the family name of the font.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleFont.Size">
 <summary>
 Gets the size, in points, of the font.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleFont.IsBold">
 <summary>
 Gets whether the font is bold.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleFont.IsItalic">
 <summary>
 Gets whether the font is displayed in italics.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleFont.HasUnderline">
 <summary>
 Gets whether the font has an underline.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Forms.SimpleFont.HasStrikethrough">
 <summary>
 Gets whether the font has a strikethrough.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Forms.SimpleFont.ToString">
 <summary>
 Returns the string version of the font.
 </summary>
</member>
<member name="T:DriveWorks.Forms.SimpleFontConverter">
 <summary>
 Implements a type converter for simple fonts.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.SimpleFontEditor">
 <summary>
 Provides editor support for fonts.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Forms.SpinButton">
 <summary>
 Provides an implementation of a spin button control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.MinimumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.SpinButton.Minimum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.MaximumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.SpinButton.Maximum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.ValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.SpinButton.Value" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.ValueSourceProperty">
 <summary>
 Provides the property store for the source value for the <see cref="P:DriveWorks.Forms.SpinButton.Value" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.IncrementProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.SpinButton.Increment" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.DecimalPlacesProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.SpinButton.DecimalPlaces" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.SpinButton.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.TextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.SpinButton.TextHorizontalAlignment" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective 
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.TextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.SpinButton.TextColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.SpinButton.DefaultValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.SpinButton.DefaultValue" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.SpinButton.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.SpinButton.Minimum">
 <summary>
 Gets/sets the spin button's minimum value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.Maximum">
 <summary>
 Gets/sets the spin button's maximum value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.Value">
 <summary>
 Gets/sets the spin button's current value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.Increment">
 <summary>
 Gets/sets the spin button's increment value.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.DecimalPlaces">
 <summary>
 Gets/sets the number of decimal places to show.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.TextFont">
 <summary>
 Gets/sets the font used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.TextHorizontalAlignment">
 <summary>
 Gets/sets the horizontal alignment of the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.TextColor">
 <summary>
 Gets/sets the color used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.EffectiveMinimum">
 <summary>
 Gets the effective minimum value of the spin button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.EffectiveMaximum">
 <summary>
 Gets the effective maximum value of the spin button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.EffectiveValue">
 <summary>
 Gets the effective value of the spin button.
 </summary>
</member>
<member name="P:DriveWorks.Forms.SpinButton.DefaultValue">
 <summary>
 Gets/sets the default value of the control.
 </summary>
</member>
<member name="M:DriveWorks.Forms.SpinButton.ClearInputValue">
 <summary>
 Sets the current value to zero.
 </summary>
</member>
<member name="M:DriveWorks.Forms.SpinButton.GetInputValue">
 <summary>
 Returns the current value of the control.
 </summary>
</member>
<member name="M:DriveWorks.Forms.SpinButton.SetInputValue(System.Object)">
 <summary>
 Sets the current value of the control.
 </summary>
 <param name="value">The value to set to the input property.</param>
</member>
<member name="P:DriveWorks.Forms.SpinButton.HasInputValue">
 <Inheritdoc/>
</member>
<member name="T:DriveWorks.Forms.TextBox">
 <summary>
 Provides an implementation of a text box control.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.TextProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.Text" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.TextSourceProperty">
 <summary>
 Provides the property store for the source value for the <see cref="P:DriveWorks.Forms.TextBox.Text" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.TextHorizontalAlignmentProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.TextHorizontalAlignment" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.TextFontProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.TextFont" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.EffectiveTextFontProperty">
 <summary>
 Provides the property store for the effective text font.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.TextColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.TextColor" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.MinimumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.Minimum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.MaximumProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.Maximum" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.MultilineProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.Multiline" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.WordWrapProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.WordWrap" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.DefaultValueProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.DefaultValue" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.HideCharactersProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.HideCharacters" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.CharacterLimitProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.CharacterLimit" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.IsReadOnlyProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.IsReadOnly" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.ShowBorderProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.ShowBorder" /> property.
 </summary>
</member>
<member name="F:DriveWorks.Forms.TextBox.InputBackgroundColorProperty">
 <summary>
 Provides the property store for the <see cref="P:DriveWorks.Forms.TextBox.InputBackgroundColor" /> property.
 </summary>
</member>
<member name="M:DriveWorks.Forms.TextBox.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Forms.ButtonBase" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Custom controls should make their constructors private to prevent
 end-users accidentally instantiating the control directly rather
 than using the mechanisms built into the forms API.
 </note>
 </remarks>
</member>
<member name="P:DriveWorks.Forms.TextBox.Text">
 <summary>
 Gets/sets the text shown in the text box.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.TextHorizontalAlignment">
 <summary>
 Gets/sets the horizontal alignment used on the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.TextFont">
 <summary>
 Gets/sets the font used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.TextColor">
 <summary>
 Gets/sets the color used for the control's text.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.Minimum">
 <summary>
 Gets/sets the text box's minimum value.
 </summary>
 <remarks>The minimum is not enforced.</remarks>
</member>
<member name="P:DriveWorks.Forms.TextBox.Maximum">
 <summary>
 Gets/sets the text box's maximum value.
 </summary>
 <remarks>The maximum is not enforced.</remarks>
</member>
<member name="P:DriveWorks.Forms.TextBox.Multiline">
 <summary>
 Gets/sets whether the text box spans multiple lines.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.WordWrap">
 <summary>
 Gets/sets whether the text box text is word wrapped when in multiline mode.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.DefaultValue">
 <summary>
 Gets/sets the default value of the control.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.HideCharacters">
 <summary>
 Gets/sets whether or not the textbox should behave like a password TextBox.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.CharacterLimit">
 <summary>
 Gets/sets the number of characters that can appear in the TextBox.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.IsReadOnly">
 <summary>
 Gets/sets whether the text box is read only or not.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.EffectiveText">
 <summary>
 Gets the effective text of the text box.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.ShowBorder">
 <summary>
 Gets/sets whether the border of the text box is shown.
 </summary>
</member>
<member name="P:DriveWorks.Forms.TextBox.InputBackgroundColor">
 <summary>
 Gets/sets the color used for the background of the input area.
 </summary>
</member>
<member name="M:DriveWorks.Forms.TextBox.ClearInputValue">
 <summary>
 Sets the control's text to an empty string.
 </summary>
</member>
<member name="M:DriveWorks.Forms.TextBox.GetInputValue">
 <summary>
 Returns the text value of the control.
 </summary>
</member>
<member name="M:DriveWorks.Forms.TextBox.SetInputValue(System.Object)">
 <summary>
 Sets the text value of the control.
 </summary>
 <param name="value">The value to set to the input property.</param>
</member>
<member name="P:DriveWorks.Forms.TextBox.HasInputValue">
 <Inheritdoc/>
</member>
<member name="M:DriveWorks.Forms.TextBox.GetPropertyData(DriveWorks.Forms.DataModel.DynamicProperty,DriveWorks.Forms.DataModel.DynamicProperty)">
 <summary>
 Sets up a property data object with the values from the source property, will also do rules and comments if applicable.
 </summary>
 <param name="sourceProperty">The source property to get values from.</param>
 <param name="targetProperty">The target property format.</param>
 <returns>New property data object.</returns>
</member>
<member name="T:DriveWorks.Forms.StoreValueType">
 <summary>
 Describes the type used to represent a value in the property store.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.StoreValueType.Unknown">
 <summary>
 The value is of an unknown type.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.StoreValueType.EmptyValue">
 <summary>
 The value is empty.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.StoreValueType.TableValue">
 <summary>
 The value is a table of values.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.StoreValueType.StringValue">
 <summary>
 The value is a string.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.StoreValueType.DoubleValue">
 <summary>
 The value is a double.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.StoreValueType.DateTimeValue">
 <summary>
 The value is a date and time.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Forms.StoreValueType.BooleanValue">
 <summary>
 The value is a boolean.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.PreviewServerResult">
 <summary>
 Represents the result of a preview request that will round trip through SOLIDWORKS.
 </summary>
</member>
<member name="P:DriveWorks.PreviewServerResult.ProblemMessage">
 <summary>
 Gets/sets a message to display to the user that describes a problem that has occurred during the preview.
 </summary>
 <remarks>This is to be used for reporting purposes.</remarks>
</member>
<member name="P:DriveWorks.PreviewServerResult.ProblemDetail">
 <summary>
 Gets/sets further information about a problem that has occurred during the preview.
 </summary>
</member>
<member name="P:DriveWorks.PreviewServerResult.IsError">
 <summary>
 Gets/sets whether the problem is an error.
 </summary>
</member>
<member name="P:DriveWorks.PreviewServerResult.Result">
 <summary>
 Gets/sets the result from the preview, containing path information to the previewed file.
 </summary>
</member>
<member name="T:DriveWorks.ISpecificationFileCopyService">
 <summary>
 Provides the contract for objects that copy files relating to specifications.
 </summary>
</member>
<member name="M:DriveWorks.ISpecificationFileCopyService.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Recursively copies all files in the specified source directory to the target directory using <see cref="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String)" />,
 while maintaining the directory structure, with the ability to overwrite existing files.
 </summary>
 <param name="source">The directory to copy files from.</param>
 <param name="target">The directory to copy files to.</param>
 <param name="deleteSource">True if the source folder should be deleted after all files have been copied.</param>
 <param name="overwrite">True if the files in the destination folder should be overwritten.</param>
</member>
<member name="M:DriveWorks.ISpecificationFileCopyService.CopyDirectory(System.String,System.String,System.Boolean)">
 <summary>
 Recursively copies all files in the specified source directory to the target directory using <see cref="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String)" />,
 while maintaining the directory structure.
 </summary>
 <param name="source">The directory to copy files from.</param>
 <param name="target">The directory to copy files to.</param>
 <param name="deleteSource">True if the source folder should be deleted after all files have been copied.</param>
</member>
<member name="M:DriveWorks.ISpecificationFileCopyService.CopyDirectory(System.String,System.String)">
 <summary>
 Recursively copies all files in the specified source directory to the target directory using <see cref="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String)" />,
 while maintaining the directory structure without deleting the source files.
 </summary>
 <param name="source">The directory to copy files from.</param>
 <param name="target">The directory to copy files to.</param>
</member>
<member name="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String)">
 <summary>
 Copies the given file to the specified target without deleting the source file.
 </summary>
 <param name="source">The path to the file to copy.</param>
 <param name="target">The path to copy the file to.</param>
</member>
<member name="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String,System.Boolean)">
 <summary>
 Copies the given file to the specified target and optionally deletes the source file.
 </summary>
 <param name="source">The path to the file to copy.</param>
 <param name="target">The path to copy the file to.</param>
 <param name="deleteSource">Whether to delete the source file after the file has been copied.</param>
</member>
<member name="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Copies the given file to the specified target, optionally deletes the source file and optionally overwrites existing files
 </summary>
 <param name="source">The path to the file to copy.</param>
 <param name="target">The path to copy the file to.</param>
 <param name="deleteSource">Whether to delete the source file after the file has been copied.</param>
 <param name="overwrite">Whether to overwrite the file if it already exists.</param>
</member>
<member name="E:DriveWorks.ISpecificationFileCopyService.CopyingFile">
 <summary>
 Raised whenever a file is being copied by the <see cref="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String)" /> method.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ISpecificationFileCopyService.CopiedFile">
 <summary>
 Raised whenever a file has been copied using <see cref="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String)" /> method.
 </summary>
</member>
<member name="T:DriveWorks.ReleasedComponentTask">
 <summary>
 Represents a released <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />.
 </summary>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.Create(DriveWorks.Components.Tasks.ComponentTask,DriveWorks.Project,System.Collections.Generic.IDictionary{System.Guid,System.Object})">
 <summary>
 NOTE: Only called when generating Scoped Component tasks because they're not
       a part of the component data structure. This will create a ReleasedComponentTask
       just the same as ComponentSpecific tasks are generated.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedComponentTask.TaskType">
 <summary>
 Gets the name of the type of this task.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedComponentTask.Name">
 <summary>
 Gets the name of the generation task to be executed.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedComponentTask.Conditions">
 <summary>
 Gets the list of conditions that will be evaluated at runtime which governs whether the task will be executed.
 </summary>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.GetParameterValue(System.String,System.String)">
 <summary>
 Gets the value of the parameter with the given name as a string, or the fallback value if the parameter
 could not be found, or has no value.
 </summary>
 <param name="name">The name of the parameter whose value to retrieve.</param>
 <param name="fallbackValue">The value to return if the parameter could not be found.</param>
 <returns>The value of the parameter, or the fallback value if it wasn't found.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.GetParameterValue``1(System.String,``0)">
 <summary>
 Retrieves the value of the parameter with the given name, or <paramref name="fallbackValue"/> if it wasn't found.
 </summary>
 <typeparam name="T">The type of the parameter to retrieve.</typeparam>
 <param name="name">The name of the parameter whose value to retrieve.</param>
 <param name="fallbackValue">The value to return if the parameter could not be found.</param>
 <returns>The value of the parameter, or the fallback value if it wasn't found.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValue(System.String,System.String@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValue(System.String,System.Boolean,System.String@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="failOnEmptyString">True if this method should return false if the value is found, but is an empty string.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValue``1(System.String,``0@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as <typeparamref name="T" />.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <typeparam name="T">The type to convert the released parameter value to.</typeparam>
 <returns>True if the parameter was found and its value could successfully be converted to a <typeparamref name="T"/>.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValue``1(System.String,System.Boolean,``0@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as <typeparamref name="T" />.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <param name="failOnEmptyString">True if this method should return false if the value is found, but is an empty string before conversion.</param>
 <typeparam name="T">The type to convert the released parameter value to.</typeparam>
 <returns>True if the parameter was found and its value could successfully be converted to a <typeparamref name="T"/>.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsBoolean(System.String,System.Boolean@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as a Boolean.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and its value could successfully be converted to a Boolean.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsDateTime(System.String,System.DateTime@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as a DateTime.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and its value could successfully be converted to a DateTime.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsInteger(System.String,System.Int32@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as an Integer.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and its value could successfully be converted to a Integer.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsDouble(System.String,System.Double@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as a Double.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and its value could successfully be converted to a Double.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterAsArrayValue(System.String,Titan.Rules.Execution.IArrayValue@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as a <see cref="T:Titan.Rules.Execution.IArrayValue"/>.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and its value could successfully be converted to a <see cref="T:Titan.Rules.Execution.IArrayValue"/></returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsEnum``1(System.String,``0@)">
 <summary>
 Attempts to retrieve the value of the given parameter as an Enum.
 </summary>
 <typeparam name="T">The type to convert the released parameter value to.</typeparam>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and its value could successfully be converted to an Enum.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameter(System.String,DriveWorks.Components.Data.ReleasedParameterData@)">
 <summary>
 Attempts to get the parameter data that matches the specified name.
 </summary>
 <param name="name">The name of the parameter to get.</param>
 <param name="parameter">The parameter if it was found.</param>
 <returns>True if the parameter was found.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTask.TryGetParameter(System.String,System.Boolean,DriveWorks.Components.Data.ReleasedParameterData@)">
 <summary>
 Attempts to get the paramter data that matches the specified name.
 </summary>
 <param name="name">The name of the parameter to get.</param>
 <param name="excludeEmpty">True if an empty parameter value should be considered non-existent.</param>
 <param name="parameter">The parameter if it was found.</param>
 <returns>True if the parameter was found. If <paramref name="excludeEmpty" /> is True then returns whether the parameter was found and it's value was not empty.</returns>
</member>
<member name="M:DriveWorks.ReleasedComponentTaskCollection.#ctor(System.Collections.Generic.IEnumerable{DriveWorks.ReleasedComponentTask})">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.ReleasedComponentTaskCollection" /> class.
 </summary>
 <remarks>This is used by scoped tasks, as they're all retrieved in one go from the group.</remarks>
</member>
<member name="M:DriveWorks.ReleasedComponentTaskCollection.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through the collection. 
 </summary>
</member>
<member name="M:DriveWorks.ReleasedComponentTaskCollection.GetEnumerator1">
 <summary>
 Returns an enumerator that iterates through the collection. 
 </summary>
</member>
<member name="T:DriveWorks.ReleaseParameterDataContainer">
 <summary>
 Provides a wrapper around a <see cref="T:DriveWorks.Components.Data.ReleasedParameterData"/> collection, 
 adding in helper methods for extracting values from them.
 </summary>
</member>
<member name="F:DriveWorks.ReleaseParameterDataContainer.mParameters">
 This should be considered readonly after <see cref="M:DriveWorks.ReleaseParameterDataContainer.InitializeParameters(System.Collections.Generic.IEnumerable{DriveWorks.Components.Data.ReleasedParameterData})"/> has been called.
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.GetParameterValue(System.String)">
 <summary>
 Retrieves the value of the parameter with the given name.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <returns>This method returns null (Nothing in Visual Basic) if the parameter was not found.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValue(System.String,System.String@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValue(System.String,System.Boolean,System.String@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="failOnEmptyString">True if this method should return false if the value is found, but is an empty string.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValueAsBoolean(System.String,System.Boolean@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as a Boolean.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and it's value could successfully be converted to a Boolean.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValueAsDateTime(System.String,System.DateTime@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as a DateTime.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and it's value could successfully be converted to a DateTime.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValueAsInteger(System.String,System.Int32@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as an Integer.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and it's value could successfully be converted to a Integer.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValueAsDouble(System.String,System.Double@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as a Double.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <returns>True if the parameter was found and it's value could successfully be converted to a Double.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameter(System.String,DriveWorks.Components.Data.ReleasedParameterData@)">
 <summary>
 Attempts to get the parameter data that matches the specified name.
 </summary>
 <param name="name">The name of the parameter to get.</param>
 <param name="parameter">The parameter if it was found.</param>
 <returns>True if the parameter was found.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameter(System.String,System.Boolean,DriveWorks.Components.Data.ReleasedParameterData@)">
 <summary>
 Attempts to get the paramter data that matches the specified name.
 </summary>
 <param name="name">The name of the parameter to get.</param>
 <param name="excludeEmpty">True if an empty parameter value should be considered non-existent.</param>
 <param name="parameter">The parameter if it was found.</param>
 <returns>True if the parameter was found. If <paramref name="excludeEmpty" /> is True then returns whether the parameter was found and it's value was not empty.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValue``1(System.String,``0@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as <typeparamref name="T" />.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <typeparam name="T">The type to convert the released parameter value to.</typeparam>
 <returns>True if the parameter was found and it's value could successfully be converted to a <typeparamref name="T"/>.</returns>
</member>
<member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValue``1(System.String,System.Boolean,``0@)">
 <summary>
 Attempts to retrieve the value of the parameter with the given name as <typeparamref name="T" />.
 </summary>
 <param name="name">The name of the parameter whose calculated value to retrieve.</param>
 <param name="value">The calculated value of the parameter if the parameter was found.</param>
 <param name="failOnEmptyString">True if this method should return false if the value is found, but is an empty string before conversion.</param>
 <typeparam name="T">The type to convert the released parameter value to.</typeparam>
 <returns>True if the parameter was found and it's value could successfully be converted to a <typeparamref name="T"/>.</returns>
</member>
<member name="T:DriveWorks.ComponentTaskRuleEventArgs">
 <summary>
 The event data for events involving <see cref="T:DriveWorks.Components.Tasks.ComponentTaskRule"/>s.
 </summary>
</member>
<member name="P:DriveWorks.ComponentTaskRuleEventArgs.Rule">
 <summary>
 Gets the rule associated with the event.
 </summary>
</member>
<member name="T:DriveWorks.IComponentTaskScopeProvider">
 <summary>
 Represents a class that registers component task scopes in the engine.
 </summary>
</member>
<member name="T:DriveWorks.ProjectExtenderLoadException">
 <summary>
 The exception that gets raised when a <see cref="T:DriveWorks.Extensibility.ProjectExtender"/> or <see cref="T:DriveWorks.Extensibility.SharedProjectExtender"/> fails to load. 
 </summary>
</member>
<member name="P:DriveWorks.ProjectExtenderLoadException.ExtenderAssemblyPath">
 <summary>
 Gets the path to the extender that failed to load.
 </summary>
</member>
<member name="T:DriveWorks.FileCopyingEventArgs">
 <summary>
 Represents event date for file copying.
 </summary>
</member>
<member name="M:DriveWorks.FileCopyingEventArgs.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.FileCopyingEventArgs" /> class.
 </summary>
 <param name="sourcePath">The fully-qualified path to the source file.</param>
 <param name="targetPath">The fully-qualified destination path the file will be copied to.</param>
</member>
<member name="P:DriveWorks.FileCopyingEventArgs.FileCopied">
 <summary>
 Gets/sets whether the file has been copied or not.
 </summary>
 <remarks>If the value of this property is False after the event has been raised,
 DriveWorks will copy the file using standard procedures.</remarks>
</member>
<member name="P:DriveWorks.FileCopyingEventArgs.OverWrite">
 <summary>
 Gets whether the target file should be overwritten if it exists.
 </summary>
</member>
<member name="P:DriveWorks.FileCopyingEventArgs.TargetPath">
 <summary>
 Gets the path the source file should be copied to.
 </summary>
</member>
<member name="P:DriveWorks.FileCopyingEventArgs.SourcePath">
 <summary>
 Gets the path to the source file that should be copied.
 </summary>
</member>
<member name="T:DriveWorks.Extensibility.SharedProjectExtender">
 <summary>
 Provides support for extending all DriveWorks projects with additional functions.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.SharedProjectExtender.#ctor">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Extensibility.SharedProjectExtender" /> class.
 </summary>
</member>
<member name="P:DriveWorks.Extensibility.SharedProjectExtender.Project">
 <summary>
 Gets the Project which owns the extender.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.SharedProjectExtender.OnInitialize">
 <summary>
 Called by DriveWorks when the shared project extender has been initialized.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Extensibility.IExtension">
 <summary>
 Provides a marker interface which must be implemented by all types which 
 are obtainable from an extension library.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Extensibility.ExtensibilityAttribute">
 <summary>
 Provides a base class for all attributes applied to a extension library.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.ExtensibilityAttribute.#ctor">
 <summary>
 Initializes an instance of a class derived from <see cref="T:DriveWorks.Extensibility.ExtensibilityAttribute" />.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Extensibility.FrameworkLibraryAttribute">
 <summary>
 For internal use only. Marks an assembly as being part of the DriveWorks core framework.
 </summary>
 <remarks>
 <para>
 This attribute marks an assembly as being part of the DriveWorks core framework, it will only
 work when applied to assemblies signed with the DriveWorks private key.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Extensibility.FrameworkLibraryAttribute.IsFrameworkLibrary(System.Reflection.Assembly)">
 <summary>
 Tests the specified assembly to see whether it is a framework library.
 </summary>
 <param name="assembly">The assembly to test.</param>
 <returns>
 True if the specified assembly is marked with the <see cref="T:DriveWorks.Extensibility.FrameworkLibraryAttribute" /> and is 
 signed with the DriveWorks strong name key.
 </returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Extensibility.LibraryAttribute">
 <summary>
 Marks an assembly as being a DriveWorks extension library.
 </summary>
 <remarks>
 The publisher name is taken from the <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> which
 is generally defined in an AssemblyInfo.vb or AssemblyInfo.cs file and available from a project's
 properties.
 </remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Extensibility.LibraryAttribute" /> type using the assembly name as the invariant name.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Extensibility.LibraryAttribute" /> type.
 </summary>
 <param name="invariantName">The invariant name of the extension library.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Extensibility.LibraryAttribute" /> type.
 </summary>
 <param name="invariantName">The invariant name of the extension library.</param>
 <param name="displayName">Specifies the display name of the extension library.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Extensibility.LibraryAttribute" /> type.
 </summary>
 <param name="invariantName">The invariant name of the extension library.</param>
 <param name="displayName">Specifies the display name of the extension library.</param>
 <param name="description">Specifies a brief description of the extension library.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Extensibility.LibraryAttribute" /> type.
 </summary>
 <param name="invariantName">The invariant name of the extension library.</param>
 <param name="displayName">Specifies the display name of the extension library.</param>
 <param name="description">Specifies a brief description of the extension library.</param>
 <param name="publisherUrl">Specifies a URL which points to a web site for the extension library or publisher.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.GetInvariantName(System.Reflection.Assembly)">
 <summary>
 Gets the invariant name from an extension library.
 </summary>
 <param name="assembly">The assembly for which to get the extension library name.</param>
</member>
<member name="P:DriveWorks.Extensibility.LibraryAttribute.DisplayName">
 <summary>
 Gets the display name of the library.
 </summary>
</member>
<member name="P:DriveWorks.Extensibility.LibraryAttribute.Description">
 <summary>
 Gets a description of the library.
 </summary>
</member>
<member name="P:DriveWorks.Extensibility.LibraryAttribute.PublisherUrl">
 <summary>
 Gets a URL pointing to a web site for the library or publisher.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.GetAttribute(System.Reflection.Assembly)">
 <summary>
 Gets the <see cref="T:DriveWorks.Extensibility.LibraryAttribute" /> from the specified assembly.
 </summary>
 <param name="assembly">The assembly from which to retrieve the attribute.</param>
 <returns>An instance of the library attribute if it is applied to the specified assembly, otherwise a null reference (Nothing in Visual Basic).</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.GetAttribute(System.Reflection.Assembly,System.Boolean)">
 <summary>
 Gets the <see cref="T:DriveWorks.Extensibility.LibraryAttribute" /> from the specified assembly.
 </summary>
 <param name="assembly">The assembly from which to retrieve the attribute.</param>
 <param name="createIfNotDefined">Determines whether an attribute is synthesized for assemblies which do not define one.</param>
 <returns>An instance of the library attribute if it is applied to the specified assembly, otherwise a null reference (Nothing in Visual Basic).</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.GetQualifiedReference(System.Object)">
 <summary>
 Gets a qualified reference for the specified object's type.
 </summary>
 <param name="instance">An object whose type is defined in an extension library.</param>
 <returns>A qualified reference for the object's type.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.GetQualifiedReference(System.Type)">
 <summary>
 Gets a qualified reference for the specified type.
 </summary>
 <param name="type">A type defined in an extension library.</param>
 <returns>A qualified reference for the type.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.AreReferencesEqual(System.String,System.String)">
 <summary>
 Compares two qualified references for equality.
 </summary>
 <param name="reference1">The first reference to compare.</param>
 <param name="reference2">The second reference to compare.</param>
 <returns>True if the references are equivalent, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.LibraryAttribute.TryParseQualifiedReference(System.String,System.String@,System.String@,System.String@)">
 <summary>
 Attempts to parse a qualified reference.
 </summary>
 <param name="reference">The reference to parse.</param>
 <param name="namespaceName">The namespace of the referenced type, or an empty string if no namespace is present.</param>
 <param name="typeName">The unqualified name of the referenced type.</param>
 <param name="libraryName">The name of the library containing the referenced type.</param>
 <returns>True if the parse was successful, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Extensibility.UdfAttribute">
 <summary>
 Designates a method on a <see cref="T:DriveWorks.Extensibility.ProjectExtender" /> or a <see cref="T:DriveWorks.Extensibility.SharedProjectExtender"/> as a user defined function to be available in a design master.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.UdfAttribute.#ctor">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Extensibility.UdfAttribute"/> class.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.UdfAttribute.#ctor(System.Boolean)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Extensibility.UdfAttribute"/>.
 </summary>
 <param name="allowRunDuringLoad">Whether the UDF should be ran before we've started initializing 
 the design master, which will load project elements such as form controls, variables, etc (see Remarks).</param>
 <remarks>
 <para>Specifying <c>True</c> for the <paramref name="allowRunDuringLoad"/> parameter will cause DriveWorks to initialize the 
 function and make it available to rules before the project opens. Because the function is initialized before the project 
 has been fully loaded the function might not have access to any objects related to the project such as form controls, variables, etc when it is executed.
 This option is only recommended for functions that rely solely on the parameters passed to the function.
 </para>
 <para>If <paramref name="allowRunDuringLoad"/> is set to <c>False</c> (this is the default), the function will be initialized 
 after the project has been loaded and the function will have access to the entire DriveWorks API.</para>
 </remarks>
</member>
<member name="P:DriveWorks.Extensibility.UdfAttribute.AllowRunDuringLoad">
 <summary>
 Gets whether the UDF should be available before we start loading the project data, such as form controls, variables, etc.
 </summary>
</member>
<member name="T:DriveWorks.Extensibility.MacroAttribute">
 <summary>
 Designates a method on a <see cref="T:DriveWorks.Extensibility.ProjectExtender" /> as a macro.
 </summary>
</member>
<member name="T:DriveWorks.Extensibility.ProjectExtender">
 <summary>
 Provides support for extending a project.
 </summary>
 <example>
    <code lang="VB" title="Project Extender Example">
 <![CDATA[
 Imports DriveWorks
 Imports DriveWorks.Extensibility
 
 Public Class MyExtender
    Inherits ProjectExtender
 
    ' The UDF attribute lets DriveWorks know that this
    ' is a user defined function that can be called
    ' from a DriveWorks project (Excel projects do not support this feature).
    ' The valid types that can be taken/returned by a UDF are
    ' String
    ' Double
    ' DateTime
    ' Boolean
    ' Object - the value passed to an object typed parameter will always be
    ' one of the above, and the value returned by an object typed
    ' method must always be one of the above.
    <Udf()> _
    Public Function MyUdf(ByVal value1 As Double, ByVal value2 As Double) As Double
        Return value1 * value2
    End Function
 
    ' The macro attribute lets DriveWorks
    ' know that this is a macro that can
    ' be called from a macro button or by using
    ' the RunDesignMasterMacro specification flow
    ' task
    <Macro()> _
    Public Sub MyMacro()
        ' You can work with the project in this macro
        ' by accessing Me.Project
    End Sub
 End Class]]>
 </code>
 </example>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.#ctor">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Extensibility.ProjectExtender" /> class.
 </summary>
</member>
<member name="P:DriveWorks.Extensibility.ProjectExtender.Project">
 <summary>
 Gets the Project which owns the extender.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.OnInitialize">
 <summary>
 Called by DriveWorks when the Project Extender has been initialized.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.TryExecuteMacro(System.String,System.Object[])">
 <summary>
 Called by DriveWorks whenever a macro needs to be called, including built-in macro
 events such as DriveWorks_OnPostConstantDrive.
 </summary>
 <param name="name">The name of the macro being executed.</param>
 <param name="args">The arguments to the macro.</param>
 <returns>True if the macro is found and executed, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroPostFinish">
 <summary>
 Called by DriveWorks when the DriveWorks_OnPostFinish macro is executed.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroPreFinish">
 <summary>
 Called by DriveWorks when the DriveWorks_OnPreFinish macro is executed.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroRelease">
 <summary>
 Called by DriveWorks when the DriveWorks_OnReleaseFinish macro is executed.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroSpecificationStarted(DriveWorks.Specification.SpecificationType)">
 <summary>
 Called by DriveWorks when one of the DriveWorks_OnNew, DriveWorks_OnEdit, or DriveWorks_OnCopy macros is executed.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroSpecificationCancelled">
 <summary>
 Called by DriveWorks when the DriveWorks_OnCancelSpecification macro is executed.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroPostConstantDrive">
 <summary>
 Called by DriveWorks when the DriveWorks_OnPostConstantDrive macro is executed.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroDialogClick(System.String)">
 <summary>
 Called by DriveWorks when the DriveWorks_OnDialogClick macro is executed.
 </summary>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroDialogClicked(System.String)">
 <summary>
 Called by DriveWorks when the DriveWorks_OnDialogClicked macro is executed.
 </summary>
</member>
<member name="T:DriveWorks.Extensibility.ProjectExtenderManager">
 <summary>
 Provides support for managing a project extender in another application domain.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.ProjectExtenderManager.Load(DriveWorks.Project,System.String)">
 <summary>
 Loads the first extender from the specified assembly.
 </summary>
 <param name="project">The project for which the manager is being constructed.</param>
 <param name="assemblyPath">The full path to the assembly containing the extender.</param>
 <returns>A manager for the extender if it could be loaded, otherwise a null reference.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Extensibility.InvalidPluginAssemblyException">
 <summary>
 Raised when an attempt is made to perform an operation which can only be performed on a extension library.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.InvalidPluginAssemblyException.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Extensibility.InvalidPluginAssemblyException" /> type.
 </summary>
 <param name="message">The message which describes the exception.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.InvalidPluginAssemblyException.#ctor(System.String,System.Exception)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Extensibility.InvalidPluginAssemblyException" /> type.
 </summary>
 <param name="message">The message which describes the exception.</param>
 <param name="inner">The inner exception.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Extensibility.InvalidPluginAssemblyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Extensibility.InvalidPluginAssemblyException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Extensibility.ComponentTaskNotFoundException">
 <summary>
 Raised when an attempt is made to open a project that contains references to
 <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>s that are defined in an assembly that is not available.
 </summary>
</member>
<member name="P:DriveWorks.Extensibility.ComponentTaskNotFoundException.TaskType">
 <summary>
 Gets the full type name of the task that is missing.
 </summary>
 <returns></returns>
</member>
<member name="T:DriveWorks.Extensibility.ComponentTaskConditionNotFoundException">
 <summary>
 Raised when an attempt is made to open a project that contains references to a
 <see cref="T:DriveWorks.Components.Tasks.ComponentTaskCondition"/> or <see cref="T:DriveWorks.Components.Tasks.IComponentTaskCondition"/> that are defined in an assembly that is not available.
 </summary>
</member>
<member name="P:DriveWorks.Extensibility.ComponentTaskConditionNotFoundException.ConditionType">
 <summary>
 Gets the full type name of the condition that is missing.
 </summary>
 <returns></returns>
</member>
<member name="T:DriveWorks.PreviewExceptionEventArgs">
 <summary>
 Provides event data for events related to preview exceptions.
 </summary>
</member>
<member name="M:DriveWorks.PreviewExceptionEventArgs.#ctor(System.Exception)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.PreviewExceptionEventArgs" /> class.
 </summary>
 <param name="exception">The exception.</param>
</member>
<member name="P:DriveWorks.PreviewExceptionEventArgs.Exception">
 <summary>
 Gets the exception to which the event refers.
 </summary>
</member>
<member name="T:DriveWorks.Previewing.OnDemandPreviewAgentConnectionHandler">
 <summary>
 Provides a mechanism for reconnecting an On Demand 3D preview agent when Pro Server has been restarted.
 </summary>
</member>
<member name="T:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration">
 <summary>
 Provides editable properties for the database group connector.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.IdFieldName">
 <summary>
 Gets/set the name of the field that contains a unique identifier for each row.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.TableName">
 <summary>
 Gets/sets the name of the table that will be read from.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProcessFieldName">
 <summary>
 Gets/sets the name of the field that contains the process state information.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ToProcessValue">
 <summary>
 Gets/sets the value that indicates that a row is ready to be processed by this connector.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProcessingValue">
 <summary>
 Gets/sets the value that indicates that a row is being processed currently.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProcessSuccessValue">
 <summary>
 Gets/sets the value that indicates that a row has been successfully processed into a specification.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProcessFailedValue">
 <summary>
 Gets/sets the value that indicates that a row has failed to be processed into a specification.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProjectFieldName">
 <summary>
 Gets/sets the optional field name that will contain the name of the project to create specifications from.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProjectName">
 <summary>
 Gets/sets the name of the project to create specifications from if the project field could not be used.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.SpecificationNameFieldName">
 <summary>
 Gets/sets the optional field name that will contain the name of the specification to modify.
 </summary>
 <returns></returns>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.SpecificationName">
 <summary>
 Gets/sets the name of the specification to modify.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.SpecificationIdFieldName">
 <summary>
 Gets/sets the optional field name that will contain the id of the specification to modify.
 </summary>
 <returns></returns>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.SpecificationId">
 <summary>
 Gets/sets the id of the specification to modify.
 </summary>
 <returns></returns>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.TransitionFieldName">
 <summary>
 Gets/sets the name of the optional field that contains the name of the transition to invoke to close the specification.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.TransitionName">
 <summary>
 Gets/sets the name of the transition to invoke if transition field could not be used.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.OperationFieldName">
 <summary>
 Gets/sets the name of the optional field that contains the name of the operation to invoke.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.OperationName">
 <summary>
 Gets/sets the name of the operation to invoke.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.TimerInterval">
 <summary>
 Gets/sets the time between checks to the database for new data to process.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.DataSourceTypeName">
 <summary>
 Get/sets the name of the type that is responsible for configuring the data source for the connector.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.DataSourceElement">
 <summary>
 Gets/sets the data used for configuring the data source for the connector.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.Inputs">
 <summary>
 Gets the input bindings used in this configuration.
 </summary>
</member>
<member name="M:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ClearInputs">
 <summary>
 Removes all input bindings from this configuration.
 </summary>
</member>
<member name="M:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.AddInput(System.String,System.String)">
 <summary>
 Adds a new input bindings for this configuration.
 </summary>
 <param name="fieldName">The database field name to bind to.</param>
 <param name="inputName">The DriveWorks input name to bind to.</param>
</member>
<member name="T:DriveWorks.Connectors.Database.InputBinding">
 <summary>
 Provides information about a binding between a field in a table and an input in a DriveWorks project.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.InputBinding.FieldName">
 <summary>
 Gets/sets the name of a field in table.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.InputBinding.InputName">
 <summary>
 Gets/sets the name of an input in a DriveWorks project.
 </summary>
</member>
<member name="T:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration">
 <summary>
 Provides configuration options for ODBC data sources.
 </summary>
</member>
<member name="M:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.#ctor(System.Xml.Linq.XElement)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration"/> class.
 </summary>
 <param name="data">The XML to use for this configuration.</param>
 <remarks>The XML will be live edited as properties change in this configuration.</remarks>
</member>
<member name="P:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.DataSourceName">
 <summary>
 Get/sets the name of the data source to connect to.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.Username">
 <summary>
 Gets/sets user name to use to access the data source.
 </summary>
 <remarks>
 This can be left blank if no login credentials are required.
 </remarks>
</member>
<member name="P:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.Password">
 <summary>
 Gets/sets the password to use when accessing the data source.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.Data">
 <summary>
 Gets the backing data for the current configuration information.
 </summary>
</member>
<member name="T:DriveWorks.Connectors.Database.SqlDataSourceConfiguration">
 <summary>
 Provides configuration of options for a SQL data source.
 </summary>
</member>
<member name="M:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.#ctor(System.Xml.Linq.XElement)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Connectors.Database.SqlDataSourceConfiguration"/> class.
 </summary>
 <param name="data">The XML to use for this configuration.</param>
 <remarks>The XML will be live edited as properties change in this configuration.</remarks>
</member>
<member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.ServerAddress">
 <summary>
 Gets/sets the address of the server to connect to.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.DatabaseName">
 <summary>
 Gets/sets the name of the database to connect to on the server.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.Username">
 <summary>
 Gets/sets the username to use when connecting to the SQL server.
 </summary>
 <remarks>
 This is not used when using <see cref="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.IsTrustedConnection"/>.
 </remarks>
</member>
<member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.Password">
 <summary>
 Gets/sets the password to use when connecting to the SQL server.
 </summary>
 <remarks>
 This is not used when using <see cref="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.IsTrustedConnection"/>.
 </remarks>
</member>
<member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.IsTrustedConnection">
 <summary>
 Gets/sets whether or not to use Windows authentication when connecting to the SQL server.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.Data">
 <summary>
 Gets the backing data for this configuration.
 </summary>
</member>
<member name="T:DriveWorks.Connectors.Folder.FolderWatcherConfiguration">
 <summary>
 Provides editable properties for the folder watcher connector.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Folder.FolderWatcherConfiguration.SourceFolder">
 <summary>
 Get/sets the folder that will be scanned.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Folder.FolderWatcherConfiguration.SuccessFolder">
 <summary>
 Gets/sets where files that are have been scanned and successfully used will be moved into.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Folder.FolderWatcherConfiguration.FailedFolder">
 <summary>
 Gets/sets where files that are have been scanned and unsuccessfully used/rejected will be moved into.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Folder.FolderWatcherConfiguration.TimerInterval">
 <summary>
 Gets/sets the time in seconds for the period of time to wait between scans of the source folder.
 </summary>
</member>
<member name="T:DriveWorks.Connectors.Http.HttpConnectorConfiguration">
 <summary>
 Collection of settings for the HTTP connector.
 </summary>
</member>
<member name="P:DriveWorks.Connectors.Http.HttpConnectorConfiguration.ListenUri">
 <summary>
 The address to use for listening to specification requests.
 </summary>
</member>
<member name="T:DriveWorks.GroupConnectorInformation">
 <summary>
 Provides a base for group connector configuration.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectorInformation.OnInitialized">
 <summary>
 Called when basic information and data has been updated or set.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectorInformation.Id">
 <summary>
 Gets the identifier value for the connector.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectorInformation.Name">
 <summary>
 Gets/sets the unique name for the connector.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectorInformation.EnabledMachineNames">
 <summary>
 Get/sets A pipe bar delimited list of machine names that have the connector enabled.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectorInformation.Data">
 <summary>
 Gets/sets Value used by connector containing configuration information.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectorInformation.EnsureDataStored">
 <summary>
 Called to stores all current information to the <see cref="P:DriveWorks.GroupConnectorInformation.Data"/> property.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectorInformation.GetClone">
 <summary>
 Creates a cloned version of this object.
 </summary>
</member>
<member name="T:DriveWorks.GroupConnectorDetails">
 <summary>
 Provides information about a group connector.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectorDetails.#ctor(System.Guid,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a new instance of <see cref="T:DriveWorks.GroupConnectorDetails"/>.
 </summary>
 <param name="id">The identifier value for the connector.</param>
 <param name="name">The unique name for the connector.</param>
 <param name="dataTypeName">The type name for the connector data class for the connector.</param>
 <param name="enabledMachineNames">A pipe bar delimited list of machine names that have the connector enabled.</param>
 <param name="data">Value used by connector containing configuration information.</param>
</member>
<member name="P:DriveWorks.GroupConnectorDetails.Id">
 <summary>
 Gets the identifier value for the connector.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectorDetails.Name">
 <summary>
 Gets/sets the unique name for the connector.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectorDetails.DataTypeName">
 <summary>
 Gets the type name for the registration class for the connector.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectorDetails.EnabledMachineNames">
 <summary>
 Get/sets A pipe bar delimited list of machine names that have the connector enabled.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectorDetails.Data">
 <summary>
 Gets/sets Value used by connector containing configuration information.
 </summary>
</member>
<member name="T:DriveWorks.GroupConnectors">
 <summary>
 Provides access and management for a collection of group connectors.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectors.AddConnector(System.String,System.Type)">
 <summary>
 Adds a connector of the specified type to the group.
 </summary>
 <param name="name">The name to give the new connector.</param>
 <param name="connectorDataType">The type of the connector's data storage class.</param>
 <returns>The created connector.</returns>
</member>
<member name="M:DriveWorks.GroupConnectors.TryGetConnector(System.String,DriveWorks.GroupConnectorInformation@)">
 <summary>
 Attempts to find a connector with the specified name.
 </summary>
 <param name="connectorName">The name of the connector to find.</param>
 <param name="connector">Reference to set to the found connector, if it's found.</param>
 <returns>True if the connector was found.</returns>
</member>
<member name="M:DriveWorks.GroupConnectors.Remove(DriveWorks.GroupConnectorInformation)">
 <summary>
 Removes the specified connector from the group.
 </summary>
 <param name="connector">The connector to remove.</param>
 <returns>True if the specified connector was removed.</returns>
</member>
<member name="M:DriveWorks.GroupConnectors.Store(DriveWorks.GroupConnectorInformation)">
 <summary>
 Adds or updates the specified details to the group.
 </summary>
 <param name="connector">The details to update.</param>
 <remarks>
 This will also perform name validation to ensure that the name of the connector is distinct.
 </remarks>
</member>
<member name="M:DriveWorks.GroupConnectors.Store(DriveWorks.GroupConnectorInformation,System.Boolean)">
 <summary>
 Adds or updates the specified details to the group, optionally updating an existing connector of the same name as the provided.
 </summary>
 <param name="connector">The details to update.</param>
 <param name="ignoreIdMismatch">Decides whether or not existing connectors with the same name as the provided are updated.</param>
</member>
<member name="M:DriveWorks.GroupConnectors.GetConnectors">
 <summary>
 Gets all connectors within the group.
 </summary>
</member>
<member name="T:DriveWorks.GeneralGroupSettings">
 <summary>
 Provides access to general group level settings.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.GeneralGroupSettings.ShowDisplayFilesGroupSettingChanged">
 <summary>
 Raised when the <see cref="E:DriveWorks.Group.SettingChanged" /> event has been fired for the Show Display Files setting.
 </summary>
</member>
<member name="E:DriveWorks.GeneralGroupSettings.ReleaseToAutopilotGroupSettingChanged">
 <summary>
 Raised when the <see cref="E:DriveWorks.Group.SettingChanged" /> event has been fired for the Release To Autopilot setting.
 </summary>
</member>
<member name="E:DriveWorks.GeneralGroupSettings.DocumentGenerationBehaviorGroupSettingChanged">
 <summary>
 Raised when the <see cref="E:DriveWorks.Group.SettingChanged" /> event has been fired for the Document Generation Behavior setting.
 </summary>
</member>
<member name="E:DriveWorks.GeneralGroupSettings.HideReportsFromNonAdminsGroupSettingChanged">
 <summary>
 Raised when the <see cref="E:DriveWorks.Group.SettingChanged" /> event has been fired for the Hide Reports from Non-Administrators setting.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GeneralGroupSettings.#ctor(DriveWorks.Group)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GeneralGroupSettings"/> class.
 </summary>
 <param name="group">The group whose settings will be accessed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.GeneralGroupSettings.ShowDisplayFiles">
 <summary>
 Gets/sets whether or not to hide hidden documents.
 </summary>
</member>
<member name="P:DriveWorks.GeneralGroupSettings.ReleaseToAutoPilot">
 <summary>
 Get/sets whether specifications will be released to Autopilot.
 </summary>
</member>
<member name="P:DriveWorks.GeneralGroupSettings.DocumentGenerationBehavior">
 <summary>
 Gets/sets when documents will be generated.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>Possible values are:
 Finish
 Release 
 Both
 </remarks>
</member>
<member name="P:DriveWorks.GeneralGroupSettings.HideReportsFromNonAdmins">
 <summary>
 Gets/sets whether reports should be hidden from non-adminstrators.
 </summary>
 <remarks>If this is accessed by a non-administrator then an <see cref="T:System.UnauthorizedAccessException"/> will be thrown.</remarks>
</member>
<member name="M:DriveWorks.GeneralGroupSettings.GetDocumentGenerationBehaviourOptions">
 <summary>
 Gets the available options for document generation.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.Handlers.OnDemandPreviewHandler">
 <summary>
 Handles requests for On Demand 3D previews.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.Messaging.Handlers.OnDemandPreviewHandler.Agents">
 <summary>
 Gets all registered agents that can perform an on demand preview.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.Messaging.Handlers.OnDemandPreviewHandler.PreviewingAgents">
 <summary>
 Gets the agents currently processing an on demand preview.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Messaging.Handlers.OnDemandPreviewHandler.Handle(DriveWorks.Internal.Group.Messaging.Messages.SubscribeOnDemandPreviewAgentMessage)">
 <summary>
 Handles <see cref="T:DriveWorks.Internal.Group.Messaging.Messages.SubscribeOnDemandPreviewAgentMessage"/> messages.
 </summary>
 <param name="message">The subscribe message.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Messaging.Handlers.OnDemandPreviewHandler.Handle(DriveWorks.Internal.Group.Messaging.Messages.UnsubscribeOnDemandPreviewAgentMessage)">
 <summary>
 Handles <see cref="T:DriveWorks.Internal.Group.Messaging.Messages.UnsubscribeOnDemandPreviewAgentMessage"/> messages.
 </summary>
 <param name="message">The unsubscribe message.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Messaging.Handlers.OnDemandPreviewHandler.HandleAsync(DriveWorks.Internal.Group.Messaging.Messages.OnDemandPreviewRequestMessage)">
 <summary>
 Handles asynchronous <see cref="T:DriveWorks.Internal.Group.Messaging.Messages.OnDemandPreviewRequestMessage"/> messages.
 </summary>
 <param name="message">The message for requesting an On Demand preview asynchronously.</param>
 <returns>The result from the 3d preview.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Messaging.Handlers.OnDemandPreviewHandler.Handle(DriveWorks.Internal.Group.Messaging.Messages.OnDemandPreviewRequestMessage)">
 <summary>
 Handles <see cref="T:DriveWorks.Internal.Group.Messaging.Messages.OnDemandPreviewRequestMessage"/> messages.
 </summary>
 <param name="message">The message for requesting an On Demand preview.</param>
 <returns>The result from the 3d preview.</returns>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.Messages.QueuedPreviewComponentFailedToGenerateMessage">
 <summary>
 A message for notifying queued preview handlers when a component within the model to preview has failed
 to generate.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.Messages.QueuedPreviewPreviewFailedMessage">
 <summary>
 A message for notifying queued preview handlers that the queued preview has failed for a known reason. 
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.Messages.SubscribeQueuedPreviewAgentMessage">
 <summary>
 A message for subscribing a session (connection to the group) that will be responsible for creating Queued previews.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.Messages.UnsubscribeOnDemandPreviewAgentMessage">
 <summary>
 A message for unsubscribing a session (connection to the group) that was responsible for creating On Demand previews.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.Messages.MessageBase">
 <summary>
 Base class for all messages that can be sent to the group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Messaging.Messages.MessageBase.GetDerivedTypes">
 <summary>
 This is a neat way to avoid declaring every known derived type of this class on the WCF group contract.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.Messages.SubscribeOnDemandPreviewAgentMessage">
 <summary>
 A message for subscribing a session (connection to the group) that will be responsible for creating On Demand previews.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.HandlerBase">
 <summary>
 A base class for all message handlers to implement. 
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.HandleMethodFactory">
 <summary>
 Responsible for the creation of the Handle methods needed for handling group messages.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Messaging.MessageDispatcher">
 <summary>
 Dispatches messages to the appropriate objects that are registered to handle them.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.ReleasedComponentDetailsGroupResultEnumerator">
 <summary>
 Provides a group enumerator for component details that ensures the same component
 does not get returned twice.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.ConnectionUsage">
 <summary>
 Provides hints about how a connection will be used.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.DataAccess.ConnectionUsage.Commands">
 <summary>
 Indicates that a connection will be used for immediate command execution. This hint
 means that the connection is likely to be disposed once the command has finished executing.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.DataAccess.ConnectionUsage.Enumeration">
 <summary>
 Indicates that a connection will be used for enumeration. This hint means that 
 the connection will not be automatically disposed at the end of an operation and the caller
 is responsible for disposing it when it is done.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.ICommonDataPlatform">
 <summary>
 Provides a contract for common data access.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.ICommonDataPlatform.Execute(System.Action{System.Data.IDbConnection})">
 <summary>
 Executes one or more commands against a connection.
 </summary>
 <param name="command">The command(s) to execute.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.ICommonDataPlatform.Execute(System.Action{System.Data.IDbConnection},DriveWorks.Internal.Group.DataAccess.ConnectionUsage)">
 <summary>
 Executes one or more commands against a connection.
 </summary>
 <param name="command">The command(s) to execute.</param>
 <param name="connectionUsage">Provides a hint as to how the connection will be used, i.e. for immediate execution or a long running enumeration.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.ICommonDataPlatform.Execute``1(System.Func{System.Data.IDbConnection,``0})">
 <summary>
 Executes one or more commands against a connection and returns the result.
 </summary>
 <typeparam name="TResult">The type of the response returned by the query.</typeparam>
 <param name="query">The query to execute.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.ICommonDataPlatform.Execute``1(System.Func{System.Data.IDbConnection,``0},DriveWorks.Internal.Group.DataAccess.ConnectionUsage)">
 <summary>
 Executes one or more commands against a connection and returns the result.
 </summary>
 <typeparam name="TResult">The type of the response returned by the query.</typeparam>
 <param name="query">The query to execute.</param>
 <param name="connectionUsage">Provides a hint as to how the connection will be used, i.e. for immediate execution or a long running enumeration.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.ICommonDataPlatform.CreateResultEnumerator``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.Data.IDataReader,``0},System.Data.IsolationLevel)">
 <summary>
 Creates a group result enumerator.
 </summary>
 <typeparam name="TResult">The type of the result.</typeparam>
 <param name="countQuery">The query which calculates the estimated number of result rows.</param>
 <param name="selectQuery">The query which returns the result rows.</param>
 <param name="params">Any parameters to the count/select queries.</param>
 <param name="loader">A function which loads a result from a row.</param>
 <param name="isolationLevel">The isolation level to use.</param>
 <returns>An enumerator.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.ICommonDataPlatform.CreateResultEnumerator``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.Data.IDataReader,``0})">
 <summary>
 Creates a group result enumerator.
 </summary>
 <typeparam name="TResult">The type of the result.</typeparam>
 <param name="countQuery">The query which calculates the estimated number of result rows.</param>
 <param name="selectQuery">The query which returns the result rows.</param>
 <param name="params">Any parameters to the count/select queries.</param>
 <param name="loader">A function which loads a result from a row.</param>
 <returns>An enumerator.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.ICommonDataPlatform.IsDisposable(System.Data.IDbConnection)">
 <summary>
 Determines whether the passed-in connection may be disposed by the caller, i.e. it isn't managed by the data platform.
 </summary>
 <param name="connection">The connection to check.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.CommonDataPlatform`2">
 <summary>
 Provides a base class for common data access objects.
 </summary>
 <typeparam name="TConnection">The type of connection.</typeparam>
 <typeparam name="TCommand">The type of command.</typeparam>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.CommonDataServiceBase">
 <summary>
 Provides functionality common to both local and remote group data services. 
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.DataAccess.CommonDataServiceBase.DataPlatform">
 <summary>
 Gets the data platform.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.CommonDataServiceBase.DeleteReportsCore(System.Data.IDbConnection,System.Data.IDbTransaction,System.String)">
 <remarks>
 This method takes in a report id query as we generally want to delete MANY report ids.
 This can be VERY slow for SQL to handle if we add them as params or execute multiple times.
 </remarks>
</member>
<member name="F:DriveWorks.Internal.Group.DataAccess.CommonGenerationState.mSynchronizationObject">
 <summary>
 Used to synchronize with other release-data tasks
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.DataAccess.CommonGenerationState.mInProgress">
 <summary>
 Contains a set of all components which have been allocated already to prevent
 allocating them to more than one agent.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.DataAccess.CommonGenerationState.mLeafEnumeratorsByClient">
 <summary>
 Stores the enumerators for each client, that will enumerate over all of the leaves in all of the groups
 returned by our algorithm. Stores the Ids of the components the enumerator contains for easy lookup.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.CommonGenerationState.GetNextComponent(System.Int32,DriveWorks.JobRequestTagInformation,DriveWorks.JobClientDetails)">
 <summary>
 Gets the next component to generate.
 </summary>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.CommonGenerationState.Refresh">
 <summary>
 Reanalyze the group to determine which components need generating.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.DataAccess.CommonGenerationState.NestedLookaheadEnumerator`1.IsInnerLast">
 <summary>
 Determines whether the current item in the nested 
 enumerator is the last in the nested enumerator.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.DataAccess.CommonGenerationState.LookaheadEnumerator`1.IsLast">
 <summary>
 Determines whether the current item is the last item in the enumerator.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.DataAccess.CommonReleaseDataAccess.OrderComponentsByLastEdited">
 <summary>
 Determines whether we should generate components in the order of their spec's last edited date (legacy) or
 by the components released date.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.CommonResultEnumerator`1">
 <summary>
 Provides support for iterating over a database result set.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.CommonSecurity">
 <summary>
 Provides core security routines.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.DataExtensions">
 <summary>
 Provides extension methods for working with databases.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.SqlCe.LocalGroupAgentRegistration">
 <summary>
 Implements the <see cref="T:DriveWorks.Generation.IAgentRegistration" /> interface for local groups.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.DataAccess.SqlCe.LocalGroupConnection">
 <summary>
 Provides a connection to a DriveWorks Engineer group. 
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.SqlCe.LocalGroupConnection.GetSpecificationPoolLockObject">
 <summary>
 Gets access to an object which can be used to synchronize access to specification pools in the group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.SqlCe.LocalGroupConnection.GetGroupTableLockObject">
 <summary>
 Gets access to an object which can be used to synchronize access to group tables in this group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.SqlCe.LocalGroupConnection.GetReleasedComponentEnumerator(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 A specific query has been written for local groups because it does not support nested queries
 We therefore have to use a much less efficient query that also return duplicates which means we have to filter them out in memory which drastically slows down
 this method call (Shared Groups use the quicker query and therefore does not suffer from the same problem).
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.SqlCe.LocalGroupSharedResource.#ctor(DriveWorks.Internal.Group.DataAccess.SqlCe.LocalGroupConnection,System.String)">
 <summary>
 Opens a shared resource for the specified group.
 </summary>
 <param name="groupConnection">The connection for which to open the shared resource.</param>
 <param name="groupPath">The path to the group file for which to open the shared resource.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.Sql.SqlGroupConnection.GetReleasedComponentEnumerator(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 A specific query has been written for SQL Server because it supports nested queries.
 SQL Compact (Local Groups) do not. Local groups therefore use a less efficient query
 that also return duplicates which means we have to filter them out in memory which drastically slows down
 this method call for local groups. Shared Groups use the quicker query and therefore does not suffer from the same problem.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.Sql.SqlGroupConnection.GetReleaseDataLockObject">
 <summary>
 Gets access to an object which can be used to synchronize access to release data in the group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.Sql.SqlGroupConnection.GetSpecificationPoolLockObject">
 <summary>
 Gets access to an object which can be used to synchronize access to specification pools in the group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DataAccess.Sql.SqlGroupConnection.GetGroupTableLockObject">
 <summary>
 Gets access to an object which can be used to synchronize access to group tables for this group.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.IGroupConnection">
 <summary>
 When overridden by a derived type, provides access to the services provided by a remote group.
 </summary>
</member>
<member name="E:DriveWorks.Internal.Group.IGroupConnection.ConnectionStateChanged">
 <summary>
 The event raised when the group connection's state has changed.
 </summary>
</member>
<member name="E:DriveWorks.Internal.Group.IGroupConnection.AgentNotificationReceived">
 <summary>
 The event raised when a notification is received from a remote session.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Internal.Group.IGroupConnection.AgentRequestReceived">
 <summary>
 The event raised when a request is received from a remote session.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Internal.Group.IGroupConnection.GroupTableDetailsUpdated">
 <summary>
 Raised when a group table's details change.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Internal.Group.IGroupConnection.GroupTableDataUpdated">
 <summary>
 Raised when a group table's data changes.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.Connect(DriveWorks.Internal.Group.SessionDetails,System.Collections.Generic.IDictionary{System.String,System.String},DriveWorks.Security.IProviderCredentials)">
 <summary>
 Connects to the group identified by the given connection string using the given credentials.
 </summary>
 <param name="sessionDetails">Information about the machine and application that has connected to the group.</param>
 <param name="connectionParameters">The connection parameters which identify the group to open.</param>
 <param name="credentials">The credentials for a security principal with access to the group.</param>
</member>
<member name="P:DriveWorks.Internal.Group.IGroupConnection.IsSoloGroup">
 <summary>
 Determines if the group was opened with Solo support.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.IGroupConnection.GroupName">
 <summary>
 Gets the name of the group to which the connection is connected.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.IGroupConnection.User">
 <summary>
 Gets the details of the user whose credentials were used to log on.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.IGroupConnection.UserTeams">
 <summary>
 Gets the teams to which the user belongs.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.IGroupConnection.UserIsAllowedCapture">
 <summary>
 Gets whether the user belongs to at least one team which has capture permissions
 assigned.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Internal.Group.IGroupConnection.CanEditAllSpecifications">
 <summary>
 Gets whether members of the group can edit and view all of the specifications in the group.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Internal.Group.IGroupConnection.CanEditGroupSecurity">
 <summary>
 Gets whether members of the group can edit the security details of the group.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetUserProjects(System.Guid)">
 <summary>
 Gets the projects on which the authenticated user has the given permission.
 </summary>
 <param name="permissionId">The permission to check for, generally one of the values from <see cref="T:DriveWorks.Security.StandardProjectPermissions" />.</param>
 <returns>An array of project details for each project the authenticated user has the given permission on.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RefreshSecurity">
 <summary>
 Refreshes cached security information.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Internal.Group.IGroupConnection.ClientDetails">
 <summary>
 Gets the client details for the connection.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.IGroupConnection.SessionDetails">
 <summary>
 Gets the session details for this connection to the group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RegisterGenerationAgent(System.String)">
 <summary>
 Registers a new generation agent.
 </summary>
 <param name="agentName">The name of the agent to register.</param>
 <returns>The agent registration.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetAgents">
 <summary>
 Gets a list of generated agents.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetAgentLog(System.String)">
 <summary>
 Gets the agent message log of an agent.
 </summary>
 <param name="agentName">The name of the agent whose message log is to be returned.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.AddAgentLogEntry(System.String,System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Adds an agent log entry.
 </summary>
 <param name="agentName">The name of the agent who the log entry originates from.</param>
 <param name="dateAndTime">The date and time of the event.</param>
 <param name="sourceDisplayName">The display name of the source of the event.</param>
 <param name="targetDisplayName">The display name of the target of the event.</param>
 <param name="description">The description of the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SendAgentNotification(System.String,System.Byte[])">
 <summary>
 Attempts to send a notification message to the specified agent.
 </summary>
 <param name="agentName">Name of the agent to send the message to</param>
 <param name="data">The serialized notification to send to the specified agent.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SendAgentRequest(System.String,System.Byte[])">
 <summary>
 Attempts to send a request message to the specified agent. Then waits for a reply and returns that result.
 </summary>
 <param name="agentName">The name of the agent to send the request message to.</param>
 <param name="data">The serialized request to send to the specified agent.</param>
 <returns>The specified reply from the specified agent.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SendHeartbeat">
 <summary>
 Lets the group connection know the connected client is still active.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RegisterJobQueue(System.String)">
 <summary>
 Registers a queue to handle jobs of the specified type.
 </summary>
 <param name="jobType">The type of job that the queue will process.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetNextJob(System.String,DriveWorks.JobRequestTagInformation)">
 <summary>
 Gets the next job of the specified type in the queue.
 </summary>
 <param name="jobType">The type of job to retrieve.</param>
 <param name="tagInformation">The tag information for the job request.</param>
 <returns>The serialized next job to process.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SetJobFailed(System.String,System.String)">
 <summary>
 Flags the job as having failed to be processed by the client.
 </summary>
 <param name="jobType">The type of job that failed to be processed.</param>
 <param name="jobId">The Id of the item that failed to be processed.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.CompleteJob(System.String,System.String)">
 <summary>
 Flags the job as having being completed by the client.
 </summary>
 <param name="jobType">The type of the job that was completed.</param>
 <param name="jobId">The Id of the item that was completed.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetAllJobs(System.String)">
 <summary>
 Gets all pending and currently in progress jobs that the current user has access to, for the specified job type.
 </summary>
 <param name="jobType">The type of jobs to retrieve.</param>
 <returns>All pending and currently in progress jobs for the specified job type.</returns>
 <remarks>This will take into account the connected user.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SendMessage(DriveWorks.Internal.Group.Messaging.Messages.MessageBase)">
 <summary>
 Sends a message, that does not require a response, to the group for processing
 </summary>
 <param name="message">The message that needs to be processed.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SendRequest(DriveWorks.Internal.Group.Messaging.Messages.MessageBase)">
 <summary>
 Sends a message, that requires a response, to the group for processing.
 </summary>
 <param name="message">The message to be processed.</param>
 <returns>The response to the message as an array of bytes.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SendAsyncRequest(DriveWorks.Internal.Group.Messaging.Messages.MessageBase)">
 <summary>
 Sends a message, that requires a response, asynchronously to the group for processing.
 </summary>
 <param name="message">The message to be processed.</param>
 <returns>A task containing the result of the message, as an array of bytes.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetTeams">
 <summary>
 Gets all of the teams registered in the group.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetTeamByName(System.String)">
 <summary>
 Gets the team with the specified name from the group.
 </summary>
 <param name="teamName">The name of the team.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetTeamById(System.Guid)">
 <summary>
 Gets the team with the specified identifier from the group.
 </summary>
 <param name="teamId">The unique identifier of the team to retrieve.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.CreateTeam(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a new team.
 </summary>
 <param name="teamId">The unique identifier of the new team.</param>
 <param name="providerName">The name of the provider to which the team belongs.</param>
 <param name="teamName">The unique name of the team.</param>
 <param name="displayName">The display name of the team.</param>
 <param name="isAllowedCapture">Governs whether the team is allowed to add and edit capture information in the group.</param>
 <param name="canEditAllSpecificatons">Governs whether the team's memembers are allowed to view and edit all specifications in the group.</param>
 <param name="editGroupSecurity">Governs whether the team's memembers are allowed to edit the group's security details.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateTeamByName(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
 <summary>
 Updates the details for the team with the specified name.
 </summary>
 <param name="teamName">The name of the team to update.</param>
 <param name="displayName">The display name of the team to update.</param>
 <param name="isAllowedCapture">A value governing whether captured information can be added and edited by the the group, or a null reference to make no change.</param>
 <param name="canEditAllSpecifications">A value governing whether the team's memembers can edit all specifications int the group.</param>
 <param name="editGroupSecurity">A value governing whether the team's memembers can edit all group security details.</param>
 <returns>True if the team existed and was updated.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateTeamById(System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
 <summary>
 Updates the details for the team.
 </summary>
 <param name="teamId">The unique identifier of the team to update.</param>
 <param name="displayName">The display name of the team, or a null reference to make no change.</param>
 <param name="isAllowedCapture">A value governing whether captured information can be added and edited by the the group, or a null reference to make no change.</param>
 <param name="canEditAllSpecifications">A value governing whether the team's memembers can edit all specifications int the group.</param>
 <param name="editGroupSecurity">A value governing whether the team's memembers can edit all group security details.</param>
 <returns>True if the team existed and was updated.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteTeamById(System.Guid)">
 <summary>
 Deletes a team.
 </summary>
 <param name="teamId">The unique identifier of the team to delete.</param>
 <returns>True if the team existed and was deleted.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteTeamByName(System.String)">
 <summary>
 Deletes a team.
 </summary>
 <param name="teamName">The name of the team to delete.</param>
 <returns>True if the team existed and was deleted.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetUsers">
 <summary>
 Gets all users in the group.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetUserById(System.Guid)">
 <summary>
 Gets a user from the group.
 </summary>
 <param name="userId">The unique identifier of the group to get.</param>
 <returns>The details for the specified user if it exists, otherwise a null reference.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetUserByName(System.String)">
 <summary>
 Gets a user from the group.
 </summary>
 <param name="loginName">The login name of the team to retrieve.</param>
 <returns>The details for the specified user if it exists, otherwise a null reference.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.CreateUser(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
 <summary>
 Creates a new user.
 </summary>
 <param name="userId">The unique identifier of the new user.</param>
 <param name="providerName">The name of the provider to which the user belongs.</param>
 <param name="loginName">The login name of the user.</param>
 <param name="loginToken">The provider-specific token used to authenticate the user.</param>
 <param name="isEnabled">Governs whether the user is enabled, and thus can log in to the system.</param>
 <param name="isTeamLeader">Governs whether the user has team leader privileges within the teams to which the user belongs.</param>
 <param name="displayName">The display name of the user.</param>
 <param name="emailAddress">The email address of the user.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateUserById(System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)">
 <summary>
 Updates an existing user.
 </summary>
 <param name="userId">The unique identifier of the user to update.</param>
 <param name="principalToken">The provider-specific token used to authenticate the user, or a null reference to make no change.</param>
 <param name="isEnabled">A value governing whether the user can log in, or a null reference to make no change.</param>
 <param name="isTeamLeader">A value governing whether the user has team leader privileges within the teams to which the user belongs, or a null reference to make no change.</param>
 <param name="displayName">The display name of the user, or a null reference to make no change.</param>
 <param name="emailAddress">The email address of the user, or a null reference to make no change.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateUserByName(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)">
 <summary>
 Updates an existing user.
 </summary>
 <param name="loginName">The login name of the user to update.</param>
 <param name="principalToken">The provider-specific token used to authenticate the user, or a null reference to make no change.</param>
 <param name="isEnabled">A value governing whether the user can log in, or a null reference to make no change.</param>
 <param name="isTeamLeader">A value governing whether the user has team leader privileges within the teams to which the user belongs, or a null reference to make no change.</param>
 <param name="displayName">The display name of the user, or a null reference to make no change.</param>
 <param name="emailAddress">The email address of the user, or a null reference to make no change.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteUserById(System.Guid)">
 <summary>
 Deletes a user.
 </summary>
 <param name="userId">The unique identifier of the user to delete.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteUserByName(System.String)">
 <summary>
 Deletes a user.
 </summary>
 <param name="loginName">The login name of the user to update.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetUsersInTeamById(System.Guid)">
 <summary>
 Gets all the users in the given team.
 </summary>
 <param name="teamId">The unique identifier of the team for which to get member-users.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetUsersInTeamByName(System.String)">
 <summary>
 Gets all the users in the given team.
 </summary>
 <param name="teamName">The name of the team for which to get member-users.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.AddUserToTeamById(System.Guid,System.Guid)">
 <summary>
 Adds a user to the membership list of the given team.
 </summary>
 <param name="teamId">The unique identifier of the team to which the user will be added.</param>
 <param name="userId">The unique identifier of the user to add to the membership list of the given team.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.AddUserToTeamByName(System.String,System.String)">
 <summary>
 Adds a user to the membership list of the given team.
 </summary>
 <param name="teamName">The name of the team to which the user will be added.</param>
 <param name="loginName">The login name of the user to add to the membership list of the given team.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RemoveUserFromTeamById(System.Guid,System.Guid)">
 <summary>
 Removes a user from the membership of the given team.
 </summary>
 <param name="teamId">The unique identifier of the team from which the user will be removed.</param>
 <param name="userId">The unique identifier of the user to remove from the membership list of the given team.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RemoveUserFromTeamByName(System.String,System.String)">
 <summary>
 Removes a user from the membership of the given team.
 </summary>
 <param name="teamName">The name of the team from which the user will be removed.</param>
 <param name="loginName">The login name of the user to remove from the membership list of the given team.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetTeamsForUserById(System.Guid)">
 <summary>
 Gets the teams to which the specified user belongs.
 </summary>
 <param name="userId">The unique identifier of the user.</param>
 <returns>An array of teams to which the specified user belongs.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetProjectPermissionsForTeamById(System.Guid)">
 <summary>
 Gets all the project permission entries for the specified team.
 </summary>
 <param name="teamId">The unique identifier of the team for which to get permission entries.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetProjectPermissionsForTeamByName(System.String)">
 <summary>
 Gets all the project permission entries for the specified team.
 </summary>
 <param name="teamName">The name of the team for which to get permission entries.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.AddProjectPermissionToTeamById(System.Guid,System.Guid,System.Guid)">
 <summary>
 Adds a project permission entry to a team.
 </summary>
 <param name="teamId">The unique identifier of the team to which to add the permission.</param>
 <param name="projectId">The unique identifier of the project for which to add the permission.</param>
 <param name="permissionId">The unique identifier of the permission to add.</param>
 <returns>True if the permission was added, false if either the team or project did not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.AddProjectPermissionToTeamByName(System.String,System.String,System.Guid)">
 <summary>
 Adds a project permission entry to a team.
 </summary>
 <param name="teamName">The name of the team to which to add the permission.</param>
 <param name="projectName">The name of the project for which to add the permission.</param>
 <param name="permissionId">The unique identifier of the permission to add.</param>
 <returns>True if the permission was added, false if either the team or project did not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RemoveProjectPermissionFromTeamById(System.Guid,System.Guid,System.Guid)">
 <summary>
 Removes a project permission entry from a team.
 </summary>
 <param name="teamId">The unique identifier of the team from which to remove the permission.</param>
 <param name="projectId">The unique identifier of the project for which to remove the permission.</param>
 <param name="permissionId">The unique identifier of the permission to remove.</param>
 <returns>True if the permission was removed, false if the permission did not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RemoveProjectPermissionFromTeamByName(System.String,System.String,System.Guid)">
 <summary>
 Removes a project permission entry from a team.
 </summary>
 <param name="teamName">The name of the team from which to remove the permission.</param>
 <param name="projectName">The name of the project for which to remove the permission.</param>
 <param name="permissionId">The unique identifier of the permission to remove.</param>
 <returns>True if the permission was removed, false if the permission did not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ClearProjectPermissionFromTeamById(System.Guid)">
 <summary>
 Clears the list of project permissions for the given team.
 </summary>
 <param name="teamId">The unique identifier of the team whose project permission list should be cleared.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ClearProjectPermissionFromTeamByName(System.String)">
 <summary>
 Clears the list of project permissions for the given team.
 </summary>
 <param name="teamName">The name of the team whose project permission list should be cleared.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetAvailableProjectsForUserByName(System.String,System.Guid)">
 <summary>
 Gets the projects which are accessible to the specified user.
 </summary>
 <param name="loginName">The login name of the user.</param>
 <param name="permissionId">The permission the user needs to hold for the projects.</param>
 <returns>The projects which the user has the specified permission for.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetTeamGroupDataTablePermissionsForTeam(System.Guid)">
 <summary>
 Returns a collection of group data table permissions that the specified team has for group tables.
 </summary>
 <param name="teamId">The unique identifier of the team to get the permissions for.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetTeamGroupDataTablePermissionsForGroupTable(System.Guid)">
 <summary>
 Returns a collection of group data table permissions that the specified group data table has.
 </summary>
 <param name="groupTableId">The unique identifier of the group data table to get the permissions for.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetTeamGroupDataTablePermissionForGroupTable(System.Guid,System.Guid)">
 <summary>
 Returns the effective permission that a user has for the specified group data table.
 </summary>
 <param name="groupTableId">The identifier of the group data table to get the permissions of.</param>
 <param name="userId">The identifier of the user to get the permissions of.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetTeamGroupDataTablePermissionsForUser(System.Guid)">
 <summary>
 Returns a collection of group data table permissions that the specified user has.
 </summary>
 <param name="userId">The unique identifier of the user to fetch the permissions for.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SetGroupDataTablePermissionForTeam(System.Guid,System.Guid,DriveWorks.Security.GroupTablePermission)">
 <summary>
 Sets the specified permissions for the specified team and group.
 </summary>
 <param name="teamId">The unique identifier of the team to set the permissions for.</param>
 <param name="groupTableId">The unique identifier of the group table to set the permissions of.</param>
 <param name="permission">The permissions to set for the specified team and group data table.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetUserToken(System.Guid)">
 <summary>
 Gets the matching user's login token.
 </summary>
 <param name="userId">The id of the user to get the token of.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetCapturedComponentId(System.String)">
 <summary>
 Gets the unique identifier assigned to the component with the specified path.
 </summary>
 <param name="componentPath"></param>
 <returns></returns>
 <remarks>
 <para>
 When a component is captured, and then uncaptured, it may still exist in the database as an older
 version. In that case, this method will return the id that was assigned the component when it
 was captured.
 </para>
 <para>
 DriveWorks ensures that at all times, there is only ever a 1 to 1 mapping between
 component identifiers, and their paths. 
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetCapturedComponentPath(System.Guid)">
 <summary>
 Gets the path assigned to the component with the specified unique identifier.
 </summary>
 <param name="componentId"></param>
 <returns></returns>
 <remarks>
 <para>
 When a component is captured, and then uncaptured, it may still exist in the database as an older
 version. In that case, this method will return the path that was assigned the component when it
 was captured.
 </para>
 <para>
 DriveWorks ensures that at all times, there is only ever a 1 to 1 mapping between
 component identifiers, and their paths. 
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetCapturedComponents(System.Boolean)">
 <summary>
 Gets information about all of the captured components in the group.
 </summary>
 <param name="includeDeletedComponents">True to include components which have been deleted in the results.</param>
 <returns>An array containing one instance of the <see cref="T:DriveWorks.Components.CapturedComponentInfo" /> class for each captured component.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetCapturedComponentDataById(System.Guid)">
 <summary>
 Gets the raw data for the component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component to retrieve.</param>
 <returns>A byte array containing the UTF8 encoded XML which describes the component.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetCapturedComponentDataByPath(System.String)">
 <summary>
 Gets the raw data for the component with the specified path.
 </summary>
 <param name="componentPath">The fully-qualified path of the component to retrieve.</param>
 <returns>A byte array containing the UTF8 encoded XML which describes the component.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.IsCapturedComponent(System.String)">
 <summary>
 Gets whether the component with the specified path has been captured.
 </summary>
 <param name="componentPath">The path to the component to test.</param>
 <returns>True if a component with the given path is captured.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SaveCapturedComponent(System.Guid,System.String,System.String,DriveWorks.Internal.Group.RawCapturedComponent)">
 <summary>
 Saves a new component to the group.
 </summary>
 <param name="componentId">The unique identifier of the component.</param>
 <param name="componentPath">The path to the component to save.</param>
 <param name="componentType">The type of the component to save.</param>
 <param name="componentData">The component to save to the group.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ChangeComponentPathByPath(System.String,System.String)">
 <summary>
 Updates the path of the specified component.
 </summary>
 <param name="originalComponentPath">The original path to the component to update.</param>
 <param name="updatedComponentPath">The new path to the component.</param>
 <returns>True if the component was successfully rereferenced.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ChangeComponentPathById(System.Guid,System.String)">
 <summary>
 Updates the path of the specified component.
 </summary>
 <param name="originalComponentId">The unique identifier of the component to update.</param>
 <param name="updatedComponentPath">The new path to the component.</param>
 <returns>True if the component was successfully rereferenced.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetProjects">
 <summary>
 Gets all the projects in the group.
 </summary>
 <returns>An array of project details.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetProjectByName(System.String)">
 <summary>
 Gets a project with the specified name.
 </summary>
 <param name="projectName">The name of the project to retrieve.</param>
 <returns>A project details instance for the project with the given name, or a null reference if no project with the given name exists.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetProjectById(System.Guid)">
 <summary>
 Gets a project with the specified unique identifier.
 </summary>
 <param name="projectId">The unique identifier of the project to retrieve.</param>
 <returns>A project details instance for the project with the given name, or a null reference if no project with the given name exists.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RegisterProject(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Registers a project in the group.
 </summary>
 <param name="projectId">The unique identifier of the project to register.</param>
 <param name="projectName">The name of the project.</param>
 <param name="directoryPath">The path to the directory which contains the project and related files.</param>
 <param name="extension">The extension of the project file, e.g. ".drivegroup".</param>
 <param name="hidden">True if the project is hidden, otherwise false.</param>
 <param name="deployed">True if the project is deployed, otherwise false.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.TryUpdateProject(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Updates a project in the group.
 </summary>
 <param name="projectId">The unique identifier of the project to register.</param>
 <param name="projectName">The name of the project.</param>
 <param name="directoryPath">The path to the directory which contains the project and related files.</param>
 <param name="extension">The extension of the project file, e.g. ".drivegroup".</param>
 <param name="hidden">True if the project is hidden, otherwise false.</param>
 <param name="deployed">True if the project is deployed, otherwise false.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteProjectById(System.Guid)">
 <summary>
 Unregisters an existing project.
 </summary>
 <param name="projectId">The identifier which uniquely identifies the project to unregister.</param>
 <returns>True if the project was found and unregistered, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteProjectByName(System.String)">
 <summary>
 Deletes the project reference from the group.
 </summary>
 <param name="name">Name of the project to delete.</param>
 <returns>True if successfully deleted.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationByName(System.String)">
 <summary>
 Gets the specification details for the specification with the given
 name.
 </summary>
 <param name="name">The name of the specification to retrieve.</param>
 <returns>The specification details, or a null reference if the specification doesn't exist.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationById(System.Int32)">
 <summary>
 Gets the specification details for the specification with the given
 numerical identifier.
 </summary>
 <param name="id">The unique numerical identifier of the specification to retrieve.</param>
 <returns>The specification details, or a null reference if the specification doesn't exist.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationDocuments(System.Int32)">
 <summary>
 Gets a specification's documents.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get documents.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationsByModifiedDate(System.Boolean)">
 <summary>
 Gets an enumerator which can be used to retrieve specifications in chronological order.
 </summary>
 <param name="descending">True to retrieve specifications in reverse chronological order.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationsByModifiedDate(System.Boolean,System.Boolean)">
 <summary>
 Gets an enumerator which can be used to retrieve specifications in chronological order.
 </summary>
 <param name="descending">True to retrieve specifications in reverse chronological order.</param>
 <param name="includeArchived">True to retrieve archived specifications as well.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationsInStateTypeByModifiedDate(DriveWorks.Specification.StateType,System.Boolean)">
 <summary>
 Gets an enumerator which can be used to retrieve specifications in a given type of state in chronological order.
 </summary>
 <param name="stateType">The type of state against which to filter the returned specifications.</param>
 <param name="descending">True to retrieve specifications in reverse chronological order.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationTask(System.Guid)">
 <summary>
 Gets the specification task with the specified id.
 </summary>
 <param name="taskId">The id of the specification task to retrieve.</param>
 <returns>The specification task for the specified id.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationTasks(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets an enumerator, which can be used to retrieve specification tasks of the given type matching the specified criteria.
 </summary>
 <param name="taskType">The type of task to retrieve/</param>
 <param name="descending">True to retrieve tasks in reverse chronological order of when their parent specifications were created.</param>
 <param name="includeComplete">True to include complete tasks, otherwise false.</param>
 <param name="includeInComplete">True to include incomplete tasks, otherwise false.</param>
 <param name="includeFailed">True to include failed tasks, otherwise false.</param>
 <param name="includeMissingSpecifications">True to include tasks that have no registered specification information.</param>
 <returns>Returns an enumerable of specification tasks that match the specified criteria.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetTasksForSpecification(System.Int32,System.String)">
 <summary>
 Gets all tasks for a specification.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
 <param name="taskType">Optionally the type of task to retrieve. If this is not included all task types will be included.</param>
 <returns>An array of tasks, matching the specified type, for the specification.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteSpecificationTask(System.Guid)">
 <summary>
 Deletes the specification task with the specified unique identifier.
 </summary>
 <param name="taskId">The unique identifier of the task to delete.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.MarkSpecificationTaskCompleted(System.Guid,System.Boolean)">
 <summary>
 Attempts to mark the specified specification task as being complete/incomplete.
 </summary>
 <param name="taskId">The unique identifier of the task to mark.</param>
 <param name="completed">True if the task is completed, otherwise false.</param>
 <returns></returns>
 <remarks>This will reset the fail count of the task.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.MarkSpecificationTaskFailed(System.Guid,System.Int32)">
 <summary>
 Attempts to mark the specified specification task as having failed.
 </summary>
 <param name="taskId">The unique identifier of the task to mark.</param>
 <param name="failedCount">The number of times the task has failed.</param>
 <returns></returns>
 <remarks>This will mark the task as not being completed.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateSpecificationTask(DriveWorks.Specification.SpecificationTaskDetails)">
 <summary>
 Updates the data in the specified specification task.
 </summary>
 <param name="task">The task to update.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateSpecificationTaskTags(System.Guid,System.String[])">
 <summary>
 Updates the tags for the specified specification task.
 </summary>
 <param name="taskId">The unique identifier of the task to be updated.</param>
 <param name="newTags">The new tags to associate with the task.</param>
 <returns>True if the tags were updated successfully, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RegisterSpecificationTask(System.Int32,System.Guid,System.String,System.Byte[],System.Int32,System.Boolean,System.String[])">
 <summary>
 Registers a specification task.
 </summary>
 <param name="specificationId">The unique identifier of the specification for which to register the task.</param>
 <param name="id">The unique identifier of the task.</param>
 <param name="type">The name of the provider which understands the task.</param>
 <param name="data">The task's serialized data.</param>
 <param name="failedCount">The number of times that the task has failed.</param>
 <param name="isCompleted">Whether or not the task is complete.</param>
 <param name="tags">The tags associated with this task.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteSpecification(System.Int32)">
 <summary>
 Removes the specification with the given identifier.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification to remove.</param>
 <returns>True if the specification was found and removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteEmbeddedSpecificationDependencies(System.Int32)">
 <summary>
 Removes the component dependencies from the group, for the embedded child specification with the given identifier.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification to remove.</param>
 <returns>True if dependencies for this specification were found and removed, false if there were no dependencies to remove.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteSpecificationDocument(System.Guid)">
 <summary>
 Removes the specification document reference with the given identifier.
 </summary>
 <param name="documentId">The unique ID identifier of the specification document to remove.</param>
 <returns>True if the specification document was found and removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SpecificationExists(System.String)">
 <summary>
 Determines whether a specification with the given name exists.
 </summary>
 <param name="specificationName">The name of the specification to check for.</param>
 <returns>True if a specification with the given name is already registered.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ReserveSpecificationId">
 <summary>
 Reserves a identifier and report for a new specification.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SetSpecificationGlobalPoolCursor(System.Int32)">
 <summary>
 Updates the cursor in the global pool.
 </summary>
 <param name="value"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RegisterSpecification(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.Guid,System.Guid,System.Guid,System.String,System.String,System.Guid,System.String,DriveWorks.Specification.StateType,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.String,System.String[])">
 <summary>
 Registers a specification with the group.
 </summary>
 <param name="id">The unique identifier of the specification.</param>
 <param name="parentId">The optional unique identifier of the parent specification, or a null reference (Nothing in Visual Basic) if the specification is not a child specification.</param>
 <param name="name">The name of the specification.</param>
 <param name="directory">The path to the specification directory.</param>
 <param name="metadataDirectory">The path to the specification metadata directory, relative to the specification directory.</param>    
 <param name="creatorId">The id of the user which created the specification.</param>
 <param name="editorId">The id of the user which last edited the specification.</param>
 <param name="projectId">The unique identifier of the project from which the specification was created.</param>
 <param name="originalProjectName">The name of the project from which the specification was created.</param>
 <param name="originalProjectExtension">The file extension of the project from which the specification was created.</param>
 <param name="stateId">The unique identifier of the specification-flow state of the specification.</param>
 <param name="stateName">The display name of the specification-flow state of the specification.</param>
 <param name="stateType">The type of the specification-flow state of the specification.</param>
 <param name="dateCreated">The date the specification was created.</param>
 <param name="dateEdited">The data the specification was edited.</param>
 <param name="isCreatorPermitted">Whether the creator is permitted to view the specification.</param>
 <param name="isOwnerPermitted">Whether the owner is permitted to view the specification.</param>
 <param name="isUniversal">Whether everyone is permitted to view the specification.</param>
 <param name="specificationProjectExtension">The file extension of the specification's project.</param>
 <param name="tags">The tags associated with the specification.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateSpecification(System.Int32,System.String,System.String,System.String,System.Guid,System.Guid,System.String,DriveWorks.Specification.StateType,System.Boolean,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.String,System.String[])">
 <summary>
 Updates a specification in the group.
 </summary>
 <param name="id">The unique identifier of the specification.</param>
 <param name="name">The name of the specification.</param>
 <param name="directory">The path to the specification directory.</param>
 <param name="metadataDirectory">The path to the specification metadata directory, relative to the specification directory.</param>    
 <param name="editorId">The id of the user which last edited the specification.</param>
 <param name="stateId">The unique identifier of the specification-flow state of the specification.</param>
 <param name="stateName">The display name of the specification-flow state of the specification.</param>
 <param name="stateType">The type of the specification-flow state of the specification.</param>
 <param name="isArchived">Whether the specification is archived from normal view.</param>
 <param name="dateEdited">The data the specification was edited.</param>
 <param name="isCreatorPermitted">Whether the creator is permitted to view the specification.</param>
 <param name="isOwnerPermitted">Whether the owner is permitted to view the specification.</param>
 <param name="isUniversal">Whether everyone is permitted to view the specification.</param>
 <param name="specificationProjectExtension">The file extension of the specification's project.</param>
 <param name="tags">The tags associated with the specification.</param>
 <returns>True if the specification was found and updated, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateSpecificationTeams(System.Int32,System.Guid[])">
 <summary>
 Update the list of teams that have access to the given specification.
 </summary>
 <param name="specificationId">The unique identifier of the specification of which to change the teams.</param>
 <param name="teamIds">The unique identifiers of the teams that will be able to access the specification.</param>
 <returns>True if the update was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationTeams(System.Int32)">
 <summary>
 Gets the team identifiers that have access to the given specification.
 </summary>
 <param name="specificationId">The unique identifier of the specification of which to change the teams.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateSpecificationArchivedStatus(System.Int32,System.Boolean)">
 <summary>
 Updates the archived status of the given specification.
 </summary>
 <param name="specificationId">The unique identifier of the specification of which to change the archived status.</param>
 <param name="isArchived">new archived status of the specification.</param>
 <returns>True if the archived status was updated.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateSpecificationTags(System.Int32,System.String[])">
 <summary>
 Updates the tags for the specified specification.
 </summary>
 <param name="specificationId">The Id of the specification to update.</param>
 <param name="newTags">The new tags to associate with the specification.</param>
 <returns>True if the tags were updated successfully, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateSpecificationDocumentPath(System.Int32,System.Guid,System.String)">
 <summary>
 Updates the specification document path.
 </summary>
 <param name="specificationId">Identification of the specification containing the document.</param>
 <param name="id">Identification of the document to update.</param>
 <param name="path">New path of the document.</param>
 <returns>True if path successfully updated</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReportPath(System.Guid,System.String)">
 <summary>
 Updates the specification report path.
 </summary>
 <param name="id">Identification of the report to update.</param>
 <param name="path">New path of the report.</param>
 <returns>True if path successfully updated</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RegisterSpecificationDocument(System.Guid,System.Int32,System.String,System.DateTime,System.Boolean)">
 <summary>
 Registers a new specification document with an existing specification.
 </summary>
 <param name="id">The unique identifier of the document which will be used if the document isn't already registered.</param>
 <param name="specificationId">The unique identifier of the parent specification.</param>
 <param name="documentPath">The fully qualified path to the document.</param>
 <param name="dateCreated">The date the document was created.</param>
 <param name="isHidden">True if the document is filtered from the the normal end-user view.</param>
 <returns>If the document is already registered, the existing document identifier is returned, otherwise the value of the <paramref name="id" /> parameter is returned.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RegisterSpecificationReport(System.Int32,System.Guid)">
 <summary>
 Registers the specified report with the given specification.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification with which to register the specification.</param>
 <param name="reportId">The unique identifier of the report to register.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationReports(System.Int32)">
 <summary>
 Gets details of the reports that have been registered against the specification with the given specification identifier.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification for which to get report details.</param>
 <returns>An array of report details.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteSpecificationReport(System.Guid)">
 <summary>
 Deletes all data associated with the specified report from the Group.
 </summary>
 <param name="reportId">The unique identifier of the report to remove.</param>
 <returns>True if the report is found and removed.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ResetSpecificationIdPool">
 <summary>
 Clears the specification Id pool for this group.
 </summary>
 <exception cref="T:System.UnauthorizedAccessException">Thrown when the current user is working in global specification id pool and does not have the edit all specifications permission.</exception>
 <exception cref="T:System.InvalidOperationException">Thrown when there are current specifications in the group.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetSpecificationProperties(System.Int32)">
 <summary>
 Gets the Specification Properties for the specification.
 </summary>
 <param name="specificationId">The id of the specification from which the properties should be retrieved.</param>
 <returns>
 An enum representing whether the properties were retrieved successfully. If successful, 
 it will also contain a wrapper around the retrieved properties XML.
 </returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SetPropertiesForSpecification(System.Int32,System.Byte[])">
 <summary>
 Sets the properties for this specification to the group.
 </summary>
 <param name="specificationId">The Id of the specification for which to store properties.</param>
 <param name="specificationProperties">The properties to store for this specification in their raw form.</param>
 <remarks>If the specification already exists, its properties will be updated with the new values.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetGroupSetting(System.String)">
 <summary>
 Gets the named setting from the group.
 </summary>
 <param name="name">The name of the setting to retrieve.</param>
 <returns>The string value of the setting that was retrieved, or a null reference (Nothing in Visual Basic) if the setting was not present.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SetGroupSetting(System.String,System.String)">
 <summary>
 Saves the named setting to the group.
 </summary>
 <param name="name">The name of the setting.</param>
 <param name="value">The value of the setting.</param>
 <remarks>Using a null reference (Nothing in Visual Basic) as the value will delete the setting.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetRuleHistory(System.Guid)">
 <summary>
 Gets the complete rule version history for the entire project.
 </summary>
 <param name="projectId">The id of the project to get the history of.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetRuleHistory(System.Guid,System.String,System.String,System.String)">
 <summary>
 Gets the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
 <returns>An array of rule version entries.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.AddRuleHistory(System.Guid,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Adds a new entry to the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
 <param name="rule">The rule at the current version.</param>
 <param name="comment">The comment at the current version.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.AddRuleHistory(DriveWorks.RuleVersionDetails)">
 <summary>
 Adds a specific item of history to the group's rule history storage.
 </summary>
 <param name="details">The details to add.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ClearRuleHistory(System.Guid,System.String,System.String,System.String)">
 <summary>
 Clears the rule version history for the specified item property.
 Same as delete, but leaves a notification that the history has been cleared.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteRuleHistory(System.Guid,System.String,System.String,System.String)">
 <summary>
 Deletes the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteRuleHistory(System.Guid)">
 <summary>
 Deletes the rule version history for the specified project.
 </summary>
 <param name="projectId">The id of the project to remove all history from.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.CommitRuleHistory(DriveWorks.RuleVersionDetails[])">
 <summary>
 Commits all specified entries to the group's history.
 </summary>
 <param name="ruleHistories">All </param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.CreateReportWriter(System.Guid,System.String,DriveWorks.Reporting.ReportingLevel)">
 <summary>
 Creates a report writer for a new report.
 </summary>
 <param name="id">The unique identifier to assign to the report.</param>
 <param name="title">The title of the report.</param>
 <param name="level">The maximum entry level to write to the report.</param>
 <returns>A report writer which can be used to write to the report.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReportAsXDocument(System.Guid)">
 <summary>
 Gets a report as XML stored in an XDocument.
 </summary>
 <param name="reportId">The unique identifier of the report to get.</param>
 <returns>An instance of the <see cref="T:System.Xml.Linq.XDocument" /> class.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ImportReport(System.Guid,System.Xml.Linq.XDocument)">
 <summary>
 Imports the given report data into the group.
 </summary>
 <param name="reportId">The unique identifier to assign to the report.</param>
 <param name="reportData">The serialized XML data for the report. See <see cref="M:DriveWorks.Internal.Group.IGroupConnection.GetReportAsXDocument(System.Guid)"/>.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReportDetails(System.Guid)">
 <summary>
 Gets details about the matching report.
 </summary>
 <param name="reportId">The identifier of the report to get the details of.</param>
 <returns>The matching details or null if nothing is found.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteReleasedComponentReference(System.String)">
 <summary>
 Deletes the released component reference entry.
 </summary>
 <param name="targetPath">The unique target path of the entry to delete.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.IncrementReleasedComponentFailureCount(System.Guid)">
 <summary>
 Increments the failure count of a released component.
 </summary>
 <param name="componentId">The unique identifier of the released component to update.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReleasedComponentState(System.Guid,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Updates the state of a released component.
 </summary>
 <param name="componentId">The unique identifier of the component to update.</param>
 <param name="generating">True to mark the component for generation, if this is true, the value of the <paramref name="generating" /> and <paramref name="failCount" /> parameters are ignored.</param>
 <param name="generated">True to mark the component as generated, this automatically resets the failure count to zero, and the <paramref name="failCount" /> property is ignored.</param>
 <param name="failCount">Updates the failure count of the component, for this to be processed, the <paramref name="generating" /> and <paramref name="generated" /> parameters must both be set to false.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReleasedComponentState(System.String,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Updates the state of a released component.
 </summary>
 <param name="targetPath">The unique target path of the component to update.</param>
 <param name="generating">True to mark the component for generation, if this is true, the value of the <paramref name="generating" /> and <paramref name="failCount" /> parameters are ignored.</param>
 <param name="generated">True to mark the component as generated, this automatically resets the failure count to zero, and the <paramref name="failCount" /> property is ignored.</param>
 <param name="failCount">Updates the failure count of the component, for this to be processed, the <paramref name="generating" /> and <paramref name="generated" /> parameters must both be set to false.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReleasedComponentTags(System.Guid,System.String[])">
 <summary>
 Updates the tags associated with a released component.
 </summary>
 <param name="componentId">The Id of the component for which to change the tags.</param>
 <param name="newTags">The new tags to apply to the component.</param>
 <returns>True if the tags were updated successfully, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReleasedComponentFlags(System.Guid,DriveWorks.Components.ReleasedComponentFlags)">
 <summary>
 Updates the tags associated with a released component.
 </summary>
 <param name="componentId">The Id of the component for which to change the tags.</param>
 <param name="newFlags">The new flags to apply to the component.</param>
 <returns>True if the tags were updated successfully, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentDataById(System.Guid)">
 <summary>
 Gets the raw data for the component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component to retrieve.</param>
 <returns>The component data as a byte array containing the UTF8 encoded XML which describes the component and additional information.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentDataByTargetPath(System.String)">
 <summary>
 Gets the raw data for the component with the specified target path.
 </summary>
 <param name="targetPath">The target path of the component to retrieve.</param>
 <returns>The component data as a byte array containing the UTF8 encoded XML which describes the component and additional information.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentsComponentDataByMasterPath(System.String)">
 <summary>
 Gets the <see cref="T:DriveWorks.Components.Data.ReleasedComponentData"/> for all released components that match the specified master path.
 </summary>
 <param name="masterPath">The path to the master file of which to retrieve released component data for.</param>
 <returns>The component data as a byte array containing the UTF8 encoded XML which describes the component and additional information.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentReferenceTree(System.Guid[])">
 <summary>
 Gets hierarchical reference information about the components with the given identifiers.
 </summary>
 <param name="ids">The identifiers of the released components to traverse and return reference information.</param>
 <returns>An instance of an object which implements the <see cref="T:DriveWorks.Components.IReleasedComponentReferenceTree" /> interface.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentReferenceEnumerator(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets an object which will enumerate the released component references in the group.
 </summary>
 <param name="includeGeneratedParents">True to include references in which the parents are generated.</param>
 <param name="includeNotGeneratedParents">True to include references in which the parents haven't been generated.</param>
 <param name="includeFailedParents">True to include references in which the parents have failed.</param>
 <param name="includeGeneratedChildren">True to include references in which the child has been generated.</param>
 <param name="includeNotGeneratedChildren">True to include references in which the child hasn't been generated.</param>
 <param name="includeFailedChildren">True to include references in which the child has failed.</param>
 <returns>An enumerator over the released components references in the group.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentEnumerator(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets an object which will enumerate the released components in the group.
 </summary>
 <param name="topLevelOnly">True to only get top level (root) components.</param>
 <param name="includeGenerated">True to include generated components, false to exclude them.</param>
 <param name="includeNotGenerated">True to include components which haven't been generated, false to exclude them.</param>
 <param name="includeFailed">True to include failed components, false to exclude them.</param>
 <param name="includeDeferred">True to include deferred components, false to exclude them.</param>
 <returns>An enumerator over the released components in the group.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentsAwaitingPreviewEnumerator(System.Boolean)">
 <summary>
 Gets an object which will enumerate the released components awaiting preview in the group.
 </summary>
 <param name="topLevelOnly">True to inlcude top level components only.</param>
 <returns>An enumerator for all released components awaiting preview.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentIdsForGeneration">
 <summary>
 Gets an object which will enumerate the ids of released components which are ready to be generated in the group.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedOrphanComponentIdsForGeneration">
 <summary>
 Gets an object which will enumerate the ids of released components which are ready to be generated in the group and don't belong to any specification.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentDetailsByPath(System.String)">
 <summary>
 Gets the details of a driven component with the specified path.
 </summary>
 <param name="componentPath">The full path to the component for which to get the details.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentDetailsById(System.Guid)">
 <summary>
 Gets the details of a driven component with the specified identifiere.
 </summary>
 <param name="componentId">The unique identifier of the component for which to get the details.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentsDetailsById(System.Guid[])">
 <summary>
 Gets the details of all driven components matching the specified component ids.
 </summary>
 <param name="componentIds">The unique identifiers of the components to retrieve the details of.</param>
 <returns>An array of driven component details matching the specified component ids.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentsForSpecification(System.Int32,System.Boolean)">
 <summary>
 Gets the details of all released components for the specified specification.
 </summary>
 <param name="specificationId">The unique identifier of the specification.</param>
 <param name="includeChildSpecifications">True to include components registered by child specifications of the given specification.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentDetailsByName(System.String,System.String)">
 <summary>
 Gets the details of a driven component with the specified component name.
 </summary>
 <param name="componentName">The name of the component for which to get the details.</param>
 <param name="componentType">The type of the component for which to get the details.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SaveReleaseResults(DriveWorks.Internal.Group.RawReleaseComponentsResults)">
 <summary>
 Saves the results of releasing one or more components.
 </summary>
 <param name="results">The results to save to the database.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RegisterReleasedComponentReport(System.Guid,System.Guid)">
 <summary>
 Registers the specified report with the given component.
 </summary>
 <param name="componentId">The unique identifier of the driven component.</param>
 <param name="reportId">The unique identifier of the report to register.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedComponentReports(System.Guid)">
 <summary>
 Gets details of the reports that have been registered against the specified component.
 </summary>
 <param name="componentId">The unique identifier of the component for which to get report details.</param>
 <returns>An array of report details.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReleasedComponentTargetPath(System.String,System.String)">
 <summary>
 Updates a released components target path
 </summary>
 <param name="originalPath">The original file path.</param>
 <param name="newPath">The new file path.</param>
 <returns>True if successfully updated.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReleasedComponentMasterPath(System.String,System.String)">
 <summary>
 Updates all released components with the specified master path to the new path.
 </summary>
 <param name="originalPath">The original file path.</param>
 <param name="newPath">The new file path.</param>
 <returns>True if all were successfully updated, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReleasedComponentPreviewPath(System.Guid,System.String)">
 <summary>
 Updates the path to the preview file created for the specified component.
 </summary>
 <param name="componentId">The Id of the released component for which to update the path.</param>
 <param name="newPreviewPath">The full path to the preview file.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReleasedComponentDataByTargetPath(System.String,System.Byte[])">
 <summary>
 Updates the component data for the released component with the given target path.
 </summary>
 <param name="targetPath">The target path of the released component to update.</param>
 <param name="data">The new component data to store in the group.</param>
 <returns>True if the update was successful, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateReleasedComponentDataById(System.Guid,System.Byte[])">
 <summary>
 Updates the component data for the released component with the given id.
 </summary>
 <param name="componentId">The unique identifier of the released component to update.</param>
 <param name="data">The new data to set on the specified released component.</param>
 <returns>True if the update was successful, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteReleasedComponentReport(System.Guid)">
 <summary>
 Deletes the specified released component report.
 </summary>
 <param name="reportId">The Id of the report to delete.</param>
 <returns>True if the report was deleted successfully.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.DeleteReleasedComponentReports(System.Guid)">
 <summary>
 Deletes all component reports for the specified component.
 </summary>
 <param name="componentId">The Id of the component for which all of its reports should be deleted.</param>
 <returns>True if all reports were deleted successfully.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetReleasedTasksDataForComponent(System.Guid)">
 <summary>
 Gets an object that will enumerate all released component tasks for the component with the given id.
 </summary>
 <param name="componentId">The id of the component for which to get component tasks.</param>
 <returns>An enumerator that will enumerate all released component tasks for the specified component.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetDbReleasedComponentsData">
 <summary>
 Gets an object that will enumerate all released components.
 </summary>
 <remarks>
 Typically used for copying data between groups.
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetDbReleasedComponentTasksData(System.Nullable{System.Guid})">
 <summary>
 Gets an object that will enumerate all matching released components tasks.
 </summary>
 <param name="scopeId">The specific scope to get or null for everything.</param>
 <remarks>
 Typically used for copying data between groups.
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetDbReleasedComponentTaskGroupsData(System.Nullable{System.Guid})">
 <summary>
 Gets an object that will enumerate all matching released component task groups.
 </summary>
 <param name="componentId">The specific component to get or null for everything.</param>
 <remarks>
 Typically used for copying data between groups.
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetDbReleasedComponentReferencesData(System.String)">
 <summary>
 Gets an object that will enumerate all released component references.
 </summary>
 <remarks>
 Typically used for copying data between groups.
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetDbReleasedComponentDependenciesData(System.Nullable{System.Guid})">
 <summary>
 Gets an object that will enumerate all matching released component specification dependency data.
 </summary>
 <param name="componentId">The component to get or null for all.</param>
 <remarks>
 Typically used for copying data between groups.
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ImportReleasedComponent(DriveWorks.Internal.Group.DbReleasedComponentDetails)">
 <summary>
 Imports the released component verbatim.
 </summary>
 <param name="details">Thing to import.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ImportReleasedComponentTask(DriveWorks.Internal.Group.DbReleasedComponentTaskDetails)">
 <summary>
 Imports the released component task verbatim.
 </summary>
 <param name="details">Thing to import.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ImportReleasedComponentTaskGroup(DriveWorks.Internal.Group.DbReleasedComponentTaskGroupDetails)">
 <summary>
 Imports the released component task group verbatim.
 </summary>
 <param name="details">Thing to import.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ImportReleasedComponentReference(DriveWorks.Internal.Group.DbReleasedComponentReferenceDetails)">
 <summary>
 Imports the released component reference verbatim.
 </summary>
 <param name="details">Thing to import.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.ImportReleasedComponentDependency(DriveWorks.Internal.Group.DbReleasedComponentDependencyDetails)">
 <summary>
 Imports the released component dependency verbatim.
 </summary>
 <param name="details">Thing to import.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.BatchUpdateReleasedComponentsTags(System.Collections.Generic.Dictionary{System.String[],System.Guid[]})">
 <summary>
 Updates components to their new tags in one transaction.
 </summary>
 <param name="tagsToComponentsMap">A mapping of tags to the ids of the components that need to be updated to them.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.StoreGroupDataTableEntry(DriveWorks.Internal.Group.GroupDataTableDetails)">
 <summary>
 Stores the specified details in the group. 
 This will either update an existing entry or create a new one, depending on the Id of the details.
 </summary>
 <param name="details">The details to store</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetGroupDataTableEntries">
 <summary>
 Gets a collection of group data table details that exist in this group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RemoveGroupDataTableEntry(System.Guid)">
 <summary>
 Removes a group data table entry from this group.
 </summary>
 <param name="id">The identifier for the group data table entry to remove.</param>
 <returns>Returns True if the entry was removed from the group.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetGroupDataTableData(System.Guid)">
 <summary>
 Gets table data for a group table in compressed byte form.
 </summary>
 <param name="id">The identifier of the group table to get data from.</param>
 <returns>Collection of bytes that represent the table in compressed tabbed delimited UTF8.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SetGroupDataTableData(System.Guid,System.Byte[])">
 <summary>
 Sets table data for a group table in compressed byte form.
 </summary>
 <param name="id">The identifier of the group table to set data of.</param>
 <param name="tableData">Collection of bytes that represent the table in compressed tabbed delimited UTF8.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.SetGroupDataTableRows(System.Guid,System.String[0:,0:],System.String)">
 <summary>
 Appends or updates rows for a group table
 </summary>
 <param name="id">The identifier of the group tavle to set the rows of.</param>
 <param name="data">The data to write to the row(s).</param>
 <param name="controlColumnNames">The names of the control columns to find the rows to update.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.StoreGroupConnectorEntry(DriveWorks.GroupConnectorDetails)">
 <summary>
 Inserts or updates an entry into the group.
 </summary>
 <param name="connectorDetails">The details or insert or update.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.UpdateGroupConnectorEntryByName(System.String,DriveWorks.GroupConnectorDetails)">
 <summary>
 Updates an entry in the group that matches the provided connector name.
 </summary>
 <param name="connectorName">The name of the connector to update.</param>
 <param name="connectorDetails">The details to update with.</param>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.GetConnectorDetails">
 <summary>
 Gets all group connector details stored within the group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.IGroupConnection.RemoveGroupConnectorEntry(System.Guid)">
 <summary>
 Removes a group connector from the group.
 </summary>
 <param name="id">The identifier for the group connector to remove.</param>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupAdminServiceConnection.Proxy">
 <summary>
 Gets the proxy to the server.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupAdminServiceConnection.ServerProxy">
 <summary>
 Gets the server proxy.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupAdminServiceConnection.IsProxyAlive">
 <summary>
 Checks if the proxy still has a valid connection to the service
 </summary>
</member>
<member name="E:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.NotificationReceived">
 <summary>
 Raised when a notification is received from a remote session
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.RequestReceived">
 <summary>
 Raised when a request is received from a remote session
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.StateChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.State" /> property changes.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.State">
 <summary>
 Gets the current state of the connection to the server.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.Proxy">
 <summary>
 Gets the proxy to the server.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.LastFault">
 <summary>
 Gets the last fault that occurred.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.IsProxyAlive">
 <summary>
 Checks if the proxy still has a valid connection to the service
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.StartService(System.Boolean)">
 <summary>
 Attempts to connect to the service and setup event hooks to monitor for state changes.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Client.MSRemoteGroupConnectionServiceConnection.StopService(System.Boolean)">
 <summary>
 Stops the client proxy and resets the State to Closed.
 If this function was not called by request from the service, then also inform the service we are disconnecting
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Client.RemoteGroupConnection">
 <summary>
 Provides a connection to a DriveWorks Team/Enterprise group.
 </summary>
</member>
<member name="E:DriveWorks.Internal.Group.Transport.Remote.Client.RemoteGroupConnection.AgentNotificationReceived">
 <summary>
 The event raised when a notification is received from a remote session.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Internal.Group.Transport.Remote.Client.RemoteGroupConnection.AgentRequestReceived">
 <summary>
 The event raised when a request is received from a remote session.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Protocol.DisconnectionReason">
 <summary>
 Indicates the reason why a client was disconnected from the server.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.Transport.Remote.Protocol.DisconnectionReason.Exiting">
 <summary>
 The client was disconnected because the server is shutting down.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.Transport.Remote.Protocol.DisconnectionReason.Expired">
 <summary>
 The client was disconnected because its session expired.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerClientContract.DisconnectClient(DriveWorks.Internal.Group.Transport.Remote.Protocol.DisconnectionReason,System.String)">
 <summary>
 Called by the server when the client is being disconnected for any reason.
 </summary>
 <param name="reason">The reason why the server is disconnecting the client.</param>
 <param name="detail">A detailed message about the disconnection reason.</param>
 <remarks></remarks>
 <devdoc>
 Is one way prevents locking calls from service to client if client doesn't respond
 </devdoc>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerClientContract.ReceiveNotification(DriveWorks.Messaging.AgentMessage)">
 <summary>
 Receives a notification message from a remote session.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerClientContract.RecieveRequest(DriveWorks.Messaging.AgentMessage)">
 <summary>
 Receives a request message from a remote session.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerClientContract.GroupDataTableDetailsUpdate(DriveWorks.Internal.Group.GroupDataTableDetails)">
 <summary>
 Called to provide client with update to date details about a group data table.
 </summary>
 <param name="details">The details to send to all clients.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerClientContract.GroupDataTableDataUpdate(System.Guid)">
 <summary>
 Called to notify when a group table has had its table data updated.
 </summary>
 <param name="id">The identifier of the group table that was updated.</param>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract">
 <summary>
 
 </summary>
 <devdoc>
 Must add all IGroupConnection functions within the WCF contract so that the server WCF host can call its underlying 
 RemoteGroupConnectionCore
 </devdoc>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.Connect(DriveWorks.Internal.Group.SessionDetails,System.Collections.Generic.IDictionary{System.String,System.String},DriveWorks.Security.IProviderCredentials)">
 <summary>
 Connects to the group identified by the given connection string using the given credentials.
 </summary>
 <param name="connectionParameters">The connection parameters which identify the group to open.</param>
 <param name="credentials">The credentials for a security principal with access to the group.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetVersionNumber">
 <summary>
 Gets the current version details of the server.
 </summary>
 <returns>An instantiation of the <see cref="T:DriveWorks.RemoteGroupVersionDetails" /> class containing the server's
 the current version details.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RefreshSecurity">
 <summary>
 Refreshes cached security information.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SendHeartbeat">
 <summary>
 Lets the group connection know the connected client is still active.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GroupName">
 <summary>
 Gets the name of the group to which the connection is connected.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.User">
 <summary>
 Gets the details of the user whose credentials were used to log on.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UserTeams">
 <summary>
 Gets the teams to which the user belongs.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UserIsAllowedCapture">
 <summary>
 Gets whether the user belongs to at least one team which has capture permissions
 assigned.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.CanEditAllSpecifications">
 <summary>
 Gets whether members of the group can edit and view all of the specifications in the group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.CanEditGroupSecurity">
 <summary>
 Gets whether members of the group can edit the security details of the group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetUserProjects(System.Guid)">
 <summary>
 Gets the projects on which the authenticated user has the given permission.
 </summary>
 <param name="permissionId">The permission to check for, generally one of the values from <see cref="T:DriveWorks.Security.StandardProjectPermissions" />.</param>
 <returns>An array of project details for each project the authenticated user has the given permission on.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.ClientDetails">
 <summary>
 Gets the client details for the connection.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetTeams">
 <summary>
 Gets all of the teams registered in the group.
 </summary>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetTeamByName(System.String)">
 <summary>
 Gets the team with the specified name from the group.
 </summary>
 <param name="teamName">The name of the team.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetTeamById(System.Guid)">
 <summary>
 Gets the team with the specified identifier from the group.
 </summary>
 <param name="teamId">The unique identifier of the team to retrieve.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.CreateTeam(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a new team.
 </summary>
 <param name="teamId">The unique identifier of the new team.</param>
 <param name="providerName">The name of the provider to which the team belongs.</param>
 <param name="teamName">The unique name of the team.</param>
 <param name="displayName">The display name of the team.</param>
 <param name="isAllowedCapture">Governs whether the team is allowed to add and edit capture information in the group.</param>
 <param name="canEditAllSpecificatons">Governs whether the team's memembers are allowed to view and edit all specifications in the group.</param>
 <param name="editGroupSecurity">Governs whether the team's memembers are allowed to edit the group's security details.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateTeamByName(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
 <summary>
 Updates the details for the team with the specified name.
 </summary>
 <param name="teamName">The name of the team to update.</param>
 <param name="displayName">The display name of the team to update.</param>
 <param name="isAllowedCapture">A value governing whether captured information can be added and edited by the the group, or a null reference to make no change.</param>
 <param name="canEditAllSpecifications">A value governing whether the team's memembers can edit all specifications int the group.</param>
 <param name="editGroupSecurity">A value governing whether the team's memembers can edit all group security details.</param>
 <returns>True if the team existed and was updated.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateTeamById(System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
 <summary>
 Updates the details for the team.
 </summary>
 <param name="teamId">The unique identifier of the team to update.</param>
 <param name="displayName">The display name of the team, or a null reference to make no change.</param>
 <param name="isAllowedCapture">A value governing whether captured information can be added and edited by the the group, or a null reference to make no change.</param>
 <param name="canEditAllSpecifications">A value governing whether the team's memembers can edit all specifications int the group.</param>
 <param name="editGroupSecurity">A value governing whether the team's memembers can edit all group security details.</param>
 <returns>True if the team existed and was updated.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteTeamById(System.Guid)">
 <summary>
 Deletes a team.
 </summary>
 <param name="teamId">The unique identifier of the team to delete.</param>
 <returns>True if the team existed and was deleted.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteTeamByName(System.String)">
 <summary>
 Deletes a team.
 </summary>
 <param name="teamName">The name of the team to delete.</param>
 <returns>True if the team existed and was deleted.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetUsers">
 <summary>
 Gets all users in the group.
 </summary>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetUserById(System.Guid)">
 <summary>
 Gets a user from the group.
 </summary>
 <param name="userId">The unique identifier of the group to get.</param>
 <returns>The details for the specified user if it exists, otherwise a null reference.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetUserByName(System.String)">
 <summary>
 Gets a user from the group.
 </summary>
 <param name="loginName">The login name of the team to retrieve.</param>
 <returns>The details for the specified user if it exists, otherwise a null reference.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.CreateUser(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
 <summary>
 Creates a new user.
 </summary>
 <param name="userId">The unique identifier of the new user.</param>
 <param name="providerName">The name of the provider to which the user belongs.</param>
 <param name="loginName">The login name of the user.</param>
 <param name="loginToken">The provider-specific token used to authenticate the user.</param>
 <param name="isEnabled">Governs whether the user is enabled, and thus can log in to the system.</param>
 <param name="isTeamLeader">Governs whether the user has team leader privileges within the teams to which the user belongs.</param>
 <param name="displayName">The display name of the user.</param>
 <param name="emailAddress">The email address of the user.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateUserById(System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)">
 <summary>
 Updates an existing user.
 </summary>
 <param name="userId">The unique identifier of the user to update.</param>
 <param name="principalToken">The provider-specific token used to authenticate the user, or a null reference to make no change.</param>
 <param name="isEnabled">A value governing whether the user can log in, or a null reference to make no change.</param>
 <param name="isTeamLeader">A value governing whether the user has team leader privileges within the teams to which the user belongs, or a null reference to make no change.</param>
 <param name="displayName">The display name of the user, or a null reference to make no change.</param>
 <param name="emailAddress">The email address of the user, or a null reference to make no change.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateUserByName(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)">
 <summary>
 Updates an existing user.
 </summary>
 <param name="loginName">The login name of the user to update.</param>
 <param name="principalToken">The provider-specific token used to authenticate the user, or a null reference to make no change.</param>
 <param name="isEnabled">A value governing whether the user can log in, or a null reference to make no change.</param>
 <param name="isTeamLeader">A value governing whether the user has team leader privileges within the teams to which the user belongs, or a null reference to make no change.</param>
 <param name="displayName">The display name of the user, or a null reference to make no change.</param>
 <param name="emailAddress">The email address of the user, or a null reference to make no change.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteUserById(System.Guid)">
 <summary>
 Deletes a user.
 </summary>
 <param name="userId">The unique identifier of the user to delete.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteUserByName(System.String)">
 <summary>
 Deletes a user.
 </summary>
 <param name="loginName">The login name of the user to update.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetUsersInTeamById(System.Guid)">
 <summary>
 Gets all the users in the given team.
 </summary>
 <param name="teamId">The unique identifier of the team for which to get member-users.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetUsersInTeamByName(System.String)">
 <summary>
 Gets all the users in the given team.
 </summary>
 <param name="teamName">The name of the team for which to get member-users.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.AddUserToTeamById(System.Guid,System.Guid)">
 <summary>
 Adds a user to the membership list of the given team.
 </summary>
 <param name="teamId">The unique identifier of the team to which the user will be added.</param>
 <param name="userId">The unique identifier of the user to add to the membership list of the given team.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.AddUserToTeamByName(System.String,System.String)">
 <summary>
 Adds a user to the membership list of the given team.
 </summary>
 <param name="teamName">The name of the team to which the user will be added.</param>
 <param name="loginName">The login name of the user to add to the membership list of the given team.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RemoveUserFromTeamById(System.Guid,System.Guid)">
 <summary>
 Removes a user from the membership of the given team.
 </summary>
 <param name="teamId">The unique identifier of the team from which the user will be removed.</param>
 <param name="userId">The unique identifier of the user to remove from the membership list of the given team.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RemoveUserFromTeamByName(System.String,System.String)">
 <summary>
 Removes a user from the membership of the given team.
 </summary>
 <param name="teamName">The name of the team from which the user will be removed.</param>
 <param name="loginName">The login name of the user to remove from the membership list of the given team.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetTeamsForUserById(System.Guid)">
 <summary>
 Gets the teams to which the specified user belongs.
 </summary>
 <param name="userId">The unique identifier of the user.</param>
 <returns>An array of teams to which the specified user belongs.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetProjectPermissionsForTeamById(System.Guid)">
 <summary>
 Gets all the project permission entries for the specified team.
 </summary>
 <param name="teamId">The unique identifier of the team for which to get permission entries.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetProjectPermissionsForTeamByName(System.String)">
 <summary>
 Gets all the project permission entries for the specified team.
 </summary>
 <param name="teamName">The name of the team for which to get permission entries.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.AddProjectPermissionToTeamById(System.Guid,System.Guid,System.Guid)">
 <summary>
 Adds a project permission entry to a team.
 </summary>
 <param name="teamId">The unique identifier of the team to which to add the permission.</param>
 <param name="projectId">The unique identifier of the project for which to add the permission.</param>
 <param name="permissionId">The unique identifier of the permission to add.</param>
 <returns>True if the permission was added, false if either the team or project did not exist.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.AddProjectPermissionToTeamByName(System.String,System.String,System.Guid)">
 <summary>
 Adds a project permission entry to a team.
 </summary>
 <param name="teamName">The name of the team to which to add the permission.</param>
 <param name="projectName">The name of the project for which to add the permission.</param>
 <param name="permissionId">The unique identifier of the permission to add.</param>
 <returns>True if the permission was added, false if either the team or project did not exist.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RemoveProjectPermissionFromTeamById(System.Guid,System.Guid,System.Guid)">
 <summary>
 Removes a project permission entry from a team.
 </summary>
 <param name="teamId">The unique identifier of the team from which to remove the permission.</param>
 <param name="projectId">The unique identifier of the project for which to remove the permission.</param>
 <param name="permissionId">The unique identifier of the permission to remove.</param>
 <returns>True if the permission was removed, false if the permission did not exist.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RemoveProjectPermissionFromTeamByName(System.String,System.String,System.Guid)">
 <summary>
 Removes a project permission entry from a team.
 </summary>
 <param name="teamName">The name of the team from which to remove the permission.</param>
 <param name="projectName">The name of the project for which to remove the permission.</param>
 <param name="permissionId">The unique identifier of the permission to remove.</param>
 <returns>True if the permission was removed, false if the permission did not exist.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetTeamGroupDataTablePermissionForTeam(System.Guid)">
 <summary>
 Returns a collection permissions that the specified team has for group tables.
 </summary>
 <param name="teamId">The unique identifier of the team to get the permissions for.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetTeamGroupDataTablePermissionsForGroupTable(System.Guid)">
 <summary>
 Returns a collection group data table permissions that the specified group data table has.
 </summary>
 <param name="groupTableId">The unique identifier of the group data table to get the permissions for.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetTeamGroupDataTablePermissionsForUser(System.Guid)">
 <summary>
 Returns a collection of group data table permissions that the specified user has.
 </summary>
 <param name="userId">The unique identifier of the user to fetch the permissions for.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetTeamGroupDataTablePermissionForGroupTable(System.Guid,System.Guid)">
 <summary>
 Returns the effective permission that a user has for the specified group data table.
 </summary>
 <param name="groupTableId">The identifier of the group data table to get the permissions of.</param>
 <param name="userId">The identifier of the user to get the permissions of.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SetGroupDataTablePermissionForTeam(System.Guid,System.Guid,DriveWorks.Security.GroupTablePermission)">
 <summary>
 Sets the specified permissions for the specified team and group.
 </summary>
 <param name="teamId">The unique identifier of the team to set the permissions for.</param>
 <param name="groupTableId">The unique identifier of the group table to set the permissions of.</param>
 <param name="permission">The permissions to set for the specified team and group data table.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.ClearProjectPermissionFromTeamById(System.Guid)">
 <summary>
 Clears the list of project permissions for the given team.
 </summary>
 <param name="teamId">The unique identifier of the team whose project permission list should be cleared.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.ClearProjectPermissionFromTeamByName(System.String)">
 <summary>
 Clears the list of project permissions for the given team.
 </summary>
 <param name="teamName">The name of the team whose project permission list should be cleared.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetAvailableProjectsForUserByName(System.String,System.Guid)">
 <summary>
 Gets the projects which are accessible to the specified user.
 </summary>
 <param name="loginName">The login name of the user.</param>
 <param name="permissionId">The permission the user needs to hold for the projects.</param>
 <returns>The projects which the user has the specified permission for.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetCapturedComponentId(System.String)">
 <summary>
 Gets the unique identifier assigned to the component with the specified path.
 </summary>
 <param name="componentPath"></param>
 <returns></returns>
 <remarks>
 <para>
 When a component is captured, and then uncaptured, it may still exist in the database as an older
 version. In that case, this method will return the id that was assigned the component when it
 was captured.
 </para>
 <para>
 DriveWorks ensures that at all times, there is only ever a 1 to 1 mapping between
 component identifiers, and their paths. 
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetCapturedComponentPath(System.Guid)">
 <summary>
 Gets the path assigned to the component with the specified unique identifier.
 </summary>
 <param name="componentId"></param>
 <returns></returns>
 <remarks>
 <para>
 When a component is captured, and then uncaptured, it may still exist in the database as an older
 version. In that case, this method will return the path that was assigned the component when it
 was captured.
 </para>
 <para>
 DriveWorks ensures that at all times, there is only ever a 1 to 1 mapping between
 component identifiers, and their paths. 
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetCapturedComponents(System.Boolean)">
 <summary>
 Gets information about all of the captured components in the group.
 </summary>
 <param name="includeDeletedComponents">True to include components which have been deleted in the results.</param>
 <returns>An array containing one instance of the <see cref="T:DriveWorks.Components.CapturedComponentInfo" /> class for each captured component.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetCapturedComponentDataById(System.Guid)">
 <summary>
 Gets the raw data for the component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component to retrieve.</param>
 <returns>A byte array containing the UTF8 encoded XML which describes the component.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetCapturedComponentDataByPath(System.String)">
 <summary>
 Gets the raw data for the component with the specified path.
 </summary>
 <param name="componentPath">The fully-qualified path of the component to retrieve.</param>
 <returns>A byte array containing the UTF8 encoded XML which describes the component.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.IsCapturedComponent(System.String)">
 <summary>
 Gets whether the component with the specified path has been captured.
 </summary>
 <param name="componentPath">The path to the component to test.</param>
 <returns>True if a component with the given path is captured.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SaveCapturedComponent(System.Guid,System.String,System.String,DriveWorks.Internal.Group.RawCapturedComponent)">
 <summary>
 Saves a new component to the group.
 </summary>
 <param name="componentId">The unique identifier of the component.</param>
 <param name="componentPath">The path to the component to save.</param>
 <param name="componentType">The type of the component to save.</param>
 <param name="componentData">The component to save to the group.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.ChangeComponentPathByPath(System.String,System.String)">
 <summary>
 Updates the path of the specified component.
 </summary>
 <param name="originalComponentPath">The original path to the component to update.</param>
 <param name="updatedComponentPath">The new path to the component.</param>
 <returns>True if the component was successfully rereferenced.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.ChangeComponentPathById(System.Guid,System.String)">
 <summary>
 Updates the path of the specified component.
 </summary>
 <param name="originalComponentId">The unique identifier of the component to update.</param>
 <param name="updatedComponentPath">The new path to the component.</param>
 <returns>True if the component was successfully rereferenced.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetProjects">
 <summary>
 Gets all the projects in the group.
 </summary>
 <returns>An array of project details.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetProjectByName(System.String)">
 <summary>
 Gets a project with the specified name.
 </summary>
 <param name="projectName">The name of the project to retrieve.</param>
 <returns>A project details instance for the project with the given name, or a null reference if no project with the given name exists.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetProjectById(System.Guid)">
 <summary>
 Gets a project with the specified unique identifier.
 </summary>
 <param name="projectId">The unique identifier of the project to retrieve.</param>
 <returns>A project details instance for the project with the given name, or a null reference if no project with the given name exists.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RegisterProject(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Registers a project in the group.
 </summary>
 <param name="projectId">The unique identifier of the project to register.</param>
 <param name="projectName">The name of the project.</param>
 <param name="directoryPath">The path to the directory which contains the project and related files.</param>
 <param name="extension">The extension of the project file, e.g. ".drivegroup".</param>
 <param name="hidden">True if the project is hidden, otherwise false.</param>
 <param name="deployed">True if the project is deployed, otherwise false.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.TryUpdateProject(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Updates a project in the group.
 </summary>
 <param name="projectId">The unique identifier of the project to register.</param>
 <param name="projectName">The name of the project.</param>
 <param name="directoryPath">The path to the directory which contains the project and related files.</param>
 <param name="extension">The extension of the project file, e.g. ".drivegroup".</param>
 <param name="hidden">True if the project is hidden, otherwise false.</param>
 <param name="deployed">True if the project is deployed, otherwise false.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteProjectById(System.Guid)">
 <summary>
 Deletes an existing project using the project Id.
 </summary>
 <param name="projectId">The identifier which uniquely identifies the project to delete.</param>
 <returns>True if the project was found and unregistered, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteProjectByName(System.String)">
 <summary>
 Deletes a project from the group using the project name.
 </summary>
 <param name="name">Name of the project to delete.</param>
 <returns>True if successfully deleted.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetSpecificationByName(System.String)">
 <summary>
 Gets the specification details for the specification with the given
 name.
 </summary>
 <param name="name">The name of the specification to retrieve.</param>
 <returns>The specification details, or a null reference if the specification doesn't exist.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetSpecificationById(System.Int32)">
 <summary>
 Gets the specification details for the specification with the given
 numerical identifier.
 </summary>
 <param name="id">The unique numerical identifier of the specification to retrieve.</param>
 <returns>The specification details, or a null reference if the specification doesn't exist.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetSpecificationDocuments(System.Int32)">
 <summary>
 Gets a specification's documents.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get documents.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteSpecificationDocument(System.Guid)">
 <summary>
 Removes the specification document reference with the given identifier.
 </summary>
 <param name="id">The unique ID identifier of the specification document to remove.</param>
 <returns>True if the specification was found and removed, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteSpecification(System.Int32)">
 <summary>
 Removes the specification with the given identifier.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification to remove.</param>
 <returns>True if the specification was found and removed, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteEmbeddedSpecificationDependencies(System.Int32)">
 <summary>
 Removes the component dependencies from the group, for the embedded child specification with the given identifier.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification to remove.</param>
 <returns>True if dependencies for this specification were found and removed, false if there were no dependencies to remove.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SpecificationExists(System.String)">
 <summary>
 Determines whether a specification with the given name exists.
 </summary>
 <param name="specificationName">The name of the specification to check for.</param>
 <returns>True if a specification with the given name is already registered.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.ReserveSpecificationId">
 <summary>
 Reserves a identifier and report for a new specification.
 </summary>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.ResetSpecificationIdPool">
 <summary>
 Clears the specification Id pool for this group.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown when there are current specifications in the group.</exception>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SetSpecificationGlobalPoolCursor(System.Int32)">
 <summary>
 Updates the cursor in the global pool.
 </summary>
 <param name="value">The new cursor value.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetUserToken(System.Guid)">
 <summary>
 Gets the matching user's login token.
 </summary>
 <param name="userId">The id of the user to get the token of.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RegisterSpecification(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.Guid,System.Guid,System.Guid,System.String,System.String,System.Guid,System.String,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.String,System.String[])">
 <summary>
 Registers a specification with the group.
 </summary>
 <param name="id">The unique identifier of the specification.</param>
 <param name="parentId">The optional unique identifier of the parent specification, or a null reference (Nothing in Visual Basic) if the specification is not a child specification.</param>
 <param name="name">The name of the specification.</param>
 <param name="directory">The path to the specification directory.</param>
 <param name="metadataDirectory">The path to the specification metadata directory, relative to the specification directory.</param>    
 <param name="creatorId">The id of the user which created the specification.</param>
 <param name="editorId">The id of the user which last edited the specification.</param>
 <param name="projectId">The unique identifier of the project from which the specification was created.</param>
 <param name="originalProjectName">The name of the project from which the specification was created.</param>
 <param name="originalProjectExtension">The file extension of the project from which the specification was created.</param>
 <param name="stateId">The unique identifier of the specification-flow state of the specification.</param>
 <param name="stateName">The display name of the specification-flow state of the specification.</param>
 <param name="stateType">The type of the specification-flow state of the specification.</param>
 <param name="dateCreated">The date the specification was created.</param>
 <param name="dateEdited">The data the specification was edited.</param>
 <param name="isCreatorPermitted">Whether the creator is permitted to view the specification.</param>
 <param name="isOwnerPermitted">Whether the owner is permitted to view the specification.</param>
 <param name="isUniversal">Whether everyone is permitted to view the specification.</param>
 <param name="specificationProjectExtension">The file extension of the specification's project.</param>
 <param name="tags">The tags associated with the specification.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateSpecification(System.Int32,System.String,System.String,System.String,System.Guid,System.Guid,System.String,System.Int32,System.Boolean,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.String,System.String[])">
 <summary>
 Updates a specification in the group.
 </summary>
 <param name="id">The unique identifier of the specification.</param>
 <param name="name">The name of the specification.</param>
 <param name="directory">The path to the specification directory.</param>
 <param name="metadataDirectory">The path to the specification metadata directory, relative to the specification directory.</param>    
 <param name="editorId">The id of the user which last edited the specification.</param>
 <param name="stateId">The unique identifier of the specification-flow state of the specification.</param>
 <param name="stateName">The display name of the specification-flow state of the specification.</param>
 <param name="stateType">The type of specification-flow state of the specification.</param>
 <param name="isArchived">Whether the specification is archived.</param>
 <param name="dateEdited">The data the specification was edited.</param>
 <param name="isCreatorPermitted">Whether the creator is permitted to view the specification.</param>
 <param name="isOwnerPermitted">Whether the owner is permitted to view the specification.</param>
 <param name="isUniversal">Whether everyone is permitted to view the specification.</param>
 <param name="specificationProjectExtension">The file extension of the specification's project.</param>
 <param name="tags">The tags assoicated with the specification.</param>
 <returns>True if the specification was found and updated, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateSpecificationTeams(System.Int32,System.Guid[])">
 <summary>
 Update the list of teams that have access to the given specification.
 </summary>
 <param name="specificationId">Identification of the specification of which to change the teams.</param>
 <param name="teamIds">Identifications of the teams that will be able to access the specification.</param>
 <returns>True if the update was successful.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetSpecificationTeams(System.Int32)">
 <summary>
 Gets the team identifiers that have access to the given specification.
 </summary>
 <param name="specificationId">The unique identifier of the specification of which to change the teams.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateSpecificationArchivedStatus(System.Int32,System.Boolean)">
 <summary>
 Updates the archived status of the given specification.
 </summary>
 <param name="specificationId">The unique identifier of the specification of which to change the archived status.</param>
 <param name="isArchived">new archived status of the specification.</param>
 <returns>True if the archived status was updated.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateSpecificationTags(System.Int32,System.String[])">
 <summary>
 Updates the tags for the specified specification.
 </summary>
 <param name="specificationId">The Id of the specification to update.</param>
 <param name="newTags">The new tags to associate with the specification.</param>
 <returns>True if the tags were updated successfully, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateSpecificationDocumentPath(System.Int32,System.Guid,System.String)">
 <summary>
 Updates the specification document path.
 </summary>
 <param name="specificationId">Identification of the specification containing the document.</param>
 <param name="id">Identification of the document to update.</param>
 <param name="path">New path of the document.</param>
 <returns>True if path successfully updated</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReportPath(System.Guid,System.String)">
 <summary>
 Updates the specification report path.
 </summary>
 <param name="id">Identification of the report to update.</param>
 <param name="path">New path of the report.</param>
 <returns>True if path successfully updated</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RegisterSpecificationDocument(System.Guid,System.Int32,System.String,System.DateTime,System.Boolean)">
 <summary>
 Registers a new specification document with an existing specification.
 </summary>
 <param name="id">The unique identifier of the document which will be used if the document isn't already registered.</param>
 <param name="specificationId">The unique identifier of the parent specification.</param>
 <param name="documentPath">The fully qualified path to the document.</param>
 <param name="dateCreated">The date the document was created.</param>
 <param name="isHidden">True if the document is filtered from the the normal end-user view.</param>
 <returns>If the document is already registered, the existing document identifier is returned, otherwise the value of the <paramref name="id" /> parameter is returned.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RegisterSpecificationReport(System.Int32,System.Guid)">
 <summary>
 Registers the specified report with the given specification.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification with which to register the specification.</param>
 <param name="reportId">The unique identifier of the report to register.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetSpecificationReports(System.Int32)">
 <summary>
 Gets details of the reports that have been registered against the specification with the given specification identifier.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification for which to get report details.</param>
 <returns>An array of report details.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteSpecificationReport(System.Guid)">
 <summary>
 Deletes all data associated with the specified report from the Group.
 </summary>
 <param name="reportId">The unique identifier of the report to remove.</param>
 <returns>True if the report is found and removed.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetSpecificationTasks(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets an enumerator which can be used to retrieve tasks in a given type of state in chronological order.
 </summary>
 <param name="taskType">The type of task to retrieve.</param>
 <param name="descending">True to retrieve tasks in reverse chronological order of when their parent specifications were created.</param>
 <param name="includeComplete">True to include complete tasks, otherwise false.</param>
 <param name="includeIncomplete">True to include incomplete tasks, otherwise false.</param>
 <param name="includeFailed">True to include failed tasks, otherwise false.</param>
 <param name="includeMissingSpecifications">True to include tasks whose specification is absent.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetTasksForSpecification(System.Int32,System.String)">
 <summary>
 Gets all tasks for a specification.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
 <param name="taskType">Optionally the type of task to retrieve. If this is not included all task types will be included.</param>
 <returns>An array of tasks, matching the specified type, for the specification.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetSpecificationTask(System.Guid)">
 <summary>
 Gets the specification task with the specified id.
 </summary>
 <param name="taskId">The id of the specification task to retrieve.</param>
 <returns>The specification task with the specified id.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteSpecificationTask(System.Guid)">
 <summary>
 Deletes the specification task with the specified unique identifier.
 </summary>
 <param name="taskId">The unique identifier of the task to delete.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.MarkSpecificationTaskCompleted(System.Guid,System.Boolean)">
 <summary>
 Attempts to mark the specified specification task as being complete/incomplete.
 </summary>
 <param name="taskId">The unique identifier of the task to mark.</param>
 <param name="completed">True if the task is completed, otherwise false.</param>
 <returns></returns>
 <remarks>This will reset the fail count of the task.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.MarkSpecificationTaskFailed(System.Guid,System.Int32)">
 <summary>
 Attempts to mark the specified specification task as having failed.
 </summary>
 <param name="taskId">The unique identifier of the task to mark.</param>
 <param name="failedCount">The number of times the task has failed.</param>
 <returns></returns>
 <remarks>This will mark the task as not being completed.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateSpecificationTask(DriveWorks.Specification.SpecificationTaskDetails)">
 <summary>
 Updates the data in the specified specification task.
 </summary>
 <param name="task">The task to update.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateSpecificationTaskTags(System.Guid,System.String[])">
 <summary>
 Updates the tags for the specified specification task.
 </summary>
 <param name="taskId">The unique identifier of the task to update.</param>
 <param name="newTags">The new tags to associate with the task.</param>
 <returns>True if the tags were updated successfully, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RegisterSpecificationTask(System.Int32,System.Guid,System.String,System.Byte[],System.Int32,System.Boolean,System.String[])">
 <summary>
 Updates the data in the specified specification task.
 </summary>
 <param name="specificationId">The unique identifier of the specification for which to register the task.</param>
 <param name="id">The unique identifier of the task.</param>
 <param name="type">The name of the provider which understands the task.</param>
 <param name="data">The task's serialized data.</param>
 <param name="failedCount">The task's failed count.</param>
 <param name="isCompleted">The task's completion status.</param>
 <param name="tags">The tags associated with the task.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetSpecificationProperties(System.Int32)">
 <summary>
 Gets the properties for the specified specification.
 </summary>
 <param name="specificationId">The id of the specification for which the properties will be retrieved.</param>
 <returns>An enum that determines if the properties were successfully retrieved and if so a wrapper around the properties XML.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SetPropertiesForSpecification(System.Int32,System.Byte[])">
 <summary>
 Sets the properties for the specification to the group.
 </summary>
 <param name="specificationId">The Id of the specification for which to add properties.</param>
 <param name="specificationProperties">The properties to add for the specification in their raw form.</param>
 <remarks>If properties already exist for this specification then the values will be updated.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetGroupSetting(System.String)">
 <summary>
 Gets the named setting from the group.
 </summary>
 <param name="name">The name of the setting to retrieve.</param>
 <returns>The string value of the setting that was retrieved, or a null reference (Nothing in Visual Basic) if the setting was not present.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SetGroupSetting(System.String,System.String)">
 <summary>
 Saves the named setting to the group.
 </summary>
 <param name="name">The name of the setting.</param>
 <param name="value">The value of the setting.</param>
 <remarks>Using a null reference (Nothing in Visual Basic) as the value will delete the setting.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetProjectRuleHistory(System.Guid)">
 <summary>
 Gets the complete rule version history for the entire project.
 </summary>
 <param name="projectId">The id of the project to get the history of.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetRuleHistory(System.Guid,System.String,System.String,System.String)">
 <summary>
 Gets the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
 <returns>An array of rule version entries.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.AddRuleHistoryDetails(DriveWorks.RuleVersionDetails)">
 <summary>
 Adds a specific item of history to the group's rule history storage.
 </summary>
 <param name="details">The details to add.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.AddRuleHistory(System.Guid,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Adds a new entry to the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
 <param name="rule">The rule at the current version.</param>
 <param name="comment">The comment at the current version.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.ClearRuleHistory(System.Guid,System.String,System.String,System.String)">
 <summary>
 Clears the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteRuleHistory(System.Guid,System.String,System.String,System.String)">
 <summary>
 Deletes the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteProjectRuleHistory(System.Guid)">
 <summary>
 Remove all rule history for a specific project.
 </summary>
 <param name="projectId">The id of the project to remove the history of.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.CommitRuleHistory(DriveWorks.RuleVersionDetails[])">
 <summary>
 Commits the specified rule history to the group.
 </summary>
 <param name="ruleHistories">The rule histories to commit.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.CreateReportWriter(System.Guid,System.String,DriveWorks.Reporting.ReportingLevel)">
 <summary>
 Creates a report writer for a new report.
 </summary>
 <param name="id">The unique identifier to assign to the report.</param>
 <param name="title">The title of the report.</param>
 <param name="level">The maximum entry level to write to the report.</param>
 <returns>A report writer which can be used to write to the report.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReportAsXDocument(System.Guid)">
 <summary>
 Gets a report as XML.
 </summary>
 <param name="reportId">The unique identifier of the report to get.</param>
 <returns>An string containing the XML of the report.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteReleasedComponentReference(System.String)">
 <summary>
 Deletes the released component reference.
 </summary>
 <param name="targetPath">The unique target path of the component to delete.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReleasedComponentState(System.Guid,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Updates the state of a released component.
 </summary>
 <param name="componentId">The unique identifier of the component to update.</param>
 <param name="generating">True to mark the component for generation, if this is true, the value of the <paramref name="generating" /> and <paramref name="failCount" /> parameters are ignored.</param>
 <param name="generated">True to mark the component as generated, this automatically resets the failure count to zero, and the <paramref name="failCount" /> property is ignored.</param>
 <param name="failCount">Updates the failure count of the component, for this to be processed, the <paramref name="generating" /> and <paramref name="generated" /> parameters must both be set to false.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReleasedComponentState(System.String,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Updates the state of a released component.
 </summary>
 <param name="targetPath">The unique target path of the component to update.</param>
 <param name="generating">True to mark the component for generation, if this is true, the value of the <paramref name="generating" /> and <paramref name="failCount" /> parameters are ignored.</param>
 <param name="generated">True to mark the component as generated, this automatically resets the failure count to zero, and the <paramref name="failCount" /> property is ignored.</param>
 <param name="failCount">Updates the failure count of the component, for this to be processed, the <paramref name="generating" /> and <paramref name="generated" /> parameters must both be set to false.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentDataById(System.Guid)">
 <summary>
 Gets the raw data for the component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component to retrieve.</param>
 <returns>The component data as a byte array containing the UTF8 encoded XML which describes the component and additional information.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentDataByTargetPath(System.String)">
 <summary>
 Gets the raw data for the component with the specified target path.
 </summary>
 <param name="targetPath">The target path of the component to retrieve.</param>
 <returns>The component data as a byte array containing the UTF8 encoded XML which describes the component and additional information.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentReferenceTree(System.Guid[])">
 <summary>
 Gets hierarchical reference information about the components with the given identifiers.
 </summary>
 <param name="ids">The identifiers of the released components to traverse and return reference information.</param>
 <returns>An instance of an object which implements the <see cref="T:DriveWorks.Components.IReleasedComponentReferenceTree" /> interface.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentsAwaitingPreviewEnumerator(System.Boolean)">
 <summary>
 Gets an object which will enumerate the released components awaiting preview in the group.
 </summary>
 <param name="topLevelOnly">True to inlcude top level components only.</param>
 <returns>An enumerator for all released components awaiting preview.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentReferenceEnumerator2(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets an object which will enumerate the released component references in the group.
 </summary>
 <param name="includeGeneratedParents">True to include references in which the parents are generated.</param>
 <param name="includeNotGeneratedParents">True to include references in which the parents haven't been generated.</param>
 <param name="includeFailedParents">True to include references in which the parents have failed.</param>
 <param name="includeGeneratedChildren">True to include references in which the child has been generated.</param>
 <param name="includeNotGeneratedChildren">True to include references in which the child hasn't been generated.</param>
 <param name="includeFailedChildren">True to include references in which the child has failed.</param>
 <returns>An enumerator over the released components references in the group.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentIdsForGeneration">
 <summary>
 Gets an object which will enumerate the ids of released components which are ready to be generated in the group.
 </summary>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedOrphanComponentIdsForGeneration">
 <summary>
 Gets an object which will enumerate the ids of released components which are ready to be generated in the group and don't belong to any specification.
 </summary>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentEnumerator2(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets an object which will enumerate the released components in the group.
 </summary>
 <param name="topLevelOnly">True to only get top level (root) components.</param>
 <param name="includeGenerated">True to include generated components, false to exclude them.</param>
 <param name="includeNotGenerated">True to include components which haven't been generated, false to exclude them.</param>
 <param name="includeFailed">True to include failed components, false to exclude them.</param>
 <returns>An enumerator over the released components in the group.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentDetailsByPath(System.String)">
 <summary>
 Gets the details of a driven component with the specified path.
 </summary>
 <param name="componentPath">The full path to the component for which to get the details.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentDetailsById(System.Guid)">
 <summary>
 Gets the details of a driven component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component for which to get the details.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentsDetailsById(System.Guid[])">
 <summary>
 Gets the details of all driven components matching the specified component ids.
 </summary>
 <param name="componentIds">The unique identifiers of the components to retrieve the details of.</param>
 <returns>An array of driven component details matching the specified component ids.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedTasksDataForComponent(System.Guid)">
 <summary>
 Gets an object that will enumerate all released component tasks for the component with the given id.
 </summary>
 <param name="componentId">The id of the component for which to get component tasks.</param>
 <returns>An enumerator that will enumerate all released component tasks for the specified component.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentsForSpecification(System.Int32,System.Boolean)">
 <summary>
 Gets the details of all released components for the specified specification.
 </summary>
 <param name="specificationId">The unique identifier of the specification.</param>
 <param name="includeChildSpecifications">True to include components generated by child specifications.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentDetailsByName(System.String,System.String)">
 <summary>
 Gets the details of a driven component with the specified component name.
 </summary>
 <param name="componentName">The name of the component for which to get the details.</param>
 <param name="componentType">The type of the component for which to get the details.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SaveReleaseResults(DriveWorks.Internal.Group.RawReleaseComponentsResults)">
 <summary>
 Saves the results of releasing one or more components.
 </summary>
 <param name="results">The results to save to the database.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RegisterReleasedComponentReport(System.Guid,System.Guid)">
 <summary>
 Registers the specified report with the given component.
 </summary>
 <param name="componentId">The unique identifier of the driven component.</param>
 <param name="reportId">The unique identifier of the report to register.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentReports(System.Guid)">
 <summary>
 Gets details of the reports that have been registered against the specified component.
 </summary>
 <param name="componentId">The unique identifier of the component for which to get report details.</param>
 <returns>An array of report details.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetReleasedComponentsComponentDataByMasterPath(System.String)">
 <summary>
 Gets the <see cref="T:DriveWorks.Components.Data.ReleasedComponentData"/> for all released components that match the specified master path.
 </summary>
 <param name="masterPath">The path to the master file of which to retrieve released component data for.</param>
 <returns>The component data as a byte array containing the UTF8 encoded XML which describes the component and additional information.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReleasedComponentTargetPath(System.String,System.String)">
 <summary>
 Updates a released component's target path.
 </summary>
 <param name="originalPath">The original target file path.</param>
 <param name="newPath">The new target file path.</param>
 <returns>True if successfully updated.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReleasedComponentDataByTargetPath(System.String,System.Byte[])">
 <summary>
 Updates a released component's data.
 </summary>
 <param name="targetPath">The target path of the component to update.</param>
 <returns>True if successfully updated.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReleasedComponentMasterPath(System.String,System.String)">
 <summary>
 Updates all released components that match the specified master path to the new path.
 </summary>
 <param name="originalPath">The original master file path.</param>
 <param name="newPath">The new master file path.</param>
 <returns>True if all were successfully updated, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReleasedComponentDataById(System.Guid,System.Byte[])">
 <summary>
 Updates the component data for the released component with the given id.
 </summary>
 <param name="componentId">The unique identifier of the released component to update.</param>
 <param name="data">The new data to set on the specified released component.</param>
 <returns>True if the update was successful, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReleasedComponentTags(System.Guid,System.String[])">
 <summary>
 Updates the tags for the specified released component.
 </summary>
 <param name="componentId">The Id of the released component to update.</param>
 <param name="newTags">The new tags to associate with the released component.</param>
 <returns>True if the tags were updated successfully, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReleasedComponentFlags(System.Guid,DriveWorks.Components.ReleasedComponentFlags)">
 <summary>
 Updates the flags for the specified released component.
 </summary>
 <param name="componentId">The Id of the released component to update.</param>
 <param name="newFlags">The new flags to associate with the released component.</param>
 <returns>True if the flags were updated successfully, otherwise False.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.UpdateReleasedComponentPreviewPath(System.Guid,System.String)">
 <summary>
 Updates the path to the preview file created for the specified component.
 </summary>
 <param name="componentId">The Id of the released component for which to update the path.</param>
 <param name="newPreviewPath">The full path to the preview file.</param>
 <returns>True if the path was successfully updated, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.IncrementReleasedComponentFailureCount(System.Guid)">
 <summary>
 Increments the failure count of a released component.
 </summary>
 <param name="componentId">The unique identifier of the released component to update.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteReleasedComponentReport(System.Guid)">
 <summary>
 Deletes the specified released component report.
 </summary>
 <param name="reportId">The Id of the report to delete.</param>
 <returns>True if the report was deleted successfully.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.DeleteReleasedComponentReports(System.Guid)">
 <summary>
 Deletes all released component reports for the specified component.
 </summary>
 <param name="componentId">The Id of the component for which all of its reports should be deleted.</param>
 <returns>True if all reports were deleted successfully.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.BatchUpdateReleasedComponentsTags(System.Collections.Generic.Dictionary{System.String[],System.Guid[]})">
 <summary>
 Updates components to their new tags in one transaction.
 </summary>
 <param name="tagsToComponentsMap">A mapping of tags to the ids of the components that need to be updated to them.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.StoreGroupDataTableEntry(DriveWorks.Internal.Group.GroupDataTableDetails)">
 <summary>
 Stores the specified details in the group. 
 This will either update an existing entry or create a new one, depending on the Id of the details.
 </summary>
 <param name="details">The details to store</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetGroupDataTableEntries">
 <summary>
 Gets a collection of group data table details that exist in this group.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RemoveGroupDataTableEntry(System.Guid)">
 <summary>
 Removes a group data table entry from this group.
 </summary>
 <param name="id">The identifier for the group data table entry to remove.</param>
 <returns>Returns True if the entry was removed from the group.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetGroupDataTableData(System.Guid)">
 <summary>
 Gets table data for a group table in compressed byte form.
 </summary>
 <param name="id">The identifier of the group table to get data from.</param>
 <returns>Collection of bytes that represent the table in compressed tabbed delimited UTF8.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SetGroupDataTableData(System.Guid,System.Byte[])">
 <summary>
 Sets table data for a group table in compressed byte form.
 </summary>
 <param name="id">The identifier of the group table to set data of.</param>
 <param name="tableData">Collection of bytes that represent the table in compressed tabbed delimited UTF8.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SetGroupDataTableRows(System.Guid,System.String[][],System.String)">
 <summary>
 Appends or updates rows for a group table
 </summary>
 <param name="id">The identifier of the group tavle to set the rows of.</param>
 <param name="data">The data to write to the row(s).</param>
 <param name="controlColumnNames">The names of the control columns to find the rows to update.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationGetAgents">
 <summary>
 Gets a list of the registered agents for the service.
 </summary>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationGetAgentLog(System.String)">
 <summary>
 Gets the agent message log of an agent.
 </summary>
 <param name="agentName">The name of the agent whose message log is to be returned.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAddAgentLogEntry(System.String,System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Adds an agent log entry.
 </summary>
 <param name="agentName">The name of the agent who the log entry originates from.</param>
 <param name="dateAndTime">The date and time of the event.</param>
 <param name="sourceDisplayName">The display name of the source of the event.</param>
 <param name="targetDisplayName">The display name of the target of the event.</param>
 <param name="description">The description of the event.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentRegister(System.String)">
 <summary>
 Registers a generation agent.
 </summary>
 <param name="agentName">The name of the agent.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentGetNextPendingComponent(System.Guid,DriveWorks.JobRequestTagInformation)">
 <summary>
 Gets the unique identifier of the next pending component.
 </summary>
 <param name="agentId">The unique identifier of the agent.</param>
 <param name="tagInformation">The tag information for the job request.</param>
 <returns>Information about the next component to generate.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentSetPreferredFailureThreshold(System.Guid,System.Int32)">
 <summary>
 Sets the preferred failure threshold for the agent.
 </summary>
 <param name="agentId">The unique identifier of the agent.</param>
 <param name="newThreshold">The new preferred failure threshold.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentSetTagInformation(System.Guid,DriveWorks.JobRequestTagInformation)">
 <summary>
 Sets the tag information for the agent.
 </summary>
 <param name="agentId">The unique identifier of the agent.</param>
 <param name="tagInformation">Information about the tags that this agent supports and blocks.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentPendingComponentNotifyFailed(System.Guid)">
 <summary>
 Notifies the agent that its current pending component failed.
 </summary>
 <param name="agentId">The unique identifier of the agent.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentPendingComponentNotifyGenerated(System.Guid)">
 <summary>
 Notifies the agent that its current pending component was generated.
 </summary>
 <param name="agentId">The unique identifier of the agent.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentPendingComponentNotifyGenerating(System.Guid)">
 <summary>
 Notifies the agent that its current pending component is about to be generated.
 </summary>
 <param name="agentId">The unique identifier of the agent.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentPendingComponentNotifyPreviewFileCreated(System.Guid,System.String)">
 <summary>
 Notifies the agent that a preview file was successfully created for its current pending component.
 </summary>
 <param name="agentId">The unique identifier of the agent.</param>
 <param name="previewPath">The full path to the preview file.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentPendingComponentNotifyPreviewFailed(System.Guid,System.String)">
 <summary>
 Notifies the agent that we failed to create a preview file for its current pending component.
 </summary>
 <param name="agentId">The unique identifier of the agent.</param>
 <param name="reason">The reason why the preview failed.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentPendingComponentNotifyRequiresRetry(System.Guid)">
 <summary>
 Notifies the generation agent manager that the agent could not process this component and requires it to be retried.
 </summary>
 <remarks>This does not affect the failure count on the component.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GenerationAgentDispose(System.Guid)">
 <summary>
 Notifies the agent that is is no longer required.
 </summary>
 <param name="agentId">The unique identifier of the agent.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SendAgentNotification(System.String,System.Byte[])">
 <summary>
 Attempts to send a notification message to the specified agent.
 </summary>
 <param name="agentName">Name of the agent to send the message to</param>
 <param name="data">The serialized notification to send to the specified agent.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SendAgentRequest(System.String,System.Byte[])">
 <summary>
 Attempts to send a request message to the specified agent. Then waits for a reply and returns that result.
 </summary>
 <param name="agentName">The name of the agent to send the request message to.</param>
 <param name="data">The serialized request to send to the specified agent.</param>
 <returns>The serialized reply from the specified agent.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.RegisterJobQueue(System.String)">
 <summary>
 Registers a queue of the specified type of job.
 </summary>
 <param name="jobType">The type of jobs that the queue is concerned with.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetNextJob(System.String,DriveWorks.JobRequestTagInformation)">
 <summary>
 Gets the next job in the queue for the specified type.
 </summary>
 <param name="jobType">The type of job to retrieve.</param>
 <param name="tagInformation">The tag information for the job request.</param>
 <returns>The serialized next job to process.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SetJobFailed(System.String,System.String)">
 <summary>
 Sets the specified job as having failed to be processed by the client.
 </summary>
 <param name="jobType">The type of job that wasn't processed.</param>
 <param name="jobId">The Id of the job that wasn't processed.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.CompleteJob(System.String,System.String)">
 <summary>
 Sets the specified job as being completed by the client.
 </summary>
 <param name="jobType">The type of job that was completed.</param>
 <param name="jobId">The Id of the job that was completed.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.GetAllJobs(System.String)">
 <summary>
 Gets all pending and currently in progress jobs that the current user has access to, for the specified job type.
 </summary>
 <param name="jobType">The type of jobs to retrieve.</param>
 <returns>All pending and currently in progress jobs for the specified job type.</returns>
 <remarks>This will take into account the connected user.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SendMessage(DriveWorks.Internal.Group.Messaging.Messages.MessageBase)">
 <summary>
 Sends a message that doesn't require a response, to the server for processing
 </summary>
 <param name="message">The message that needs to be processed.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SendRequest(DriveWorks.Internal.Group.Messaging.Messages.MessageBase)">
 <summary>
 Sends a request that requires a response, to the server for processing.
 </summary>
 <param name="message">The message that needs to be processed.</param>
 <returns>The response to the message.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IGroupServerConnectionContract.SendAsyncRequest(DriveWorks.Internal.Group.Messaging.Messages.MessageBase)">
 <summary>
 Sends a message, that requires a response, asynchronously to the group for processing.
 </summary>
 <param name="message">The message to be processed.</param>
 <returns>A task containing the result of the message, as an array of bytes.</returns>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorHandle">
 <summary>
 Represents a handle to an active enumerator.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorHandle.Id">
 <summary>
 The unique identifier of the enumerator.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorResult">
 <summary>
 Represents the result of an enumerator Move Next operation.
 </summary>
</member>
<member name="F:DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorResult.Result">
 <summary>
 The results of the enumeration result, may be a null reference if enumeration
 has finished, and may contain more than one result.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorResult.HasMore">
 <summary>
 Determines whether more results are available from the server.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorResultAndHandle">
 <summary>
 Provides the return type of calling an enumerated method on the server, contains both
 the first set of results of the enumeration operation, and a handle to the enumerator 
 to retrieve more results.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorResultAndHandle.Result">
 <summary>
 The initial set of results of the enumeration operation.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorResultAndHandle.Handle">
 <summary>
 A handle to the enumerator for retrieving further results.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Protocol.IEnumeratedServiceBase">
 <summary>
 An interface from which WCF service contracts which need to support
 enumeration can inherit.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IEnumeratedServiceBase.EnumeratorGetNext(DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorHandle)">
 <summary>
 Gets the next set of results from the enumerator with the given handle.
 </summary>
 <param name="enumeratorHandle">The handle to the enumerator.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IEnumeratedServiceBase.EnumeratorGetEstimatedResultCount(DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorHandle)">
 <summary>
 Gets a count of the results expected to be retrieved by the enumerator.
 </summary>
 <param name="enumeratorHandle">The handle to the enumerator.</param>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.IEnumeratedServiceBase.EnumeratorRelease(DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorHandle)">
 <summary>
 Releases the enumerator with the given handle.
 </summary>
 <param name="enumeratorHandle">The handle to the enumerator.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Protocol.RemoteEnumerator`2">
 <summary>
 Provides an enumerator over an enumerated WCF service operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Protocol.RemoteEnumerator`2.#ctor(`0,System.Func{`0,DriveWorks.Internal.Group.Transport.Remote.Protocol.EnumeratorResultAndHandle})">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Internal.Group.Transport.Remote.Protocol.RemoteEnumerator`2" /> class.
 </summary>
 <param name="service">The service on which the enumeration operation exists.</param>
 <param name="enumeratorInitializer">A function which will call the enumeration operation on the service passed to <paramref name="service" />.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.Transport.Remote.Server.RemoteGroupAdminService.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Internal.Group.Transport.Remote.Server.RemoteGroupAdminService" />
 </summary>
 <param name="connectionString">The connection string to the SQL Server to administer.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Server.RemoteGroupCoordinator">
 <summary>
 Coordinates shared activities for instances of the <see cref="T:DriveWorks.Internal.Group.Transport.Remote.Server.GroupServerConnectionContractImpl" /> class.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Server.RemoteGroupCoordinator.SpecificationPoolSynchronizationObject">
 <summary>
 Gets an object used to synchronize access to the specification information
 for a group.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Server.RemoteGroupCoordinator.ReleaseSynchronizationObject">
 <summary>
 Gets an object used to synchronize access to the release information
 for a group.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Server.RemoteGroupCoordinator.GroupTableSynchronizationObject">
 <summary>
 Gets an object used to synchronize access to group tables.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Server.RemoteGroupCoordinator.PollingJobQueues">
 <summary>
 Gets a lazily created object that manages the different job queues that use polling.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.Transport.Remote.Server.RemoteGroupCoordinator.MessageDispatcher">
 <summary>
 Gets a lazily created object responsible for dispatching messages to their handlers.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Group.Transport.Remote.Server.RemoteGroupResultComponentEnumerator`1">
 <summary>
 Provides support for iterating over a database result set.
 </summary>
 <typeparam name="T">The type of result.</typeparam>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.RawCapturedComponent">
 <summary>
 Used to transfer raw captured component data between a connection to a group and
 the Group API.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.RawCapturedComponent.#ctor(System.Byte[],System.Byte[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Internal.Group.RawCapturedComponent" />
 type.
 </summary>
 <param name="xmlData">The binary serialization of the XML comprising the component.</param>
 <param name="referenceData">
 The binary serialization of the array of unique identifiers of components referenced by 
 the component.
 </param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Internal.Group.RawCapturedComponent.XmlData">
 <summary>
 Gets the binary serialization of the XML comprising the component.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.RawCapturedComponent.ReferenceData">
 <summary>
 Gets the binary serialization of the array of unique identifiers of components referenced by 
 the component.
 </summary>
</member>
<member name="P:DriveWorks.Internal.Group.RawReleaseComponentsResults.DescendantId">
 <summary>
 Gets/sets the identifier of the descendant specification to which the release results belong.
 </summary>
 <remarks>This will only be populated if we are an embedded child specification.</remarks>
</member>
<member name="T:DriveWorks.Internal.Group.DbHelper">
 <summary>
 Provides helper methods designed to simplify data access.
 </summary>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.ConstructRuleVersionDetails(System.Data.IDataReader,System.Guid,System.String,System.String,System.String)">
 <summary>
 Constructs a rule version details from the data in the given reader which must be positioned 
 at a valid row.
 </summary>
 <param name="reader">The reader containing the data.</param>
 <returns>The rule version details.</returns>
 <remarks>The input reader must have the columns in the standard DriveWorks column order.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.ConstructProjectDetails(System.Data.IDataReader)">
 <summary>
 Constructs a project details structure from the data in the given reader which must be positioned 
 at a valid row.
 </summary>
 <param name="reader">The reader containing the data.</param>
 <returns>The team details.</returns>
 <remarks>The input reader must have the columns in the standard DriveWorks column order.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.ConstructTeamPermissionDetails(System.Data.IDataReader)">
 <summary>
 Constructs a team permission details structure from the data in the given reader which must be positioned 
 at a valid row.
 </summary>
 <param name="reader">The reader containing the data.</param>
 <returns>The team details.</returns>
 <remarks>The input reader must have the columns in the standard DriveWorks column order.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.ConstructTeamGroupTablePermissionDetails(System.Data.IDataReader)">
 <summary>
 Constructs team group table permission details from the data in the given reader which must be positioned at a valid row.
 </summary>
 <param name="reader">The reader containing the data.</param>
 <returns>The created details.</returns>
 <remarks>The input reader must have the columns in the standard DriveWorks column order.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.ConstructTeamDetails(System.Data.IDataReader)">
 <summary>
 Constructs a team details structure from the data in the given reader which must be positioned 
 at a valid row.
 </summary>
 <param name="reader">The reader containing the data.</param>
 <returns>The team details.</returns>
 <remarks>The input reader must have the columns in the standard DriveWorks column order.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.ConstructUserDetails(System.Data.IDataReader)">
 <summary>
 Constructs a user details structure from the data in the given reader which must be positioned 
 at a valid row.
 </summary>
 <param name="reader">The reader containing the data.</param>
 <returns>The user details.</returns>
 <remarks>The input reader must have the columns in the standard DriveWorks column order.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.ConstructSpecificationTaskDetails(System.Data.IDataReader)">
 <summary>
 Constructs a specification task details structure from the data in the given reader, which must be 
 positioned at a valid row.
 </summary>
 <param name="reader">The reader containing the data.</param>
 <returns>The constructed specification task details.</returns>
 <remarks>The input reader must have the columns in the standard DriveWorks column order.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.GetCommandText(System.String,System.Object[])">
 <summary>
 Gets a command suitable use for with SQL Server or SQL Server CE by automatically detecting the types
 of the arguments, converting/quoting and escaping them if necessary, and combining them with the format
 string using <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)" />.
 </summary>
 <param name="commandFormat">The format string representing the command text into which the arguments will be combined.</param>
 <param name="commandArgs">An array of arguments which will be converted to strings and combined with the command format.</param>
 <returns>A fully constructed string containing the command text.</returns>
 <remarks>
 Dates should be preconverted to UTC form for storage in the group.
 </remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.GuidArrayToByteArray(System.Guid[])">
 <summary>
 Serializes the given array of GUIDs to a byte array.
 </summary>
 <param name="ids">The unique identifiers to serialize.</param>
 <returns>An array of bytes containing the serialized GUID array.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.GuidArrayFromByteArray(System.Byte[])">
 <summary>
 Deserializes an array of GUIDs from the given byte array.
 </summary>
 <param name="bytes">A byte array containing zero or more GUIDs laid end to end.</param>
 <returns>An array of GUIDs.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.WriteReport(System.Data.IDbConnection,System.Guid,System.Xml.Linq.XDocument)">
 <summary>
 Adds in the specified report details to the given connection.
 </summary>
 <param name="connection">Connection to the database to add the report details to.</param>
 <param name="reportId">Identifier of the report to insert the details of.</param>
 <param name="reportDocument">Report data to write.</param>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.RetrieveGroupVersion(System.Data.Common.DbConnection)">
 <summary>
 Retrieves the group version information for the specified connection.
 </summary>
 <param name="connection">An open connection to the group database.</param>
 <returns>The group version information for this connection.</returns>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.EnsureGroupVersion(System.Data.Common.DbConnection)">
 <summary>
 Upgrades the group to the latest version, if necessary.
 </summary>
 <param name="connection">Open connection to group database.</param>
 <remarks>For use with Pro group databases.</remarks>
</member>
<member name="M:DriveWorks.Internal.Group.DbHelper.EnsureGroupVersion(System.Data.Common.DbConnection,DriveWorks.GroupVersionInformation)">
 <summary>
 Upgrades the group to the specified version, if necessary.
 </summary>
 <param name="connection">Open connection to the group database.</param>
 <param name="version">The version that the group should be.</param>
</member>
<member name="T:DriveWorks.Internal.Group.UpdateStatementBuilder">
 <summary>
 Helps build an update statement.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.UpdateStatementBuilder.#ctor(System.Data.IDbCommand,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Internal.Group.UpdateStatementBuilder" /> type.
 </summary>
 <param name="command">The command instance to be built up.</param>
 <param name="statementFormat">A string in the form "UPDATE SomeTable SET {0} [OptionalConditions]" where {0} gets replaced with the update specification.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.UpdateStatementBuilder.AddColumnIf(System.String,System.Object)">
 <summary>
 Adds a column and its value to the update specification if the value is not null.
 </summary>
 <param name="columnName">The name of the column to be updated.</param>
 <param name="value">The new value of the column.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.UpdateStatementBuilder.AddColumnIf(System.Boolean,System.String,System.Object)">
 <summary>
 Adds a column and its value to the update specification if the condition evaluates to true.
 </summary>
 <param name="condition">A condition which, if false, will suppress the addition of the column and value to the update specification.</param>
 <param name="columnName">The name of the column to be updated.</param>
 <param name="value">The new value of the column.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.UpdateStatementBuilder.AddColumn(System.String,System.Object)">
 <summary>
 Adds a column and its value to the update specification.
 </summary>
 <param name="columnName">The name of the column to be updated.</param>
 <param name="value">The new value of the column.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.UpdateStatementBuilder.FinishCommand">
 <summary>
 Finishes the command by settings its command text to the combination of the statement format passed to the constructor, 
 and the update specification created by calls to the <see cref="M:DriveWorks.Internal.Group.UpdateStatementBuilder.AddColumnIf(System.Boolean,System.String,System.Object)" />.
 </summary>
 <returns>True if the command is finished, false, if no columns were added.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Group.GroupConnectionFactory">
 <summary>
 Creates connections to DriveWorks groups.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.Group.GroupConnectionFactory.CreateConnection(DriveWorks.Hosting.EngineHost,System.String,DriveWorks.Security.IProviderCredentials)">
 <summary>
 Creates a new connection to the specified DriveWorks group.
 </summary>
 <param name="host">The object hosting the DriveWorks engine.</param>
 <param name="connectionString">The connection string which identifies the group to connnect to.</param>
 <param name="credentials">The credentials which identify the principal to log on to the group as.</param>
 <returns>A connection to the specified DriveWorks group.</returns>
 <remarks>
 <para>
 DriveWorks group connection strings are in the form <example>Key1=Value1;Key2=Value2;...;KeyN=ValueN</example>, where the ';' character
 may be escaped by repeating it twice, for example, 
 <example>Key1=Value1 which contains the ;; (semicolon) character;</example>.
 </para>
 <para>
 They keys and values are implementation specific, and the implementation must be specified by specifying the provider name as part of the connection string, e.g. 
 <example>Provider=LocalGroupConnection;FilePath=<i>PathToFile</i>;</example>
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMasterFunctions.GetApplicationName">
 <summary>
 Gets the name of the current Application.
 </summary>
 <returns>The name of the Application.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMasterProFunctions.SecGetTeamsForUser(System.String)">
<summary>
  Retrieves a table containing the team and display names of the teams the user belongs to.
</summary>
<param name="loginName">Login name for the user to check teams against.</param>
<returns>A table containing the team and display names of the teams the user belongs to.</returns>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMasterProFunctions.SecGetAllTeams">
 <summary>
 Returns a table of all the teams within the current users scope, with users belonging to each team.
 </summary>
 <returns>A table containing teams and users belonging to those teams.</returns>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMasterProFunctions.SecGetAllUsers">
 <summary>
 Returns a table array of user details in the group, including their teams.
 </summary>
 <returns>A table containing user details such as login and display name along with teams they belong to.</returns>
</member>
<member name="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanCalculationSuppressionContext">
 <summary>
 Represents a suppression context for a design master which has
 had its calculation suppressed.
 </summary>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanCalculationSuppressionContext.#ctor(Titan.Rules.Execution.ExecutionEngine)">
 <summary>
 Constructs the suppression context and suppresses the application.
 </summary>
 <param name="engine">The execution engine to suppress.</param>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanCalculationSuppressionContext.Dispose">
 <summary>
 Stops suppressing the application and forces a recalculation.
 </summary>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanConstant.DeleteCore">
 <summary>
 Deletes the constant
 </summary>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanConstant.SetValue(System.Object,System.Boolean)">
 <summary>
 Sets the value of the constant.
 </summary>
 <param name="value">The value to set.</param>
 <param name="forceUpdate">True if all dependent objects should be re-evaluated even if the value is different from the previous value.</param>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanConstantsProvider.Delete(DriveWorks.Internal.DesignMasters.TitanDM.TitanConstant)">
 <summary>
 For use by the <see cref="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanConstant" /> type to delete the specified constant.
 </summary>
 <param name="constant">The constant to delete.</param>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanConstantsProvider.SetConstantName(DriveWorks.Internal.DesignMasters.TitanDM.TitanConstant,System.String)">
 <summary>
 For use by the <see cref="T:DriveWorks.ProjectConstant" /> type to apply an updated display name.
 </summary>
 <param name="constant">The constant to update.</param>
 <param name="newName">The new name to give the constant.</param>
 <returns>True if the constant was renamed.</returns>
</member>
<member name="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMaster">
 <summary>
 Provides an implementation of the <see cref="T:DriveWorks.ProjectDesignMaster" /> class
 using Titan as a rules engine.
 </summary>
</member>
<member name="P:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMaster.Engine">
 <summary>
 Gets the Titan Execution Engine being used by the design master.
 </summary>
</member>
<member name="P:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMaster.GlobalScope">
 <summary>
 Returns the global scope.
 </summary>
</member>
<member name="P:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMaster.MessagesScope">
 <summary>
 Returns the error codes scope.
 </summary>
</member>
<member name="P:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMaster.NavigationScope">
 <summary>
 Gets the navigation scope.
 </summary>
</member>
<member name="P:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMaster.SpecificationPropertiesScope">
 <summary>
 Gets the specification properties scope.
 </summary>
</member>
<member name="P:DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMaster.TablesProvider">
 <summary>
 Gets the provider for all tables - allows access to update event management.
 </summary>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanExtensions.DriveWorksSetRule_Compat(Titan.Rules.Execution.Slot,System.String)">
 <summary>
 Provides a way of setting a rule on a slot which is compatible with Excel's 
 semantics.
 </summary>
 <param name="slot">The slot on which to set the rule.</param>
 <param name="rule">The rule or value to set.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanExtensions.DriveWorksSetRule(Titan.Rules.Execution.Slot,System.String)">
 <summary>
 Provides a way of setting a rule on a slot which enforces the correct DriveWorks
 semantics
 </summary>
 <param name="slot">The slot on which to set the rule.</param>
 <param name="rule">The rule or value to set.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanExtensions.DriveWorksGetRule(Titan.Rules.Execution.Slot)">
 <summary>
 Provides a way of getting a rule from a slot which is compatible with Excel's 
 semantics.
 </summary>
 <param name="slot">The slot from which to get the rule.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanExtensions.DriveWorksGetValue(Titan.Rules.Execution.Slot)">
 <summary>
 Provides a way of getting a value from a slot which is compatible with Excel's 
 semantics.
 </summary>
 <param name="slot">The slot from which to get the value.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanExtensions.DriveWorksSetValue(Titan.Rules.Execution.Slot,System.Object)">
 <summary>
 Provides a way of getting a value from a slot which is compatible with Excel's 
 semantics.
 </summary>
 <param name="slot">The slot from which to get the value.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanFormsDataManager.#ctor(DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMaster,System.Xml.Linq.XElement)">
 <summary>
 Initializes a new instance of the forms host and loads the forms from the specified XML element.
 </summary>
 <param name="designMaster">The design master for the project to which the forms belong.</param>
 <param name="element">The Titan forms data.</param>
</member>
<member name="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanNamedItem">
 <summary>
 The base class for all named items in Titan.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanProjectChildSpecificationBackingStore">
 <summary>
 Implements the <see cref="T:DriveWorks.ProjectChildSpecificationBackingStore" /> class for Titan design masters.
 </summary>
</member>
<member name="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanProjectChildSpecificationBackingStoreManager">
 <summary>
 Implements the <see cref="T:DriveWorks.ProjectChildSpecificationBackingStoreManager" /> class for Titan design masters.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanProjectItemListBackingStore">
 <summary>
 Implements the <see cref="T:DriveWorks.ProjectItemListBackingStore" /> class for Titan design masters.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanProjectItemListBackingStoreManager">
 <summary>
 Implements the <see cref="T:DriveWorks.ProjectItemListBackingStoreManager" /> class for Titan design masters.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanVariablesProvider.Delete(DriveWorks.Internal.DesignMasters.TitanDM.TitanVariable)">
 <summary>
 For use by the <see cref="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanVariable" /> type to delete the specified variable.
 </summary>
 <param name="variable">The variable to delete.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Internal.DesignMasters.TitanDM.TitanVariablesProvider.Rename(DriveWorks.Internal.DesignMasters.TitanDM.TitanVariable,System.String)">
 <summary>
 For use by the <see cref="T:DriveWorks.Internal.DesignMasters.TitanDM.TitanVariable" /> type to rename the specified variable.
 </summary>
 <param name="variable">The variable to rename.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.Shared.SqlCeReportWriter">
 <summary>
 Provides an implementation of a group report writer for a SQL CE database with
 standard DriveWorks reporting tables.
 </summary>
</member>
<member name="T:DriveWorks.Internal.Shared.SqlReportWriter">
 <summary>
 Provides an implementation of a group report writer for a SQL CE database with
 standard DriveWorks reporting tables.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.InternalParseResult">
 <summary>
 Provides a default implementation of the <see cref="T:DriveWorks.Rules.IParseResult" /> interface.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Internal.InternalConstants">
 <summary>
 Constants for use by internal members.
 </summary>
</member>
<member name="T:DriveWorks.PreviewControlSettings">
 <summary>
 Settings for 3D Preview Controls.
 </summary>
</member>
<member name="M:DriveWorks.PreviewControlSettings.#ctor(DriveWorks.Group)">
 <summary>
 Creates a new instance of the PreviewControlSettings class.
 </summary>
 <param name="group">Group to fetch settings from.</param>
</member>
<member name="P:DriveWorks.PreviewControlSettings.PreviewServiceLocation">
 <summary>
 Gets/sets the preview service machine location.
 This can be a name or IP etc.
 </summary>
 <remarks>
 When set to nothing or empty, it will return localhost.
 </remarks>
</member>
<member name="P:DriveWorks.PreviewControlSettings.PreviewServiceUrl">
 <summary>
 Gets the full URL of the preview service, based off of the <see cref="P:DriveWorks.PreviewControlSettings.PreviewServiceLocation"/> property.
 </summary>
</member>
<member name="M:DriveWorks.PreviewControlSettings.CreateFullPreviewServiceUrl(System.String)">
 <summary>
 Creates the absolute URL to the preview service, based on the supplied service location.
 </summary>
 <param name="serviceLocation">
 The location of the preview service. This could be an IP address, host name 
 or fully qualified domain name.</param>
</member>
<member name="T:DriveWorks.Hosting.IGroupConnectionEnvironment">
 <summary>
 Represens the environment for the group connection to exist in.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.IGroupConnectionEnvironment.LibraryManager">
 <summary>
 Gets the manager for extension libraries.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.IGroupConnectionEnvironment.SendMessageToApplication(DriveWorks.UserMessage)">
 <summary>
 Sends a message to the application level.
 </summary>
 <param name="message">The message to send to the user.</param>
</member>
<member name="T:DriveWorks.Hosting.DefaultHostPersistentCacheManager">
 <summary>
 The default implementation of the <see cref="T:DriveWorks.Hosting.IHostPersistentCacheManager" /> interface.
 </summary>
</member>
<member name="T:DriveWorks.Hosting.IHostPersistentCacheManager">
 <summary>
 Provides the facility for a hosting application to provide a persistent cache of data
 that is preserved across application restarts. When this is used, it is retrieved by using the service provider
 returned by <see cref="P:DriveWorks.Hosting.HostEnvironment.ServiceProvider" />.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.IHostPersistentCacheManager.GetPersistentCacheDirectory(System.String)">
 <summary>
 Gets the path to the persistent cache with the specified name.
 </summary>
 <param name="name">The name of the persistent cache to retrieve.</param>
 <returns>The fully qualified path to the persistent cache with the specified name.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Hosting.LibraryExtensionAttribute">
 <summary>
 Indicates that type scanning of a library should be skipped and only types indicated by instances
 of the <see cref="T:DriveWorks.Hosting.LibraryExtensionAttribute" /> should be loaded.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryExtensionAttribute.#ctor(System.Type[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Hosting.LibraryExtensionAttribute" /> type.
 </summary>
 <param name="types">The type or types which should be registered.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.LibraryExtensionAttribute.Types">
 <summary>
 Gets the types registered with the library.
 </summary>
</member>
<member name="T:DriveWorks.Hosting.DefaultHostExceptionHandler">
 <summary>
 Provides the default implementation of the <see cref="T:DriveWorks.Hosting.IHostExceptionHandler" />
 interface if a host doesn't provide its own.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Hosting.EventHostExceptionData">
 <summary>
 Provides information about an exception that occurred when
 raising an event
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.EventHostExceptionData.#ctor(System.Exception,System.Reflection.MethodBase,System.Delegate)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Hosting.EventHostExceptionData" /> class.
 </summary>
 <param name="ex">The exception that was thrown.</param>
 <param name="sourceMethod">The method that was raising the event.</param>
 <param name="targetDelegate">The delegate which identifies the event listener.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.EventHostExceptionData.SourceMethod">
 <summary>
 Gets the method which was raising the event.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.EventHostExceptionData.TargetDelegate">
 <summary>
 Gets the method that was handling the event.
 </summary>
</member>
<member name="T:DriveWorks.Hosting.HostExceptionData">
 <summary>
 Provides data about an exception to be handled by a host.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.HostExceptionData.#ctor(System.Exception)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Hosting.HostExceptionData" /> class.
 </summary>
 <param name="exception">The exception that occurred.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.HostExceptionData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Implements the deserialization constructor for the <see cref="T:DriveWorks.Hosting.HostExceptionData" /> class.
 </summary>
 <param name="info">The serialization info.</param>
 <param name="context">The streaming context.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.HostExceptionData.Exception">
 <summary>
 Provides information about the exception that occured.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.HostExceptionData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Serializes the instance.
 </summary>
 <param name="info">The serialization info.</param>
 <param name="context">The streaming context.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Hosting.HostExceptionHandler">
 <summary>
 Provides a convenient base class for implementing the <see cref="T:DriveWorks.Hosting.IHostExceptionHandler" />
 interface.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.HostExceptionHandler.HandleException(DriveWorks.Hosting.HostExceptionData)">
 <summary>
 Implements the <see cref="M:DriveWorks.Hosting.IHostExceptionHandler.HandleException(DriveWorks.Hosting.HostExceptionData)" /> method.
 </summary>
 <param name="e">The exception data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Hosting.IHostExceptionHandler">
 <summary>
 Provides support for handling API exceptions, should not be implemented directly, instead
 inherit from <see cref="T:DriveWorks.Hosting.HostExceptionHandler" />.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.IHostExceptionHandler.HandleException(DriveWorks.Hosting.HostExceptionData)">
 <summary>
 Handles an exception from a given exception source.
 </summary>
 <param name="e">The exception data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Hosting.LibraryExceptionOperation">
 <summary>
 Represents the operation during which a library exception
 was thrown.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Hosting.LibraryExceptionOperation.LoadConfig">
 <summary>
 Occurred during loading the configuration for the library.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Hosting.LibraryExceptionOperation.LoadPlugin">
 <summary>
 Occurred during loading the library.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Hosting.LibraryExceptionData">
 <summary>
 Provides exception data for a plugin.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryExceptionData.#ctor(System.Exception,System.String,DriveWorks.Hosting.LibraryExceptionOperation)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Hosting.LibraryExceptionData" /> class.
 </summary>
 <param name="ex">The exception that occurred.</param>
 <param name="libraryName">The name of the library.</param>
 <param name="operation">The operation that caused the exception.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.LibraryExceptionData.LibraryName">
 <summary>
 Gets the name of the library that caused the problem.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryExceptionData.Operation">
 <summary>
 Gets the operation that caused the exception.
 </summary>
</member>
<member name="T:DriveWorks.Hosting.PluginAssemblyEventHandler">
 <summary>
 Represents a method that will handle events for the <see cref="T:DriveWorks.Hosting.LibraryManager" /> class.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks>
 <para>
 For information about the hosting framework, see the documentation for the 
 <see cref="T:DriveWorks.Hosting.EngineHost" /> class.
 </para>
 </remarks>
</member>
<member name="T:DriveWorks.Hosting.LibraryEventArgs">
 <summary>
 Provides event data for the events on the <see cref="T:DriveWorks.Hosting.LibraryManager" /> class.
 </summary>
 <remarks>
 <para>
 For information about the hosting framework, see the documentation for the 
 <see cref="T:DriveWorks.Hosting.EngineHost" /> class.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryEventArgs.#ctor(DriveWorks.Hosting.LibraryInfo)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Hosting.LibraryEventArgs" /> class.
 </summary>
 <param name="libraryInfo">Information about the library that was affected.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.LibraryEventArgs.LibraryInfo">
 <summary>
 Gets information about the library that was loaded.
 </summary>
</member>
<member name="T:DriveWorks.Hosting.HostEnvironment">
 <summary>
 Represents the environment in which an instance of the <see cref="T:DriveWorks.Hosting.EngineHost" />
 class operates.
 </summary>
 <remarks>
 <para>
 For information about the hosting framework, see the documentation for the 
 <see cref="T:DriveWorks.Hosting.EngineHost" /> class.
 </para>
 </remarks>
</member>
<member name="T:DriveWorks.Hosting.HostEnvironment.ProfileCollection">
 <summary>
 Provides a collection of profiles which contribute towards a host environment.
 </summary>
 <remarks>
 <para>
 For information about the hosting framework, see the documentation for the 
 <see cref="T:DriveWorks.Hosting.EngineHost" /> class.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.HostEnvironment.ProfileCollection.AddProfile(System.String)">
 <summary>
 Adds a profile based on information stored in the Windows Registry.
 </summary>
 <param name="profileName">The name of the profile.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.HostEnvironment.ProfileCollection.GetProfiles">
 <summary>
 Gets all registered profiles as an array.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.HostEnvironment.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Hosting.HostEnvironment" />
 type.
 </summary>
 <remarks>This will not check plugins' profiles when determining whether they should be loaded.</remarks>
</member>
<member name="M:DriveWorks.Hosting.HostEnvironment.#ctor(System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Hosting.HostEnvironment" /> type.
 </summary>
 <param name="checkProfiles">True if plugins' profiles should be checked to determine if they should be loaded, otherwise False.</param>
</member>
<member name="M:DriveWorks.Hosting.HostEnvironment.CreateDefaultEnvironment">
 <summary>
 Creates a hosting environment with non-interactive standard profiles loaded into it.
 </summary>
 <returns>A hosting environment for use with a host engine.</returns>
</member>
<member name="M:DriveWorks.Hosting.HostEnvironment.CreateDefaultEnvironment(System.Boolean)">
 <summary>
 Creates a hosting environment with standard profiles loaded into it.
 </summary>
 <param name="includeInteractive">True to include interactive profiles, or false to exclude them.</param>
 <returns>A hosting environment for use with a host engine.</returns>
</member>
<member name="P:DriveWorks.Hosting.HostEnvironment.MajorVersionName">
 <summary>
 Gets/sets the major version name of the host which is used by the plugin 
 assembly manager to load version-specific plugin assemblies.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.HostEnvironment.VersionName">
 <summary>
 Gets/sets the version name of the host which is used by the plugin 
 assembly manager to load version-specific plugin assemblies.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.HostEnvironment.ApplicationName">
 <summary>
 Gets/sets the Application name that is running this host.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.HostEnvironment.Profiles">
 <summary>
 Gets the profiles which define the hosting environment.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.HostEnvironment.ExceptionHandler">
 <summary>
 Gets/sets the exception handler to use for routing API exceptions.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.HostEnvironment.IsLocked">
 <summary>
 Determines whether the object has been locked.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.HostEnvironment.ServiceProvider">
 <summary>
 Gets or sets the <see cref="T:System.IServiceProvider" />
 </summary>
</member>
<member name="P:DriveWorks.Hosting.HostEnvironment.SafeProjectExecutorCreator">
 <summary>
 Gets or sets the factory method for creating a <see cref="T:DriveWorks.ISafeProjectExecutor"/>.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.HostEnvironment.Lock">
 <summary>
 For use by the <see cref="T:DriveWorks.Hosting.EngineHost" /> to lock the environment from further modifications.
 </summary>
</member>
<member name="T:DriveWorks.Hosting.GroupManager">
 <summary>
 Provides facilities for a host application to open and close a group.
 </summary>
 <remarks>
 <para>
 For information about the hosting framework, see the documentation for the 
 <see cref="T:DriveWorks.Hosting.EngineHost" /> class.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.GroupManager.#ctor(DriveWorks.Hosting.EngineHost)">
 <summary>
 Initializes a new instance of a group manager for the specified engine host.
 </summary>
 <param name="host">The engine host which will host the group.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.GroupManager.Group">
 <summary>
 Gets the group being managed.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.GroupManager.OpenGroup(System.String,System.String,System.String)">
 <summary>
 Opens a connection to a DriveWorks group using a DriveWorks username and password.
 </summary>
 <param name="connectionString">The connection string which identifies the group to open, see the remarks for more details.</param>
 <param name="userName">The username of the DriveWorks user to logon as.</param>
 <param name="password">The password of the DriveWorks user to logon as.</param>
 <remarks>
 <para>
 This method is a shortcut for calling the Open method with a specific <see cref="T:DriveWorks.Security.IProviderCredentials" /> implementation.
 </para>
 <para>DriveWorks supports two types of group, local files called Engineer groups, and a server-based system called Team/Enterprise groups.
 The <paramref name="connectionString" /> to use depends on which of these is being used.
 </para>
 <para>
 For an Engineer group, the format of the connection string is: <c>"Provider=LocalGroupProvider;Path=C:\Users\username\Documents\MyGroup.drivegroup"</c>, and 
 a new group can be created by using a connection string such as <c>"Provider=LocalGroupProvider;Path=C:\Users\username\Documents\MyGroup.drivegroup;Create=true"</c>.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.GroupManager.OpenGroup(System.String,DriveWorks.Security.IProviderCredentials)">
 <summary>
 Opens a connection to a DriveWorks group.
 </summary>
 <param name="connectionString">The connection string which identifies the group to open, see the remarks for more details.</param>
 <param name="credentials">The credentials used to connect to the group, see the remarks for more details.</param>
 <remarks>
 <para>DriveWorks supports two types of group, local files called Engineer groups, and a server-based system called Team/Enterprise groups.
 The <paramref name="connectionString" /> to use depends on which of these is being used.
 </para>
 <para>
 For an Engineer group, the format of the connection string is: <c>"Provider=LocalGroupProvider;Path=C:\Users\username\Documents\MyGroup.drivegroup"</c>, and 
 a new group can be created by using a connection string such as <c>"Provider=LocalGroupProvider;Path=C:\Users\username\Documents\MyGroup.drivegroup;Create=true"</c>.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.GroupManager.CloseGroup">
 <summary>
 Closes the group.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.GroupManager.ParseConnectionString(System.String)">
 <summary>
 Parses the connection string into a series of key/value pairs.
 </summary>
 <param name="connectionString">The connection string to parse.</param>
 <returns>A dictionary of key/value pairs.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.GroupManager.CreateConnectionString(System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Combines a series of key/value pairs into a connection string.
 </summary>
 <param name="parameters">A dictionary of key/value pairs.</param>
 <returns>A dictionary of key/value pairs.</returns>
 <remarks>The connection string.</remarks>
</member>
<member name="T:DriveWorks.Hosting.LibraryInfo">
 <summary>
 Represents an extension library.
 </summary>
 <remarks>
 <para>
 For information about the hosting framework, see the documentation for the 
 <see cref="T:DriveWorks.Hosting.EngineHost" /> class.
 </para>
 </remarks>
</member>
<member name="E:DriveWorks.Hosting.LibraryInfo.Loaded">
 <summary>
 Occurs when the library is loaded.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.LastLoadException">
 <summary>
 If an exception occurred loading the extension library, this property will retrieve the exception.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.LastTypeLoadException">
 <summary>
 If an exception occurred loading the extension library's types, this property will retrieve the exception.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.InvariantName">
 <summary>
 Gets the invariant name of the extension library.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.DisplayName">
 <summary>
 Gets the display name of the assembly directly from the 
 assembly if it has been loaded, otherwise from the fallback
 display name.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.FallbackDisplayName">
 <summary>
 Gets the display name of the assembly from its registered 
 information.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.Description">
 <summary>
 Gets the localized description of the library.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.Publisher">
 <summary>
 Gets the name of the library publisher.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.PublisherUrl">
 <summary>
 Gets a URL pointing to a web site for the library or its publisher.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.IsFrameworkLibrary">
 <summary>
 Determines whether the library is a framework library.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.LoadOnStartup">
 <summary>
 Determines whether the library is loaded on start up.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.Location">
 <summary>
 Gets the location of the library.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.Assembly">
 <summary>
 Gets the assembly if it is loaded, or a null reference otherwise.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.LibraryInfo.ExtensionTypes">
 <summary>
 Gets the extension types in the assembly.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.LibraryInfo.Load(System.Boolean)">
 <summary>
 Loads the library if it hasn't already been loaded.
 </summary>
 <param name="throwOnError">True to allow exceptions to be thrown when loading the library.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryInfo.GetExtensibilityAttributes">
 <summary>
 Gets the extensibility attributes for the library.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryInfo.GetExtensibilityAttributes(System.Type)">
 <summary>
 Gets the extensibility attributes of the specified type for the library.
 </summary>
 <param name="attributeType">The type of extensibility attribute to get.</param>
 <returns>An array of the extensibility attribute of the specified type.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryInfo.GetExtensibilityAttributes``1">
 <summary>
 Gets the extensibility attributes of the specified type for the extension library.
 </summary>
 <typeparam name="T">The type of extensibility attribute to get.</typeparam>
 <returns>An array of the extensibility attribute of the specified type.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Hosting.LibraryData">
 <summary>
 Provides information about a library of extensions.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Hosting.LibraryManager">
 <summary>
 Manages extension libraries for the EngineHost
 </summary>
 <remarks>
 <para>
 For information about the hosting framework, see the documentation for the 
 <see cref="T:DriveWorks.Hosting.EngineHost" /> class.
 </para>
 </remarks>
</member>
<member name="E:DriveWorks.Hosting.LibraryManager.LibraryLoaded">
 <summary>
 Occurs when a library is loaded.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.AddLibrary(System.Reflection.Assembly)">
 <summary>
 Manually registers a library with the assembly manager.
 </summary>
 <param name="libraryAssembly">The assembly to register, which must be marked with the <see cref="T:DriveWorks.Extensibility.LibraryAttribute" /> attribute.</param>
 <remarks>
 <para>
 Hosts can use this method to register assemblies which provide core capabilities, but
 which are not stored in a profile as a plugin.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.AddFrameworkLibrary(System.Reflection.Assembly)">
 <summary>
 Manually registers a framework library with the assembly manager.
 </summary>
 <param name="libraryAssembly">The assembly to register, which must be marked with the <see cref="T:DriveWorks.Extensibility.LibraryAttribute" /> attribute.</param>
 <remarks>
 <para>
 Hosts can use this method to register assemblies which provide core capabilities, but
 which are not stored in a profile as a plugin.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.GetLibraries">
 <summary>
 Gets the libraries in the assembly manager.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.GetTypeFromLibrary(System.String,System.Boolean)">
 <summary>
 Gets a type from a library.
 </summary>
 <param name="fullTypeName">The type string which identifies the name of the type and its parent library.</param>
 <param name="throwOnError">True to throw an error if the type cannot be found, false to return a null reference (Nothing in Visual Basic).</param>
 <returns>The specified type.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">The specified type could not be found.</exception>
 <remarks>See <see cref="M:DriveWorks.Hosting.LibraryManager.GetTypeName(System.Type)"/> for formatting the name.</remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.TryGetTypeFromLibrary(System.String,System.Type@)">
 <summary>
 Gets a type from a library.
 </summary>
 <param name="fullTypeName">The type string which identifies the name of the type and its parent library separated by a comma.</param>
 <param name="result">Receives the specified type.</param>
 <returns>True if the specified type was found and returned, otherwise false.</returns>
 <remarks>See <see cref="M:DriveWorks.Hosting.LibraryManager.GetTypeName(System.Type)"/> for formatting the name.</remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.GetLibrary(System.String,System.Boolean)">
 <summary>
 Gets the library with the specified invariant name.
 </summary>
 <param name="invariantName">The invariant name of the library to retrieve.</param>
 <param name="throwOnError">True to throw an error if the type cannot be found, false to return a null reference (Nothing in Visual Basic).</param>
 <returns>The specified library.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">The specified library could not be found.</exception>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.TryGetLibrary(System.String,DriveWorks.Hosting.LibraryInfo@)">
 <summary>
 Gets the library with the specified invariant name.
 </summary>
 <param name="invariantName">The invariant name of the library to retrieve.</param>
 <param name="result">Receives the specified library.</param>
 <returns>True if the library was found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.GetTypesFromLibraries(System.Type,System.Type[])">
 <summary>
 Gets types which inherit from the specified base type, or implement the specified interface.
 </summary>
 <param name="baseType">The type of a class from which the returned types must inherit, or an interface which the returned types must implement.</param>
 <param name="attributes">An array of attributes which must be defined on the returned types, or a null reference if no attribute filtering is required.</param>
 <returns>An array of types meeting the specified filter.</returns>
 <remarks>
 <para>
 The base type must implement the <see cref="T:DriveWorks.Extensibility.IExtension" /> interface to be discoverable using this method.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.GetTypeName(System.Type)">
 <summary>
 Returns the qualified name of the type with its assembly separated by a comma.
 </summary>
 <param name="type">The type to get the name of.</param>
 <returns>The specially formatted full type name as string</returns>
 <remarks>For use in this class, whenever it asks for a type's full name.</remarks>
</member>
<member name="P:DriveWorks.Hosting.LibraryManager.Host">
 <summary>
 Gets the engine host.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.NotifyLoaded(DriveWorks.Hosting.LibraryInfo)">
 <summary>
 Raises the <see cref="E:DriveWorks.Hosting.LibraryManager.LibraryLoaded" /> event.
 </summary>
 <param name="pa">The library that was loaded.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.LibraryManager.RedirectLibraryNameIfLegacyEpdm(System.String)">
 <summary>
 Checks if the given invariant library name is for the EPDM 14 plugin, and if no returns the name of the 15.0 plugin instead.
 </summary>
 <param name="invariantLibraryName">The name of the library to inspect.</param>
 <returns>The EPDM 15+ EPDM library name if <paramref name="invariantLibraryName"/> is the name of the 14.x EPDM name, otherwise just
 returns the given library name as-is.</returns>
 <devnote>This function should be removed for DW 16.0 release, and instead we should just update the project file
 to point to the new EPDM library instead. This was not done for 15.1 as we want projects to be backwards compatible
 between service packs.</devnote>
</member>
<member name="T:DriveWorks.Hosting.ProjectManager">
 <summary>
 Provides facilities for a host application to open and close a project.
 </summary>
 <remarks>
 <para>
 For information about the hosting framework, see the documentation for the 
 <see cref="T:DriveWorks.Hosting.EngineHost" /> class.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.ProjectManager.#ctor(DriveWorks.Hosting.EngineHost)">
 <summary>
 Initializes a new instance of a project manager for the given engine host.
 </summary>
 <param name="host">The host for which to create the project manager.</param>
</member>
<member name="P:DriveWorks.Hosting.ProjectManager.Project">
 <summary>
 Gets the project being managed by the instance.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.ProjectManager.CloseProject(System.Boolean)">
 <summary>
 Closes the project
 </summary>
 <param name="save">True to save the project, false to discard changes.</param>
</member>
<member name="M:DriveWorks.Hosting.ProjectManager.CreateProject(DriveWorks.Group,System.String)">
 <summary>
 Creates a new project in the given group.
 </summary>
 <param name="group">The group to which to add the new project.</param>
 <param name="projectPath">The full path to the project file, e.g. "C:\Users\StandardUser\DriveWorks\MyProject.driveproj".</param>
</member>
<member name="M:DriveWorks.Hosting.ProjectManager.CreateProject(DriveWorks.Group,System.String,System.String)">
 <summary>
 Creates a new project in the given group.
 </summary>
 <param name="group">The group to which to add the new project.</param>
 <param name="projectPath">The full path to the project file, e.g. "C:\Users\StandardUser\DriveWorks\MyProject.driveproj".</param>
 <param name="additionalParameters">Semicolon separated, additional parameters to pass to the project creation process to customize its behavior, e.g. "DesignMasterFormat=xlsb;"</param>
</member>
<member name="M:DriveWorks.Hosting.ProjectManager.OpenProject(DriveWorks.Group,DriveWorks.ProjectDetails)">
 <summary>
 Opens the project with the specified details.
 </summary>
 <param name="group">The group containing the project to open.</param>
 <param name="projectDetails">The <see cref="T:DriveWorks.ProjectDetails"  /> instance which describes the project to open.</param>
</member>
<member name="M:DriveWorks.Hosting.ProjectManager.OpenProjectFromSnapshot(DriveWorks.Group,DriveWorks.ProjectDetails,System.String)">
 <summary>
 Opens the project with the specified details from the given snapshot.
 </summary>
 <param name="group">The group containing the project to open.</param>
 <param name="projectDetails">The <see cref="T:DriveWorks.ProjectDetails"  /> instance which describes the project to open.</param>
 <param name="snapshotPath">The path to the snapshot project file to open.</param>
</member>
<member name="M:DriveWorks.Hosting.ProjectManager.OpenProjectAsSpecification(DriveWorks.Group,DriveWorks.ProjectDetails,DriveWorks.ProjectFile,DriveWorks.Specification.SpecificationContext)">
 <summary>
 Opens a project for use as a specification (for use by SpecificationContext only)
 </summary>
 <param name="group">The group containing the project to open.</param>
 <param name="projectDetails">The <see cref="T:DriveWorks.ProjectDetails"  /> instance which describes the project on which the specification is based.</param>
 <param name="projectFile">The open project file.</param>
 <param name="context">The context in which the specification is to be run.</param>
</member>
<member name="T:DriveWorks.Hosting.StandardProfiles">
 <summary>
 Provides information about standard profiles.
 </summary>
 <remarks>
 <para>
 For information about the hosting framework, see the documentation for the 
 <see cref="T:DriveWorks.Hosting.EngineHost" /> class.
 </para>
 </remarks>
</member>
<member name="F:DriveWorks.Hosting.StandardProfiles.SharedProfileName">
 <summary>
 The name of the shared profile.
 </summary>
</member>
<member name="F:DriveWorks.Hosting.StandardProfiles.SharedInteractiveProfileName">
 <summary>
 The name of the shared-interactive profile.
 </summary>
</member>
<member name="F:DriveWorks.Hosting.StandardProfiles.ProjectsProfileName">
 <summary>
 The name of the projects profile.
 </summary>
</member>
<member name="F:DriveWorks.Hosting.StandardProfiles.ProjectsInteractiveProfileName">
 <summary>
 The name of the projects-interactive profile.
 </summary>
</member>
<member name="F:DriveWorks.Hosting.StandardProfiles.GroupsProfileName">
 <summary>
 The name of the groups profile.
 </summary>
</member>
<member name="F:DriveWorks.Hosting.StandardProfiles.GroupsInteractiveProfileName">
 <summary>
 The name of the groups-interactive profile.
 </summary>
</member>
<member name="F:DriveWorks.Hosting.StandardProfiles.ExecutionProfileName">
 <summary>
 The name of the execution profile.
 </summary>
</member>
<member name="F:DriveWorks.Hosting.StandardProfiles.ExecutionInteractiveProfileName">
 <summary>
 The name of the execution-interactive profile.
 </summary>
</member>
<member name="F:DriveWorks.Hosting.StandardProfiles.ProServerProfileName">
 <summary>
 A profile used when determining that a library can only be loaded in Pro Server.
 </summary>
</member>
<member name="T:DriveWorks.Hosting.EngineHost">
 <summary>
 Provides the root of the hosting API for the 
 DriveWorks Engine.
 </summary>
 <remarks>
 <para>
 The DriveWorks Engine is designed to be hosted by an application
 which can provide services to the Engine such as plugin discovery.
 </para>
 <para>
 The EngineHost class is the bridge between the application
 and the Engine, and provides capabilities to the application
 such as creating group and project instances. Because user-code
 never gets a reference to the EngineHost, the application can choose
 how much user-code can do.
 </para>
 </remarks>
</member>
<member name="E:DriveWorks.Hosting.EngineHost.ExcelApplicationReconnecting">
 <summary>
 Raised when the application being used to host one or more 
 design masters is about to be reconnected after it is
 accessed by another application.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Hosting.EngineHost.UserMessage">
 <summary>
 Raised when a user message has been received.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.#ctor">
 <summary>
 Initializes an instance of the <see cref="T:DriveWorks.Hosting.EngineHost" /> type with a default host environment without interactive profiles.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.#ctor(DriveWorks.Hosting.HostEnvironment)">
 <summary>
 Initializes an instance of the <see cref="T:DriveWorks.Hosting.EngineHost" /> type.
 </summary>
 <param name="environment">The host environment.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.CreateProjectManager">
 <summary>
 Creates and returns a new instance of the <see cref="T:DriveWorks.Hosting.ProjectManager" /> type.
 </summary>
 <returns>A new instance of the <see cref="T:DriveWorks.Hosting.ProjectManager" /> type.</returns>
 <remarks>
 Projects run within the context of a host, for more information about hosting
 see the documentation for the <see cref="T:DriveWorks.Hosting.EngineHost" /> type.
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.CreateGroupManager">
 <summary>
 Creates and returns a new instance of the <see cref="T:DriveWorks.Hosting.GroupManager" /> type.
 </summary>
 <returns>A new instance of the <see cref="T:DriveWorks.Hosting.GroupManager" /> type.</returns>
 <remarks>
 Groups run within the context of a host, for more information about hosting
 see the documentation for the <see cref="T:DriveWorks.Hosting.EngineHost" /> type.
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.CreateSpecificationContext(DriveWorks.Group,DriveWorks.Specification.SpecificationEnvironment)">
 <summary>
 Creates a new specification context using the given settings.
 </summary>
 <param name="group">The group which acts as a container for specification information for the new context.</param>
 <param name="environment">The settings which control the execution environment of the specification.</param>
 <returns>A specification context which represents the specification.</returns>
 <exception cref="T:System.ArgumentNullException">One or more mandatory arguments were omitted.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The specified group belongs to a different host.</exception>
 <remarks>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.CreateCustomSpecificationContext">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.Specification.SpecificationContext" /> type.
 </summary>
 <returns>An instance of the <see cref="T:DriveWorks.Specification.SpecificationContext" /> type or a type derived from it.</returns>
 <remarks>
 This method may be used by derived hosts to create a custom specification context which derives
 from <see cref="T:DriveWorks.Specification.SpecificationContext" />
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.CreateDesignMaster(DriveWorks.ProjectState,System.String)">
 <summary>
 Creates a new design master instance and returns it.
 </summary>
 <param name="format">The format of the designmaster, e.g. ".drivemaster"</param>
 <param name="project">The project to which the design master belongs.</param>
 <returns>An instance of a design master.</returns>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.CreateChildSpecificationContextInternal(DriveWorks.Specification.SpecificationEnvironment,DriveWorks.Specification.SpecificationContext,DriveWorks.ProjectChildSpecificationDef)">
 <summary>
 Creates a new specification context for a child specification using the given settings.
 </summary>
 <param name="environment">The settings which control the execution environment of the specification.</param>     
 <param name="parentContext">The parent specification context.</param>
 <param name="parentDefinition">The parent child-specification definition.</param>
 <returns>A specification context which represents the specification.</returns>
 <remarks>
 <para>
 This method can be overridden by an implementer in order to return an instance of a custom type
 derived from <see cref="T:DriveWorks.Specification.SpecificationContext" />.
 </para>
 <para>
 This method is for use by <see cref="M:DriveWorks.Specification.SpecificationContext.CreateChildContext(System.String,System.IServiceProvider)" /> only, and should not be exposed to other callers.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.GetComponentFactory(System.String)">
 <summary>
 Gets a component factory for the specified type of component.
 </summary>
 <param name="type">The type of the component to get.</param>
 <returns>A component factory for the given component type.</returns>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.ConstructProjectComponent(System.String)">
 <summary>
 Constructs a component of the given type.
 </summary>
 <param name="componentType">The type of component to create.</param>
 <returns>A wrapper component.</returns>
 <exception cref="T:System.NotSupportedException">The given component type is not supported.</exception>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.ConstructCapturedComponent(System.String)">
 <summary>
 Constructs a component of the given type.
 </summary>
 <param name="componentType">The type of component to create.</param>
 <returns>A wrapper component.</returns>
 <exception cref="T:System.NotSupportedException">The given component type is not supported.</exception>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.ConstructReleasedComponent(System.String)">
 <summary>
 Constructs a component of the given type.
 </summary>
 <param name="componentType">The type of component to create.</param>
 <returns>A wrapper component.</returns>
 <exception cref="T:System.NotSupportedException">The given component type is not supported.</exception>
</member>
<member name="P:DriveWorks.Hosting.EngineHost.LibraryManager">
 <summary>
 Gets the object responsible for managing extension libraries for the host.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.EngineHost.ConnectionManager">
 <summary>
 Gets the connection manager for the host (and all projects created by it)
 </summary>
</member>
<member name="P:DriveWorks.Hosting.EngineHost.Environment">
 <summary>
 Gets the host environment for the engine.
 </summary>
</member>
<member name="P:DriveWorks.Hosting.EngineHost.ExceptionHandler">
 <summary>
 Gets the exception handler provided by the hosting environment.
 </summary>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.Dispose(System.Boolean)">
 <summary>
 Performs cleanup logic required by the engine host.
 </summary>
 <param name="disposing">True if the object is being explicitly disposed, false if the object is being disposed by its finalizer.</param>
</member>
<member name="M:DriveWorks.Hosting.EngineHost.Dispose">
 <summary>
 Disposes the EngineHost and its resources.
 </summary>
</member>
<member name="T:DriveWorks.UpgradeGroupDialogMessage">
 <summary>
 Represents the message sent to the application when the group needs to be upgraded.
 </summary>
</member>
<member name="M:DriveWorks.UpgradeGroupDialogMessage.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.UpgradeGroupDialogMessage"/> class.
 </summary>
 <param name="groupUpgradeMessage">The message to display to the end user.</param>
</member>
<member name="P:DriveWorks.UpgradeGroupDialogMessage.DefaultButton">
 <summary>
 Gets the button on the dialog that will receive focus by default.
 </summary>
</member>
<member name="P:DriveWorks.UpgradeGroupDialogMessage.DefaultResponse">
 <summary>
 Gets the value to use if the dialog can't be interacted with by the user
 </summary>
</member>
<member name="M:DriveWorks.PendingComponentDetails.#ctor(System.Guid,System.String[])">
 <summary>
 Used by tests to create an instance of <see cref="T:DriveWorks.PendingComponentDetails"/> that don't require ReleasedComponentFlags.
 </summary>
 <param name="id">The id of the component.</param>
 <param name="tags">The tags associated with the component.</param>
</member>
<member name="T:DriveWorks.GroupSpecificationPropertiesData">
 <summary>
 Represents an attempt at retrieving a specification's properties from the Group.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSpecificationPropertiesData.#ctor(DriveWorks.SpecificationPropertiesElement,DriveWorks.SpecificationPropertiesResult)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupSpecificationPropertiesData"/> class.
 </summary>
 <param name="propertiesElement">The specification properties XML element that was successfully retrieved.</param>
 <param name="result">An enum indicating whether the properties were retrieved.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.GroupSpecificationPropertiesData.PropertiesElement">
 <summary>
 Gets the Specification Properties element that was retrieved from the Group.
 </summary>
</member>
<member name="P:DriveWorks.GroupSpecificationPropertiesData.Result">
 <summary>
 Gets whether the retrieval was successful and if not gets an indication of why the properties couldn't be retrieved.
 </summary>
</member>
<member name="T:DriveWorks.GroupVersionInformation">
 <summary>
 Provides group version information.
 </summary>
</member>
<member name="M:DriveWorks.GroupVersionInformation.#ctor(System.Int32,System.Int32,System.Int32)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.GroupVersionInformation"/> class.
 </summary>
 <param name="major">The major version number.</param>
 <param name="minor">The minor version number.</param>
 <param name="revision">The revision version number.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.GroupVersionInformation.SupportedVersion">
 <summary>
 Gets the supported version of groups.
 </summary>
</member>
<member name="P:DriveWorks.GroupVersionInformation.LatestVersion">
 <summary>
 Gets the supported version for groups.
 </summary>
</member>
<member name="P:DriveWorks.GroupVersionInformation.Major">
 <summary>
 Gets the major version number.
 </summary>
</member>
<member name="P:DriveWorks.GroupVersionInformation.Minor">
 <summary>
 Gets the minor version number.
 </summary>
</member>
<member name="P:DriveWorks.GroupVersionInformation.Revision">
 <summary>
 Gets the revision version number.
 </summary>
</member>
<member name="M:DriveWorks.GroupVersionInformation.CompareTo(DriveWorks.GroupVersionInformation)">
 <summary>
 Compares the specified <see cref="T:DriveWorks.GroupVersionInformation"/> with the current instance.
 </summary>
 <param name="other">The <see cref="T:DriveWorks.GroupVersionInformation"/> to compare against.</param>
</member>
<member name="T:DriveWorks.RemoteGroupBrowser">
 <summary>
 Provides browser support for a remote group server.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.RemoteGroupBrowser.#ctor(DriveWorks.RemoteGroupServer)">
 <summary>
 Creates a new remote group browser for the specified remote group server.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.RemoteGroupBrowser.Stop">
 <summary>
 Stops the browser service.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.RemoteGroupBrowser.Start">
 <summary>
 Starts the browser service.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.GroupConnectionStringBuilder">
 <summary>
 Provides help for building up and interpreting group connection strings.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectionStringBuilder.#ctor">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.GroupConnectionStringBuilder"/> class.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectionStringBuilder.#ctor(System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.GroupConnectionStringBuilder"/> class.
 </summary>
 <param name="connectionString">Group connection string to parse parameters from.</param>
</member>
<member name="P:DriveWorks.GroupConnectionStringBuilder.Provider">
 <summary>
 Gets and sets the provider type of the target group.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectionStringBuilder.Server">
 <summary>
 Gets and sets the server address of the target group - this is only required for shared groups.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectionStringBuilder.GroupName">
 <summary>
 Gets and sets the target group's name - this is only required for shared groups.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectionStringBuilder.Path">
 <summary>
 Gets and sets the path of target individual group.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectionStringBuilder.Create">
 <summary>
 Gets and sets whether or not to create the target group, if it doesn't exist.
 </summary>
</member>
<member name="P:DriveWorks.GroupConnectionStringBuilder.TakeOwnership">
 <summary>
 Gets and sets whether or not to take ownership of the group, if it's owned by another machine.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectionStringBuilder.GetConnectionString">
 <summary>
 Gets a group connection string based on the current property values.
 </summary>
 <exception cref="T:System.InvalidOperationException">Throw when there are invalid values in properties.</exception>
</member>
<member name="T:DriveWorks.JobRequestTagInformation">
 <summary>
 Represents information about a job request.
 </summary>
</member>
<member name="M:DriveWorks.JobRequestTagInformation.#ctor(System.String[],System.String[],System.Boolean)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.JobRequestTagInformation"/> class.
 </summary>
 <param name="priorityTags">The tags that must be processed first. The order of the collection determines the priority.</param>
 <param name="blockedTags">The tags that must be ignored.</param>
 <param name="processPriorityOnly">Optional. Whether only the priority tags will be processed. False by default.</param>
</member>
<member name="P:DriveWorks.JobRequestTagInformation.PriorityTags">
 <summary>
 Gets the tags that must be processed first. The order of the collection determines the priority.
 </summary>
</member>
<member name="P:DriveWorks.JobRequestTagInformation.BlockedTags">
 <summary>
 Gets the tags that must be ignored.
 </summary>
</member>
<member name="P:DriveWorks.JobRequestTagInformation.ProcessPriorityOnly">
 <summary>
 Gets whether tags other than the ones in the priority list can be processed
 but as a lower priority. 
 </summary>
 <remarks>True if we can only process the tags in the priority list, false if we can process
 any tags that aren't in the blocked list. By default this is False.</remarks>
</member>
<member name="T:DriveWorks.JobClientDetails">
 <summary>
 Represents information about a client requesting to process a job.
 </summary>
</member>
<member name="P:DriveWorks.JobClientDetails.Id">
 <summary>
 Gets a unique identifier for this client.
 </summary>
</member>
<member name="P:DriveWorks.JobClientDetails.MachineName">
 <summary>
 Gets the name of the machine for this client.
 </summary>
</member>
<member name="P:DriveWorks.JobClientDetails.User">
 <summary>
 Gets the currently logged in user information for this client.
 </summary>
</member>
<member name="P:DriveWorks.JobClientDetails.LastActive">
 <summary>
 Gets the last time this client was active.
 </summary>
</member>
<member name="M:DriveWorks.JobClientDetails.Ping">
 <summary>
 Updates when the client was last active.
 </summary>
</member>
<member name="T:DriveWorks.SqlTestResult">
 <summary>
 Provides information about an attempt to connect to a SQL server.
 </summary>
</member>
<member name="P:DriveWorks.SqlTestResult.ConnectionEstablished">
 <summary>
 Whether or not the SQL connection was established.
 </summary>
</member>
<member name="P:DriveWorks.SqlTestResult.Permissions">
 <summary>
 A full collection of SQL permissions that were associated with the connection on the SQL server.
 </summary>
</member>
<member name="P:DriveWorks.SqlTestResult.ErrorMessage">
 <summary>
 An error reported from attempting a connection to the SQL server (or Null if there were no issues).
 </summary>
</member>
<member name="P:DriveWorks.SqlTestResult.WindowsAccountNameUsed">
 <summary>
 If a windows account was used to connect to the server then this is the full name of that account.
 </summary>
</member>
<member name="T:DriveWorks.JobTypeConstants">
 <summary>
 Provides strings for the types of job that can be processed in DriveWorks.
 </summary>
</member>
<member name="F:DriveWorks.JobTypeConstants.SPECIFICATION">
 <summary>
 A string representing a specification job.
 </summary>
</member>
<member name="F:DriveWorks.JobTypeConstants.TRIGGERED_ACTION">
 <summary>
 A string representing a triggered action job.
 </summary>
</member>
<member name="F:DriveWorks.JobTypeConstants.EMAIL">
 <summary>
 A string representing an email job.
 </summary>
</member>
<member name="T:DriveWorks.PollingJobQueueBase">
 <summary>
 Provides a base class for polling jobs.
 </summary>
</member>
<member name="M:DriveWorks.PollingJobQueueBase.#ctor(DriveWorks.JobCacheManager)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.PollingJobQueueBase"/> class.
 </summary>
 <param name="cacheManager">The object responsible for managing the job pool.</param>
</member>
<member name="P:DriveWorks.PollingJobQueueBase.CacheManager">
 <summary>
 Gets the cache manager responsible for managing the job pool.
 </summary>
</member>
<member name="M:DriveWorks.PollingJobQueueBase.GetNextJob(DriveWorks.JobRequestTagInformation,DriveWorks.Internal.Group.IGroupConnection,DriveWorks.JobClientDetails)">
 <summary>
 Gets the next job to be processed.
 </summary>
 <param name="tagInformation">The tag information for the job request.</param>
 <param name="connection">The connection to the group.</param>
 <param name="clientDetails">Information about the client requesting the job.</param>
 <returns>The object that represents the job type being processed by this class.</returns>
</member>
<member name="M:DriveWorks.PollingJobQueueBase.GetAllJobs(DriveWorks.Internal.Group.IGroupConnection,DriveWorks.JobClientDetails)">
 <summary>
 Gets the pending and currently in progress jobs for the connected user.
 </summary>
 <param name="connection">The connection for which to retrieve the pool of jobs.</param>
 <param name="clientDetails">The connected user for which to retrieve the pool of jobs.</param>
 <returns>The pool of jobs waiting to be processed or currently being processed.</returns>
</member>
<member name="M:DriveWorks.PollingJobQueueBase.SetComplete(System.String,DriveWorks.JobClientDetails)">
 <summary>
 Sets the specified job as being completed.
 </summary>
 <param name="jobId">The Id of the job that has been completed.</param>
 <param name="clientDetails">The details for the client that completed the job.</param>
</member>
<member name="M:DriveWorks.PollingJobQueueBase.SetFailed(System.String,DriveWorks.JobClientDetails)">
 <summary>
 Sets the specified job as failed so that it can be processed elsewhere.
 </summary>
 <param name="jobId">The Id of the job to set to failed.</param>
 <param name="clientDetails">The details for the client that failed to process the job.</param>
</member>
<member name="M:DriveWorks.PollingJobQueueBase.CheckForLatest(DriveWorks.Internal.Group.IGroupConnection,DriveWorks.JobClientDetails)">
 <summary>
 Checks to see if we need to retrieve the latest jobs and retrieves them if necessary, 
 otherwise returns Nothing.
 </summary>
 <param name="connection">The connection to the group.</param>
 <param name="clientDetails">The details for the client connected to the group.</param>
 <returns>
 Nothing if we need to wait before checking the group again, otherwise a dictionary 
 of the latest jobs to process. The key is the actual job to process, e.g a Specification and the value is the cached version of the job.
 </returns>
</member>
<member name="M:DriveWorks.PollingJobQueueBase.GetJobDetailsById(DriveWorks.Internal.Group.IGroupConnection,System.String)">
 <summary>
 Gets the object, matching the specified Id that represents the job in DriveWorks.
 </summary>
 <param name="connection">The connection to the group.</param>
 <param name="id">The unique identifier of the job to retrieve.</param>
 <returns>The object that represents this job in DriveWorks.</returns>
</member>
<member name="M:DriveWorks.PollingJobQueueBase.UpdateLastChecked(DriveWorks.JobClientDetails)">
 <summary>
 Notifies the processor when it last checked for new jobs.
 </summary>
 <param name="clientDetails">Information about the client that last checked.</param>
</member>
<member name="T:DriveWorks.SpecificationPropertiesElement">
 <summary>
 Provides a wrapper for specification property XML.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SpecificationPropertiesElement.#ctor(System.Xml.Linq.XElement)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.SpecificationPropertiesElement"/> class.
 </summary>
 <param name="propertiesElement">The specification properties XML.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SpecificationPropertiesElement.ToRaw">
 <summary>
 Converts the specification properties XML to a byte array, ready for storing in the group.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationPropertiesElement.GetProperties">
 <summary>
 Retrieves the specification properties and converts the values to display strings.
 </summary>
 <returns></returns>
 <remarks>This will use the current culture to convert the values, if they were created after 11 SP2.</remarks>
</member>
<member name="T:DriveWorks.JobQueue">
 <summary>
 Represents a queue of jobs that need processing.
 </summary>
</member>
<member name="M:DriveWorks.JobQueue.GetNextJob(DriveWorks.JobRequestTagInformation)">
 <summary>
 Gets the next job in the queue.
 </summary>
 <param name="tagInformation">The tag information for this job request.</param>
 <returns>The next job to process.</returns>
</member>
<member name="M:DriveWorks.JobQueue.SetFailed(System.String)">
 <summary>
 Flags the specified job as having failed to be processed by the current client.
 </summary>
 <param name="jobId">The Id of the job that couldn't be processed.</param>
</member>
<member name="M:DriveWorks.JobQueue.SetCompleted(System.String)">
 <summary>
 Flags the specified job as having been completed by the current client.
 </summary>
 <param name="jobId">The Id of the job that was completed.</param>
</member>
<member name="T:DriveWorks.SharedGroupDetails">
 <summary>
 Provides information about a shared group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.SharedGroupDetails.GroupName">
 <summary>
 Gets the name of the group.
 </summary>
</member>
<member name="P:DriveWorks.SharedGroupDetails.MajorVersion">
 <summary>
 Gets the major version number of the group.
 </summary>
</member>
<member name="P:DriveWorks.SharedGroupDetails.MinorVersion">
 <summary>
 Gets the minor version number of the group.
 </summary>
</member>
<member name="P:DriveWorks.SharedGroupDetails.RevisionVersion">
 <summary>
 Gets the revision version number of the group.
 </summary>
</member>
<member name="P:DriveWorks.SharedGroupDetails.OwnerName">
 <summary>
 Gets the owner name (machine name) of the server that is hosting the group currently.
 </summary>
</member>
<member name="T:DriveWorks.SpecifcationDirectoryChangedTriggerAttribute">
 <summary>
 Defines a common trigger attribute for the FsGetFullPath family of functions.
 </summary>
</member>
<member name="T:DriveWorks.Jobs">
 <summary>
 Represents a collection of jobs that are waiting to be processed or are currently being processed in DriveWorks.
 </summary>
</member>
<member name="M:DriveWorks.Jobs.#ctor(DriveWorks.Job[],DriveWorks.Job[])">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.Jobs"/> class.
 </summary>
 <param name="inProgressJobs">The jobs currently being processed.</param>
 <param name="pendingJobs">The jobs in the pool waiting to be processed.</param>
</member>
<member name="P:DriveWorks.Jobs.InProgress">
 <summary>
 Gets the jobs currently being processed.
 </summary>
</member>
<member name="P:DriveWorks.Jobs.Pending">
 <summary>
 Gets the jobs waiting to be processed.
 </summary>
</member>
<member name="T:DriveWorks.Job">
 <summary>
 Represents something to be actioned in DriveWorks.
 </summary>
</member>
<member name="M:DriveWorks.Job.#ctor(System.Object,DriveWorks.Internal.Group.CacheJob)">
 <summary>
 Creates an instance of the <see cref="P:DriveWorks.Job.Job"/> class.
 </summary>
 <param name="job">The job that is to be processed.</param>
 <param name="metaJobInfo">Extra information about the job.</param>
</member>
<member name="P:DriveWorks.Job.Job">
 <summary>
 Gets information about the job.
 </summary>
</member>
<member name="P:DriveWorks.Job.Tags">
 <summary>
 Gets the tags associated with this job.
 </summary>
</member>
<member name="P:DriveWorks.Job.MachineName">
 <summary>
 Gets the name of the machine currently processing this job.
 </summary>
</member>
<member name="P:DriveWorks.Job.Username">
 <summary>
 Gets the name of the user that is currently processing this job.
 </summary>
</member>
<member name="P:DriveWorks.Job.StartedTime">
 <summary>
 Gets the last time this job was attempted or nothing if no attempts have been made to process it.
 </summary>
</member>
<member name="P:DriveWorks.Job.FailedTime">
 <summary>
 Gets the last time we received a failure notification for this job from the client or nothing if 
 no attempts have been made to process the job yet.
 </summary>
</member>
<member name="T:DriveWorks.JobProcessorAttribute">
 <summary>
 Used to indicate something that will handle the processing of a particular type of job within DriveWorks.
 </summary>
</member>
<member name="M:DriveWorks.JobProcessorAttribute.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.JobProcessorAttribute"/> class.
 </summary>
 <param name="jobType">The type of job to process.</param>
 <param name="displayName">The user friendly name for the processor.</param>
</member>
<member name="P:DriveWorks.JobProcessorAttribute.JobType">
 <summary>
 Gets the type of job to process.
 </summary>
</member>
<member name="P:DriveWorks.JobProcessorAttribute.DisplayName">
 <summary>
 Gets the user friendly name of the processor.
 </summary>
</member>
<member name="T:DriveWorks.CellValueChangedEventArgs">
 <summary>
 Provides event information for when a cell's value changes.
 </summary>
</member>
<member name="P:DriveWorks.CellValueChangedEventArgs.X">
 <summary>
 The horizontal location of the cell.
 </summary>
</member>
<member name="P:DriveWorks.CellValueChangedEventArgs.Y">
 <summary>
 The vertical location of the cell.
 </summary>
</member>
<member name="T:DriveWorks.ProjectCalculationTableColumns">
 <summary>
 Provides access to a collection to calculation table columns.
 </summary>
</member>
<member name="E:DriveWorks.ProjectCalculationTableColumns.PropertyChanged">
 <summary>
 Raised whenever a simple property is changed.
 </summary>
 <param name="sender">The object that is raising the event.</param>
 <param name="e">Information about what property changed.</param>
</member>
<member name="E:DriveWorks.ProjectCalculationTableColumns.CollectionChanged">
 <summary>
 Raise whenever a column is created, deleted or moved (this collection changes).
 </summary>
 <param name="sender">The object that is raising the event.</param>
 <param name="e">Information about how the collection has changed.</param>
</member>
<member name="P:DriveWorks.ProjectCalculationTableColumns.Column(System.Int32)">
 <summary>
 Gets a column at the specified index.
 </summary>
 <param name="index">The index of the column to fetch.</param>
</member>
<member name="P:DriveWorks.ProjectCalculationTableColumns.Column(System.String)">
 <summary>
 Gets a column with the specified column name.
 </summary>
 <param name="name">The name of the column to get.</param>
</member>
<member name="P:DriveWorks.ProjectCalculationTableColumns.Count">
 <summary>
 Gets the number of columns in this collection.
 </summary>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumns.Add(System.String,DriveWorks.ProjectCalculationTableColumnType)">
 <summary>
 Adds a new column to this collection of columns.
 </summary>
 <param name="displayName">The display name of this column (can contain spaces).</param>
 <param name="type">The type of column to create.</param>
 <returns>The created column.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumns.Remove(DriveWorks.ProjectCalculationTableColumn)">
 <summary>
 Removes a column the collection of columns.
 </summary>
 <param name="column">The column to remove.</param>
 <returns>True if the column is removed.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumns.Move(System.Int32,System.Int32)">
 <summary>
 Moves a column from an index to the specified new index.
 </summary>
 <param name="columnIndex">The index of the column to move.</param>
 <param name="newIndex">The new index to give the column.</param>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumns.RenameColumn(System.String,System.String)">
 <summary>
 Renames a column.
 </summary>
 <param name="columnName">The name of the column to rename.</param>
 <param name="newName">The new name to give the column.</param>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumns.TryGet(System.String,DriveWorks.ProjectCalculationTableColumn@)">
 <summary>
 Attempts to find a matching column based on the name specified.
 </summary>
 <param name="columnName">Name of the column to find.</param>
 <param name="column">The resulting column or null.</param>
 <returns>True if the column is found.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumns.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through the collection.
 </summary>
</member>
<member name="T:DriveWorks.DeleteMacroCategoryBehavior">
 <summary>
 Specifies the behavior to use when deleting a specification macro category.
 </summary>
</member>
<member name="F:DriveWorks.DeleteMacroCategoryBehavior.None">
 <summary>
 Delete a single specification macro category with no children.
 </summary>
 <remarks>If the specification macro category has any children, an exception will be thrown.</remarks>
</member>
<member name="F:DriveWorks.DeleteMacroCategoryBehavior.DeleteCategoriesAndMoveMacros">
 <summary>
 Deletes descendent categories, and moves all descendent macros to the category's parent.
 </summary>
</member>
<member name="F:DriveWorks.DeleteMacroCategoryBehavior.MoveCategoriesAndMacros">
 <summary>
 Moves child categories and macros to the category's parent.
 </summary>
</member>
<member name="T:DriveWorks.EmailDetails">
 <summary>
 Provides support for reading information about a released email from the task XML.
 </summary>
</member>
<member name="M:DriveWorks.EmailDetails.#ctor(System.Xml.Linq.XElement)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.EmailDetails"/> class.
 </summary>
 <param name="emailXml">The xml that provides information about an email.</param>
</member>
<member name="P:DriveWorks.EmailDetails.Sender">
 <summary>
 Gets the email address of the sender.
 </summary>
</member>
<member name="P:DriveWorks.EmailDetails.Recipients">
 <summary>
 Gets the email addresses that the email will be sent to.
 </summary>
 <remarks>Delimited by a '|'.</remarks>
</member>
<member name="P:DriveWorks.EmailDetails.CcAddresses">
 <summary>
 Gets the email addresses that will be carbon copied into the email.
 </summary>
 <remarks>Delimited by a '|'.</remarks>
</member>
<member name="P:DriveWorks.EmailDetails.BccAddresses">
 <summary>
 Gets the email addresses that will be blind carbon copied into the email.
 </summary>
 <remarks>Delimited by a '|'.</remarks>
</member>
<member name="P:DriveWorks.EmailDetails.Subject">
 <summary>
 Gets the subject of the email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDetails.Attachments">
 <summary>
 Gets the attachments that will be sent with the email.
 </summary>
 <remarks>Delimited by a '|'.</remarks>
</member>
<member name="P:DriveWorks.EmailDetails.Tags">
 <summary>
 Gets the tags associated with this email.
 </summary>
 <remarks>Delimited by a '|'.</remarks>
</member>
<member name="P:DriveWorks.EmailDetails.PreventOutlookNewLineRemoval">
 <summary>
 Gets whether new lines will be removed from outlook emails.
 </summary>
</member>
<member name="P:DriveWorks.EmailDetails.SendAsHtml">
 <summary>
 Gets whether the body of the email should be sent as HTML.
 </summary>
</member>
<member name="P:DriveWorks.EmailDetails.ReleaseDate">
 <summary>
 Gets the date that the email was released.
 </summary>
 <remarks>Emails released before 12.2 will not have this and will return Nothing.</remarks>
</member>
<member name="P:DriveWorks.EmailDetails.LastProcessedDate">
 <summary>
 Gets the last date we attempted to send the email or Nothing if we have never tried to send it.
 </summary>
 <remarks>Emails released before 12.2 will not have this and will return Nothing.</remarks>
</member>
<member name="P:DriveWorks.EmailDetails.Body">
 <summary>
 Gets the body of the email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDetails.FailureElements">
 <summary>
 Gets the failure information if we have tried to process the email and failed.
 </summary>
</member>
<member name="T:DriveWorks.DeferredTaskFailureDetails">
 <summary>
 Represents information about a failed attempt at processing a deferred task.
 </summary>
</member>
<member name="P:DriveWorks.DeferredTaskFailureDetails.Element">
 <summary>
 Gets the XML element with the failure information.
 </summary>
</member>
<member name="P:DriveWorks.DeferredTaskFailureDetails.Message">
 <summary>
 Gets the message about the failure.
 </summary>
</member>
<member name="P:DriveWorks.DeferredTaskFailureDetails.FailDate">
 <summary>
 Gets the date that the failure occurred. This is in the format yyyy-MM-dd HH:mm:ss
 </summary>
 <remarks>If no date has been stored the current date/time will be returned.</remarks>
</member>
<member name="T:DriveWorks.CalculationTableExport">
 <summary>
 A Document responsible for updating and appending rows to calculation tables.
 </summary>
</member>
<member name="M:DriveWorks.CalculationTableExport.GetDetails">
 <summary>
 Gets the details for this document.
 </summary>
 <remarks>
 This is used to view and edit most information for this document.
 Changes must be committed on the object in order to apply changes to this document.
 </remarks>
</member>
<member name="M:DriveWorks.CalculationTableExport.GetExportSummary">
 <summary>
 Gets a summary of changes that would take place if the document was generated now.
 </summary>
</member>
<member name="T:DriveWorks.CalculationTableExportDetails">
 <summary>
 Represents a collection of information for a calculation table export document.
 </summary>
</member>
<member name="P:DriveWorks.CalculationTableExportDetails.TableName">
 <summary>
 The name of the table that the document will drive.
 </summary>
</member>
<member name="P:DriveWorks.CalculationTableExportDetails.DriveControlColumns">
 <summary>
 Whether or not control columns will be driven during export.
 </summary>
</member>
<member name="T:DriveWorks.CalculationTableExportLocalizedResource">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.ReportClassName">
<summary>
  Looks up a localized string similar to Export To Calculation Table.
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.RptDetailColumnWillBeSkipped">
<summary>
  Looks up a localized string similar to This column will be skipped..
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.RptErrDuplicateColumnFoundInExport">
<summary>
  Looks up a localized string similar to Duplicate column found in export &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.RptErrNoFindColumnInCalcTable">
<summary>
  Looks up a localized string similar to Could not find the column &apos;{0}&apos; in the target calculation table..
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.RptErrNoFindTable">
<summary>
  Looks up a localized string similar to Could not find a calculation table with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.RptErrNoMatchingColumnsToExportTo">
<summary>
  Looks up a localized string similar to There are no matching columns to export to..
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.RptInfoExportedValuesSuccessfully">
<summary>
  Looks up a localized string similar to Exported values to &apos;{0}&apos; successfully.
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.RptInfoSuccessDetail">
<summary>
  Looks up a localized string similar to {0} rows updated, {1} rows appended..
</summary>
</member>
<member name="P:DriveWorks.CalculationTableExportLocalizedResource.RptWarnCantExportInputColumn">
<summary>
  Looks up a localized string similar to Skipping writing value to column &apos;{0}&apos; row {1}, as the column is an input column..
</summary>
</member>
<member name="T:DriveWorks.EmailDocumentDetails">
 <summary>
 Provides a cached copy of an email documents settings that can be edited and then pushed into the document at will.
 </summary>
</member>
<member name="M:DriveWorks.EmailDocumentDetails.#ctor(DriveWorks.Email)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.EmailDocumentDetails" /> type.
 </summary>
 <param name="document">The email document to be based on.</param>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.Sender">
 <summary>
 The email address of the sender of the email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.Receiver">
 <summary>
 The email address of the receiver of the email. 
 </summary>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.Subject">
 <summary>
 The subject of the email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.Cc">
 <summary>
 The Cc email addresses to recieve the email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.Bcc">
 <summary>
 The Bcc email addresses to recieve the email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.Attachments">
 <summary>
 The attachments of the email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.Tags">
 <summary>
 The tags associated with the email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.BodyText">
 <summary>
 The body text of the email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.IsBodyHtml">
 <summary>
 Whether or not the email will be sent as a HTML email.
 </summary>
</member>
<member name="P:DriveWorks.EmailDocumentDetails.OutlookNewlineRemoval">
 <summary>
 Whether or not outlook can remove new lines from the email.
 </summary>
</member>
<member name="M:DriveWorks.EmailDocumentDetails.CommitChanges">
 <summary>
 Pushes changes to the original email document.  
 </summary>
</member>
<member name="T:DriveWorks.InvalidDocumentGeneratedException">
 <summary>
 Contains error information pertaining to an invalid document that has been generated.
 </summary>
</member>
<member name="M:DriveWorks.InvalidDocumentGeneratedException.#ctor(System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.InvalidDocumentGeneratedException"/> class.
 </summary>
</member>
<member name="T:DriveWorks.InvalidDocumentPathException">
 <summary>
 Contains error information pertaining to invalid DriveWorks document file and relative path rules.
 </summary>
</member>
<member name="M:DriveWorks.InvalidDocumentPathException.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.InvalidDocumentPathException"/> class.
 </summary>
 <param name="documentName">The name of the document that threw this exception.</param>
 <param name="invalidPathFragment">The part of the document path that is invalid.</param>
</member>
<member name="P:DriveWorks.InvalidDocumentPathException.DocumentName">
 <summary>
 Gets the name of the document containing an invalid filename or relative path rule.
 </summary>
</member>
<member name="T:DriveWorks.ReleasedEmail">
 <summary>
 Represents information about an email that has been released by DriveWorks.
 </summary>
</member>
<member name="M:DriveWorks.ReleasedEmail.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.ReleasedEmail"/> class.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.Sender">
 <summary>
 Gets/sets the email address that sent the email.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.Recipients">
 <summary>
 Gets/sets the email addresses that the email should be sent to.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.CcAddresses">
 <summary>
 Gets/sets the email addresses that should be carbon copied in on the email.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.BccAddresses">
 <summary>
 Gets/sets the email addresses that should be blind carbon copied in on the email.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.Subject">
 <summary>
 Gets/sets the subject of the email.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.Attachments">
 <summary>
 Gets/sets the paths to the attachments to be included in the email.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.Body">
 <summary>
 Gets/sets the body text of the email.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.PreventOutlookNewLineRemoval">
 <summary>
 Gets/sets whether we should prevent Outlook from removing breaklines.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.SendAsHtml">
 <summary>
 Gets/sets whether to send the email as HTML.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.ReleaseDate">
 <summary>
 Gets/sets the date the email was released.
 </summary>
 <returns>Nothing, if this was an email created before DriveWorks 12.2, otherwise the date the email was released.</returns>
</member>
<member name="P:DriveWorks.ReleasedEmail.LastProcessedDate">
 <summary>
 Gets/sets the date we last tried to send the email.
 </summary>
 <returns>
 Nothing, if this email was an email created before DriveWorks 12.2 or we've not yet tried to send it, 
 otherwise the date we last tried to send the email.
 </returns>
</member>
<member name="P:DriveWorks.ReleasedEmail.Failures">
 <summary>
 Gets information regarding the failed attempts at sending the email.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedEmail.FailedCount">
 <summary>
 Gets the number of failed attempts at trying to send this email.
 </summary>
</member>
<member name="M:DriveWorks.ReleasedEmail.Load(System.IO.Stream)">
 <summary>
 Reads the information stored about the email from the specified stream.
 </summary>
 <param name="stream">The stream to deserialize and read the information from.</param>
</member>
<member name="M:DriveWorks.ReleasedEmail.Load(System.Xml.Linq.XElement)">
 <summary>
 Reads the information stored about the email from the specified XML element.
 </summary>
 <param name="element">The XML element to read the information from.</param>
</member>
<member name="M:DriveWorks.ReleasedEmail.AddFailure(System.String)">
 <summary>
 Logs a failed attempt at sending this email.
 </summary>
 <param name="reason">The reason the email failed to be sent.</param>
</member>
<member name="M:DriveWorks.ReleasedEmail.Serialize">
 <summary>
 Serializes the information about the email.
 </summary>
 <remarks>This is to be stored in the group as the Data field for a SpecificationDeferredTask.</remarks>
 <returns>A byte array representing the serialized email information.</returns>
</member>
<member name="T:DriveWorks.ReleasedTriggeredAction">
 <summary>
 Represents information about a triggered action that has been released by DriveWorks.
 </summary>
</member>
<member name="M:DriveWorks.ReleasedTriggeredAction.#ctor">
 <summary>
 Initializes a new <see cref="T:DriveWorks.ReleasedTriggeredAction"/> with empty values.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedTriggeredAction.Name">
 <summary>
 Gets/sets the Name of the triggered action document.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedTriggeredAction.Action">
 <summary>
 Gets/sets the name of the operation or transition to run.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedTriggeredAction.FailureMessages">
 <summary>
 Gets information regarding failed attempts at executing the triggered action.
 </summary>
 <remarks>
 The size of this is limited to <see cref="F:DriveWorks.ReleasedTriggeredAction.MAX_FAIL_MESSAGE_COUNT"/>.
 </remarks>
</member>
<member name="P:DriveWorks.ReleasedTriggeredAction.FailedCount">
 <summary>
 Gets the amount of times that the triggered action has failed to execute.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedTriggeredAction.Element">
 <summary>
 Gets the XML element of the triggered action.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedTriggeredAction.FilePathsDisplayValue">
 <summary>
 Gets/sets the pipe delimited string of the file paths that the triggered action is waiting for.
 </summary>
 <remarks>This is to be used when displaying the calculated file paths in the UI.</remarks>
</member>
<member name="P:DriveWorks.ReleasedTriggeredAction.FilePaths">
 <summary>
 Gets an array of file paths that the triggered action is waiting for.
 </summary>
</member>
<member name="P:DriveWorks.ReleasedTriggeredAction.Task">
 <summary>
 Gets the task information associated with this triggered action.
 </summary>
</member>
<member name="M:DriveWorks.ReleasedTriggeredAction.Load(DriveWorks.Specification.SpecificationTaskDetails)">
 <summary>
 Reads the information stored about the triggered action from the specified task.
 </summary>
 <param name="task">The task to deserialize and read the information from.</param>
</member>
<member name="M:DriveWorks.ReleasedTriggeredAction.ClearFailures">
 <summary>
 Clears any failures associated with this triggered action.
 </summary>
</member>
<member name="M:DriveWorks.ReleasedTriggeredAction.SynchronizeData">
 <summary>
 Synchronizes the XML for this triggered action with its specification task.
 </summary>
</member>
<member name="M:DriveWorks.ReleasedTriggeredAction.AddFailMessage(System.String)">
 <summary>
 Add a failure to the <see cref="P:DriveWorks.ReleasedTriggeredAction.FailureMessages"/> list.
 </summary>
 <param name="message">The exception message to add to the list.</param>
</member>
<member name="M:DriveWorks.ReleasedTriggeredAction.UpdateFilePath(System.String,System.String)">
 <summary>
 Updates the specified file path to the new location.
 </summary>
 <param name="pathToChange">An existing file path that the triggered action is looking for.</param>
 <param name="newPath">The new path to replace the old location with.</param>
</member>
<member name="T:DriveWorks.TextDocument">
 <summary>
 Provides support for creating a text file from scratch based on rules.
 </summary>
</member>
<member name="M:DriveWorks.TextDocument.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="P:DriveWorks.TextDocument.IsHidden">
 <summary>
 Gets/sets whether the document will be hidden from the documents list.
 </summary>
</member>
<member name="P:DriveWorks.TextDocument.DocumentNameRule">
 <summary>
 Gets the rule that specifies the document's name when generated.
 </summary>
</member>
<member name="P:DriveWorks.TextDocument.DocumentPathRule">
 <summary>
 Gets the rule that specifies the path where the document will be generated to.
 </summary>
</member>
<member name="M:DriveWorks.TextDocument.GetLines">
 <summary>
 Gets the lines that make up the text document.
 </summary>
 <returns>The text document's lines.</returns>
</member>
<member name="M:DriveWorks.TextDocument.ShouldGenerate(DriveWorks.Specification.RuleResults)">
 <summary>
 Determines whether the document should be generated.
 </summary>
 <param name="results">The results of the rules in the document.</param>
 <returns>True if the hasn't been suppressed, otherwise false.</returns>
</member>
<member name="T:DriveWorks.TextDocumentLine">
 <summary>
 Provides support for building a rule for a line in a text document.
 </summary>
</member>
<member name="E:DriveWorks.TextDocumentLine.PropertyChanged">
 <summary>
 Raised when a property on the line has changed.
 </summary>
 <param name="sender">The object that raised the event.</param>
 <param name="e">The arguments passed to the event.</param>
</member>
<member name="M:DriveWorks.TextDocumentLine.#ctor(DriveWorks.ProjectDocumentRules,System.Int32)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.TextDocumentLine"/> class.
 </summary>
 <param name="rules">The rules stored in the project.</param>
 <param name="lineNumber">The position of this line in the document (1 based).</param>
</member>
<member name="M:DriveWorks.TextDocumentLine.#ctor(DriveWorks.ProjectDocumentRules,System.Int32,System.Xml.Linq.XElement)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.TextDocumentLine" /> class.
 </summary>
 <param name="rules">The rules stored in the project.</param>
 <param name="lineNumber">The position of the line within the document.</param>
 <param name="lineElement">The XML element that represents the line in the Text Document.</param>
</member>
<member name="P:DriveWorks.TextDocumentLine.DisplayName">
 <summary>
 Gets the name to display in the RulesBuilder for this line's rule.
 </summary>
</member>
<member name="P:DriveWorks.TextDocumentLine.LineNumber">
 <summary>
 Gets the position of this line within the document.
 </summary>
 <remarks>This is 1 based.</remarks>
</member>
<member name="P:DriveWorks.TextDocumentLine.Rule">
 <summary>
 Gets the rule for the line.
 </summary>
</member>
<member name="P:DriveWorks.TextDocumentLine.Formula">
 <summary>
 Gets the formula for the line's rule, as a string.
 </summary>
</member>
<member name="P:DriveWorks.TextDocumentLine.Comment">
 <summary>
 Gets the comment for the line's rule.
 </summary>
</member>
<member name="P:DriveWorks.TextDocumentLine.Value">
 <summary>
 Gets the calculated value of the line.
 </summary>
</member>
<member name="M:DriveWorks.TextDocumentLine.UpdateLine(System.String,System.String,System.String)">
 <summary>
 Updates the rule, comment and value for this line.
 </summary>
 <param name="rule">The new rule for the line.</param>
 <param name="comment">The new comment for the line's rule.</param>
 <param name="value">The calculated value of the new rule.</param>
</member>
<member name="P:DriveWorks.TextDocumentLine.RuleId">
 <summary>
 Gets the Id of the stored rule.
 </summary>
 <returns>Nothing if the rule has not yet been committed, otherwise the rule's Id.</returns>
</member>
<member name="M:DriveWorks.TextDocumentLine.SetValue(System.String)">
 <summary>
 Sets the value of the line.
 </summary>
 <param name="newValue">The calculated value of the rule.</param>
</member>
<member name="M:DriveWorks.TextDocumentLine.Move(System.Int32)">
 <summary>
 Sets the new position of the line within the document.
 </summary>
 <param name="newLineNumber">The new position of the line.</param>
 <remarks>The line number is 1 based.</remarks>
</member>
<member name="M:DriveWorks.TextDocumentLine.CommitChanges">
 <summary>
 Commits the changes to the line's rule.
 </summary>
</member>
<member name="T:DriveWorks.TextDocumentLineRuleWrapper">
 <summary>
 Provides a wrapper around a Text Document's Line rule that allows the DisplayName property to be changed.
 </summary>
</member>
<member name="M:DriveWorks.TextDocumentLineRuleWrapper.#ctor(DriveWorks.Abstractions.IHasRule)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.TextDocumentLineRuleWrapper"/> class.
 </summary>
 <param name="rule">The rule to wrap.</param>
</member>
<member name="P:DriveWorks.TextDocumentLineRuleWrapper.Comment">
 <summary>
 Gets/sets the comment for the rule.
 </summary>
</member>
<member name="P:DriveWorks.TextDocumentLineRuleWrapper.DisplayName">
 <summary>
 Gets the display name for the rule.
 </summary>
</member>
<member name="P:DriveWorks.TextDocumentLineRuleWrapper.IsWritable">
 <summary>
 Gets whether the rule and comment can be written to.
 </summary>
</member>
<member name="P:DriveWorks.TextDocumentLineRuleWrapper.Rule">
 <summary>
 Gets/sets the rule.
 </summary>
</member>
<member name="M:DriveWorks.TextDocumentLineRuleWrapper.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
</member>
<member name="M:DriveWorks.TextDocumentLineRuleWrapper.SetDisplayName(System.String)">
 <summary>
 Sets the display name for the rule.
 </summary>
 <param name="newDisplayName">The new display name, which will be used in the RulesBuilder.</param>
</member>
<member name="M:DriveWorks.TextDocumentLineRuleWrapper.GetVersionHistory">
 <summary>
 Gets the version history for the line's rule.
 </summary>
</member>
<member name="P:DriveWorks.TextDocumentLineRuleWrapper.WrappedRule">
 <summary>
 Gets the rule this rule wraps.
 </summary>
</member>
<member name="T:DriveWorks.TextDocumentLines">
 <summary>
 Represents the lines within a text document.
 </summary>
</member>
<member name="M:DriveWorks.TextDocumentLines.#ctor(DriveWorks.ProjectDocumentRules,System.Xml.Linq.XElement)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.TextDocumentLines"/> class.
 </summary>
 <param name="rules">The rules stored in the project.</param>
 <param name="element">The XML element from the Project XML that represents the lines in a TextDocument.</param>
</member>
<member name="M:DriveWorks.TextDocumentLines.AddLine">
 <summary>
 Adds a line to the bottom of the document.
 </summary>
</member>
<member name="M:DriveWorks.TextDocumentLines.Remove(DriveWorks.TextDocumentLine)">
 <summary>
 Removes the specified line from the document.
 </summary>
 <param name="line">The line to remove.</param>
 <remarks>This will update the index of all lines afterwards.</remarks>
</member>
<member name="M:DriveWorks.TextDocumentLines.MoveLineUp(DriveWorks.TextDocumentLine)">
 <summary>
 Moves the specified line up one place.
 </summary>
 <param name="line">The line to move up.</param>
</member>
<member name="M:DriveWorks.TextDocumentLines.MoveLineDown(DriveWorks.TextDocumentLine)">
 <summary>
 Moves the specified line down one place.
 </summary>
 <param name="line">The line to move down.</param>
</member>
<member name="M:DriveWorks.TextDocumentLines.ClearLines">
 <summary>
 Removes all lines in the document.
 </summary>
</member>
<member name="M:DriveWorks.TextDocumentLines.GetLines">
 <summary>
 Gets the lines for the document.
 </summary>
 <returns>A collection of lines for the document.</returns>
</member>
<member name="M:DriveWorks.TextDocumentLines.CalculateValues">
 <summary>
 Calculates the values for every line in the document.
 </summary>
</member>
<member name="M:DriveWorks.TextDocumentLines.CommitChanges">
 <summary>
 Stores the changes to the document in the Project.
 </summary>
</member>
<member name="M:DriveWorks.TextDocumentLines.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through a collection of <see cref="T:DriveWorks.TextDocumentLine"/>.
 </summary>
</member>
<member name="T:DriveWorks.TriggeredAction">
 <summary>
 Provides support for performing an action based
 on an event.
 </summary>
</member>
<member name="M:DriveWorks.TriggeredAction.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="P:DriveWorks.TriggeredAction.TriggeringFilesRule">
 <summary>
 The rule for the files whose existence trigger the action.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredAction.ActionNameRule">
 <summary>
 The rule for the name of the operation or transition to run (operations will be executed preferentially).
 </summary>
</member>
<member name="P:DriveWorks.TriggeredAction.TagsRule">
 <summary>
 The rule for associating tags with the triggered action.
 </summary>
</member>
<member name="M:DriveWorks.TriggeredAction.ShouldGenerate(DriveWorks.Specification.RuleResults)">
 <inheritdoc />
</member>
<member name="T:DriveWorks.TriggeredActionDetails">
 <summary>
 Provides support for exposing information about a released <see cref="T:DriveWorks.TriggeredAction"/>.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionDetails.Element">
 <summary>
 Gets the XML associated with this released triggered action.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionDetails.Name">
 <summary>
 Gets the name of the triggered action document.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionDetails.FilePaths">
 <summary>
 Gets the paths to the files that the triggered action is waiting to exist.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionDetails.Action">
 <summary>
 Gets the name of the action to perform when the files exist.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionDetails.Failures">
 <summary>
 Gets the failures from any attempts made to run the triggered action.
 </summary>
</member>
<member name="T:DriveWorks.FileResultStatus">
 <summary>
 Represents the status of a file result.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.FileResultStatus.Valid">
 <summary>
 The result is a file that is valid.
 </summary>
</member>
<member name="F:DriveWorks.FileResultStatus.Suppressed">
 <summary>
 The result is a suppression result.
 </summary>
</member>
<member name="F:DriveWorks.FileResultStatus.Invalid">
 <summary>
 The result is a file path which isn't valid.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.TriggeredActionFileResult">
 <summary>
 Represents the result of evaluating a file
 for a <see cref="T:DriveWorks.TriggeredAction" /> document.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionFileResult.Result">
 <summary>
 Gets or sets the raw result for the file.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionFileResult.Resolved">
 <summary>
 Gets or sets the resolved result for the file.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionFileResult.Status">
 <summary>
 Gets or sets the status of the file entry.
 </summary>
</member>
<member name="T:DriveWorks.TriggeredActionTestResult">
 <summary>
 Represents the result of a <see cref="T:DriveWorks.TriggeredAction" /> document.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.TriggeredActionTestResult.WillGenerate">
 <summary>
 Determines whether one or more rules would prevent the document 
 from being generated.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionTestResult.ActionNameResult">
 <summary>
 Gets or sets the result of the <see cref="P:DriveWorks.TriggeredAction.ActionNameRule" /> rule.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionTestResult.TriggeringFilesResult">
 <summary>
 Gets or sets the result of the <see cref="P:DriveWorks.TriggeredAction.TriggeringFilesRule" /> rule.
 </summary>
</member>
<member name="P:DriveWorks.TriggeredActionTestResult.TagsResult">
 <summary>
 Gets or sets the result of the <see cref="P:DriveWorks.TriggeredAction.TagsRule"/> rule.
 </summary>
</member>
<member name="T:DriveWorks.ProjectCalculationTable">
 <summary>
 A project based table that is comprised of referable cells and can interact with controls based on naming conventions.
 </summary>
</member>
<member name="E:DriveWorks.ProjectCalculationTable.PropertyChanged">
 <summary>
 Raised when a property is changed, such as name or row count.
 </summary>
</member>
<member name="E:DriveWorks.ProjectCalculationTable.CellValueChanged">
 <summary>
 Raised when a cell's value is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectCalculationTable.Deleted">
 <summary>
 Raised when this table is deleted.
 </summary>
</member>
<member name="E:DriveWorks.ProjectCalculationTable.Changed">
 <summary>
 Raised when the table changes.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTable.Name">
 <summary>
 Gets the name of the table.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTable.DisplayName">
 <summary>
 Gets the display name of the table.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTable.Columns">
 <summary>
 Gets the columns used in the table.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTable.RowCount">
 <summary>
 Gets and sets the number of rows in the table
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTable.Value(System.Int32,System.Int32)">
 <summary>
 Gets a cell's value.
 </summary>
 <param name="columnIndex">Zero based column index of the cell to get the value of.</param>
 <param name="rowIndex">Zero based row index of the cell to get the value of.</param>
 <remarks>
 Includes header row.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectCalculationTable.RemoveRow(System.Int32)">
 <summary>
 Removes the specified row from the calculation table.
 </summary>
 <param name="rowIndex">The index of the row to remove (index does not include the header row I.e 0 is the first data row).</param>
</member>
<member name="M:DriveWorks.ProjectCalculationTable.GetName(System.String)">
 <summary>
 Gets the invariant name of the table from a display name.
 </summary>
 <param name="displayName">The display name to convert.</param>
 <returns>The converted name.</returns>
 <remarks>This just removes spaces.</remarks>
</member>
<member name="M:DriveWorks.ProjectCalculationTable.GetTableReferenceName(System.String)">
 <summary>
 Converts a table display name to a reference name (how it would be used in rules).
 </summary>
 <param name="displayName">The name to convert.</param>
 <returns>The converted name.</returns>
 <remarks>
 E.g. "Hello There" would return "DWCalcHelloThere"
 </remarks>
</member>
<member name="T:DriveWorks.ProjectCalculationTableColumn">
 <summary>
 Represents a project calculation table's column and a collection of cell's within it.
 </summary>
</member>
<member name="E:DriveWorks.ProjectCalculationTableColumn.PropertyChanged">
 <summary>
 Raised when a property is changed, such as name or type.
 </summary>
</member>
<member name="E:DriveWorks.ProjectCalculationTableColumn.CollectionChanged">
 <summary>
 Raised when the collection of explicit cell rules in this column changes.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTableColumn.Name">
 <summary>
 The name of the column.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTableColumn.DisplayName">
 <summary>
 The display name of the column.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTableColumn.Type">
 <summary>
 The type of the column.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTableColumn.CommonRule">
 <summary>
 The common rule that will be used for all cells that don't have an explicit rule set on them.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTableColumn.Index">
 <summary>
 The zero based index of the this column.
 </summary>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumn.GetRule(System.Int32,System.Boolean)">
 <summary>
 Gets an explicit rule from this column for the specified row.
 </summary>
 <param name="rowIndex">The index of the row to get, where 0 is the first data row.</param>
 <param name="create">Whether or not to create the cell, if it doesn't exist.</param>
 <returns>The matching cell item if it exists, or null when create is false.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumn.GetRules">
 <summary>
 Get's all cell rules that re explicitly set in the column.
 </summary>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumn.RemoveRule(System.Int32)">
 <summary>
 Clears a cell rule at the specified index, causing it to use the column's common rule.
 </summary>
 <param name="rowIndex">The row index of the cell to clear the rule of (0 being the first data row).</param>
 <returns>True if a rule was cleared.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumn.GetFullRuleId(System.Int32)">
 <summary>
 Gets a rule reference for the specified cell.
 </summary>
 <param name="rowIndex">The row index of the cell to get the reference of.</param>
 <returns>The fully qualified rule reference name.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumn.GetContext(System.Int32)">
 <summary>
 Gets a rule context for a particular cell. This is useful when evaluating common with the context of a specific cell.
 </summary>
 <param name="rowIndex">The index of the row to get the context of (0 is the first row).</param>
 <returns>The cell's context provider, whether it had a specific or rule or not.</returns>
 <remarks>The context can become invalid if rows are inserted or the table renamed etc.</remarks>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumn.GetName(System.String)">
 <summary>
 Converts a column display name to a column name.
 </summary>
 <param name="displayName">The display name to convert.</param>
 <returns>The converted name.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumn.GetCellReferenceName(System.String,System.Int32)">
 <summary>
 Converts a column display name to a rule reference name that can be used within a table only.
 </summary>
 <param name="columnName">The name of the column.</param>
 <param name="rowIndex">The row index of the cell - zero based.</param>
 <returns>The generated name.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumn.GetFullCellReferenceName(System.String,System.String,System.Int32)">
 <summary>
 Gets a full rule reference name (including the table name) to the specified cell.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="columnName">The column name to use.</param>
 <param name="rowIndex">The cell row index.</param>
 <returns>The generated name.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTableColumn.GetEnumerator">
 <summary>
 Gets an IEnumerator that will yield all explicitly set cell rules.
 </summary>
</member>
<member name="T:DriveWorks.ProjectCalculationTableColumnType">
 <summary>
 A set of different types of calculation table columns.
 </summary>
</member>
<member name="F:DriveWorks.ProjectCalculationTableColumnType.Data">
 <summary>
 Default type with no special behaviours.
 </summary>
</member>
<member name="F:DriveWorks.ProjectCalculationTableColumnType.ControlInput">
 <summary>
 Column's cell values are fetched from controls with the same names as the cells.
 </summary>
</member>
<member name="F:DriveWorks.ProjectCalculationTableColumnType.ControlOutput">
 <summary>
 The values from the cells can be automatically bound into matching controls with the same name.
 </summary>
</member>
<member name="T:DriveWorks.ProjectCalculationTableRule">
 <summary>
 Provides a representation of a calculation table rule.
 I.e. either a cell rule or a column rule etc.
 </summary>
</member>
<member name="E:DriveWorks.ProjectCalculationTableRule.PropertyChanged">
 <summary>
 Raised whenever a simple property on this object changes.
 </summary>
 <param name="sender">The instance of the raising object.</param>
 <param name="e">Information about the property that changed.</param>
</member>
<member name="P:DriveWorks.ProjectCalculationTableRule.Name">
 <summary>
 Gets the name of this rule.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTableRule.Formula">
 <summary>
 Gets the formula of this rule
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTableRule.Comment">
 <summary>
 Gets the comment of this rule.
 </summary>
</member>
<member name="P:DriveWorks.ProjectCalculationTableRule.RowIndex">
 <summary>
 Gets the row index of this rule.
 </summary>
 <remarks>
 This can be -1 for common rules.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectCalculationTableRule.Column">
 <summary>
 Gets the column for this rule.
 </summary>
</member>
<member name="M:DriveWorks.ProjectCalculationTableRule.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets both and rule and comment in one rule revision.
 </summary>
 <param name="newRule">The formula to give this rule.</param>
 <param name="newComment">The comment to give this rule.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectCalculationTableRule.GetVersionHistory">
 <summary>
 Gets all revisions for this rule.
 </summary>
</member>
<member name="T:DriveWorks.ProjectCalculationTables">
 <summary>
 Provides access to a collection project calculation tables.
 </summary>
</member>
<member name="E:DriveWorks.ProjectCalculationTables.CollectionChanged">
 <summary>
 Raised when the collection of tables changes.
 </summary>
 <param name="sender">The instance that raised the event.</param>
 <param name="e">Information about how the collection changed.</param>
</member>
<member name="E:DriveWorks.ProjectCalculationTables.PropertyChanged">
 <summary>
 Raised when a simple property changes on the collection.
 </summary>
 <param name="sender">The instance that raised the event.</param>
 <param name="e">Information about what property changed.</param>
</member>
<member name="P:DriveWorks.ProjectCalculationTables.Table(System.Int32)">
 <summary>
 Gets a table at the specified index.
 </summary>
 <param name="index">The index of the table to get.</param>
</member>
<member name="P:DriveWorks.ProjectCalculationTables.Table(System.String)">
 <summary>
 Gets a table with the specified name.
 </summary>
 <param name="name">The name of the table to get.</param>
</member>
<member name="P:DriveWorks.ProjectCalculationTables.Count">
 <summary>
 Gets the number of tables in this collection.
 </summary>
</member>
<member name="M:DriveWorks.ProjectCalculationTables.Add(System.String)">
 <summary>
 Creates a new table in this collection.
 </summary>
 <param name="displayName">The name of the table to create.</param>
 <returns>The created table.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTables.Remove(System.String)">
 <summary>
 Removes a matching table from this collection.
 </summary>
 <param name="name">The name of the table to remove.</param>
 <returns>True if the table was removed.</returns>
</member>
<member name="M:DriveWorks.ProjectCalculationTables.Rename(System.String,System.String)">
 <summary>
 Renames a table.
 </summary>
 <param name="tableName">The name of the table to change the name of.</param>
 <param name="newTableName">The new name to give the table.</param>
</member>
<member name="M:DriveWorks.ProjectCalculationTables.TryGetTable(System.String,DriveWorks.ProjectCalculationTable@)">
 <summary>
 Attempts to get a table with the specified name.
 </summary>
 <param name="name">The name (or display name) of the table to get.</param>
 <param name="table">The instance of the found table, or null if nothing is found.</param>
 <returns>True if an instance is found.</returns>
 <remarks>This is not case sensitive.</remarks>
</member>
<member name="M:DriveWorks.ProjectCalculationTables.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through the collection.
 </summary>
</member>
<member name="M:DriveWorks.WordDocumentReportWriter.#ctor(DriveWorks.Reporting.IEventReportWriter,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.WordDocumentReportWriter" /> type.
 </summary>
 <param name="reportWriter">A report writer object</param>
 <param name="documentName">The word document's filename</param>
 <remarks>The report writer could be null if we are previewing a document.</remarks>
</member>
<member name="M:DriveWorks.WordDocumentReportWriter.BeginProcess(System.String)">
 <summary>
 Begins a new section in the report.
 </summary>
 <param name="processDescription">The human-readable description of the process.</param>
</member>
<member name="M:DriveWorks.WordDocumentReportWriter.WriteInformation(System.String,System.String)">
 <summary>
 Writes an Information Entry to the report.
 </summary>
 <param name="entryDescription">The description of the entry.</param>
 <param name="entryDetail">Any additional details to be included alongside the main entry.</param>
</member>
<member name="M:DriveWorks.WordDocumentReportWriter.WriteWarning(System.String,System.String)">
 <summary>
 Writes a Warning Entry to the report.
 </summary>
 <param name="entryDescription">The description of the entry.</param>
 <param name="entryDetail">Any additional details to be included alongside the main entry.</param>
</member>
<member name="M:DriveWorks.WordDocumentReportWriter.EndProcess">
 <summary>
 Begins a section in the report.
 </summary>
</member>
<member name="T:DriveWorks.AdvancedXmlDocument">
 <summary>
 Provides the capability to generate an XML Document from an existing template.
 </summary>
</member>
<member name="M:DriveWorks.AdvancedXmlDocument.#ctor">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.AdvancedXmlDocument"/> class.
 </summary>
</member>
<member name="M:DriveWorks.AdvancedXmlDocument.AddRule(System.Guid,System.String,System.String,System.String)">
 <summary>
 Creates and Adds a new <see cref="T:DriveWorks.ProjectDocumentRule"></see> to the document.
 </summary>
 <param name="ruleId">A unique Id for the new rule.</param>
 <param name="xpath">The XPath of the element being added.</param>
 <param name="formula">The formula for the rule.</param>
 <param name="comment">The rules comment.</param>
 <returns>The created <see cref="T:DriveWorks.Abstractions.IHasRule"/> object.</returns>
</member>
<member name="M:DriveWorks.AdvancedXmlDocument.GetDocumentRuleIds">
 <summary>
 Returns a Dictionary of rule XPaths and respective Rule Id.
 </summary>
</member>
<member name="M:DriveWorks.AdvancedXmlDocument.GetRuleResults">
 <summary>
 Gets a Dictionary of all Rule Ids for this document and their evaluated result.
 </summary>
</member>
<member name="M:DriveWorks.AdvancedXmlDocument.GetRuleForPath(System.String)">
 <summary>
 Gets the <see cref="T:DriveWorks.ProjectDocumentRule"/> at the given XPath.
 </summary>
 <param name="xPath">The XPath to the required element.</param>
</member>
<member name="M:DriveWorks.AdvancedXmlDocument.GetProjectDocumentRule(System.String)">
 <summary>
 Gets the <see cref="T:DriveWorks.ProjectDocumentRule"/> associated with this Id.
 </summary>
 <param name="id">The Id of the required rule.</param>
</member>
<member name="M:DriveWorks.AdvancedXmlDocument.GenerateCore(System.String,DriveWorks.Specification.RuleResults)">
 <summary>
 Generates a new driven advanced xml document.
 </summary>
 <param name="generateDirectory">Relative directory to place driven document.</param>
 <param name="results">Resolved rules.</param>
</member>
<member name="T:DriveWorks.IHasProjectFunctions">
 <summary>
 Represents a class whose methods can be made available to rules as functions.
 </summary>
</member>
<member name="M:DriveWorks.IHasProjectFunctions.Initialize(DriveWorks.Project)">
 <summary>
 Performs initialization logic.
 </summary>
 <param name="project">The project that the functions are being loaded for.</param>
</member>
<member name="T:DriveWorks.MacroButtonInformation">
 <summary>
 Holds information regarding a Macro Button.
 </summary>
</member>
<member name="M:DriveWorks.MacroButtonInformation.#ctor">
 <summary>
 Initializes a new MacroInformation object with empty values.
 </summary>
</member>
<member name="M:DriveWorks.MacroButtonInformation.#ctor(System.String,System.Object,System.String)">
 <summary>
 Initializes a new MacroInformation object with a caller and argument.
 </summary>
 <param name="macroCaller">The caller of the macro.</param>
 <param name="macroArgument">The argument of the macro.</param>
 <param name="clickPosition">The position where the macro button was clicked.</param>
</member>
<member name="T:DriveWorks.ProjectComponentTasks">
 <summary>
 Represents collections of <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>s that aren't tied to specific components.
 </summary>
</member>
<member name="P:DriveWorks.ProjectComponentTasks.Item(System.String)">
 <summary>
 Gets the collection with the given key.
 </summary>
 <param name="key">The unique identifier of the collection to retrieve.</param>
 <returns>The accessor that provides access to the collection associated with the specified key, or a null reference (Nothing in VB) if the accessor
 does not exist.</returns>
</member>
<member name="M:DriveWorks.ProjectComponentTasks.TryGetAccessor(System.String,DriveWorks.Components.Tasks.ComponentTaskAccessor@)">
 <summary>
 Attempt to get the accessor associated with the specified key.
 </summary>
 <param name="key">The unique identifier of the accessor to retrieve.</param>
 <param name="accessor">The accessor if it was found.</param>
 <returns>True if the accessor was successfully retrieved.</returns>
</member>
<member name="M:DriveWorks.ProjectComponentTasks.GetAllAccessors">
 <summary>
 (Internal) Retrieves all accessors for all collections in the project.
 </summary>
 <remarks>This method is used by the release process to pull out all
 scoped tasks that needs releasing.</remarks>
</member>
<member name="T:DriveWorks.ProjectFunctionEvent">
 <summary>
 Provides information about an instance of a function's execution.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionEvent.Time">
 <summary>
 The start time of the function execution.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionEvent.Name">
 <summary>
 The name of the function for this event.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionEvent.Duration">
 <summary>
 The total run time of the function's execution.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionEvent.Arguments">
 <summary>
 The argument values that were passed to the function.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionEvent.Result">
 <summary>
 The returning value from the function's execution.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionEvent.OwnerName">
 <summary>
 The name of the item that executed this function.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionEvent.OwnerRule">
 <summary>
 The formula for the owning item of this function.
 </summary>
</member>
<member name="T:DriveWorks.ProjectFunctionProfile">
 <summary>
 Represents a summation of function based events of a particular type.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionProfile.Name">
 <summary>
 The name of the function that this profile information is for.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionProfile.TotalElapsed">
 <summary>
 The total time that as been spent in executing all instances of the represented function.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFunctionProfile.Events">
 <summary>
 Information on all instances of times when the function has been executed.
 </summary>
</member>
<member name="T:DriveWorks.ProjectProfileEventArgs">
 <summary>
 Provides the event data for profiler events.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileEventArgs.ProfileEvent">
 <summary>
 Gets the project profile event.
 </summary>
</member>
<member name="T:DriveWorks.ProjectProfileEventBase">
 <summary>
 Base concept of a profile event, be it either a rule or logical event.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileEventBase.Name">
 <summary>
 The name of the event.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileEventBase.Parent">
 <summary>
 The owning logical event of this event.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileEventBase.StartTime">
 <summary>
 The start time of this event.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileEventBase.Duration">
 <summary>
 The length that it took to execute this event.
 </summary>
</member>
<member name="T:DriveWorks.ProjectProfileEvent">
 <summary>
 Represents a logical event scope used to track processes in profiling.
 </summary>
</member>
<member name="E:DriveWorks.ProjectProfileEvent.Completed">
 <summary>
 Raised when this event ends.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileEvent.Events">
 <summary>
 All child events of this event.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileEvent.IsComplete">
 <summary>
 Whether or not this event is finished.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileEvent.StartTime">
 <summary>
 The time that this event began.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileEvent.Duration">
 <summary>
 The length of time this event took to complete (or current run time if it hasn't completed yet).
 </summary>
</member>
<member name="T:DriveWorks.ProjectProfiler">
 <summary>
 Provides the ability to monitor events coming from a project.
 </summary>
</member>
<member name="E:DriveWorks.ProjectProfiler.ProfileEventAdded">
 <summary>
 Raised when a logical event is started.
 </summary>
</member>
<member name="E:DriveWorks.ProjectProfiler.RuleEventAdded">
 <summary>
 Raised when a rule based event occurs.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfiler.IsEnabled">
 <summary>
 Gets or sets whether events are being tracked and recorded.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfiler.RootProfileEvents">
 <summary>
 Gets the root events that have been recorded while the profiler is enabled.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfiler.FunctionProfiles">
 <summary>
 Gets a collection of all seen function profiles that have been recorded while the profiler is enabled.
 </summary>
</member>
<member name="M:DriveWorks.ProjectProfiler.GetEvents">
 <summary>
 Gets all logical events in a flat chronological order.
 </summary>
</member>
<member name="M:DriveWorks.ProjectProfiler.GetRuleEvents">
 <summary>
 Gets all rule events in a flat chronological order.
 </summary>
</member>
<member name="M:DriveWorks.ProjectProfiler.StartProfileEvent(System.String)">
 <summary>
 Begins a new logical event scope in the profiler.
 </summary>
 <returns>
 An object that when disposed will close (end) the event.
 </returns>
</member>
<member name="M:DriveWorks.ProjectProfiler.Clear">
 <summary>
 Removes all recorded information.
 </summary>
</member>
<member name="T:DriveWorks.ProjectProfileRuleEventArgs">
 <summary>
 Provides the event data for profiler rule adding events.
 </summary>
</member>
<member name="P:DriveWorks.ProjectProfileRuleEventArgs.RuleEvent">
 <summary>
 Gets the project rule event.
 </summary>
</member>
<member name="T:DriveWorks.ProjectRuleEvent">
 <summary>
 Represents a project based rule event, such a calculation or value change.
 </summary>
</member>
<member name="P:DriveWorks.ProjectRuleEvent.Rule">
 <summary>
 The formula for this event.
 </summary>
 <remarks>
 Potentially null as not every event is based on a rule (such as a value setting events).
 </remarks>
</member>
<member name="P:DriveWorks.ProjectRuleEvent.OldValue">
 <summary>
 The value of the item before this event.
 </summary>
</member>
<member name="P:DriveWorks.ProjectRuleEvent.Newvalue">
 <summary>
 The new value for this item (the result of this event).
 </summary>
</member>
<member name="P:DriveWorks.ProjectRuleEvent.StartTime">
 <summary>
 The time that the event started to happen.
 </summary>
</member>
<member name="P:DriveWorks.ProjectRuleEvent.Duration">
 <summary>
 The time taken to complete this event.
 </summary>
</member>
<member name="P:DriveWorks.ProjectRuleEvent.IsFromCalculation">
 <summary>
 Whether the event was based on a rule (true) or just a value set (false).
 </summary>
</member>
<member name="T:DriveWorks.BasicLockSafeProjectExecutor">
 <summary>
 Represents an object that will allow thread-safe project executions to be performed by locking on an object. 
 </summary>
</member>
<member name="M:DriveWorks.BasicLockSafeProjectExecutor.Invoke(System.Action)">
 <summary>
 Invokes an action synchronously on the current thread.
 </summary>
 <param name="action">The action to run.</param>
</member>
<member name="M:DriveWorks.BasicLockSafeProjectExecutor.BeginInvoke(System.Action)">
 <summary>
 Invokes an action asynchronously on a new thread.
 </summary>
 <param name="action">The action to run.</param>
</member>
<member name="M:DriveWorks.ReflectionExtensions.GetDerivedTypes(System.Type,System.Reflection.Assembly)">
 <summary>
 Gets all derived types of this type, within the specified assembly.
 </summary>
 <param name="baseType">The base type for which to find the derived types.</param>
 <param name="assembly">The assembly in which to look for the derived types.</param>
 <returns>A collection of derived types.</returns>
</member>
<member name="T:DriveWorks.Reporting.CompositeReportWriter">
 <summary>
 Implements a report writer which writes to multiple other report writers.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.CompositeReportWriter.#ctor(DriveWorks.Reporting.IReportWriter[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.CompositeReportWriter" /> type.
 </summary>
 <param name="writers">The report writers to compose into a single report writer.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.CompositeReportWriter.#ctor(System.Collections.Generic.IEnumerable{DriveWorks.Reporting.IReportWriter})">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.CompositeReportWriter" /> type.
 </summary>
 <param name="writers">The report writers to compose into a single report writer.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.CompositeReportWriter.BeginProcess(System.String,System.String,System.String)">
 <summary>
 Begins a process.
 </summary>
 <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
 <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
 <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.CompositeReportWriter.BeginProcess(DriveWorks.IReportProcessItem)">
 <summary>
 Begins a process.
 </summary>
 <param name="processItem">The process item to use to start the process</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.CompositeReportWriter.EndProcess">
 <summary>
 Ends the current process.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.CompositeReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
 <summary>
 Writes a report entry to current process in the report.
 </summary>
 <param name="entryLevel">The logging level which applies to to entry.</param>
 <param name="entryType">The type of entry to write.</param>
 <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
 <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
 <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
 <param name="entryDetail">Optional additional detail.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Reporting.CompositeReportWriter.ProcessDepth">
 <summary>
 Gets the current depth of processes.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.CompositeReportWriter.Finish">
 <summary>
 Finishes the report.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Reporting.EventReportWriter">
 <summary>
 Implements a report writer which proxies to another report writer and raises events when processes
 and entries are written.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Reporting.EventReportWriter.ProcessBegun">
 <summary>
 Raised when a process is begun.
 </summary>
</member>
<member name="E:DriveWorks.Reporting.EventReportWriter.ProcessEnded">
 <summary>
 Raised when a process is ended.
 </summary>
</member>
<member name="E:DriveWorks.Reporting.EventReportWriter.EntryWritten">
 <summary>
 Raised when an entry is written.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.EventReportWriter.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.EventReportWriter" /> type.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.EventReportWriter.BeginProcess(System.String,System.String,System.String)">
 <inheritdoc />
</member>
<member name="M:DriveWorks.Reporting.EventReportWriter.BeginProcess(DriveWorks.IReportProcessItem)">
 <inheritdoc />
</member>
<member name="M:DriveWorks.Reporting.EventReportWriter.EndProcess">
 <inheritdoc />
</member>
<member name="M:DriveWorks.Reporting.EventReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Reporting.ReportReader">
 <summary>
 Provides a reader for DriveWorks reports.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.ReportReader.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.ReportReader"/> class.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.ReportReader.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.ReportReader"/> class and loads in a drivereport file.
 </summary>
 <param name="reportPath">The location of the drivereport file to load.</param>
</member>
<member name="M:DriveWorks.Reporting.ReportReader.#ctor(System.Data.IDbConnection)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.ReportReader"/> class and loads in a drivereport file.
 </summary>
 <param name="dbConnection">The location of the drivereport file to load.</param>
</member>
<member name="P:DriveWorks.Reporting.ReportReader.Loaded">
 <summary>
 Value indicating if a any report data has been loaded into the reader.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Reporting.ReportReader.Reports">
 <summary>
 Returns an array of available reports from the loaded report data.
 </summary>
</member>
<member name="T:DriveWorks.Reporting.ReportPackage">
 <summary>
 Implements a report writer where each top-level process
 is treated as a separate report, all of which are saved
 to a SQL Server CE database file.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportPackage.#ctor(DriveWorks.Reporting.ReportingLevel)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.ReportPackage" /> 
 class.
 </summary>
 <param name="reportingLevel">The reporting level to use.</param>
</member>
<member name="M:DriveWorks.Reporting.ReportPackage.Close">
 <summary>
 Closes the current package connection.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportPackage.Open(System.String)">
 <summary>
 Opens a new report package.
 </summary>
 <param name="filePath">The full path to the report package to create.</param>
 <remarks>
 <para>
 The report package will be created immediately, any existing file at the specified
 location will be overwritten.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.Reporting.ReportPackage.Path">
 <summary>
 Gets the path to the package, or a null rerefence if the package hasn't
 been opened.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.ReportPackage.CreateReportWriter(System.String)">
 <summary>
 Creates a new report with the given title in the package.
 </summary>
 <param name="title">The title of the report to create.</param>
 <returns>A report writer for the given report.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Reporting.IReportWriterFactory">
 <summary>
 Provides a contract for an object which can create instances of
 implementations of the <see cref="T:DriveWorks.Reporting.IReportWriter" /> interface for a
 set of related reports.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.IReportWriterFactory.CreateReportWriter(System.String)">
 <summary>
 Creates a new report writer. 
 </summary>
 <returns>The newly created report writer.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Reporting.ReportWriterBase">
 <summary>
 Provides a simple base class from which report writers can inherit.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.ReportWriterBase" /> type.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.BeginProcess(System.String,System.String,System.String)">
 <summary>
 Begins a process.
 </summary>
 <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
 <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
 <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.BeginProcess(DriveWorks.IReportProcessItem)">
 <summary>
 Begins a process.
 </summary>
 <param name="processItem">The process item to use to begin this process.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.EndProcess">
 <summary>
 Ends the current process.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
 <summary>
 Writes a report entry to the report.
 </summary>
 <param name="entryLevel">The logging level which applies to to entry.</param>
 <param name="entryType">The type of entry to write.</param>
 <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
 <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
 <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
 <param name="entryDetail">Optional additional detail.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Reporting.ReportWriterBase.ProcessDepth">
 <summary>
 Gets the current depth of processes.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Reporting.ReportWriterBase.IsDisposed">
 <summary>
 Determines whether the report writer has been disposed.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.Finish">
 <summary>
 Finishes the report, flushing any cached contents to the report if necessary.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.Dispose(System.Boolean)">
 <summary>
 Disposes the report writer and flushes its contents to the report.
 </summary>
 <param name="disposing">True if the object is undergoing explicit finalization, otherwise false.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.Dispose">
 <summary>
 Disposes the report writer and flushes its contents to the report.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.Finalize">
 <summary>
 Handles object finalization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ReportWriterBase.AssertNotDisposed">
 <summary>
 Throws an <see cref="T:System.ObjectDisposedException" /> if the object has been disposed.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Reporting.ProcessEventHandler">
 <summary>
 Represents a method that will handle events related to report processes.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Reporting.ProcessEventArgs">
 <summary>
 Provides data for events related to report processes.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.ProcessEventArgs.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.ProcessEventArgs" /> type.
 </summary>
 <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
 <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
 <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Reporting.ProcessEventArgs.ProcessClass">
 <summary>
 Gets the process class.
 </summary>
</member>
<member name="P:DriveWorks.Reporting.ProcessEventArgs.ProcessTarget">
 <summary>
 Gets the process target.
 </summary>
</member>
<member name="P:DriveWorks.Reporting.ProcessEventArgs.ProcessDescription">
 <summary>
 Gets the process description.
 </summary>
</member>
<member name="T:DriveWorks.Reporting.EntryEventHandler">
 <summary>
 Represents a method that will handle events related to report entries.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Reporting.EntryEventArgs">
 <summary>
 Provides data for events related to report entries.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.EntryEventArgs.#ctor(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.EntryEventArgs" /> type.
 </summary>
 <param name="entryLevel">The logging level which applies to to entry.</param>
 <param name="entryType">The type of entry to write.</param>
 <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
 <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
 <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
 <param name="entryDetail">Optional additional detail.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Reporting.EntryEventArgs.EntryLevel">
 <summary>
 Gets the reporting level of the entry.
 </summary>
</member>
<member name="P:DriveWorks.Reporting.EntryEventArgs.EntryType">
 <summary>
 Gets the type of entry.
 </summary>
</member>
<member name="P:DriveWorks.Reporting.EntryEventArgs.EntryClass">
 <summary>
 Gets the entry class.
 </summary>
</member>
<member name="P:DriveWorks.Reporting.EntryEventArgs.EntryTarget">
 <summary>
 Gets the target of the entry.
 </summary>
</member>
<member name="P:DriveWorks.Reporting.EntryEventArgs.EntryDescription">
 <summary>
 Gets the entry description.
 </summary>
</member>
<member name="P:DriveWorks.Reporting.EntryEventArgs.EntryDetail">
 <summary>
 Gets optional extra detail about the entry.
 </summary>
</member>
<member name="T:DriveWorks.Reporting.EventProxyReportWriter">
 <summary>
 Implements a report writer which proxies to another report writer and raises events when processes
 and entries are written.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Reporting.EventProxyReportWriter.ProcessBegun">
 <summary>
 Raised when a process is begun.
 </summary>
</member>
<member name="E:DriveWorks.Reporting.EventProxyReportWriter.ProcessEnded">
 <summary>
 Raised when a process is ended.
 </summary>
</member>
<member name="E:DriveWorks.Reporting.EventProxyReportWriter.EntryWritten">
 <summary>
 Raised when an entry is written.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.EventProxyReportWriter.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.EventProxyReportWriter" /> type.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.EventProxyReportWriter.#ctor(DriveWorks.Reporting.IReportWriter)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.EventProxyReportWriter" /> type.
 </summary>
 <param name="writer">The writer to which to proxy reporting calls.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.EventProxyReportWriter.BeginProcess(System.String,System.String,System.String)">
 <inheritdoc />
</member>
<member name="M:DriveWorks.Reporting.EventProxyReportWriter.BeginProcess(DriveWorks.IReportProcessItem)">
 <inheritdoc />
</member>
<member name="M:DriveWorks.Reporting.EventProxyReportWriter.EndProcess">
 <inheritdoc />
</member>
<member name="M:DriveWorks.Reporting.EventProxyReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Reporting.IEventReportWriter">
 <summary>
 Represents a report writer that raises events.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Reporting.IEventReportWriter.ProcessBegun">
 <summary>
 Raised when a process is begun.
 </summary>
</member>
<member name="E:DriveWorks.Reporting.IEventReportWriter.ProcessEnded">
 <summary>
 Raised when a process is ended.
 </summary>
</member>
<member name="E:DriveWorks.Reporting.IEventReportWriter.EntryWritten">
 <summary>
 Raised when an entry is written.
 </summary>
</member>
<member name="T:DriveWorks.Reporting.ProxyReportWriter">
 <summary>
 Implements a report writer which proxies to another report writer.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.ProxyReportWriter.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.ProxyReportWriter" /> type.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.ProxyReportWriter.#ctor(DriveWorks.Reporting.IReportWriter)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.ProxyReportWriter" /> type.
 </summary>
 <param name="writer">The writer to which to proxy reporting calls (may be null).</param>
</member>
<member name="P:DriveWorks.Reporting.ProxyReportWriter.InnerWriter">
 <summary>
 Gets/sets the inner report writer.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.ProxyReportWriter.BeginProcess(System.String,System.String,System.String)">
 <summary>
 Begins a process.
 </summary>
 <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
 <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
 <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
</member>
<member name="M:DriveWorks.Reporting.ProxyReportWriter.EndProcess">
 <summary>
 Ends the current process.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.ProxyReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
 <summary>
 Writes a report entry to current process in the report.
 </summary>
 <param name="entryLevel">The logging level which applies to to entry.</param>
 <param name="entryType">The type of entry to write.</param>
 <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
 <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
 <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
 <param name="entryDetail">Optional additional detail.</param>
</member>
<member name="P:DriveWorks.Reporting.ProxyReportWriter.ProcessDepth">
 <summary>
 Gets the current depth of processes.
 </summary>
</member>
<member name="M:DriveWorks.Reporting.ProxyReportWriter.Finish">
 <summary>
 Finishes the report.
 </summary>
</member>
<member name="T:DriveWorks.Reporting.TraceReportWriter">
 <summary>
 Implements a report writer which writes to the tracing framework.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.TraceReportWriter.#ctor(DriveWorks.Reporting.ReportingLevel)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Reporting.TraceReportWriter" /> type.
 </summary>
 <param name="loggingLevel">The logging level to use.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.TraceReportWriter.BeginProcess(System.String,System.String,System.String)">
 <summary>
 Begins a process.
 </summary>
 <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
 <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
 <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.TraceReportWriter.BeginProcess(DriveWorks.IReportProcessItem)">
 <summary>
 Begins a process.
 </summary>
 <param name="processItem">The process item to use to begin this process.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.TraceReportWriter.EndProcess">
 <summary>
 Ends the current process.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.TraceReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
 <summary>
 Writes a report entry to current process in the report.
 </summary>
 <param name="entryLevel">The logging level which applies to to entry.</param>
 <param name="entryType">The type of entry to write.</param>
 <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
 <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
 <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
 <param name="entryDetail">Optional additional detail.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Reporting.TraceReportWriter.ProcessDepth">
 <summary>
 Gets the current depth of processes.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.TraceReportWriter.Finish">
 <summary>
 Finishes the report.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Reporting.ReportingLevel">
 <summary>
 Represents the reporting level.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Reporting.ReportingLevel.Minimal">
 <summary>
 Minimal reporting.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Reporting.ReportingLevel.Normal">
 <summary>
 Normal reporting.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Reporting.ReportingLevel.Verbose">
 <summary>
 Verbose reporting.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Reporting.ReportEntryType">
 <summary>
 Represents the type of an entry in a report.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Reporting.ReportEntryType.Information">
 <summary>
 The entry is informative.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Reporting.ReportEntryType.Warning">
 <summary>
 The entry is a warning.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Reporting.ReportEntryType.Error">
 <summary>
 The entry is an error.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Reporting.IReportWriter">
 <summary>
 Provides a contract for report writers capable of logging reports for the DriveWorks Engine.
 </summary>
 <remarks>
 <para>
 This interface is not intended to be implemented by 3rd party code as it may change
 from one release of DriveWorks to another. To implement a report writer, inherit
 from <see cref="T:DriveWorks.Reporting.ReportWriterBase" /> or a derived class.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.Reporting.IReportWriter.ProcessDepth">
 <summary>
 Gets the current depth of processes.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.IReportWriter.BeginProcess(System.String,System.String,System.String)">
 <summary>
 Begins a process.
 </summary>
 <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
 <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
 <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.IReportWriter.BeginProcess(DriveWorks.IReportProcessItem)">
 <summary>
 Begins a process using a IReleaseProcessItem structure.
 </summary>
 <param name="processItem">The <see cref="T:DriveWorks.IReportProcessItem" /> to use to begin the process.</param>
</member>
<member name="M:DriveWorks.Reporting.IReportWriter.EndProcess">
 <summary>
 Ends the current process.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Reporting.IReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
 <summary>
 Writes a report entry to current process in the report.
 </summary>
 <param name="entryLevel">The logging level which applies to to entry.</param>
 <param name="entryType">The type of entry to write.</param>
 <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
 <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
 <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
 <param name="entryDetail">Optional additional detail.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ReportSchemaHelper.CurrentMajorVersion">
 <summary>
 Gets the schema's current major version number.
 </summary>
</member>
<member name="P:DriveWorks.ReportSchemaHelper.CurrentMinorVersion">
 <summary>
 Gets the schema's current minor version number.
 </summary>
</member>
<member name="T:DriveWorks.Rules.BasicRuleNode">
 <summary>
 Provides a basic implementation of <see cref="T:DriveWorks.Rules.IRuleNode"/>
 </summary>
</member>
<member name="M:DriveWorks.Rules.BasicRuleNode.#ctor(System.String,System.String,System.String,DriveWorks.Rules.RuleNodeType,System.Int32,System.Int32,System.Int32,System.Int32,DriveWorks.Rules.IRuleNode[])">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Rules.BasicRuleNode"/> class.
 </summary>
 <param name="text">The inner text of the rule node.</param>
 <param name="outerText">The outer text of the rule node.</param>
 <param name="ruleText">The full text of the owning rule that this node is part of.</param>
 <param name="nodeType">The type for this rule node.</param>
 <param name="startIndex">The start index of the first character of the inner text of this node.</param>
 <param name="endIndex">The end index of the last character of the inner text of this node.</param>
 <param name="outerStartIndex">The start index of the first character of the outer text of this node.</param>
 <param name="outerEndIndex">The end index of the last character of the outer text of this node.</param>
 <param name="children">A collection of children for this node (can be empty).</param>
</member>
<member name="P:DriveWorks.Rules.BasicRuleNode.Text">
 <summary>
 Gets the inner text of the rule node.
 </summary>
</member>
<member name="P:DriveWorks.Rules.BasicRuleNode.OuterText">
 <summary>
 Gets the outer text of the rule node.
 </summary>
</member>
<member name="P:DriveWorks.Rules.BasicRuleNode.RuleText">
 <summary>
 Gets the full text of the owning rule that this node is part of.
 </summary>
</member>
<member name="P:DriveWorks.Rules.BasicRuleNode.StartIndex">
 <summary>
 Gets the start index of the first character of the inner text of this node.
 </summary>
</member>
<member name="P:DriveWorks.Rules.BasicRuleNode.EndIndex">
 <summary>
 Gets the end index of the last character of the inner text of this node.
 </summary>
</member>
<member name="P:DriveWorks.Rules.BasicRuleNode.OuterStartIndex">
 <summary>
 Gets the start index of the first character of the outer text of this node.
 </summary>
</member>
<member name="P:DriveWorks.Rules.BasicRuleNode.OuterEndIndex">
 <summary>
 Gets the end index of the last character of the outer text of this node.
 </summary>
</member>
<member name="P:DriveWorks.Rules.BasicRuleNode.NodeType">
 <summary>
 Gets the type for this rule node.
 </summary>
</member>
<member name="P:DriveWorks.Rules.BasicRuleNode.Children">
 <summary>
 Gets a collection of children for this node (can be empty).
 </summary>
</member>
<member name="T:DriveWorks.Rules.IFunctionInformation">
 <summary>
 Provides a contract for an object containing information on a function.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Rules.IFunctionInformation.FunctionName">
 <summary>
 Gets the name of the function.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IFunctionInformation.FunctionLocalizedName">
 <summary>
 Gets the localized name of the function.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IFunctionInformation.FunctionDescription">
 <summary>
 Gets the description for the function.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IFunctionInformation.FunctionCategory">
 <summary>
 Gets the category that the function belongs to.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IFunctionInformation.ArgumentNames">
 <summary>
 Get the names of the arguments for the function, in order.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IFunctionInformation.ArgumentDescriptions">
 <summary>
 Gets the descriptions for the arguments in the function, in order.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IFunctionInformation.ArgumentTypes">
 <summary>
 Gets the descriptions for the arguments in the function, in order.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IFunctionInformation.HasParameterArray">
 <summary>
 Determines whether the function has a variable number of arguments.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IFunctionInformation.IsDeprecated">
 <summary>
 Gets whether or not this function has been deprecated/obsolete.
 </summary>
</member>
<member name="T:DriveWorks.Rules.IParseResult">
 <summary>
 Encapsulates the result of parsing a rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Rules.IParseResult.AstRoot">
 <summary>
 Gets the root of the AST produced by the parse.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Rules.IParseResult.Errors">
 <summary>
 Gets a collection of all the error nodes found in the rule.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Rules.IParseResult.References">
 <summary>
 Gets a collection of all of the reference nodes.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Rules.IRuleError">
 <summary>
 Provides a contract for an object containing information on an error from a rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Rules.IRuleError.StartIndex">
 <summary>
 Gets the start index in the expression text, of the string from which this error was parsed.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IRuleError.EndIndex">
 <summary>
 Gets the end index in the expression text, of the string from which this error was parsed.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IRuleError.ErrorType">
 <summary>
 The type of error that this represents.
 </summary>
</member>
<member name="T:DriveWorks.Rules.IRuleNode">
 <summary>
 Provides a contract for an object containing information on a parsed rule node.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Rules.IRuleNode.Text">
 <summary>
 The inner text value for this node.
 </summary>
 <remarks>
 The inner text is the text of the node without its arguments, for example the inner text
 for an operator would be the operator, and for an IF statement it would be the word IF.
 </remarks>
</member>
<member name="P:DriveWorks.Rules.IRuleNode.OuterText">
 <summary>
 The outer text value for this node. Same as <see cref="P:DriveWorks.Rules.IRuleNode.RuleText" />, but formatted with ideal white spaces.
 </summary>
 <remarks>
 The outer text is the text of the node including its arguments, for example the outer text
 for an operator would be the left hand side, operator, and right hand side, and for an IF statement it would be the entire IF statement.
 </remarks>
</member>
<member name="P:DriveWorks.Rules.IRuleNode.RuleText">
 <summary>
 The entire rule text as it is formatted from the original rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Rules.IRuleNode.NodeType">
 <summary>
 The type of node that this represents.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IRuleNode.StartIndex">
 <summary>
 Gets the inner start index in the expression text, of the string from which this node was parsed.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IRuleNode.EndIndex">
 <summary>
 Gets the inner end index in the expression text, of the string from which this node was parsed.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IRuleNode.OuterStartIndex">
 <summary>
 Gets the outer start index in the expression text, of the string from which this node was parsed.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IRuleNode.OuterEndIndex">
 <summary>
 Gets the outer end index in the expression text, of the string from which this node was parsed.
 </summary>
</member>
<member name="P:DriveWorks.Rules.IRuleNode.Children">
 <summary>
 The child nodes for this node.
 </summary>
</member>
<member name="T:DriveWorks.Rules.RuleParseErrorType">
 <summary>
 Represents the type of error from a rule.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Rules.RuleParseErrorType.ExpectedBeginParanthesis">
 <summary>
 A starting paranthesis was not found at an expected location.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleParseErrorType.ExpectedEndParanthesis">
 <summary>
 An ending paranthesis was not found at the expected location.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleParseErrorType.ExpectedName">
 <summary>
 A name was not found at an expected location.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleParseErrorType.ExpectedSeperatorOrEndOfFunction">
 <summary>
 A list separator or ending-paranthesis was not found at the expected location in a function call.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleParseErrorType.PrematureEndOfRule">
 <summary>
 The token stream was empty when more tokens where expected.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleParseErrorType.SyntaxError">
 <summary>
 A syntax error was encountered.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleParseErrorType.TailingTokens">
 <summary>
 The token stream contains unexpected trailing tokens.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleParseErrorType.UnexpectedToken">
 <summary>
 An unexpected token was found.
 </summary>
</member>
<member name="T:DriveWorks.Rules.RuleNodeType">
 <summary>
 Represents the type of a node in an abstract syntax tree for a rule.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.Empty">
 <summary>
 The node type is not specified.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.Invalid">
 <summary>
 The node is invalid.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.FunctionCall">
 <summary>
 The node represents a function call.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.Operation">
 <summary>
 The node represents an operator.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.Reference">
 <summary>
 The node represents a reference to a named item.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.RelativeReference">
 <summary>
 The node represents a relative reference to an adjacent item.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.BooleanValue">
 <summary>
 The node represents a literal boolean value.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.StringValue">
 <summary>
 The node represents a literal string value.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.NumberValue">
 <summary>
 The node represents a literal numeric value.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.OpenParanthesis">
 <summary>
 The node represents an opening paranthesis.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.CloseParanthesis">
 <summary>
 The node represents a closing paranthesis.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.ArgumentSeparator">
 <summary>
 The node represents a separator between two arguments to a function call.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.OpenBrace">
 <summary>
 The node represents an opening brace.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.CloseBrace">
 <summary>
 The node represents a closing brace.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.ListOfListsSeparator">
 <summary>
 The node represents a list of lists separator.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.FormattedString">
 <summary>
 The node represents a formatted string.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.FormattedStringRule">
 <summary>
 The node represents a rule segment of a formatted string node.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.FormattedStringContent">
 <summary>
 The node represents a string segment of a formatted string node.
 </summary>
</member>
<member name="F:DriveWorks.Rules.RuleNodeType.LiteralArray">
 <summary>
 The node represents a literal array or table.
 </summary>
</member>
<member name="T:DriveWorks.InMemoryDataTableBackingStore">
 <summary>
 Provides an in-memory only backing store for a project data table. Its data will not be serialized.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDataTableBackingStoreBase.Name">
 <summary>
 Gets the name of the backing store.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreBase.GetData">
 <summary>
 Gets the data in the store as a two-dimensional array of objects.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreBase.SetData(System.Object[0:,0:])">
 <summary>
 Replaces the data in the store with the given data.
 </summary>
 <param name="data">The new table data expressed as a two-dimensional array of objects.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreBase.Rename(System.String)">
 <summary>
 Renames the backing store.
 </summary>
 <param name="newName">The name to give the backing store.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDataTableBackingStoreBase.Slot">
 <summary>
 Gets the slot associated with this backing store.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreBase.Delete">
 <summary>
 Deletes the backing store.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreBase.Save">
 <summary>
 If overridden in the derived class, it will save the changes that have been made to the table.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectDataTableBackingStoreBase.FirstRead">
 <summary>
 Raised when the data in this store is read for the first time.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreBase.RaiseFirstRead">
 <summary>
 Raises the <see cref="E:DriveWorks.ProjectDataTableBackingStoreBase.FirstRead" /> event.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectDataTableBackingStoreBase.DataTableArrayValue.FirstRead">
 <summary>
 Raised when the values from this table are read for the first time.
 </summary>
</member>
<member name="T:DriveWorks.RollupDataTable">
 <summary>
 Provides access to a rollup table of all child specification values within an implementation.
 </summary>
</member>
<member name="M:DriveWorks.RollupDataTable.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="M:DriveWorks.RollupDataTable.GetColumnNames(System.Boolean)">
 <summary>
 Gets the names of the columns that data will be retrieved for in any child specifications.
 </summary>
 <param name="includeDefault">If True, includes the default columns in the result. By default this is False.</param>
</member>
<member name="M:DriveWorks.RollupDataTable.SetChosenColumns(System.String[])">
 <summary>
 Sets the names of the columns that data will be retrieved for in any child specifications.
 </summary>
 <param name="columnNames">The chosen column names.</param>
 <remarks>This will also update the placeholder data accordingly.</remarks>
</member>
<member name="M:DriveWorks.RollupDataTable.GetPlaceholderData">
 <summary>
 Gets the placeholder data for the table.
 </summary>
 <returns>The placeholder data without the table column headings. <see cref="M:DriveWorks.ProjectDataTable.GetCachedTableData" /> should be used to retrieve the complete table.</returns>
 <remarks>This data can be used for getting meaningful results when building rules.</remarks>
</member>
<member name="M:DriveWorks.RollupDataTable.UpdatePlaceholderData(System.String[0:,0:])">
 <summary>
 Updates the placeholder data with the new values.
 </summary>
 <param name="newData">The new placeholder data. If Nothing or an empty 2D array is passed in then this will clear the data.</param>
 <remarks>If the number of columns in the new data doesn't match the number of columns set for this table then an <see cref="T:System.ArgumentException" /> will be thrown.</remarks>
</member>
<member name="M:DriveWorks.RollupDataTable.GetTableData(System.Object[0:,0:]@)">
 <summary>
 Retrieves the table data, only if the data has been requested somewhere first.
 </summary>
 <param name="result">The table data.</param>
 <returns>Whether the data was retrieved or not.</returns>
 <remarks>This will return false if the data hasn't yet been used.</remarks>
</member>
<member name="P:DriveWorks.RollupDataTable.StoreIsSerialized">
 <summary>
 Gets whether the store should be serialized.
 </summary>
 <remarks>This will always return false as the data should only ever be kept in-memory.</remarks>
</member>
<member name="P:DriveWorks.RollupDataTable.Level">
 <summary>
 Gets the current specification level at which this rollup table has been created.
 </summary>
 <remarks>This will return Nothing if it has been accessed before an embedded specification is running.</remarks>
</member>
<member name="M:DriveWorks.WordInteropDocument.RunMacro">
 <summary>
 Makes the current Word application run the command "CreateReports"
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.WordInteropDocument.Save">
 <summary>
 Saves the current Word document.
 </summary>
</member>
<member name="M:DriveWorks.WordInteropDocument.CreateHtmlOutput(System.String,Microsoft.Office.Interop.Word.Document)">
 <summary>
 Will create a HTML file from a Word document.
 </summary>
 <param name="documentFullPath">Full path to where to save the file (including filename).</param>
 <param name="wordDocument">Open workbook with sheet inside.</param>
 <remarks>Will overwrite existing file.</remarks>
</member>
<member name="M:DriveWorks.WordInteropDocument.CreatePdfOutput(DriveWorks.Reporting.IReportWriter,System.String,Microsoft.Office.Interop.Word.Document)">
 <summary>
 Will create a PDF file from a Word document.
 </summary>
 <param name="documentFullPath">Full path to where to save the file (including filename).</param>
 <param name="wordDocument">Open workbook with sheet inside.</param>
 <remarks>Will overwrite existing file.</remarks>
</member>
<member name="T:DriveWorks.ProjectChildSpecificationOutputType">
 <summary>
 Represents the types of output for a child specification.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.ProjectChildSpecificationOutputType.Variable">
 <summary>
 Represents a project variable type.
 </summary>
</member>
<member name="F:DriveWorks.ProjectChildSpecificationOutputType.SpecificationProperty">
 <summary>
 Represents a project specification property type.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.FunctionInformationAttributes">
 <summary>
 Provides information on various states and flags of a function.
 </summary>
</member>
<member name="F:DriveWorks.FunctionInformationAttributes.None">
 <summary>
 A lack of special attributes.
 </summary>
</member>
<member name="F:DriveWorks.FunctionInformationAttributes.IsHidden">
 <summary>
 Whether or not the function should be hidden from editors.
 </summary>
</member>
<member name="M:DriveWorks.RollupItem.GetUnclonedData">
 <summary>
 Gets the uncloned data for this rollup item.
 </summary>
</member>
<member name="T:DriveWorks.Refactoring.SearchFinishedEventArgs">
 <summary>
 Provides event data for the <see cref="E:DriveWorks.Refactoring.RenameProcess.SearchFinished" />.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Refactoring.SearchFinishedEventArgs.#ctor(System.String[],DriveWorks.Utility.RuleSearchResult[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Refactoring.SearchFinishedEventArgs" /> class.
 </summary>
 <param name="names">The names we searched for.</param>
 <param name="uses">All uses in rules of the name we searched for.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Refactoring.SearchFinishedEventArgs.Names">
 <summary>
 Gets the names that was searched for.
 </summary>
</member>
<member name="P:DriveWorks.Refactoring.SearchFinishedEventArgs.Uses">
 <summary>
 Gets all uses in rules of the name we searched for. 
 </summary>
</member>
<member name="T:DriveWorks.Refactoring.SearchStartedEventArgs">
 <summary>
 Provides event data for the <see cref="E:DriveWorks.Refactoring.RenameProcess.SearchStarted" />.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Refactoring.SearchStartedEventArgs.#ctor(System.String[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Refactoring.SearchStartedEventArgs" /> class.
 </summary>
 <param name="names">The names we are searching for.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Refactoring.SearchStartedEventArgs.Names">
 <summary>
 Gets the names that are being searched for.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Refactoring.BatchActionOptions">
 <summary>
 Provides an enumeration of potential batch operations.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Refactoring.BatchActionOptions.LoadStore">
 <summary>
 Store data is about to be/has been loaded.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Refactoring.BatchActionOptions.CommitRulesToStore">
 <summary>
 Store data is about to be/has been committed to the underlying store.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Refactoring.BatchActionEventArgs">
 <summary>
 Provides event data for refactoring operations that affect a batch of rules.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Refactoring.BatchActionEventArgs.#ctor(System.String,DriveWorks.Refactoring.BatchActionOptions)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Refactoring.BatchActionEventArgs" /> class.
 </summary>
 <param name="targetName">The target of the action.</param>
 <param name="action">The type of action.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Refactoring.BatchActionEventArgs.TargetName">
 <summary>
 Gets the name of the target being affected by the action.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Refactoring.BatchActionEventArgs.Action">
 <summary>
 Gets the type of batch action.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Refactoring.RenameFinishedEventArgs">
 <summary>
 Provides event data for the <see cref="E:DriveWorks.Refactoring.RenameProcess.RenameFinished" /> event.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Refactoring.RenameFinishedEventArgs.TotalScans">
 <summary>
 Gets the total number of potential rules that were scanned.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Refactoring.RenameFinishedEventArgs.TotalRules">
 <summary>
 Gets the total number of actual rules that were scanned.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Refactoring.RenameFinishedEventArgs.TotalReplacements">
 <summary>
 Gets the total number of references that were replaced.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Refactoring.RenameFinishedEventArgs.TotalUnparsedRules">
 <summary>
 Gets the total number of rules which couldn't be scanned because they were unparseable.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Refactoring.RenameProcess">
 <summary>
 Provides support for renaming an identifier safely throughout a project.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.RenameStarted">
 <summary>
 Raised when the renaming phase of the rename process has started.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.RenameFinished">
 <summary>
 Raised when the renaming phase of the rename process has finished.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.BatchActionStarted">
 <summary>
 Raised when an action affecting a batch of related rules is started, e.g. loading rules for variables.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.BatchActionFinished">
 <summary>
 Raised when an action affecting a batch of related rules is finished, e.g. loading rules for variables.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.RuleRenamingStarted">
 <summary>
 Raised when an individual rule is about to be processed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.RuleRenamingFinished">
 <summary>
 Raised when the processing of an individual rule is finished.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.RuleRenamingAborted">
 <summary>
 Raised if the processing of an individual rule is aborted, e.g. because it can't be parsed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.SearchStarted">
 <summary>
  Raised when the search phase of the rename process has started.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.SearchFinished">
 <summary>
 Raised when the search phase of the rename process has finished.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.ProcessAborted">
 <summary>
 Raised when the entire rename process is aborted.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.UsageFound">
 <summary>
 Raised when a usage of a name we are searching for is found.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Refactoring.RenameProcess.InternalRenameFinished">
 <summary>
 Raised before the public RenameFinished event to ensure DriveWorks code knows the rename
 has finished before any customer code does.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Refactoring.RenameProcess.Abort">
 <summary>
 Aborts the process. Process cannot be aborted after the renaming phase begins.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Refactoring.RenameRuleEventArgs">
 <summary>
 Provides event data for the <see cref="E:DriveWorks.Refactoring.RenameProcess.RuleRenamingStarted" /> and related events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Refactoring.RenameRuleEventArgs.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Refactoring.RenameRuleEventArgs" /> class.
 </summary>
 <param name="containerName">The name of the rule container.</param>
 <param name="ruleName">The name of the rule in a format specific to the type of container.</param>
 <param name="ruleText">The rule text.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Refactoring.RenameRuleEventArgs.ContainerName">
 <summary>
 Gets the name of the rule container.
 </summary>
</member>
<member name="P:DriveWorks.Refactoring.RenameRuleEventArgs.RuleName">
 <summary>
 Gets the name of the rule in a format specific to the type of container.
 </summary>
</member>
<member name="P:DriveWorks.Refactoring.RenameRuleEventArgs.RuleText">
 <summary>
 Gets the text of the rule.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask">
 <summary>
 Creates an XML or JSON file containing all the selected data from the specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.ConstantsToInclude">
 <summary>
 Gets/sets the list of constants to include within the file to export.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.ProjectTablesToInclude">
 <summary>
 Gets/sets the list of project tables to include within the file to export.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.ExportFormat">
 <summary>
 Gets/sets the format of the file to export.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.OverwriteFlag">
 <summary>
 Gets/sets whether to overwrite an existing file or not.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.OutputFileName">
 <summary>
 Gets/sets the file name of the file to export.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.AddTeamTask">
 <summary>
 A specification flow task for adding a new team.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.CancelSpecificationTimerTask">
 <summary>
 A specification-flow task cancelling a running timer within a specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CancelSpecificationTimerTask.TimerNames">
 <summary>
 Gets/sets the name/s of the Timer/s to cancel.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ClearComponentsDeferredFlagTask">
 <summary>
 Clears the component deferred flag for a specific component (or list of components).
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ClearComponentsDeferredFlagTask.Components">
 <summary>
 A pipe-delimited list of drawing ids or target paths to clear the deferred flag of.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ClearSpecificationComponentsDeferredFlagTask">
 <summary>
 Clears the deferred flag for all components associated with a specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ClearSpecificationComponentsDeferredFlagTask.SpecificationId">
 <summary>
 Gets/sets the id of the specification whose drawings to clear the deferred flag on.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask">
 <summary>
 A specification-flow task capable of copying a child specification while keeping it closed.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask.ChildSpecificationName">
 <summary>
 Gets the property responsible for the specification name to match against.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask.ChildSpecificationIndex">
 <summary>
 Gets the property responsible for the specification id to match against.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask.ChildSpecificationListName">
 <summary>
 Gets the property that specifies the child specification list to use.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask.CopiedSpecificationNameConstantName">
 <summary>
 Gets the property responsible for the name of the constant to place the copied specification's name in.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.CopyClosedSpecificationTask">
 <summary>
 A specification-flow task capable of copying a rooted specification while keeping it closed.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyClosedSpecificationTask.SpecificationName">
 <summary>
 Gets the property responsible for the specification name to match against.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyClosedSpecificationTask.SpecificationId">
 <summary>
 Gets the property responsible for the specification id to match against.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyClosedSpecificationTask.CopiedSpecificationIdConstantName">
 <summary>
 Gets the property responsible for the name of the constant to place the copied specification's id in.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DeleteCalculationTableRowsTask">
 <summary>
 Provides a task that will remove rows from a calculation table.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteCalculationTableRowsTask.TableName">
 <summary>
 Gets/sets the name of the calculation table to remove rows from.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteCalculationTableRowsTask.FieldNames">
 <summary>
 Gets/sets the column names to match against, delimited by pipe bars.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteCalculationTableRowsTask.MatchValues">
 <summary>
 Gets/sets the values to match against, based on the fields specified in the <see cref="P:DriveWorks.Specification.StandardTasks.DeleteCalculationTableRowsTask.FieldNames"/> property.
 Values should be delimited with pipe bars.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.Base64EncodeFileTask">
 <summary>
 Provides a task to convert a file into a
 Base64 string which is driven into a constant.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.Base64EncodeFileTask.ConstantName">
 <summary>
 Gets/sets the flow property that is control of the name of the constant to drive the value into.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.Base64EncodeFileTask.FilePath">
 <summary>
 Gets/sets the path to the file to be encoded.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DeleteTeamTask">
 <summary>
 A specification-flow task capable of deleting a team.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.RunMacroInHostSpecificationTask">
 <summary>
 Task that will execute a macro in the current context's host specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostSpecificationTask.MacroNameProperty">
 <summary>
 The property for the name of the macro to execute in the host specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostSpecificationTask.MacroArgumentProperty">
 <summary>
 The property that controls the arguemnts to pass to the macro.
 </summary>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.RunMacroInHostSpecificationTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Determines whether the task requires the specification context to be open.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>True if the specification needs to be running for the task to execute.</returns>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.NavigateBackward">
 <summary>
 A specification-flow task that will attempt to navigate backward in the Form Navigation.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.NavigateForward">
 <summary>
 A specification-flow task that will attempt to navigate forwards in the Form Navigation.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.CopyFolderTask">
 <summary>
 Provides a task which can copy or move a folder, including its subfolders to a new destination.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyFolderTask.SourceFolderPath">
 <summary>
 Gets/sets the path to the source folder.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyFolderTask.DestinationFolderPath">
 <summary>
 Gets/sets the path to which to copy or move the folder.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyFolderTask.Move">
 <summary>
 Gets/sets whether to move the folder (TRUE) or copy it (FALSE).
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyFolderTask.Overwrite">
 <summary>
 Gets/sets whether to overwrite the destination folder if it already exists.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.RegenerateAndDeleteSpecificationComponentsTask">
 <summary>
 A specification-flow task capable of deleting and marking all released components associated with a specification for regeneration.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RegenerateAndDeleteSpecificationComponentsTask.SpecificationId">
 <summary>
 Gets/sets the specification id of the specification whose components to delete and mark for regeneration.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.RegenerateAndDeleteComponentTask">
 <summary>
 A specification-flow task capable of marking a component for regeneration and deleting the already generated file.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RegenerateAndDeleteComponentTask.Component">
 <summary>
 Gets/sets the component that'll be marked for generation and have its generated file deleted.
 </summary>
 <remarks>This value is either the Globally Unique Identifier (GUID) or the Target Path of a released component.</remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.Run3DPreviewTask">
 <summary>
 A specification-flow task for getting the 3d preview model for a preview control.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.Run3DPreviewTask.ControlName">
 <summary>
 Gets/sets the flow property that is the name of the control to run the 3d preview on.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.SendHttpRequestTask">
 <summary>
 A task capable of Sending a HTTP request.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.SetOwnerTask">
 <summary>
 A specification-flow task capable of adding a new user
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SetOwnerTask.UserName">
 <summary>
 Gets or sets the name of the user to set as the owner of the specification.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DeleteGroupTableRowsTask">
 <summary>
 Provides a task that will remove rows from a group table.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteGroupTableRowsTask.TableName">
 <summary>
 Gets/sets the name of the group table to remove rows from.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteGroupTableRowsTask.FieldNames">
 <summary>
 Gets/sets the column names to match against, delimited by pipe bars.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteGroupTableRowsTask.MatchValues">
 <summary>
 Gets/sets the values to match against, based on the fields specified in the <see cref="P:DriveWorks.Specification.StandardTasks.DeleteGroupTableRowsTask.FieldNames"/> property.
 Values should be delimited with pipe bars.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DeleteSimpleTableRowsTask">
 <summary>
 Provides a task that will remove rows from a project's simple table.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteSimpleTableRowsTask.TableName">
 <summary>
 Gets/sets the name of the simple table to remove rows from.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteSimpleTableRowsTask.FieldNames">
 <summary>
 Gets/sets the column names to match against, delimited by pipe bars.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteSimpleTableRowsTask.MatchValues">
 <summary>
 Gets/sets the values to match against, based on the fields specified in the <see cref="P:DriveWorks.Specification.StandardTasks.DeleteSimpleTableRowsTask.FieldNames"/> property.
 Values should be delimited with pipe bars.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.RegenerateAndOverwriteComponentTask">
 <summary>
 A specification-flow task capable of marking a component for generation and setting the Force-Overwrite flag.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RegenerateAndOverwriteComponentTask.Component">
 <summary>
 Gets/sets the component that'll be marked for generation and have its overwrite flag set.
 </summary>
 <remarks>This value is either the Globally Unique Identifier (GUID) or the Target Path of a released component.</remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.RunMacroInHostedSpecificationTask">
 <summary>
 A task that will execute a macro in a hosted specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostedSpecificationTask.SpecificationHostNameProperty">
 <summary>
 The property for the specifiation host name that hosts the specification to run the macro in.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostedSpecificationTask.MacroNameProperty">
 <summary>
 The property for the macro name of the marco to run.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostedSpecificationTask.MacroArgumentProperty">
 <summary>
 The property for the macro argument to hand to the macro.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask">
 <summary>
 Task that will host a specification in a specification host control.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.SpecificationHostNameProperty">
 <summary>
 The property for the specification host control name.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.ChildSpecificationListNameProperty">
 <summary>
 The property for the child specification list name.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.ProjectNameProperty">
 <summary>
 The property for the project name.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.SpecificationNameProperty">
 <summary>
 The property for the specification name.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.SpecificationIdProperty">
 <summary>
 The property for the specification Id.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.TransitionNameProperty">
 <summary>
 The property for the transition name.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.SkipRemainingTasksTask">
 <summary>
 Provides a task that when executed will skip remaining task in the current task sequence.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask">
 <summary>
 A specification-flow task capable of running a timer within a specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.TimerName">
 <summary>
 Gets/sets the name of the Timer to run.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.Interval">
 <summary>
 Gets/sets the interval of how often the timer should run. 
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.Count">
 <summary>
 Gets/sets the number of times that the macro should be executed.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.StayOnSchedule">
 <summary>
 Gets/sets whether the timer should stay on schedule or not. 
 </summary>
 <remarks>
 If True, the timer will not be halted during macro execution meaning that if 
 execution carries on into the next interval of the timer, that interval will be skipped. 
 If False, the timer will be paused during macro execution and resumed upon completion, 
 meaning every interval is respected.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.MacroName">
 <summary>
 Gets/sets the name of the macro to run.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.MacroArgument">
 <summary>
 Gets/sets the optional argument to pass to the macro.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.CounterConstant">
 <summary>
 Gets/sets the name of the constant where the timer's counter should be stored. 
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.StoreSpecificationTask">
 <summary>
 A Specification Flow Task that saves the current specification without stopping it.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.StoreSpecificationTask.StateName">
 <summary>
 The name of the state to move the specification into for storage.
 </summary>
 <remarks>Can be set to nothing, meaning that it will store the specification in the cancel state, if there is one.</remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.TasksLocalizedResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Base64EncodeFileClass">
<summary>
  Looks up a localized string similar to Base64 Encode File Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Base64EncodeFileConstantNameDescription">
<summary>
  Looks up a localized string similar to The name of the constant to drive the encoded Base64 file string into..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Base64EncodeFileFilePathDescription">
<summary>
  Looks up a localized string similar to The path to the file which will be encoded into a Base64 string..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Base64EncodeFileFilePathTitle">
<summary>
  Looks up a localized string similar to File Path.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Base64EncodeFileTitle">
<summary>
  Looks up a localized string similar to Base64 Encode File.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Base64EncodeFileUpdatedConstantDescription">
<summary>
  Looks up a localized string similar to Updated constant value to converted file string..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Behaviour">
<summary>
  Looks up a localized string similar to Behaviour.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ChildSpecificationDefinitionNotFound">
<summary>
  Looks up a localized string similar to Could not find child specification definition for: {0}..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ChildSpecificationEncounteredException">
<summary>
  Looks up a localized string similar to Could not gather information from child specification as an exception (&apos;{0}&apos;) occured during the process..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ChildSpecificationErrorClass">
<summary>
  Looks up a localized string similar to Child Specification Error.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ChildSpecificationFailedClass">
<summary>
  Looks up a localized string similar to Child Specification Failed.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ChildSpecificationItemNotFoundToEdit">
<summary>
  Looks up a localized string similar to Could not find existing child specification to edit: {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ChildSpecificationPropertyMissing">
<summary>
  Looks up a localized string similar to Could not find bound specification property &apos;{0}&apos; for column &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ChildSpecificationVariableMissing">
<summary>
  Looks up a localized string similar to Could not find bound variable &apos;{0}&apos; for column &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ConstToIncludeDesc">
<summary>
  Looks up a localized string similar to A pipe delimited list of constants to include in the export..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedChildSpecificationTaskChildSpecIndexPropDescription">
<summary>
  Looks up a localized string similar to The index of the child specification to copy..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedChildSpecificationTaskChildSpecListPropDescription">
<summary>
  Looks up a localized string similar to The name of the child specification list to copy within..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedChildSpecificationTaskCopiedSpecConstantNamePropDescription">
<summary>
  Looks up a localized string similar to The name of the constant to place the name of the copied specification into..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedChildSpecificationTaskReportClass">
<summary>
  Looks up a localized string similar to Copy Closed Child Specification Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedChildSpecificationTaskSetConstantWithSpecName">
<summary>
  Looks up a localized string similar to Set the constant &apos;{0}&apos; to the new specification&apos;s name &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedSpecificationTaskCopiedSpecIdConstantNameDescription">
<summary>
  Looks up a localized string similar to The name of the constant to place the Id of the copied specification into..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedSpecificationTaskDrivenConstant">
<summary>
  Looks up a localized string similar to Set the value of &apos;{0}&apos; to the new specification&apos;s id &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedSpecificationTaskNoFindSpec">
<summary>
  Looks up a localized string similar to Could not find a matching specification..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedSpecificationTaskNoFindSpecWithId">
<summary>
  Looks up a localized string similar to Could not find a specification with the id &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedSpecificationTaskNoFindSpecWithName">
<summary>
  Looks up a localized string similar to Could not find a specification with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedSpecificationTaskReportClass">
<summary>
  Looks up a localized string similar to Copy Closed Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedSpecificationTaskSpecCopied">
<summary>
  Looks up a localized string similar to Copied specification &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedSpecificationTaskSpecificationIdDescription">
<summary>
  Looks up a localized string similar to The Id of the specification to copy..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyClosedSpecificationTaskSpecificationNameDescription">
<summary>
  Looks up a localized string similar to The name of the specification to copy..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyFileTask">
<summary>
  Looks up a localized string similar to Copy File.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopyFolderTask">
<summary>
  Looks up a localized string similar to Copy Folder.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopySpecCreatedIdOutputDesc">
<summary>
  Looks up a localized string similar to The Id of the new specification that was created..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopySpecCreatedNameOutputDesc">
<summary>
  Looks up a localized string similar to The name of the new specification that was created..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopySpecHostDoesNotSupport">
<summary>
  Looks up a localized string similar to A specification can only be copied if the host supports it..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopySpecificationSuccessMsg">
<summary>
  Looks up a localized string similar to Successfully created a copy of the specification..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopySpecOnlyCopyDuringOperation">
<summary>
  Looks up a localized string similar to A specification can only be copied from an operation..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CopySpecProblemOccurred">
<summary>
  Looks up a localized string similar to A problem occurred trying to copy the specification. {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.CreatedSpecIdOutputDesc">
<summary>
  Looks up a localized string similar to The id of the created specification..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteCalculationTableRowsTask">
<summary>
  Looks up a localized string similar to Delete Calculation Table Rows.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteDirPathDesc">
<summary>
  Looks up a localized string similar to The path to the directory to delete..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteDirRecDesc">
<summary>
  Looks up a localized string similar to TRUE to delete recursively, FALSE to only delete the directory if it is empty..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteFileTask">
<summary>
  Looks up a localized string similar to Delete File.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteFolderTask">
<summary>
  Looks up a localized string similar to Delete Folder.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteGroupTableRowsTask">
<summary>
  Looks up a localized string similar to Delete Group Table Rows.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteGroupTableRowsTaskClass">
<summary>
  Looks up a localized string similar to Delete Group Table Rows Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeletePathDesc">
<summary>
  Looks up a localized string similar to The path to the file to delete..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteSimpleTableRowsTask">
<summary>
  Looks up a localized string similar to Delete Simple Table Rows.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteSimpleTableRowsTaskClass">
<summary>
  Looks up a localized string similar to Delete Simple Table Rows Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteSpecConfirmMessage">
<summary>
  Looks up a localized string similar to Specification &apos;{0}&apos; will be deleted..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteTableRowsOutputDesc">
<summary>
  Looks up a localized string similar to The number of rows deleted from the table..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteTeamDescription">
<summary>
  Looks up a localized string similar to The name of the team to delete..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DeleteUserDescription">
<summary>
  Looks up a localized string similar to Name of the user to delete.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DestDesc">
<summary>
  Looks up a localized string similar to The path to destination file..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DestFolderDesc">
<summary>
  Looks up a localized string similar to The path to the destination directory..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DisplayNameDescription">
<summary>
  Looks up a localized string similar to Display name of the user.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DocumentFailedBecauseOfException">
<summary>
  Looks up a localized string similar to The document &apos;{0}&apos; was not generated as an exception (&apos;{1}&apos;) occurred during generation..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DocumentFailedClass">
<summary>
  Looks up a localized string similar to Document Failed.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DocumentMissing">
<summary>
  Looks up a localized string similar to The document &apos;{0}&apos; was specified in the specification-flow but was not found in the project..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveConstantConstantNameDescription">
<summary>
  Looks up a localized string similar to The name of the constant to drive the new value into..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveConstantConstantNameTitle">
<summary>
  Looks up a localized string similar to Constant Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveConstantConstantNotFoundDetail">
<summary>
  Looks up a localized string similar to Could not find the constant with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveConstantConstantValueDescription">
<summary>
  Looks up a localized string similar to Value to drive into the specified constant. Double click the pip to toggle this between a rule and a value property.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveConstantConstantValueTitle">
<summary>
  Looks up a localized string similar to Constant Value.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveConstantProcessClass">
<summary>
  Looks up a localized string similar to Drive Constant Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveConstantProcessDescription">
<summary>
  Looks up a localized string similar to Driving value into constant &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveConstantUpdatedConstantDescription">
<summary>
  Looks up a localized string similar to Updated constant value..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveConstantUpdatedConstantDetail">
<summary>
  Looks up a localized string similar to Constant &apos;{0}&apos; has been updated to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveControlClassType">
<summary>
  Looks up a localized string similar to Drive Control Value Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveControlControlNameDescription">
<summary>
  Looks up a localized string similar to The name of the control to drive the new value into..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveControlControlNameTitle">
<summary>
  Looks up a localized string similar to Control Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveControlControlValueDescription">
<summary>
  Looks up a localized string similar to Value to drive into the specified control..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveControlControlValueTitle">
<summary>
  Looks up a localized string similar to Control Value.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveControlUseLocalValueFormatDescription">
<summary>
  Looks up a localized string similar to True if the control value should be driven to the control using the local value format..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.DriveControlUseLocalValueFormatTitle">
<summary>
  Looks up a localized string similar to Use local value format.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.EmailAddressDescription">
<summary>
  Looks up a localized string similar to User Email Address.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.EvaluateRuleConstantNamePropertyName">
<summary>
  Looks up a localized string similar to Constant Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.EvaluateRuleTaskClassName">
<summary>
  Looks up a localized string similar to Evaluate Rule Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.EvaluteRuleConstantNamePropertyDescription">
<summary>
  Looks up a localized string similar to The name of the constant to store the final result in..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.EvaluteRuleRuleTextPropertyDescription">
<summary>
  Looks up a localized string similar to The value of this property will be evaluated as a rule, and the result stored in a constant. If this property is made dynamic, then the result of the rule for this property should be another rule which will in turn be evaluted..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.EvaluteRuleRuleTextPropertyName">
<summary>
  Looks up a localized string similar to Rule Text.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ExportFormatDescription">
<summary>
  Looks up a localized string similar to The file format to export in, XML or JSON..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetConstantSourceConstantPropertyDescription">
<summary>
  Looks up a localized string similar to The name of the constant to get the value from..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetConstantSourceConstantPropertyName">
<summary>
  Looks up a localized string similar to Source Constant Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetConstantTargetConstantPropertyDescription">
<summary>
  Looks up a localized string similar to The name of the constant to store the value in..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetConstantTargetConstantPropertyName">
<summary>
  Looks up a localized string similar to Target Constant Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetConstantValueTaskClassType">
<summary>
  Looks up a localized string similar to Get Constant Value Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetControlSourceConstantPropertyDescription">
<summary>
  Looks up a localized string similar to The name of the control to get the return value from..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetControlSourceConstantPropertyName">
<summary>
  Looks up a localized string similar to Source Control Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetControlTargetConstantPropertyDescription">
<summary>
  Looks up a localized string similar to The name of the constant to store the control value in..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetControlTargetConstantPropertyName">
<summary>
  Looks up a localized string similar to Target Constant Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.GetControlValueClassType">
<summary>
  Looks up a localized string similar to Get Control Value Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.HostedSpecificationMacroNamePropertyName">
<summary>
  Looks up a localized string similar to The name of the macro to execute in the hosted specification..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.IncrementRevisionRevisionOutputDesc">
<summary>
  Looks up a localized string similar to The new revision number that was set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.IncrementRevisionRevisionOutputName">
<summary>
  Looks up a localized string similar to Revision Number.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.MoveDesc">
<summary>
  Looks up a localized string similar to TRUE to move the file, FALSE to copy it..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.MoveFolderDesc">
<summary>
  Looks up a localized string similar to TRUE to move the directory, FALSE to copy it..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.NavigateBackwardFormOutputDesc">
<summary>
  Looks up a localized string similar to The name of the new active form..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.NavigateBackwardFormOutputName">
<summary>
  Looks up a localized string similar to New Form Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.NavigateBackwardTaskFailedMessage">
<summary>
  Looks up a localized string similar to Unable to navigate backwards..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.NavigateForwardFailedMessage">
<summary>
  Looks up a localized string similar to Unable to navigate forwards..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.NavigateForwardFormOutputDesc">
<summary>
  Looks up a localized string similar to The name of the form that was activated..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.NavigateForwardFormOutputName">
<summary>
  Looks up a localized string similar to New Form Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.NewPasswordDescription">
<summary>
  Looks up a localized string similar to New password for the user.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.OutputFileNameDescription">
<summary>
  Looks up a localized string similar to A path to the file that will contain the exported specification data. The path can be absolute or relative to the project file..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.OverwriteDesc">
<summary>
  Looks up a localized string similar to TRUE to overwrite the destination file if it already exists, FALSE to leave it alone..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.OverwriteFolderDesc">
<summary>
  Looks up a localized string similar to TRUE to overwrite the destination directory if it already exists, FALSE to leave it alone..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PasswordDescription">
<summary>
  Looks up a localized string similar to Password for the user.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ProDescriptionChildProjectName">
<summary>
  Looks up a localized string similar to The name of the project that you wish to use for the child specification..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ProjTablesToIncludeDesc">
<summary>
  Looks up a localized string similar to A pipe delimited list of project tables to include in the export..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ProNameChildTransitionName">
<summary>
  Looks up a localized string similar to Child Transition Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropCalcTableNameDescription">
<summary>
  Looks up a localized string similar to A name of a calculation table..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropCatBehavior">
<summary>
  Looks up a localized string similar to Behavior.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropCatLoopingOptional">
<summary>
  Looks up a localized string similar to Looping (Optional).
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropCatTimerCounterOptional">
<summary>
  Looks up a localized string similar to Counter (Optional).
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropComponentsDescription">
<summary>
  Looks up a localized string similar to A pipe delimited list of target paths of drawings whose deferred flag to clear..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescAllowEditPermission">
<summary>
  Looks up a localized string similar to TRUE to allow team members to edit the project, otherwise FALSE..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescAllowRunPermission">
<summary>
  Looks up a localized string similar to TRUE to allow members to run the project, otherwise FALSE..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescArchiveAction">
<summary>
  Looks up a localized string similar to The archiving action to perform, one of &quot;Toggle&quot;, &quot;Archive&quot;, &quot;Unarchive&quot;. An empty value will behave the same as &quot;Toggle&quot;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescArrayValue">
<summary>
  Looks up a localized string similar to A Table array value, such as the result of a QueryDataValues function..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescCanCapture">
<summary>
  Looks up a localized string similar to TRUE to allow members of this team to capture models, otherwise FALSE..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescCancelSpecificationTimer">
<summary>
  Looks up a localized string similar to When set to True, the specified timers will be cancelled if they are running..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescControlColumnNames">
<summary>
  Looks up a localized string similar to The names of the control columns (Leave blank to append the data)..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescDeferDrawings">
<summary>
  Looks up a localized string similar to The name of the drawings to release, but flag for generation at a later stage. Delimit multiple names with the pipe bar &apos;|&apos; or use a &apos;*&apos; to defer the generation of all drawings..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescGroupTable">
<summary>
  Looks up a localized string similar to The name of the DriveWorks Group Table that the array value will be written to..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescLoopConstant">
<summary>
  Looks up a localized string similar to Optional. The name of a constant which will receive the loop counter value on each iteration..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescLoopIncrementValue">
<summary>
  Looks up a localized string similar to Controls the value added to the loop counter on each iteration, this will be positive to step up, and negative to step down..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescLoopLimitValue">
<summary>
  Looks up a localized string similar to Controls the limiting value of the loop counter..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescLoopStartValue">
<summary>
  Looks up a localized string similar to Controls the initial value of the loop counter..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescMembersCanCapture">
<summary>
  Looks up a localized string similar to TRUE to allow members of the team to capture, otherwise FALSE..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescMembersCanEditGroupSecurity">
<summary>
  Looks up a localized string similar to TRUE to allow members of the team to edit group security, otherwise FALSE..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescMembersCanEditSpecs">
<summary>
  Looks up a localized string similar to TRUE to allow members of the team to edit all specifications, otherwise FALSE..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescNewDisplayName">
<summary>
  Looks up a localized string similar to The new display name for the team..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescNewTeamName">
<summary>
  Looks up a localized string similar to The name of the new team.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescOwnerName">
<summary>
  Looks up a localized string similar to The name of a user which will be the new owner..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescProjectName">
<summary>
  Looks up a localized string similar to The name of the project.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescRegenerateAndDeleteComponentId">
<summary>
  Looks up a localized string similar to The target path or the unique identifier of the released component to mark for generation and delete (E.g. &quot;0FF18C75-F455-4123-9930-6628F7B66A6C&quot;).
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescRegenerateAndDeleteSpecCompsSpecId">
<summary>
  Looks up a localized string similar to The ID of the specification whose released components to delete and mark for regeneration..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescRegenerateAndOverwriteSpecComponentsSpecId">
<summary>
  Looks up a localized string similar to The ID of the specification whose components&apos; will be marked for regeneration and have their overwrite flag set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescReleaseModelsOverwrite">
<summary>
  Looks up a localized string similar to Sets whether the components released by this task should overwrite existing files, regardless of the group settings..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionChildSpecList">
<summary>
  Looks up a localized string similar to The name of the child specification list that you wish to start a new specification on..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionChildTransitionName">
<summary>
  Looks up a localized string similar to The name of the transition to invoke on the child specification. This will put the specification in the desired creation state..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionCreateSpecChildListName">
<summary>
  Looks up a localized string similar to The child specification list to create the specification on..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionFieldNames">
<summary>
  Looks up a localized string similar to The column names to match against, delimited by pipe bars &apos;|&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionGroupTableName">
<summary>
  Looks up a localized string similar to The name of the group table to remove rows from..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionMacroDelayTime">
<summary>
  Looks up a localized string similar to The amount of time in seconds to delay the prompt for macro abortion (relative to the time that this task is ran)..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionMatchingValues">
<summary>
  Looks up a localized string similar to The values to match against based on the fields specified in the &apos;Field Names&apos; property. Values should be delimited by pipe bars &apos;|&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionOperationChildSpecList">
<summary>
  Looks up a localized string similar to The name of the child specification list that contains the specification to invoke an operation on..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionOperationName">
<summary>
  Looks up a localized string similar to The name of the specification operation that you wish to invoke..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionOperationSpecIndex">
<summary>
  Looks up a localized string similar to The index of the child specification that you wish to invoke an operation on. This does not need to be set if the specification name property has been set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionOperationSpecName">
<summary>
  Looks up a localized string similar to The name of the child specification that you wish to invoke an operation on. This does not need to be set if the specification index property has been set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionProjectName">
<summary>
  Looks up a localized string similar to The name of the project that you wish to use for the new specification..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionRunTransitionName">
<summary>
  Looks up a localized string similar to The name of the transition to run. The target state cannot be a running state..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionSimpleTableName">
<summary>
  Looks up a localized string similar to The name of the simple table to remove rows from..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionSpecificationId">
<summary>
  Looks up a localized string similar to The id of the specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionTransitionChildSpecList">
<summary>
  Looks up a localized string similar to The name of the child specification list that contains the specification to transition..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionTransitionName">
<summary>
  Looks up a localized string similar to The name of the specification transition that you wish to invoke..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionTransitionSpecIndex">
<summary>
  Looks up a localized string similar to The index of the child specification that you wish to transition. This does not need to be set if the specification name property has been set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescriptionTransitionSpecName">
<summary>
  Looks up a localized string similar to The name of the child specification that you wish to transition. This does not need to be set if the specification index property has been set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescRunOperationName">
<summary>
  Looks up a localized string similar to The name of the operation to run. This cannot result in a running specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescSetComponentFlagComponentId">
<summary>
  Looks up a localized string similar to The target path or the unique identifier of the released component to update the overwrite flag for (E.g. &quot;0FF18C75-F455-4123-9930-6628F7B66A6C&quot;).
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescSetComponentFlagOverwrite">
<summary>
  Looks up a localized string similar to TRUE to make the component overwrite existing files regardless of the group&apos;s overwrite setting, FALSE to not overwrite existing files..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescSetComponentFlagOverwriteSingleFile">
<summary>
  Looks up a localized string similar to TRUE to make the component overwrite the existing file (if one exists) regardless of the group&apos;s overwrite setting, FALSE to not overwrite the existing file..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescSpecIdDeferredFlagTask">
<summary>
  Looks up a localized string similar to The id of the specification for which all drawings will have their deferred flags cleared..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescStartTimerName">
<summary>
  Looks up a localized string similar to The name to give to the timer being started. If left blank, the timer will be called &quot;Default&quot;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescStayOnSchedule">
<summary>
  Looks up a localized string similar to If True, the timer will not be halted during macro execution meaning that if execution carries on into the next interval of the timer, that interval will be skipped. If False, the timer will be paused during macro execution and resumed upon completion, meaning every interval is respected..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescStopTimerNames">
<summary>
  Looks up a localized string similar to The names of the timers to cancel. Delimit multiple timer names with a pipe bar &quot;|&quot; or use a &quot;*&quot; to stop all timers..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescTeamDisplayName">
<summary>
  Looks up a localized string similar to The display name of the new team.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescTeamName">
<summary>
  Looks up a localized string similar to The name of the team..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescTimerCount">
<summary>
  Looks up a localized string similar to The number of times the macro should be run. To continually run the timer until it is cancelled, set this to 0..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescTimerCounterConstant">
<summary>
  Looks up a localized string similar to Optional. The name of a constant which will receive the counter value of the timer on each iteration..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDescTimerInterval">
<summary>
  Looks up a localized string similar to The interval in seconds of how often the macro should run..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDisplayName">
<summary>
  Looks up a localized string similar to Display Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropDispNameOwnerName">
<summary>
  Looks up a localized string similar to Owner User Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropEmailAddress">
<summary>
  Looks up a localized string similar to User Email Address.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameAction">
<summary>
  Looks up a localized string similar to Action.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameAllowEditPermission">
<summary>
  Looks up a localized string similar to Allow members to edit the project.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameAllowRunPermission">
<summary>
  Looks up a localized string similar to Allow members to run the project.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameArrayValue">
<summary>
  Looks up a localized string similar to Array Value.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameChildSpecDefs">
<summary>
  Looks up a localized string similar to Only child specifications for the given control names will be changed. Use a pipe bar &apos;|&apos; to separate multiple control names, or a &apos;*&apos; to apply to all controls..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameChildSpecificationList">
<summary>
  Looks up a localized string similar to Child Specification List.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameChildSpecProjs">
<summary>
  Looks up a localized string similar to Only child specifications based on projects with the given names will be changed. Use a pipe bar &apos;|&apos; to separate multiple project names, or a &apos;*&apos; to apply to all projects..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameChildSpecStateName">
<summary>
  Looks up a localized string similar to The name of the target state to which to change matching child specifications..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameControlColumnNames">
<summary>
  Looks up a localized string similar to Control Column Names.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameGroupTable">
<summary>
  Looks up a localized string similar to Group Table Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameMacroDefer">
<summary>
  Looks up a localized string similar to True to defer the execution of the macro until after the project&apos;s design master has been saved. False to run immediately..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameMacroName">
<summary>
  Looks up a localized string similar to The name of the macro in the project&apos;s design master..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameMembersCanCapture">
<summary>
  Looks up a localized string similar to Members Can Capture.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameMembersCanEditGroupSecurity">
<summary>
  Looks up a localized string similar to Members Can Edit Group Security.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameMembersCanEditSpecs">
<summary>
  Looks up a localized string similar to Members Can Edit All Specifications.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameOperationName">
<summary>
  Looks up a localized string similar to Operation Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameProjectName">
<summary>
  Looks up a localized string similar to Project Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameReleaseDocuments">
<summary>
  Looks up a localized string similar to The names of the documents to release. Delimit multiple document names with a pipe bar &apos;|&apos; or use a &apos;*&apos; to release all documents..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameReleaseEmails">
<summary>
  Looks up a localized string similar to The names of the emails to release. Delimit multiple email document names with a pipe bar &apos;|&apos; or use a &apos;*&apos; to release all emails..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameReleaseModels">
<summary>
  Looks up a localized string similar to The names of the component sets to release. Delimit multiple component set names with a pipe bar &apos;|&apos; or use a &apos;*&apos; to release all component sets..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameSpecificationId">
<summary>
  Looks up a localized string similar to Specification Id.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameSpecificationIndex">
<summary>
  Looks up a localized string similar to Specification Index.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameSpecificationName">
<summary>
  Looks up a localized string similar to Specification Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameTeamDisplayName">
<summary>
  Looks up a localized string similar to New Team Display Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameTeamName">
<summary>
  Looks up a localized string similar to New Team Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNameTransitionName">
<summary>
  Looks up a localized string similar to Transition Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropNewPassword">
<summary>
  Looks up a localized string similar to New Password.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropPassword">
<summary>
  Looks up a localized string similar to User Password.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropRequestBody">
<summary>
  Looks up a localized string similar to Request Body.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropRequestBodyDescription">
<summary>
  Looks up a localized string similar to The HTTP request body..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropRequestHeaders">
<summary>
  Looks up a localized string similar to Request Headers.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropRequestHeadersDescription">
<summary>
  Looks up a localized string similar to A pipe delimited list of headers to be sent with the request.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropRequestUrl">
<summary>
  Looks up a localized string similar to Request URL.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropRequestUrlDescription">
<summary>
  Looks up a localized string similar to The URL where the web request should be sent..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropRequestVerb">
<summary>
  Looks up a localized string similar to Request Verb.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropRequestVerbDescription">
<summary>
  Looks up a localized string similar to The resource action to perform..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropResponseBodyConstant">
<summary>
  Looks up a localized string similar to Response Body Constant Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropResponseBodyConstantDescription">
<summary>
  Looks up a localized string similar to The name of the constant to drive the response body to..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropResponseHeaderConstant">
<summary>
  Looks up a localized string similar to Response Header Constant Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropResponseHeaderConstantDescription">
<summary>
  Looks up a localized string similar to The name of the constant to drive the response headers to..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropSkipRemainingTasksDescription">
<summary>
  Looks up a localized string similar to When set to true, remaining tasks in this task&apos;s list will not be executed..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropSkipRemainingTasksTitle">
<summary>
  Looks up a localized string similar to Skip Remaining Tasks.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropTeamLeader">
<summary>
  Looks up a localized string similar to Team Leader.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropTeamName">
<summary>
  Looks up a localized string similar to Team Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropTitleDelayTime">
<summary>
  Looks up a localized string similar to Delay Time.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropTitleFieldNames">
<summary>
  Looks up a localized string similar to Field Names.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropTitleMatchValues">
<summary>
  Looks up a localized string similar to Match Values.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropTitleTableName">
<summary>
  Looks up a localized string similar to Table Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropUserEnable">
<summary>
  Looks up a localized string similar to Enable User.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.PropUserName">
<summary>
  Looks up a localized string similar to User Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RefreshTableClass">
<summary>
  Looks up a localized string similar to Refresh Table.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RefreshTableTableNamePropertyDescription">
<summary>
  Looks up a localized string similar to The names of the tables to refresh. Delimit multiple table names with a pipe bar &apos;|&apos; or use a &apos;*&apos; to refresh all tables..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RefreshTableTableNotFoundDetail">
<summary>
  Looks up a localized string similar to Could not find the table with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ReleasedDocumentsOutputDesc">
<summary>
  Looks up a localized string similar to A pipe &apos;|&apos; delimited list of all documents that were successfully released..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.ReleasedEmailsOutputDesc">
<summary>
  Looks up a localized string similar to A pipe &apos;|&apos; delimited list of all successfully released emails..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptAddEditPermission">
<summary>
  Looks up a localized string similar to The team &apos;{0}&apos; can now edit the project &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptAddRunPermission">
<summary>
  Looks up a localized string similar to The team &apos;{0}&apos; can now run the project &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptChangeChildSpecificationsStateSuccessFinal">
<summary>
  Looks up a localized string similar to Successfully changed the state of {0} child specifications..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptChangeChildSpecificationsStateSuccessFinalDetail">
<summary>
  Looks up a localized string similar to Specifications changed: {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptChildSpecificationStateChangeCouldNotOpen">
<summary>
  Looks up a localized string similar to There was a problem opening the child specification &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptChildSpecificationStateChangedSuccessfully">
<summary>
  Looks up a localized string similar to Successfully changed the state of child specification &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptChildSpecificationStateChangeFailed">
<summary>
  Looks up a localized string similar to There was a problem changing the state of the child specification &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptChildSpecListNoListOption">
<summary>
  Looks up a localized string similar to The child specification list &apos;{0}&apos; did not list it as an available option..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassCancelSpecificationTimer">
<summary>
  Looks up a localized string similar to Cancel Specification Timer.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassCopyingFile">
<summary>
  Looks up a localized string similar to Copying File.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassCopyingFolder">
<summary>
  Looks up a localized string similar to Copying Folder.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassCopyingSpecification">
<summary>
  Looks up a localized string similar to Copying Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassDeletingFile">
<summary>
  Looks up a localized string similar to Deleting File.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassDeletingFolder">
<summary>
  Looks up a localized string similar to Deleting Folder.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassDoc">
<summary>
  Looks up a localized string similar to Generating Document.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassDocs">
<summary>
  Looks up a localized string similar to Generating Documents.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassEmail">
<summary>
  Looks up a localized string similar to Releasing Email.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassEmails">
<summary>
  Looks up a localized string similar to Releasing Emails.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassInvokeChildSpecificationOperation">
<summary>
  Looks up a localized string similar to Invoke Child Specification Operation Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassInvokeChildSpecificationTransition">
<summary>
  Looks up a localized string similar to Invoke Child Specification Transition Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassReleaseModels">
<summary>
  Looks up a localized string similar to Releasing Models.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassRunMacroInHostedSpecificationTask">
<summary>
  Looks up a localized string similar to Run Macro in Hosted Specification Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassRunMacroInHostSpecificationTask">
<summary>
  Looks up a localized string similar to Run Macro in Host Specification Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassRunMacroInLoop">
<summary>
  Looks up a localized string similar to Run Macro in Loop.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassSetSpecificationHostControlTask">
<summary>
  Looks up a localized string similar to Host Specification In Control Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClassStartSpecificationTimer">
<summary>
  Looks up a localized string similar to Start Specification Timer.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClearDeferedFlagUnableToFlagComponent">
<summary>
  Looks up a localized string similar to Unable to clear flag of component &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClearDeferredFlagFailed">
<summary>
  Looks up a localized string similar to No components in the specification &apos;{0}&apos; have had their flag toggled..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClearDeferredFlagFlagNotSet">
<summary>
  Looks up a localized string similar to Component &apos;{0}&apos; has not been marked as deferred..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClearDeferredFlagSpecNotFound">
<summary>
  Looks up a localized string similar to No specification with the id &apos;{0}&apos; has been registered in the group..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptClearDeferredFlagSuccess">
<summary>
  Looks up a localized string similar to Cleared the deferred flag on {0} components in the specification with the id &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptComponentNotGenerated">
<summary>
  Looks up a localized string similar to The component &apos;{0}&apos; has not been generated, no action was taken..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptComponentOverwriteFlagAlreadySet">
<summary>
  Looks up a localized string similar to The overwrite flag of the component &apos;{0}&apos; is already set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptComponentUpdated">
<summary>
  Looks up a localized string similar to Successfully marked &apos;{0}&apos; to be generated, and ensured the overwrite flag was set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptControlDoesNotHaveReturnValue">
<summary>
  Looks up a localized string similar to The specified control &apos;{0}&apos;, is not an input control..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptCouldNotFindChildSpecWithName">
<summary>
  Looks up a localized string similar to Couldn&apos;t find the child specification control with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptCreateClosedChildSpecificationClass">
<summary>
  Looks up a localized string similar to Create Closed Child Specification Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeferredCompDoesntExist">
<summary>
  Looks up a localized string similar to A component with the id &apos;{0}&apos; does not exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeferredFlagCleared">
<summary>
  Looks up a localized string similar to Successfully cleared the deferred flag of component &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeferredFlagClearFailed">
<summary>
  Looks up a localized string similar to Unable to clear the deferred flag of component &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeleteAdminFail">
<summary>
  Looks up a localized string similar to The Admin user cannot be deleted.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeleteCalcTableRowsTaskClass">
<summary>
  Looks up a localized string similar to Delete Calculation Table Rows Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeleteCurrentUserFail">
<summary>
  Looks up a localized string similar to The current user cannot be deleted.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeleteFileFailed">
<summary>
  Looks up a localized string similar to Unable to delete &apos;{0}&apos;. {1}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeleteFileSuccess">
<summary>
  Looks up a localized string similar to Successfully deleted &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeleteSpecificationClassName">
<summary>
  Looks up a localized string similar to Delete Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDeleteTeamWithPermissions">
<summary>
  Looks up a localized string similar to Unable to delete the team &apos;{0}&apos; as it would remove your security permissions..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDelGrpTblRowUnableToFindTable">
<summary>
  Looks up a localized string similar to Unable to find a group table with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDelSmplTblRowNotSimpleTable">
<summary>
  Looks up a localized string similar to Specified table: &apos;{0}&apos; is not a simple table..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDelSmplTblRowUnableToFindTable">
<summary>
  Looks up a localized string similar to Unable to find a table with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDelTableNoMatchingFieldsDetailBasedOn">
<summary>
  Looks up a localized string similar to Based on &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDelTblRowDeletedRowsSuccess">
<summary>
  Looks up a localized string similar to Deleted {0} row(s) from &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDelTblRowNoFieldsSpecified">
<summary>
  Looks up a localized string similar to No fields specified..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDelTblRowNoMatchingFieldsFound">
<summary>
  Looks up a localized string similar to There are no matching fields in the table based on the export fields..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDriveControlErrorProblemSettinValue">
<summary>
  Looks up a localized string similar to There was a problem applying the value &apos;{0}&apos; to the control &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptDriveControlSuccess">
<summary>
  Looks up a localized string similar to Successfully set the value of the control &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptEmptyDisplayName">
<summary>
  Looks up a localized string similar to The display name for &apos;{0}&apos; cannot be empty.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptEmptyOperationName">
<summary>
  Looks up a localized string similar to The operation name cannot be empty..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptEmptyTableName">
<summary>
  Looks up a localized string similar to The group table name cannot be empty..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptEmptyTeamName">
<summary>
  Looks up a localized string similar to The team name must not be empty.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptEmptyTransitionName">
<summary>
  Looks up a localized string similar to The transition name cannot be empty..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptEmptyUserName">
<summary>
  Looks up a localized string similar to The username must not be empty.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrCalcTableNotFound">
<summary>
  Looks up a localized string similar to Unable to find the calculation table with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorCanNotDeleteSpecificationWhileInTransition">
<summary>
  Looks up a localized string similar to A Specification cannot be deleted while in a transition..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorControlCanNotBeDriven">
<summary>
  Looks up a localized string similar to The control &apos;{0}&apos; cannot be driven..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorCouldNotFindChildSpecControl">
<summary>
  Looks up a localized string similar to Could not find a child specification list with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorCouldNotFindChildSpecification">
<summary>
  Looks up a localized string similar to Could not find child specification..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorCouldNotFindChildSpecWithName">
<summary>
  Looks up a localized string similar to Could not find a child specification with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorCouldNotFindControl">
<summary>
  Looks up a localized string similar to Could not find the control with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorDetailChildSpecControlNoHaveProject">
<summary>
  Looks up a localized string similar to Child Specification List with the name &apos;{0}&apos; did not list it as an available project..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorGeneralTransitionError">
<summary>
  Looks up a localized string similar to There was a problem invoking the transition with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorLoadFailForChildSpecificationContext">
<summary>
  Looks up a localized string similar to Unable to load child specification context..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorNoFindSpecOperationByName">
<summary>
  Looks up a localized string similar to Could not find specification operation by the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorNotFindSpecTransitionByName">
<summary>
  Looks up a localized string similar to Could not find specification transition by the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorOperationNoInvokeAsNotEnabled">
<summary>
  Looks up a localized string similar to Operation &apos;{0}&apos; could not be invoked, as it was not enabled..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorProblemInvokingOperation">
<summary>
  Looks up a localized string similar to There was a problem invoking the operation with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorProjectNotAvailable">
<summary>
  Looks up a localized string similar to The project &apos;{0}&apos; is not available..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptErrorTransitionNoInvokeAsNotEnabled">
<summary>
  Looks up a localized string similar to Transition &apos;{0}&apos; could not be invoked, as it was not enabled..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptExportEmptyFilePath">
<summary>
  Looks up a localized string similar to Unable to save the file as no file path has been specified..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptExportSpecificationDataTaskClassName">
<summary>
  Looks up a localized string similar to Export Specification Data.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptExportSpecificationDataTaskFail">
<summary>
  Looks up a localized string similar to A problem occurred whilst trying to export the specification&apos;s data. {0}..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptExportSpecificationDataTaskSuccess">
<summary>
  Looks up a localized string similar to Successfully exported the data to a file at the specified location {0}..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptExportSpecificationFileExtensionDefaulted">
<summary>
  Looks up a localized string similar to The file can not be exported with the extension &quot;{0}&quot; and will be exported with the default &quot;.xml&quot; extension..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptFileCopiedSuccessfully">
<summary>
  Looks up a localized string similar to Successfully copied the file &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptFileExistsCantOverwrite">
<summary>
  Looks up a localized string similar to The file already exists and the Overwrite Flag is set to FALSE. Please set the Overwrite Flag to TRUE if you want to save this file..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptFilePathTooLong">
<summary>
  Looks up a localized string similar to Unable to save the file &apos;{0}&apos;. The specified file path was too long..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptGenerateAndDeleteCompTaskFileNotFound">
<summary>
  Looks up a localized string similar to The file &apos;{0}&apos; was not found..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptGenerateAndDeleteCompTaskSuccess">
<summary>
  Looks up a localized string similar to Successfully marked &apos;{0}&apos; for generation and deleted the existing file..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptGenerateAndDeleteSpecCompsTaskFileNotFound">
<summary>
  Looks up a localized string similar to The file &apos;{0}&apos; does not exist on disk..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptGroupTableDataIncorrectType">
<summary>
  Looks up a localized string similar to The given data was of the incorrect type, cannot write to the group table &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptIncrementRevisionNumber">
<summary>
  Looks up a localized string similar to Incrementing specification revision number from {0} to {1}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptIncrementValueInvalid_Negative">
<summary>
  Looks up a localized string similar to The increment value is negative or zero, which is invalid because the limiting value is greater than the starting value..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptIncrementValueInvalid_Positive">
<summary>
  Looks up a localized string similar to The increment value is positive or zero, which is invalid because the limiting value is less than the starting value..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInfiniteLoopError">
<summary>
  Looks up a localized string similar to There was a problem executing the macro as it resulted in an infinite loop..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvalidDisplayName">
<summary>
  Looks up a localized string similar to The display name for &apos;{0}&apos; is invalid.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvalidEmailAddress">
<summary>
  Looks up a localized string similar to The email address &apos;{0}&apos; is invalid.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvalidFilePath">
<summary>
  Looks up a localized string similar to Unable to save the file &apos;{0}&apos;. The specified file path was invalid..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvalidPermissions">
<summary>
  Looks up a localized string similar to &apos;{0}&apos; does not have permissions to edit group security..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvalidSpecificationId">
<summary>
  Looks up a localized string similar to Invalid specification id &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvalidTeamName">
<summary>
  Looks up a localized string similar to The team name &apos;{0}&apos; is invalid.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvalidUserName">
<summary>
  Looks up a localized string similar to The username &apos;{0}&apos; is invalid.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvokeOperationExistingSpec">
<summary>
  Looks up a localized string similar to Invoke Operation On Existing Specification Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvokeSpecificationOperation">
<summary>
  Looks up a localized string similar to Invoke Specification Operation Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptInvokeTransitionExistingSpec">
<summary>
  Looks up a localized string similar to Invoke Transition on Existing Specification Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMissingGroupTable">
<summary>
  Looks up a localized string similar to A group table with the name &apos;{0}&apos; doesn&apos;t exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMissingProject">
<summary>
  Looks up a localized string similar to The project &apos;{0}&apos; doesn&apos;t exist.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMissingTeam">
<summary>
  Looks up a localized string similar to The team &apos;{0}&apos; doesn&apos;t exist.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMissingUser">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; doesn&apos;t exist.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgCannotHaveMoreSpecificationsAfterNestingThem">
<summary>
  Looks up a localized string similar to Unable to nest specifications more than {0} levels deep..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgNoMacroOnHostSpecificationToExecute">
<summary>
  Looks up a localized string similar to There is no macro on the host specification &apos;{0}&apos; to execute called &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgRunMacroInHostedSpecificationTaskCouldNotFindSpecificationHostControlWithName">
<summary>
  Looks up a localized string similar to Could not find a specification host control with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgRunMacroInHostedSpecificationTaskHostedMacroNoExecute">
<summary>
  Looks up a localized string similar to Could not execute macro &apos;{0}&apos;. Make sure that it exists in the specification &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgRunMacroInHostedSpecificationTaskNoMacroName">
<summary>
  Looks up a localized string similar to You must specify the name of the macro to execute..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgRunMacroInHostedSpecificationTaskNoSpecificationHosted">
<summary>
  Looks up a localized string similar to There is no specification hosted inside the control &apos;{0}&apos; to execute a macro on..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgRunMacroInHostedSpecificationTaskPropertyForSpecificationHostNameNotSet">
<summary>
  Looks up a localized string similar to The property for the specification host control name is not set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgRunMacroInHostedSpecificationTaskSuccessfullyExecutedMacroOnSpecificationSpecificationHostControl">
<summary>
  Looks up a localized string similar to Successfully executed the macro &apos;{0}&apos; on specification &apos;{1}&apos; in the specification host control &apos;{2}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlStartChildSpecificationMissingDefinition">
<summary>
  Looks up a localized string similar to Cannot start a Child Specification from the Project &apos;{0}&apos; as the Child Specification List &apos;{1}&apos; does not have a definition for it set up..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskCouldNotFindTheProjectWithName">
<summary>
  Looks up a localized string similar to Could not find the project with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskCouldNotFindTheSpecificationWithId">
<summary>
  Looks up a localized string similar to Could not find the specification with the id &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskCouldNotFindTheSpecificationWithName">
<summary>
  Looks up a localized string similar to Could not find the specification with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskCouldNotParseStringToId">
<summary>
  Looks up a localized string similar to The provided value &apos;{0}&apos; for Specification Id is not a valid number..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskNoFindChildSpecificationControlWithName">
<summary>
  Looks up a localized string similar to Could not find the child specification control with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskNoProjectNameSpecificationNameOrValidSpecificationIdSet">
<summary>
  Looks up a localized string similar to No project name, specification name or valid specification id was specified to host in the specification host control..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskSpecHostNameNoSet">
<summary>
  Looks up a localized string similar to The Specifcation Host Control Name property had no value set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskSpecificationAlreadyRunning">
<summary>
  Looks up a localized string similar to The specification &apos;{0}&apos; is already running and cannot be ran in the specification host control..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskSuccessfullyCreatedNewChildSpecificationHostedItInSpecificationHostControl">
<summary>
  Looks up a localized string similar to Successfully created a new child specification &apos;{0}&apos; and hosted it in the specification host control &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskSuccessfullyCreatedNewSpecificationAndHosted">
<summary>
  Looks up a localized string similar to Successfully created a new specification &apos;{0}&apos; and hosted it in the specification host control &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskSuccessfullyTransitionedSpecificationAndHosted">
<summary>
  Looks up a localized string similar to Successfully transitioned specification &apos;{0}&apos; and hosted it in the specification host control &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskTargetStateNotRunningState">
<summary>
  Looks up a localized string similar to The target state of transition &apos;{0}&apos; on specification &apos;{1}&apos; does not go to a running state..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskTransitionNameMustBeSet">
<summary>
  Looks up a localized string similar to A transition name must be set that will transition the specification to a running state..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskUnableToFindAMatchingChildSpecification">
<summary>
  Looks up a localized string similar to Unable to find a matching child specification with the name &apos;{0}&apos; in the control &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSetSpecificationHostControlTaskUnableToFindTransition">
<summary>
  Looks up a localized string similar to Unable to find a transition on the specification &apos;{0}&apos; with the name or title &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSpecificationMustBeHostedInSpecificationHostControlToUseTask">
<summary>
  Looks up a localized string similar to This specification must be hosted in a Specification Host control to use this task..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgSuccessfullyExecutedMacroOnSpecification">
<summary>
  Looks up a localized string similar to Successfully executed the macro &apos;{0}&apos; on specification &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgThereIsNoHostSpecificationForSpecification">
<summary>
  Looks up a localized string similar to This specification is not being hosted in a specification host control..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptMsgToProtectAgainstInfinitelyRecursiveProjectsThatNeverStopMakingChildSpecificationsEtc">
<summary>
  Looks up a localized string similar to This is to protect against projects that infinitely create child specifications etc..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoChangeEditPermission">
<summary>
  Looks up a localized string similar to No change made to the ability for members of the &apos;{0}&apos; team to edit the &apos;{1}&apos; project.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoChangeRunPermission">
<summary>
  Looks up a localized string similar to No change made to the ability for members of the &apos;{0}&apos; team to run the &apos;{1}&apos; project.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoCreateChildSpecChildListNull">
<summary>
  Looks up a localized string similar to Couldn&apos;t create the child specification. No Child Specification list was specified..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoCreateChildSpecProjectNameNull">
<summary>
  Looks up a localized string similar to Couldn&apos;t create the child specification. No Project Name was specified..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoCreateChildSpecTransNameNull">
<summary>
  Looks up a localized string similar to Couldn&apos;t create the child specification. No Transition Name was specified..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoDeferredComponentSpecified">
<summary>
  Looks up a localized string similar to No component was specified..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoDestinationFileWasSpecifiedToCopyTo">
<summary>
  Looks up a localized string similar to No destination file was specified to copy to..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoDestinationFolderWasSpecifiedToCopyTo">
<summary>
  Looks up a localized string similar to No destination folder was specified to copy to..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoEditPermissionForHostedSpec">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; does not have permission to edit the project &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoFileWasSpecifiedToDelete">
<summary>
  Looks up a localized string similar to No file was specified to delete..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoFileWasSpecifiedToEncode">
<summary>
  Looks up a localized string similar to No file was specified to encode..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoFindTransitionOnChildSpecToInvoke">
<summary>
  Looks up a localized string similar to Could not find a transition to invoke on the child specification called &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoFolderWasSpecifiedToDelete">
<summary>
  Looks up a localized string similar to No folder was specified to delete..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoModelsToRelease">
<summary>
  Looks up a localized string similar to No models were selected to be released, perhaps an asterisk (*) was omitted from the Models property..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoRunningTimerWithName">
<summary>
  Looks up a localized string similar to There is no Specification Timer running with the name &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoSourceFileWasSpecifiedToCopy">
<summary>
  Looks up a localized string similar to No source file was specified to copy..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoSourceFolderWasSpecifiedToCopy">
<summary>
  Looks up a localized string similar to No source folder was specified to copy..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoSpecifyPermissionForHostedSpec">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; does not have permission to run the project &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptNoTimerNamesProvided">
<summary>
  Looks up a localized string similar to No timer names were provided. .
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptOperationRanOnSpecification">
<summary>
  Looks up a localized string similar to The operation &apos;{0}&apos; was successfully ran on specification &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptOwnerApplied">
<summary>
  Looks up a localized string similar to The owner of the specification was successfully updated to &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptOwnerUnavailableForNewSpecifications">
<summary>
  Looks up a localized string similar to Previous owner can not be retrieved for new specifications.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptPasswordNotUpdated">
<summary>
  Looks up a localized string similar to The password for &apos;{0}&apos; has not been updated.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptPasswordUpdated">
<summary>
  Looks up a localized string similar to The password for &apos;{0}&apos; has been updated.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemAttemptingToDeleteFolder">
<summary>
  Looks up a localized string similar to There was a problem while attempting to delete the folder &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemEvaluatingRuleDetail">
<summary>
  Looks up a localized string similar to The failed rule was: {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemEvaluatingRuleTitle">
<summary>
  Looks up a localized string similar to There was a problem evaluating a rule for this task..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemGettingControlReturnValue">
<summary>
  Looks up a localized string similar to There was a problem trying to get the return value from control &apos;{0}&apos; and store it in constant &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemUpdatingMembersCanEditGroupSecurity">
<summary>
  Looks up a localized string similar to Unable to update the Members Can Edit Group Security property of the team &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemUpdatingMembersCanEditSpecs">
<summary>
  Looks up a localized string similar to Unable to update the Members Can Edit All Specifications property of the team &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemUpdatingPermissions">
<summary>
  Looks up a localized string similar to Problem updating team/project permissions..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemWhileAttemptingToCopyTheFile">
<summary>
  Looks up a localized string similar to There was a problem while attempting to copy the file..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemWhileAttemptingToCopyTheFolder">
<summary>
  Looks up a localized string similar to There was a problem while attempting to copy the folder..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemWhileAttemptingToDeleteFile">
<summary>
  Looks up a localized string similar to There was a problem while attempting to delete the file &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProblemWhileAttemptingToEncodeTheFile">
<summary>
  Looks up a localized string similar to There was a problem while attempting to encode the file..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptProjectNameBlank">
<summary>
  Looks up a localized string similar to Project name cannot be blank..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptPropertyNotDefinedDetail">
<summary>
  Looks up a localized string similar to The property {0} has not been defined..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRegenerateAndDeleteCompTaskFileDeleted">
<summary>
  Looks up a localized string similar to The file &apos;{0}&apos; was successfully deleted..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRegenerateAndDeleteCompTaskFileDeleteFailed">
<summary>
  Looks up a localized string similar to Unable to delete &apos;{0}&apos;. {1}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRegenerateAndDeleteSpecCompsTaskFailed">
<summary>
  Looks up a localized string similar to Unable to delete and mark all components belonging to the specification with the ID &apos;{0}&apos; for regeneration..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRegenerateAndDeleteSpecCompsTaskSuccess">
<summary>
  Looks up a localized string similar to All components belonging to the specification with the ID &apos;{0}&apos; were successfully deleted and marked for regeneration..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRegenerateAndOverwriteSpecComponentsFailed">
<summary>
  Looks up a localized string similar to Unable to mark all components belonging to the specification &apos;{0}&apos; to be regenerated and set their overwrite flag to True..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRegenerateAndOverwriteSpecComponentsSuccess">
<summary>
  Looks up a localized string similar to Successfully marked all components belonging to the specification &apos;{0}&apos; to be regenerated and set their overwrite flag to True..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRegenerateAndOverwriteSpecCompsFlagUpdated">
<summary>
  Looks up a localized string similar to Successfully set the overwrite flag of the component &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRegenerateAndOverwriteSpecCompsFlagUpdateFailed">
<summary>
  Looks up a localized string similar to Unable to update the overwrite flag of the component &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRegenerateAndOverwriteSpecCompsGeneratedUpdated">
<summary>
  Looks up a localized string similar to Successfully marked &apos;{0}&apos; for regeneration..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptReleaseDoc">
<summary>
  Looks up a localized string similar to Generating document &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptReleaseEmail">
<summary>
  Looks up a localized string similar to Releasing email &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptReleasingAllDocuments">
<summary>
  Looks up a localized string similar to Generating all documents..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptReleasingEmails">
<summary>
  Looks up a localized string similar to Releasing emails.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptReleasingSelectedDocuments">
<summary>
  Looks up a localized string similar to Generating selected documents: {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRemoveEditPermission">
<summary>
  Looks up a localized string similar to The team &apos;{0}&apos; can no longer edit the project &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptRemoveRunPermission">
<summary>
  Looks up a localized string similar to The team &apos;{0}&apos; can no longer run the project &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptSetOverwriteFlagNoComponentsFound">
<summary>
  Looks up a localized string similar to A specification with the ID &apos;{0}&apos; was not found, or has no released components associated with it..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptSpecIdNotFound">
<summary>
  Looks up a localized string similar to A specification with the id &apos;{0}&apos; was not found..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptStartSpecificationTimerNoMacroNameProvided">
<summary>
  Looks up a localized string similar to You must specify the name of the macro to execute..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptStoreSpecErrNoPreviousState">
<summary>
  Looks up a localized string similar to A store state must be specified if there is no cancel state..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptStoreSpecErrNoStateWithName">
<summary>
  Looks up a localized string similar to Could not find the state &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptStoreSpecErrRequiresRunningState">
<summary>
  Looks up a localized string similar to The specification must be in a running state to store it..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptStoreSpecErrTargetStateRunning">
<summary>
  Looks up a localized string similar to The state &apos;{0}&apos; can not be used as a store state as it is a running state..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptStoreSpecInfoSuccess">
<summary>
  Looks up a localized string similar to Successfully stored the specification in state &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptStoreSpecTaskClass">
<summary>
  Looks up a localized string similar to Store Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptSuccessfullyCreatedChildSpecAndInvokedTransition">
<summary>
  Looks up a localized string similar to Successfully created child specification &apos;{0}&apos; and invoked the transition &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTaskChangeChildSpecificationStateNotFound">
<summary>
  Looks up a localized string similar to Specification with the name &apos;{0}&apos; could not be found..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTeamCreated">
<summary>
  Looks up a localized string similar to The team &apos;{0}&apos; was successfully created.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTeamDeleted">
<summary>
  Looks up a localized string similar to The team &apos;{0}&apos; was successfully deleted..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTeamExists">
<summary>
  Looks up a localized string similar to Unable to create the team &apos;{0}&apos; as it already exists..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTeamNameBlank">
<summary>
  Looks up a localized string similar to Team name cannot be blank..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTeamNameEmpty">
<summary>
  Looks up a localized string similar to Unable to create the team as the team name cannot be blank..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTeamNotDeleted">
<summary>
  Looks up a localized string similar to The team &apos;{0}&apos; could not be deleted..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTeamProblemCreating">
<summary>
  Looks up a localized string similar to A problem occurred creating the team &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTheConstantDoesntExist">
<summary>
  Looks up a localized string similar to The constant &apos;{0}&apos; does not exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTheMacroDoesntExist">
<summary>
  Looks up a localized string similar to The macro &apos;{0}&apos; does not exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTheTimerMacroDoesntExist">
<summary>
  Looks up a localized string similar to The macro &apos;{0}&apos; does not exist. Timer &apos;{1}&apos; was cancelled..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTransitionNoEnabledForInvoke">
<summary>
  Looks up a localized string similar to Unable to invoke the transition &apos;{0}&apos;, as it is not enabled..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptTransitionRanOnSpecification">
<summary>
  Looks up a localized string similar to The transition &apos;{0}&apos; was successfully ran on specification &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableDeleteFolderInvalidPath">
<summary>
  Looks up a localized string similar to Unable to delete the folder, invalid folder path..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableDeleteFolderTooLong">
<summary>
  Looks up a localized string similar to Unable to delete the folder, path is too long..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToAccessFile">
<summary>
  Looks up a localized string similar to Unable to access file..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopyFileInsufficientPermissions">
<summary>
  Looks up a localized string similar to Unable to copy the file, insufficient permissions..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopyFolderInsufficientPermissions">
<summary>
  Looks up a localized string similar to Unable to copy the folder, insufficient permissions..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopySourceFileFileDoesNotExist">
<summary>
  Looks up a localized string similar to Unable to copy the source file, file does not exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopySourceFileInvalidFilePath">
<summary>
  Looks up a localized string similar to Unable to copy the source file, invalid file path..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopySourceFilePathTooLong">
<summary>
  Looks up a localized string similar to Unable to copy the source file, path is too long..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopySourceFolderFilePathTooLong">
<summary>
  Looks up a localized string similar to Unable to copy the source folder, the path is too long..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopySourceFolderFolderDoesNotExist">
<summary>
  Looks up a localized string similar to Unable to copy the source folder, the folder does not exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopySourceFolderInvalidFilePath">
<summary>
  Looks up a localized string similar to Unable to copy the source folder, invalid file path..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopyToDestinationFileInvalidPath">
<summary>
  Looks up a localized string similar to Unable to copy to destination file, invalid destination path..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopyToDestinationFilePathIsTooLong">
<summary>
  Looks up a localized string similar to Unable to copy to destination file, path is too long..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopyToDestinationFolderFilePathTooLong">
<summary>
  Looks up a localized string similar to Unable to copy to the destination folder, path is too long..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToCopyToDestinationFolderInvalidPath">
<summary>
  Looks up a localized string similar to Unable to copy to destination folder, invalid file path..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToDeleteFileDoesNotExist">
<summary>
  Looks up a localized string similar to Unable to delete the file, file does not exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToDeleteFileInsufficientPermissions">
<summary>
  Looks up a localized string similar to Unable to delete the file, insufficient permissions..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToDeleteFileInvalidFilePath">
<summary>
  Looks up a localized string similar to Unable to delete the file, invalid file path..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToDeleteFilePathTooLong">
<summary>
  Looks up a localized string similar to Unable to delete the file, path is too long..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToDeleteFolderDoesntExist">
<summary>
  Looks up a localized string similar to Unable to delete the folder, folder does not exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToDeleteFolderInsufficientPermissions">
<summary>
  Looks up a localized string similar to Unable to delete the folder, insufficient permissions..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToEncodeFileFileDoesNotExist">
<summary>
  Looks up a localized string similar to Unable to encode file, file does not exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToEncodeFileInsufficientPermissions">
<summary>
  Looks up a localized string similar to Unable to encode the file, insufficient permissions..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToEncodeFileInvalidFilePath">
<summary>
  Looks up a localized string similar to Unable to encode the file, invalid file path..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToEncodeFilePathTooLong">
<summary>
  Looks up a localized string similar to Unable to encode the file, path is too long..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToResolvePath">
<summary>
  Looks up a localized string similar to Unable to resolve path..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToTransitionToRunningState">
<summary>
  Looks up a localized string similar to Unable to run the transition &apos;{0}&apos; on specification &apos;{1}&apos; as the target state is a running state..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToUpdateMembersCanCapture">
<summary>
  Looks up a localized string similar to Unable to update the Members Can Capture property of the team &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnableToUpdateTeamDisplayName">
<summary>
  Looks up a localized string similar to Unable to update the display name of the team &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnauthorizedAccessDetail">
<summary>
  Looks up a localized string similar to Source file: &apos;{0}&apos; Destination file: &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnknownComponentId">
<summary>
  Looks up a localized string similar to Unable to locate a released component with the id &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnknownComponentPath">
<summary>
  Looks up a localized string similar to Unable to find a released component with the path &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnknownComponentTargetPath">
<summary>
  Looks up a localized string similar to Unable to locate a released component with the target path &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUnknownInvokeTransitionError">
<summary>
  Looks up a localized string similar to There was a problem while attempting to invoke the transition &apos;{0}&apos;. {1}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUpdatedGroupTable">
<summary>
  Looks up a localized string similar to The data has been updated in the table &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUpdatedMembersCanCapture">
<summary>
  Looks up a localized string similar to Successfully updated whether members of the team &apos;{0}&apos; can capture..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUpdatedMembersCanEditGroupSecurity">
<summary>
  Looks up a localized string similar to Successfully updated whether members of the team &apos;{0}&apos; can edit group security..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUpdatedMembersCanEditSpecs">
<summary>
  Looks up a localized string similar to Successfully updated whether members of the team &apos;{0}&apos; can edit all specifications..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUpdatedTeamDisplayName">
<summary>
  Looks up a localized string similar to The display name for the team &apos;{0}&apos; was updated to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserAddedToTeam">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; has been added to the team &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserAddSuccess">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; was successfully created and added to the team &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserAlreadyDisabled">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; is already disabled.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserAlreadyEnabled">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; is already enabled.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserCreateSuccess">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; was successfully created.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserDeleted">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; has been deleted.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserDetailAccessFail">
<summary>
  Looks up a localized string similar to The details for &apos;{0}&apos; cannot be accessed.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserDisabled">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; has been disabled.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserEnabeld">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; has been enabled.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserInTeam">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; is already in the team &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserIsNotTeamLeader">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; is already a normal user.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserIsTeamLeader">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; is already a team leader.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserNameExists">
<summary>
  Looks up a localized string similar to The username &apos;{0}&apos; already exists.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserNotCreated">
<summary>
  Looks up a localized string similar to The User has not been created.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserNotDeleted">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; has not been deleted.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserNotInTeam">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; does not belong to the team &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserNotRemovedFromTeam">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; was not removed from the team &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserRemovedFromTeam">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; was removed from the team &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserSetAsNormalUser">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; has been set to normal user.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserSetAsTeamLeader">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; has been set as team leader.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserTeamAddFail">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; could not be added to the team &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserUpdateFail">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; could not be updated.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RptUserUpdateSuccess">
<summary>
  Looks up a localized string similar to The user &apos;{0}&apos; has been sucessfully updated.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Run3DPreviewControlDoesNotExist">
<summary>
  Looks up a localized string similar to The control &apos;{0}&apos; does not exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Run3DPreviewControlIsNotAPreviewControl">
<summary>
  Looks up a localized string similar to The control &apos;{0}&apos; is not a 3D Preview control..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Run3DPreviewControlNameNotSpecified">
<summary>
  Looks up a localized string similar to The control name is not specified..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Run3DPreviewControlNamePropertyDescription">
<summary>
  Looks up a localized string similar to Name of the 3D Preview control..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Run3DPreviewControlNamePropertyName">
<summary>
  Looks up a localized string similar to Preview Control Name..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Run3DPreviewFail">
<summary>
  Looks up a localized string similar to The 3D Preview could not be created. {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.Run3DPreviewSuccess">
<summary>
  Looks up a localized string similar to The 3D Preview created the file. {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.RunMacroInHostSpecificationTaskMacroNamePropertyDescription">
<summary>
  Looks up a localized string similar to The name of the macro to execute in the host specification (when this specifiation is being hosted in a specification host control)..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SendHttpRequestResponseBodyOutputDesc">
<summary>
  Looks up a localized string similar to The body of the response..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SendHttpRequestResponseHeadersOutputDesc">
<summary>
  Looks up a localized string similar to The headers of the response..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SendTextClickatell">
<summary>
  Looks up a localized string similar to Send Text Message (Clickatell).
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SetSpecificationHostControlTaskChildSpecListNameDescription">
<summary>
  Looks up a localized string similar to The name of the child specification list that contains the specification to host. This is only required if you wish to host a child specification..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SetSpecificationHostControlTaskProjectNameDescription">
<summary>
  Looks up a localized string similar to If you wish to host a new specification, this is the name of the project to create a specification from..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SetSpecificationHostControlTaskSpecHostNameDescription">
<summary>
  Looks up a localized string similar to The name of the specification host control to host the specification in..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SetSpecificationHostControlTaskSpecIdDescription">
<summary>
  Looks up a localized string similar to The id of the specification that you wish to host. This can be a direct child specification or a root specification. If this is set then &apos;{0}&apos; does not have to be set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SetSpecificationHostControlTaskSpecNameDescription">
<summary>
  Looks up a localized string similar to The name of the specification that you wish to host. This can be a direct child specification or a root specification. If this is set then &apos;{0}&apos; does not have to be set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SetSpecificationHostControlTaskTransitionNameDescription">
<summary>
  Looks up a localized string similar to The name of the transition that you wish to use to transition the target specification to a running state..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SkipToFormFormNamePropertyDescription">
<summary>
  Looks up a localized string similar to The name of the form to skip to..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SkipToFormFormNamePropertyName">
<summary>
  Looks up a localized string similar to Form Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SkipToFormTaskClassName">
<summary>
  Looks up a localized string similar to Skip to Form Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SkipToFormUnableToNavigateToFormDetail">
<summary>
  Looks up a localized string similar to Could not navigate to the form &apos;{0}&apos;. There may be outstanding tasks or the form doesn&apos;t exist..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SourceDesc">
<summary>
  Looks up a localized string similar to The path to source file..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SourceFolderDesc">
<summary>
  Looks up a localized string similar to The path to the source directory..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.SpecificationHostNamePropertyDescription">
<summary>
  Looks up a localized string similar to The name of the specification host control to use to get the specification to invoke the macro on..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.StoreSpecStateNamePropDescription">
<summary>
  Looks up a localized string similar to The name of the state to store the specification in. If nothing is specified then the previous state will be used..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.StoreSpecStateNamePropName">
<summary>
  Looks up a localized string similar to State Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.StoreSpecTaskReportConinued">
<summary>
  Looks up a localized string similar to Continued From {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskAddUserClass">
<summary>
  Looks up a localized string similar to Add New User.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskAddUserToTeamClass">
<summary>
  Looks up a localized string similar to Add User To Team.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskArchiveSpecAlreadyArchived">
<summary>
  Looks up a localized string similar to The specification is already archived..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskArchiveSpecAlreadyUnarchived">
<summary>
  Looks up a localized string similar to The specification is already not archived..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskArchiveSpecClass">
<summary>
  Looks up a localized string similar to Archive Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskArchiveSpecFailed">
<summary>
  Looks up a localized string similar to Failed to archive this specification as it is not registered yet..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskArchiveSpecToFalse">
<summary>
  Looks up a localized string similar to Specification has been removed from archive..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskArchiveSpecToTrue">
<summary>
  Looks up a localized string similar to Specification has been archived..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskCategory3D">
<summary>
  Looks up a localized string similar to 3D.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskCategoryData">
<summary>
  Looks up a localized string similar to Data.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskCategoryFileSystem">
<summary>
  Looks up a localized string similar to File System.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskCategorySecurity">
<summary>
  Looks up a localized string similar to Security.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskCategoryServices">
<summary>
  Looks up a localized string similar to Services.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskCategorySpecificationHosting">
<summary>
  Looks up a localized string similar to Specification Hosting.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskCategorySpecifications">
<summary>
  Looks up a localized string similar to Specifications.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskChangeChildSpecStateClass">
<summary>
  Looks up a localized string similar to Change Child Specification State Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskClassInvokeSpecificationTransition">
<summary>
  Looks up a localized string similar to Invoke Specification Transition Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskClassStartChildSpecification">
<summary>
  Looks up a localized string similar to Start Child Specification Task.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDeleteUserClass">
<summary>
  Looks up a localized string similar to Delete User.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispInvokeTransitionExistingSpec">
<summary>
  Looks up a localized string similar to Invoke Transition on Existing Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameAddNewTeam">
<summary>
  Looks up a localized string similar to Add New Team.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameAddNewUser">
<summary>
  Looks up a localized string similar to Add New User.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameAddUserToTeam">
<summary>
  Looks up a localized string similar to Add User To Team.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameArchiveSpecification">
<summary>
  Looks up a localized string similar to Archive Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameCancelSpecification">
<summary>
  Looks up a localized string similar to Cancel Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameCancelSpecificationTimerTask">
<summary>
  Looks up a localized string similar to Cancel Specification Timer.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameChangeChildSpecificationState">
<summary>
  Looks up a localized string similar to Change Child Specification State.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameChangeConstantValue">
<summary>
  Looks up a localized string similar to Drive Constant Value.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameChangeControlValue">
<summary>
  Looks up a localized string similar to Drive Control Value.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameClearDeferredFlagForComponents">
<summary>
  Looks up a localized string similar to Clear Deferred Flag For Drawings.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameClearSpecificationComponentsDeferredFlagTask">
<summary>
  Looks up a localized string similar to Clear Deferred Flag For Specification Drawings.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameCompleteChildSpecification">
<summary>
  Looks up a localized string similar to Complete Child Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameCopyClosedChildSpecification">
<summary>
  Looks up a localized string similar to Copy Closed Child Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameCopyClosedSpecification">
<summary>
  Looks up a localized string similar to Copy Closed Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameCopySpecification">
<summary>
  Looks up a localized string similar to Copy Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameCreateClosedChildSpecification">
<summary>
  Looks up a localized string similar to Create Closed Child Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameDelayMacroTimeout">
<summary>
  Looks up a localized string similar to Delay Macro Timeout.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameDeleteSpecification">
<summary>
  Looks up a localized string similar to Delete Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameDeleteTeam">
<summary>
  Looks up a localized string similar to Delete Team.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameDeleteUser">
<summary>
  Looks up a localized string similar to Delete User.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameDesignMasterMacroLoopTask">
<summary>
  Looks up a localized string similar to Run Macro in a Loop.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameDesignMasterMacroTask">
<summary>
  Looks up a localized string similar to Run Macro.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameEvaluateRuleValue">
<summary>
  Looks up a localized string similar to Evaluate Rule Value.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameExportSpecificationData">
<summary>
  Looks up a localized string similar to Export Specification Data.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameGetConstantValue">
<summary>
  Looks up a localized string similar to Get Constant Value.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameGetControlValue">
<summary>
  Looks up a localized string similar to Get Control Value.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameIncrementRevisionNumber">
<summary>
  Looks up a localized string similar to Increment Revision Number.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameInvokeChildSpecificationOperation">
<summary>
  Looks up a localized string similar to Invoke Child Specification Operation.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameInvokeChildSpecificationTransition">
<summary>
  Looks up a localized string similar to Invoke Child Specification Transition.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameInvokeOperationExistingSpec">
<summary>
  Looks up a localized string similar to Invoke Operation On Existing Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameInvokeSpecificationOperation">
<summary>
  Looks up a localized string similar to Invoke Specification Operation.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameInvokeSpecificationTransition">
<summary>
  Looks up a localized string similar to Invoke Specification Transition.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameNavigateBackward">
<summary>
  Looks up a localized string similar to Navigate Backward.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameNavigateForward">
<summary>
  Looks up a localized string similar to Navigate Forward.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRealTimeReleaseModels">
<summary>
  Looks up a localized string similar to Enable OnDemand.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRefreshTables">
<summary>
  Looks up a localized string similar to Refresh Table(s).
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRegenerateAndDeleteComponent">
<summary>
  Looks up a localized string similar to Regenerate and Delete Component.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRegenerateAndDeleteSpecComps">
<summary>
  Looks up a localized string similar to Regenerate and Delete Specification Components.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRegenerateAndOverwriteComponent">
<summary>
  Looks up a localized string similar to Regenerate and Overwrite Component.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRegenerateAndOverwriteSpecificationComponentsTask">
<summary>
  Looks up a localized string similar to Regenerate and Overwrite Specification Components.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameReleaseDocuments">
<summary>
  Looks up a localized string similar to Release Document(s).
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameReleaseEmails">
<summary>
  Looks up a localized string similar to Release Email(s).
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameReleaseModels">
<summary>
  Looks up a localized string similar to Release Model(s).
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRemoveUserFromTeam">
<summary>
  Looks up a localized string similar to Remove User From Team.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRun3DPreview">
<summary>
  Looks up a localized string similar to Run 3D Preview.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRunMacroInHostedSpecificationTask">
<summary>
  Looks up a localized string similar to Run Macro in Hosted Specification .
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameRunMacroInHostSpecificationTask">
<summary>
  Looks up a localized string similar to Run Macro in Host Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameSendHttpRequest">
<summary>
  Looks up a localized string similar to Send HTTP Request.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameSetOwner">
<summary>
  Looks up a localized string similar to Set Specification Owner.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameSetSpecificationHostControlTask">
<summary>
  Looks up a localized string similar to Set Specification Host Control.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameSetUserEnable">
<summary>
  Looks up a localized string similar to Enable/Disable User.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameSkipRemainingTasks">
<summary>
  Looks up a localized string similar to Skip Remaining Tasks.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameSkipToForm">
<summary>
  Looks up a localized string similar to Skip to Form.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameStartChildSpecification">
<summary>
  Looks up a localized string similar to Start Child Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameStartSpecificationTimerTask">
<summary>
  Looks up a localized string similar to Start Specification Timer.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameStoreSpecificationTask">
<summary>
  Looks up a localized string similar to Store Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateGroupTableUsingArray">
<summary>
  Looks up a localized string similar to Update Group Table Using Array.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateMembersCanCapture">
<summary>
  Looks up a localized string similar to Update Team Members Can Capture.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateMembersCanEditGroupSecurity">
<summary>
  Looks up a localized string similar to Update Team Members Can Edit Group Security.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateMembersCanEditSpecs">
<summary>
  Looks up a localized string similar to Update Team Members Can Edit All Specifications.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateTeamDisplayName">
<summary>
  Looks up a localized string similar to Update Team Display Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateTeamLeaderStatus">
<summary>
  Looks up a localized string similar to Switch Team Leader Status.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateTeamProjectPermissions">
<summary>
  Looks up a localized string similar to Update the Team/Project Permissions.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateUserDisplayName">
<summary>
  Looks up a localized string similar to Update User Display Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateUserEmailAddress">
<summary>
  Looks up a localized string similar to Update User Email Address.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskDispNameUpdateUserPassword">
<summary>
  Looks up a localized string similar to Update User Password.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskRegenerateAndDeleteComponentTaskClass">
<summary>
  Looks up a localized string similar to Regenerate And Delete Component.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskRegenerateAndDeleteSpecCompsClass">
<summary>
  Looks up a localized string similar to Regenerate And Delete Specification Components.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskRegenerateComponentTaskClass">
<summary>
  Looks up a localized string similar to Regenerate And Overwrite Component.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskRegenerateSpecComponentsAndOverwriteClass">
<summary>
  Looks up a localized string similar to Regenerate And Overwrite Specification Components.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskRemoveUserFromTeamClass">
<summary>
  Looks up a localized string similar to Remove User From Team.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestCancelled">
<summary>
  Looks up a localized string similar to The request was cancelled.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestFailed">
<summary>
  Looks up a localized string similar to The HTTP request failed. {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestFormatHeader">
<summary>
  Looks up a localized string similar to {0}: {1}{2}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestFormatRequest">
<summary>
  Looks up a localized string similar to {0} {1}{2}{3}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestHeaderMissingColon">
<summary>
  Looks up a localized string similar to A HTTP header is missing its colon separator. &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestHeaderNameEmpty">
<summary>
  Looks up a localized string similar to A HTTP header name was empty. &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestHeaderValueEmpty">
<summary>
  Looks up a localized string similar to A HTTP header value was empty. &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestInvalidProtocol">
<summary>
  Looks up a localized string similar to The supplied URL protocol is missing or invalid. {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestRestrictedHeaderGeneric">
<summary>
  Looks up a localized string similar to The &apos;{0}&apos; header is restricted and cannot be set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestRestrictedHeaderGenericDetail">
<summary>
  Looks up a localized string similar to The value of the &apos;{0}&apos; header cannot be changed and will be sent with its default value..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestSending">
<summary>
  Looks up a localized string similar to Sending HTTP Request.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestSetBodyFailed">
<summary>
  Looks up a localized string similar to The HTTP Request body could not be set..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestSuccessful">
<summary>
  Looks up a localized string similar to HTTP Request successfully processed..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestUnsupportedVerb">
<summary>
  Looks up a localized string similar to The HTTP verb is unsupported or invalid..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestURLEmpty">
<summary>
  Looks up a localized string similar to The URL property must not be empty..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestUserAgentHeader">
<summary>
  Looks up a localized string similar to User-Agent: {0}{1}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSendHTTPRequestUserAgentValue">
<summary>
  Looks up a localized string similar to DriveWorks Administrator {0}.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSetOwnerClass">
<summary>
  Looks up a localized string similar to Set Owner.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskSetUserEnabledClass">
<summary>
  Looks up a localized string similar to Sets User Enabled Status.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskUpdateDisplayNameClass">
<summary>
  Looks up a localized string similar to Update Display Name.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskUpdateEmailAddressClass">
<summary>
  Looks up a localized string similar to Update Email Address.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskUpdatePasswordClass">
<summary>
  Looks up a localized string similar to Update Password.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TaskUpdateTeamLeaderStatusClass">
<summary>
  Looks up a localized string similar to Updates Team Leader Status.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TeamLeaderDescription">
<summary>
  Looks up a localized string similar to Is the User a Team Leader.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TeamLeaderStatusDescription">
<summary>
  Looks up a localized string similar to True/False result required for user enabled status.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.TeamNameDescription">
<summary>
  Looks up a localized string similar to Name of the team to add the user to.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.UserEnableDescription">
<summary>
  Looks up a localized string similar to Enable the User.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.TasksLocalizedResources.UserNameDescription">
<summary>
  Looks up a localized string similar to Name of the user.
</summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.RegenerateAndOverwriteSpecificationComponentsTask">
 <summary>
 A specification-flow task capable of updating the Force-Overwrite flag and marking all released components associated with a specification for regeneration.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RegenerateAndOverwriteSpecificationComponentsTask.SpecificationId">
 <summary>
 Gets/sets the specification id of the specification whose components to mark for regeneration and have their overwrite flag set.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamDisplayNameTask">
 <summary>
 A specification flow task which updates the display name of a team.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamMembersCanCaptureTask">
 <summary>
 A specification flow task which updates the Members Can Capture property of a team.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamMembersCanEditAllSpecificationsTask">
 <summary>
 A specification flow task which updates the Members Can Edit All Specifications property of a team.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamMembersCanEditGroupSecurityTask">
 <summary>
 A specification flow task which updates the Members Can Edit Group Security property of a team.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateGroupTableUsingArrayTask.ArrayValue">
 <summary>
 Gets or sets the table array value for editing the table
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateGroupTableUsingArrayTask.TableName">
 <summary>
 Gets or sets the table name of the table to edit
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateGroupTableUsingArrayTask.ControlColumnNames">
 <summary>
 Gets or sets the control column names
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.AddUserTask">
 <summary>
 A specification-flow task capable of adding a new user
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.UserName">
 <summary>
 Gets or sets the username for the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.UserEmailAddress">
 <summary>
 Gets or Sets the email address for the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.UserDisplayName">
 <summary>
 Gets or sets the display name for the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.IsTeamLeader">
 <summary>
 Gets or sets the Team Leader status for the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.UserPassword">
 <summary>
 Gets or sets the users password
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.IsEnabled">
 <summary>
 Gets or sets the enabled status for the user
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.TeamName">
 <summary>
 gets or sets the team name for the user
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.AddUserToTeamTask">
 <summary>
 A specification-flow task capable of adding a user to a team
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.AddUserToTeamTask.UserName">
 <summary>
 Gets or sets the users username
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.AddUserToTeamTask.TeamName">
 <summary>
 Gets or sets the Team Name
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.CancelSpecificationTask">
 <summary>
 A specification-flow task capable of cancelling the current specification.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ClickatellTask">
 <summary>
 Sends a text message using the Clickatell service.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CreateClosedChildSpecificationTask.CreatedSpecificationId">
 <summary>
 Gets the output that will be fulfilled with the create specification's id
 after this task has executed.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CreateClosedChildSpecificationTask.ChildSpecificationListNameProperty">
 <summary>
 Gets the property that controls the name of the child specification list to create the child specification on.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CreateClosedChildSpecificationTask.ProjectNameProperty">
 <summary>
 Gets the property that controls the name of the project to create on the specified child specification list.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CreateClosedChildSpecificationTask.TransitionNameProperty">
 <summary>
 Gets the property that controls the name of the transition to invoke on the created child specification list.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DelayMacroTimeoutTask">
 <summary>
 Provides a task that when executed will set the specification macro last notification time (for long running macro/task).
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DeleteUserTask">
 <summary>
 A specification-flow task capable of deleting a user
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteUserTask.UserName">
 <summary>
 Gets or sets the username of the user to delete
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.RefreshTableTask">
 <summary>
 A specification flow task that is capable of refreshing tables.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RefreshTableTask.TableName">
 <summary>
 Gets/sets the flow property that is in control of the name(s) of the table(s) to refresh.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.CopyFileTask">
 <summary>
 Provides a task which can copy or move a single file from one location to another.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyFileTask.SourceFile">
 <summary>
 Gets/sets the path to the file to be copied or moved.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyFileTask.DestinationFile">
 <summary>
 Gets/sets the path to which to copy or move the file.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyFileTask.Move">
 <summary>
 Gets/sets whether to move the file (TRUE) or copy it (FALSE).
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.CopyFileTask.Overwrite">
 <summary>
 Gets/sets whether to overwrite the destination file if it already exists.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DeleteFileTask">
 <summary>
 Provides a task which can delete a file.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteFileTask.Path">
 <summary>
 Gets/sets the path to the file to delete.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DeleteFolderTask">
 <summary>
 Provides a task which can delete a directory and optionally its contents.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteFolderTask.Path">
 <summary>
 Gets/sets the path to the directory to delete.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DeleteFolderTask.Recursive">
 <summary>
 Gets/sets whether to delete the contents of the directory.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.GetConstantValueTask">
 <summary>
 A specification flow task that is capable of copying one constant value to another.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.GetConstantValueTask.TargetConstantName">
 <summary>
 Gets/sets the flow property that is in control of the constant to store the control value in.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.GetConstantValueTask.SourceConstantName">
 <summary>
 Gets/sets the flow property that is the name of the control to copy the value from.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DesignMasterMacroLoopTask">
 <summary>
 A specification-flow task capable of running a macro in a design master in a loop during a specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroLoopTask.MacroName">
 <summary>
 Gets/sets the name of the macro to run.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroLoopTask.MacroArgument">
 <summary>
 Gets/sets the optional argument to pass to the macro.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroLoopTask.Defer">
 <summary>
 Gets/sets whether the macro execution should be deferred.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DriveControlValueTask">
 <summary>
 A specification-flow task capable of changing the value of a control.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DriveControlValueTask.ControlValue">
 <summary>
 Gets/sets the flow property that is in control of the new value to drive into the control.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DriveControlValueTask.ControlName">
 <summary>
 Gets/sets the flow property that is the name of the control to drive the value into.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DriveControlValueTask.UseLocalValueFormat">
 <summary>
 Gets/sets whether the control value should be converted using the rules for the current culture
 before driving it into the control.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.GetControlValueTask">
 <summary>
 A specification-flow task capable of copying the value of a control and storing it in a constant.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.GetControlValueTask.TargetConstantName">
 <summary>
 Gets/sets the flow property that is in control of the constant to store the control value in.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.GetControlValueTask.SourceControlName">
 <summary>
 Gets/sets the flow property that is the name of the control to copy the value from.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.EvaluateRuleValueTask">
 <summary>
 A specification flow task that is capable of evaluating a rule then storing the result in a constant.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.EvaluateRuleValueTask.RuleText">
 <summary>
 Gets/sets the rule that will be evaluated once, then have its result evaluated again. 
 The final result of which is stored in the target constant, specified by <see cref="P:DriveWorks.Specification.StandardTasks.EvaluateRuleValueTask.ConstantName"/>.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.EvaluateRuleValueTask.ConstantName">
 <summary>
 Gets/sets the name of the constant to store the result in.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask">
 <summary>
 A specification flow task that is capable of invoking an operation on a child specification. 
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask.ChildSpecificationListNameProperty">
 <summary>
 Gets the flow property responsible for the name of the child specification list to get the child specification from.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask.ChildSpecNameProperty">
 <summary>
 Gets the flow property responsible for the name of the child specification to invoke the operation on.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask.ChildSpecIndexProperty">
 <summary>
 Gets the flow property responsible for the index of the child specification to invoke the operation on.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask.OperationNameProperty">
 <summary>
 Gets the flow property responsible for the name of the operation to invoke on the child specification.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask">
 <summary>
 A specification-flow task capable of releasing one or more emails.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.ReleasedEmails">
 <summary>
 The outputs that get fulfilled with a list of the names of the 
 emails that were successfully released when this task was run.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.IsInEmailsTask">
 <summary>
 Determines whether the emails task is currently running.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.Emails">
 <summary>
 Gets/sets the identifiers of the emails to release, where "*" is a special identifier
 meaning all emails.
 </summary>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Overridden to indicate that a running specification is required by the task to execute.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>True</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.Execute(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Overridden to implement the logic required to release 
 one or more emails.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DriveConstantValueTask">
 <summary>
 A specification-flow task capable of changing the value of constant.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DriveConstantValueTask.ConstantValueNative">
 <summary>
 Gets the native flow property that is in control of the new value to drive into the constant.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DriveConstantValueTask.ConstantValue">
 <summary>
 Gets/sets the flow property that is in control of the new value to drive into the constant.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DriveConstantValueTask.ConstantName">
 <summary>
 Gets/sets the flow property that is control of the name of the constant to drive the value into.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.CompleteChildSpecificationTask">
 <summary>
 A specification-flow task capable of notifying the parent context to read variable values from this specification.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DesignMasterMacroTask">
 <summary>
 A specification-flow task capable of running a macro in a design master during a specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroTask.MacroName">
 <summary>
 Gets/sets the name of the macro to run.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroTask.MacroArgument">
 <summary>
 Gets/sets the optional argument to pass to the macro.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroTask.Defer">
 <summary>
 Gets/sets whether the macro execution should be deferred.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask">
 <summary>
 A specification-flow task capable of releasing one or more models for realtime.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask.Models">
 <summary>
 Gets/sets the identifiers of the models to release, where "*" is a special identifier
 meaning all models.
 </summary>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Overridden to indicate that a running specification is required by the task to execute.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>True</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask.Execute(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Overridden to implement the logic required to release 
 one or more models for realtime.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask.GetResults(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Releases the configured models and returns the results.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>The results of releasing the components.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ICopySpecificationHostService">
 <summary>
 Provides a contract for hosts which support the copying of a specification using the 
 <see cref="T:DriveWorks.Specification.StandardTasks.CopySpecificationTask" /> task.
 </summary>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.ICopySpecificationHostService.RequestCopy(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Requests that the host copies the specification represented by the given context.
 </summary>
 <param name="ctx">A specification context for the specification to copy.</param>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.ICopySpecificationHostService.RequestCopyWithId(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Requests that the host copies the specification represented by the given context.
 </summary>
 <param name="ctx">A specification context for the specification to copy.</param>
 <returns>The id of the created specification.</returns>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.IncrementRevisionNumberTask">
 <summary>
 A specification-flow task which increments the specification's revision number.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.RemoveUserFromTeamTask">
 <summary>
 A specification-flow task capable of removing a user from a team
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RemoveUserFromTeamTask.UserName">
 <summary>
 Gets or sets the username of the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.RemoveUserFromTeamTask.TeamName">
 <summary>
 Gets or sets the team name
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.SkipToFormTask">
 <summary>
 A specification flow task that is capable of skipping to a form. 
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SkipToFormTask.FormName">
 <summary>
 Gets/sets the name of the form to be skipped to.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SkipToFormTask.Defer">
 <summary>
 Gets/sets whether the macro execution should be deferred.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamLeaderStatusTask">
 <summary>
 A specification-flow task capable of enabling / disabling a users Team Leader status
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateTeamLeaderStatusTask.UserName">
 <summary>
 Gets or sets the username of the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateTeamLeaderStatusTask.IsTeamLeader">
 <summary>
 Gets or sets the users team leader status
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.SetUserEnabledTask">
 <summary>
 A specification-flow task capable of setting the enabled status of a user
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SetUserEnabledTask.UserName">
 <summary>
 Gets or sets the username of the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.SetUserEnabledTask.IsEnabled">
 <summary>
 Gets or sets whether or not the user is enabled
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask">
 <summary>
 A specification flow task that is capable of invoking a transition on a child specification. 
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask.ChildSpecificationListNameProperty">
 <summary>
 Gets the flow property responsible for the name of the child specification list to get the child specification from.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask.ChildSpecNameProperty">
 <summary>
 Gets the flow property responsible for the name of the child specification to invoke the transition on.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask.ChildSpecIndexProperty">
 <summary>
 Gets the flow property responsible for the index of the child specification to invoke the transition on.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask.TransitionNameProperty">
 <summary>
 Gets the flow property responsible for the name of the transition to invoke on the child specification.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.UpdateUserDisplayNameTask">
 <summary>
 A specification-flow task capable of updating the users display name
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateUserDisplayNameTask.UserName">
 <summary>
 Gets or sets the username of the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateUserDisplayNameTask.DisplayName">
 <summary>
 Gets or sets the display name of the user
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.UpdateUserEmailAddressTask">
 <summary>
 A specification-flow task capable of updating a users email address
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateUserEmailAddressTask.UserName">
 <summary>
 Gets or sets the username of the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateUserEmailAddressTask.EmailAddress">
 <summary>
 Gets or sets the email address of a user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateUserPasswordTask.UserName">
 <summary>
 Gets or sets the username for the user
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.UpdateUserPasswordTask.Password">
 <summary>
 Sets the password for the user
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ReleaseModelsTask">
 <summary>
 A specification-flow task capable of releasing one or more models.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.Models">
 <summary>
 Gets/sets the identifiers of the models to release, where "*" is a special identifier.
 meaning all models.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.Overwrite">
 <summary>
 Gets/sets whether the components released by this task should overwrite existing files regardless of the group settings.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.DeferredDrawings">
 <summary>
 Gets/sets the identifiers of the drawings to flag for generation at a later stage, where "*" is a special identifier.
 </summary>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Overridden to indicate that a running specification is required by the task to execute.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>True</returns>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.Execute(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Overridden to implement the logic required to release 
 one or more documents.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ArchiveSpecificationTask">
 <summary>
 A specification-flow task capable of toggling the archived state of a specification.
 </summary>
 <devdoc>
 The icon for this task is shared among all archiving tasks and the is archived condition.
 </devdoc>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ArchiveSpecificationTask.Action">
 <summary>
 Gets or sets the action to be performed by the archiving task.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.CopySpecificationTask">
 <summary>
 A specification-flow task capable of copying a specification.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.DeleteSpecificationTask">
 <summary>
 A specification-flow task capable of deleting a specification.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ChangeChildSpecificationStateTask">
 <summary>
 A specification-flow task capable of changing the active state for a given child specification.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask">
 <summary>
 A specification-flow task capable of releasing one or more documents.
 </summary>
</member>
<member name="F:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask.ReleasedDocuments">
 <summary>
 Gets the output that will be fulfilled with the names of all released documents
 after this task executes.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask.Documents">
 <summary>
 Gets/sets the identifiers of the documents to release, where "*" is a special identifier
 meaning all documents.
 </summary>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Overridden to indicate that a running specification is required by the task to execute.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>True</returns>
</member>
<member name="M:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask.Execute(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Overridden to implement the logic required to release 
 one or more documents.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.ApplicationTypeCondition">
 <summary>
 A specification-flow condition which checks the type of running application.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ApplicationTypeCondition.Type">
 <summary>
 Gets the type of application for which to check.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.IsArchivedCondition">
 <summary>
 A specification-flow condition which determines whether the active specification is archived.
 </summary>
 <remarks></remarks>
 <devdoc>
 The icon for this condition is shared with the icon for the archiving tasks.
 </devdoc>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.CanEditCompletedSpecificationsCondition">
 <summary>
 A specification-flow condition which determines whether the ReleaseToAutoPilot is enabled. 
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.CheckValueCondition">
 <summary>
 A specification-flow condition which determines whether the value entered is TRUE/YES/1.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.CheckValueCondition.Value">
 <summary>
 Gets the value to check for.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDescriptionCheckValue">
<summary>
  Looks up a localized string similar to Checks any value in the project being specified..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameApplicationTypeCondition">
<summary>
  Looks up a localized string similar to Application Type.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameCanEditCompletedSpecificationsCondition">
<summary>
  Looks up a localized string similar to Setting: Can Edit Completed Specifications.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameCheckValueCondition">
<summary>
  Looks up a localized string similar to Check Value.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameDocumentGenerationBehaviorCondition">
<summary>
  Looks up a localized string similar to Setting: Document Generation Behavior.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameDriveWorksSettingCondition">
<summary>
  Looks up a localized string similar to DriveWorks Setting.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameIsArchivedCondition">
<summary>
  Looks up a localized string similar to Is Archived.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameIsCancellingCondition">
<summary>
  Looks up a localized string similar to Is Specification Cancelling.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameIsChildSpecificationCondition">
<summary>
  Looks up a localized string similar to Is Child Specification.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameReleaseToAutoPilotCondition">
<summary>
  Looks up a localized string similar to Setting: Release to Autopilot.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameSpecificationCompleteCondition">
<summary>
  Looks up a localized string similar to Specification Complete.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.ConditionDispNameSpecificationTypeCondition">
<summary>
  Looks up a localized string similar to Specification Type.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.PropBoolSettingValueDesc">
<summary>
  Looks up a localized string similar to TRUE to check if the setting is enabled, FALSE to check if it is not enabled..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.PropCatBehavior">
<summary>
  Looks up a localized string similar to Behavior.
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.PropCheckValueDescription">
<summary>
  Looks up a localized string similar to The value to check for must evaluate to either &apos;TRUE&apos;, &apos;YES&apos; or &apos;1&apos; for the condition to pass..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.PropDocGenBehaviorDesc">
<summary>
  Looks up a localized string similar to One of &apos;Finish&apos;, &apos;Release&apos;, or &apos;Both&apos;. Multiple options can be combined using a pipe bar &apos;|&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.PropertyNegatedDescription">
<summary>
  Looks up a localized string similar to Determines if the meaning of the condition should be reversed, so if it returns FALSE, it will be treated as TRUE instead..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.PropNameAppType">
<summary>
  Looks up a localized string similar to The type of the application for which to check, e.g. &apos;DriveWorks Autopilot&apos;, &apos;DriveWorks Administrator&apos;. Multiple  values can be combined using pipe bars &apos;|&apos;..
</summary>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.ConditionsLocalizedResources.PropNameSpecType">
<summary>
  Looks up a localized string similar to The type of the specification to check for, one of &apos;New&apos;, &apos;Existing&apos;, or &apos;Copied&apos;. Multiple  values can be combined using pipe bars &apos;|&apos;..
</summary>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.IsCancellingCondition">
 <summary>
 A specification-flow condition which checks whether a specification is being cancelled.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.DocumentGenerationBehaviorCondition">
 <summary>
 A specification-flow condition which checks a specification setting.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.IsChildSpecificationCondition">
 <summary>
 A specification-flow condition which checks whether a running specification is a child specification.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.ReleaseToAutoPilotCondition">
 <summary>
 A specification-flow condition which determines whether the ReleaseToAutoPilot is enabled. 
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.SpecificationTypeCondition">
 <summary>
 A specification-flow condition which checks the type of specification.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StandardConditions.SpecificationTypeCondition.Type">
 <summary>
 Gets the type of specification to check for.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StandardConditions.SpecificationCompleteCondition">
 <summary>
 A specification-flow condition which checks whether a running specification is complete.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.IDialogOwner">
 <summary>
 Used with <see cref="T:DriveWorks.Specification.SpecificationForm"/> as an owner/context object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.IDialogOwner.OnDialogClosing(DriveWorks.Specification.SpecificationForm,DriveWorks.Specification.SpecificationDialogCloseOptions)">
 <summary>
 Called when the dialog is closing down.
 </summary>
 <param name="closingDialog">The dialog that is closing.</param>
 <param name="result">The result of the dialog.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.IDialogOwner.Options">
 <summary>
 Gets the closing options that the form will have to close.
 </summary>
</member>
<member name="P:DriveWorks.Specification.IDialogOwner.Control">
 <summary>
 Gets the control that called to launch the dialog.
 </summary>
</member>
<member name="P:DriveWorks.Specification.IDialogOwner.IsVisible">
 <summary>
 Determines whether or not this dialog will be shown.
 </summary>
</member>
<member name="P:DriveWorks.Specification.IDialogOwner.IsTaskListEnabled">
 <summary>
 Determines whether or not the task list for this dialog is enabled.
 </summary>
</member>
<member name="T:DriveWorks.Specification.AvailableOperation">
 <summary>
 Provides information about the runtime availability of an operation.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.AvailableOperation.ConditionResult">
 <summary>
 Gets the result of evaluating the operation's conditions.
 </summary>
</member>
<member name="P:DriveWorks.Specification.AvailableOperation.Operation">
 <summary>
 Gets the operation.
 </summary>
</member>
<member name="P:DriveWorks.Specification.AvailableOperation.RequiresSingleContext">
 <summary>
 Gets whether only a single specification must be selected in order
 for the operation to be executed.
 </summary>
</member>
<member name="T:DriveWorks.Specification.AvailableTransition">
 <summary>
 Provides information about the runtime availability of a transition.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.AvailableTransition.ConditionResult">
 <summary>
 Gets the result of evaluating the transition's conditions.
 </summary>
</member>
<member name="P:DriveWorks.Specification.AvailableTransition.Transition">
 <summary>
 Gets the transition.
 </summary>
</member>
<member name="T:DriveWorks.Specification.ConditionAttribute">
 <summary>
 Provides descriptive information about a condition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.ConditionAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.ConditionAttribute" /> class.
 </summary>
 <param name="displayName">The localized display name of the condition, or a resource string which identifies the string to use.</param>
 <param name="image">A resource string which identifies the image to use.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.ConditionAttribute.DisplayName">
 <summary>
 Gets a localized display name of the condition, or a resource string which identifies the string to use.
 </summary>
</member>
<member name="P:DriveWorks.Specification.ConditionAttribute.Image">
 <summary>
 Gets a resource string which identifies the image to use.
 </summary>
</member>
<member name="T:DriveWorks.Specification.ConditionFailBehavior">
 <summary>
 Specifies the behavior of an item to which a condition is attached when the condition
 evaluates to false.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.ConditionFailBehavior.Disable">
 <summary>
 Disables the UI for the item to which the condition is attached.
 </summary>
</member>
<member name="F:DriveWorks.Specification.ConditionFailBehavior.Hide">
 <summary>
 Hides the UI for the item to which the condition is attached.
 </summary>
</member>
<member name="T:DriveWorks.Specification.ConditionResult">
 <summary>
 Specifies the result of evaluating a condition.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.ConditionResult.Disabled">
 <summary>
 Disable the UI for the item to which the condition is attached.
 </summary>
</member>
<member name="F:DriveWorks.Specification.ConditionResult.Hidden">
 <summary>
 Hide the UI for the item to which the condition is attached.
 </summary>
</member>
<member name="F:DriveWorks.Specification.ConditionResult.Enabled">
 <summary>
 Show and enable the UI for the item to which the condition is attached.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.DocumentGenerationOptions">
 <summary>
 Provides possible values for the document generation setting which
 governs when documents get generated using the default specification-flow.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.DocumentGenerationOptions.Finish">
 <summary>
 Documents get generated on finish.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.DocumentGenerationOptions.Release">
 <summary>
 Documents get generated on release.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.DocumentGenerationOptions.Both">
 <summary>
 Documents always get generated.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.FlowProperties">
 <summary>
 Represents a collection of specification-flow properties.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowProperties.Count">
 <summary>
 Gets the number of properties in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterAnyProperty(System.String)">
 <summary>
 Creates a new specification flow property which can store any data. Static values will always be represented as strings.
 </summary>
 <param name="name">The name of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterAnyProperty(System.String,System.String)">
 <summary>
 Creates a new specification flow property which can store any data. Static values will always be represented as strings.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="description">The description of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterAnyProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
 <summary>
 Creates a new specification flow property which can store any data. Static values will always be represented as strings.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="info">Information about the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterStringProperty(System.String)">
 <summary>
 Creates a new specification flow property which can store string data.
 </summary>
 <param name="name">The name of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterStringProperty(System.String,System.String)">
 <summary>
 Creates a new specification flow property which can store string data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="description">The description of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterStringProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
 <summary>
 Creates a new specification flow property which can store string data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="info">Information about the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterBooleanProperty(System.String)">
 <summary>
 Creates a new specification flow property which can store boolean data.
 </summary>
 <param name="name">The name of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterBooleanProperty(System.String,System.String)">
 <summary>
 Creates a new specification flow property which can store boolean data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="description">The description of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterBooleanProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
 <summary>
 Creates a new specification flow property which can store boolean data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="info">Information about the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterDoubleProperty(System.String)">
 <summary>
 Creates a new specification flow property which can store floating-point data.
 </summary>
 <param name="name">The name of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterDoubleProperty(System.String,System.String)">
 <summary>
 Creates a new specification flow property which can store floating-point data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="description">The description of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterDoubleProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
 <summary>
 Creates a new specification flow property which can store floating-point data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="info">Information about the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterInt32Property(System.String)">
 <summary>
 Creates a new specification flow property which can store 32-bit integral data.
 </summary>
 <param name="name">The name of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterInt32Property(System.String,System.String)">
 <summary>
 Creates a new specification flow property which can store 32-bit integral data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="description">The description of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterInt32Property(System.String,DriveWorks.Specification.FlowPropertyInfo)">
 <summary>
 Creates a new specification flow property which can store 32-bit integral data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="info">Information about the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterInt64Property(System.String)">
 <summary>
 Creates a new specification flow property which can store 64-bit integral data.
 </summary>
 <param name="name">The name of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterInt64Property(System.String,System.String)">
 <summary>
 Creates a new specification flow property which can store 64-bit integral data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="description">The description of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterInt64Property(System.String,DriveWorks.Specification.FlowPropertyInfo)">
 <summary>
 Creates a new specification flow property which can store 64-bit integral data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="info">Information about the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterIArrayValueProperty(System.String)">
 <summary>
 Creates a new specification flow property which can store IArrayValue data.
 </summary>
 <param name="name">The name of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterIArrayValueProperty(System.String,System.String)">
 <summary>
 Creates a new specification flow property which can store IArrayValue data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="description">The description of the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.RegisterIArrayValueProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
 <summary>
 Creates a new specification flow property which can store IArrayValue data.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="info">Information about the property.</param>
 <returns>A new specification flow property.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.GetRules">
 <summary>
 Used to get all the properties with rules so the rules can be evaluated and applied prior to execution.
 </summary>
 <returns>An array of rules.</returns>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.ApplyRuleResults(DriveWorks.Specification.RuleResults)">
 <summary>
 Used to apply the results of rule calculation to properties ready for execution.
 </summary>
 <param name="results">The results of evaluating the property rules.</param>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.ClearRuleResults">
 <summary>
 Clears rule results from all properties post-execution.
 </summary>
</member>
<member name="M:DriveWorks.Specification.FlowProperties.NotifyNameChanged(DriveWorks.EventFlow.ConnectionEndpoint,System.String)">
 <summary>
 Called by <see cref="T:DriveWorks.Specification.FlowProperty"/>s and <see cref="T:DriveWorks.EventFlow.NodeOutput"/>s to let the owner know its name has changed.
 </summary>
 <param name="endpoint">The end point whose name has changed.</param>
 <param name="oldName">The old name Of the end point before the name was changed.</param>
</member>
<member name="T:DriveWorks.Specification.FlowPropertyInfo">
 <summary>
 Provides descriptive information about a flow property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.FlowPropertyInfo.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.FlowPropertyInfo" /> class.
 </summary>
 <param name="description">The description of the property.</param>
</member>
<member name="M:DriveWorks.Specification.FlowPropertyInfo.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.FlowPropertyInfo" /> class.
 </summary>
 <param name="description">The description of the property.</param>
 <param name="category">The category to which the property belongs.</param>
</member>
<member name="M:DriveWorks.Specification.FlowPropertyInfo.#ctor(System.String,System.String,System.String[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.FlowPropertyInfo" /> class.
 </summary>
 <param name="description">The description of the property.</param>
 <param name="category">The category to which the property belongs.</param>
 <param name="propertyTypes">The semantic types that apply to the property.</param>
</member>
<member name="M:DriveWorks.Specification.FlowPropertyInfo.#ctor(System.String,System.String,System.String[],System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.FlowPropertyInfo" /> class.
 </summary>
 <param name="description">The description of the property.</param>
 <param name="category">The category to which the property belongs.</param>
 <param name="propertyTypes">The semantic types that apply to the property.</param>
 <param name="isRequired">True if this property has to be given a value before the task it is associated with can execute.</param>
</member>
<member name="P:DriveWorks.Specification.FlowPropertyInfo.Description">
 <summary>
 Gets the description of the property.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowPropertyInfo.Category">
 <summary>
 Gets the category to which the property belongs.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowPropertyInfo.PropertyTypes">
 <summary>
 Gets the semantic types of the property.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowPropertyInfo.IsRequired">
 <summary>
 Gets whether this property has to be given a value before the associated task can execute.
 </summary>
</member>
<member name="T:DriveWorks.Specification.FlowProperty">
 <summary>
 Represents an untyped property on a condition or task.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.FlowProperty.RuleChanged">
 <summary>
 Raised when the rule for this flow property is changed.
 </summary>
</member>
<member name="E:DriveWorks.Specification.FlowProperty.ValueChanged">
 <summary>
 Raised when the value for this flow property is changed.
 </summary>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.#ctor(DriveWorks.EventFlow.INodeEndpointCollection,System.Type,System.String,System.String,System.String,DriveWorks.Specification.FlowPropertyInfo)">
 <devdoc>
 This method is marked as internal to prevent external
 code from inheriting this class.
 </devdoc>
</member>
<member name="P:DriveWorks.Specification.FlowProperty.IsConnected">
 <summary>
 Gets whether a connection has been made to this property.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowProperty.HasValue">
 <summary>
 Gets whether a value has been given to this property.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowProperty.IsRequired">
 <summary>
 Gets whether this input is required for the owning task to execute.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowProperty.Connection">
 <summary>
 Gets the connection that's been created for this property, or a null reference if no connection has been made.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowProperty.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowProperty.Name">
 <summary>
 Gets the name of the property.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowProperty.Category">
 <summary>
 Gets the category to which the property belongs.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowProperty.Info">
 <summary>
 Gets information about the property. 
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowProperty.IsBound">
 <summary>
 Determines whether the property value is bound to a rule.
 </summary>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.ConvertToNativeType(System.Object)">
 <summary>
 Takes the given object and converts it into the native type of the property.
 </summary>
 <param name="obj">The object to convert.</param>
 <returns>The object converted into the type of this property.</returns>
 <remarks>This takes any value, and converts it to a type suitable to pass into <see cref="M:DriveWorks.Specification.FlowProperty.SetValue(System.Object)"/>.</remarks>
 <exception cref="T:DriveWorks.Specification.UnparsableFlowPropertyValueException">Thrown when the value cannot be converted into this property's type.</exception>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.GetValue">
 <summary>
 Gets the value of the property.
 </summary>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.SetValue(System.Object)">
 <summary>
 Sets the value of the property.
 </summary>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.Bind(System.String,System.String)">
 <summary>
 Binds the property to a rule.
 </summary>
 <param name="rule">The rule to apply.</param>
 <param name="comment">The comment to apply.</param>
 <devnote>This method only exists for backwards compatibility.</devnote>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.Bind(System.String,System.String,System.Boolean)">
 <summary>
 Binds the property to a rule.
 </summary>
 <param name="rule">The rule to apply.</param>
 <param name="comment">The comment to apply.</param>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.Unbind">
 <summary>
 Unbinds the property.
 </summary>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.Connect(DriveWorks.EventFlow.NodeOutput)">
 <summary>
 Connects this input to the given output.
 </summary>
 <param name="output">The output to map this input value to.</param>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.SetRuleResult(System.Object)">
 <summary>
 For override by the <see cref="T:DriveWorks.Specification.FlowProperty`1" /> class to handle
 a rule result being applied during execution.
 </summary>
 <param name="ruleResult">The rule result.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.ClearRuleResult">
 <summary>
 For override by the <see cref="T:DriveWorks.Specification.FlowProperty`1" /> class to handle clearing
 the rule result after execution.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.RaiseValueChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.FlowProperty.ValueChanged"/> event.
 </summary>
</member>
<member name="M:DriveWorks.Specification.FlowProperty.RaiseRuleChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.FlowProperty.RuleChanged"/> event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.FlowProperty`1">
 <summary>
 Represents a typed property on a condition or task.
 </summary>
 <typeparam name="T">The type of the property.</typeparam>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.FlowProperty`1.Value">
 <summary>
 Gets/sets the property value, see the remarks for details.
 </summary>
 <returns>The value of the property.</returns>
 <remarks>
 <para>If the property is bound, the value returned will be a null reference for reference types, or the default value for value types.</para>
 <para>If the property is bound and this property is set, the binding rule will be removed.</para>
 </remarks>
</member>
<member name="T:DriveWorks.Specification.NavigationOptions">
 <summary>
 The options available for navigation.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.NavigationOptions.Forwards">
 <summary>
 Navigate to the next form.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.NavigationOptions.Backwards">
 <summary>
 Navigate to the previous form.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.NavigationOptions.First">
 <summary>
 Navigate to the first form.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationContextEventHandler">
 <summary>
 Represents a method that will handle events involving specification context.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationContextEventArgs">
 <summary>
 Provides event data for events involving a specification context.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContextEventArgs.#ctor(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationContextEventArgs" /> class.
 </summary>
 <param name="context">The specification context.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContextEventArgs.Context">
 <summary>
 Get the specification context.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationContextReportWriter">
 <summary>
 Implements a report writer for a specification.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationDetails">
 <summary>
 Provides information about a registered DriveWorks specification.
 </summary>
 <remarks>
 Modifications made to an instance of SpecificationDetails are 
 not immediately reflected in the group from which the instance was obtained.
 
 To apply any modifications, call the <see cref="M:DriveWorks.GroupSpecifications.TryUpdateSpecification(DriveWorks.Specification.SpecificationDetails,System.Nullable{System.Guid})" /> method.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.Id">
 <summary>
 Gets the unique numerical specification identifier.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.ParentId">
 <summary>
 Gets the unique numerical identifier of the parent specification if there is one.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.ProjectId">
 <summary>
 Gets the unique identifier of the project from which the specification was created.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.CreatorId">
 <summary>
 Gets the unique identifier of the user which created the specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.EditorId">
 <summary>
 Gets the unique identifier of the user which last edited the specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.Name">
 <summary>
 Gets/sets the name of the specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.Directory">
 <summary>
 Gets the path to the specification directory.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.MetadataDirectory">
 <summary>
 Gets the path to the specification metadata directory relative to the specification directory.
 </summary>
 <remarks>
 The metadata directory may be null if the project administrator did not configure a metadata directory name.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.OriginalProjectName">
 <summary>
 Gets the name of the project that created the specification.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>The name of the project that is returned is the name of the project as it was when the specification was created, so if the project is renamed, the original project name is the unchanged.</remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.OriginalProjectExtension">
 <summary>
 Gets the file extension of the project that created the specification.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.SpecificationProjectExtension">
 <summary>
 Gets/sets the file extension of the specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.StateId">
 <summary>
 Gets/sets the unique identifier of the specification's current state.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.StateName">
 <summary>
 Gets/sets the display name of the specification's current state.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.StateType">
 <summary>
 Gets/Sets the type for the specification's current state.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.IsArchived">
 <summary>
 Gets/sets whether the specification is archived.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.DateCreated">
 <summary>
 Gets the date and time of the creation of the specification in UTC form.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.DateEdited">
 <summary>
 Gets the date and time when the specification was last edited in UTC form.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.IsCreatorPermitted">
 <summary>
 Gets/sets whether the creator of the specification is permitted to access it.
 </summary>
 <remarks>
 In addition to team-based access control lists for specifications, specification flow
 allows the administrator to configure whether the owner/creator/everyone can see a 
 specification in a given state.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.IsOwnerPermitted">
 <summary>
 Gets/sets whether the owner of the specification is permitted to access it.
 </summary>
 <remarks>
 In addition to team-based access control lists for specifications, specification flow
 allows the administrator to configure whether the owner/creator/everyone can see a 
 specification in a given state.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.IsUniversal">
 <summary>
 Gets/sets whether everyone is permitted to access the specification.
 </summary>
 <remarks>
 In addition to team-based access control lists for specifications, specification flow
 allows the administrator to configure whether the owner/creator/everyone can see a 
 specification in a given state.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetails.Tags">
 <summary>
 Gets/sets the tags associated with the specification.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationDetails.GetMetadataPath">
 <summary>
 Gets the fully-qualified path to the metadata directory.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationDetails.GetProjectFilePath">
 <summary>
 Gets the fully-qualified path to the project file.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationDetails.GetSpecificationFilePath">
 <summary>
 Gets the fully-qualified path to the specification file.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationDetails.SetSpecificationId(System.Int32)">
 <summary>
 Sets id to the specified value.
 </summary>
 <param name="newId">New identifier to set.</param>
 <remarks>Only for use in embedded specifications when they are copied, this is only here has a helper method.</remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationDialogCloseOptions">
 <summary>
 Value used by <see cref="T:DriveWorks.Specification.SpecificationForm"/> to depict it's available closing options.
 </summary>
</member>
<member name="F:DriveWorks.Specification.SpecificationDialogCloseOptions.Close">
 <summary>
 Close option, equivalent to ok.
 </summary>
</member>
<member name="F:DriveWorks.Specification.SpecificationDialogCloseOptions.Cancel">
 <summary>
 Cancel option.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationDocumentDetails">
 <summary>
 Provides information about a registered specification document.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationDocumentDetails.Id">
 <summary>
 Gets the unique identifier assigned to the document.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDocumentDetails.SpecificationId">
 <summary>
 Gets the unique numerical identifier assigned to the parent specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDocumentDetails.Path">
 <summary>
 Gets/sets the path to the document file.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDocumentDetails.DateCreated">
 <summary>
 Gets the date the document was created.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationDocumentDetails.IsHidden">
 <summary>
 Gets/sets whether the document is hidden from standard document lists. 
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationForm">
 <summary>
 Provides information about a form in the navigation of a running specification.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.IsTaskListEnabled">
 <summary>
 Determines whether or not the task list is enabled.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.ShowUserInterface">
 <summary>
 Determines whether or not the user interface is visible.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.Owner">
 <summary>
 Gets the control that launched the dialog.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.Previous">
 <summary>
 Gets the previous form in the navigation.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.Form">
 <summary>
 Gets the DriveWorks form represented by the instance.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.IsLast">
 <summary>
 Determines whether the form is the last form in the navigation.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.Options">
 <summary>
 Gets the closing options that are available for this form.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.TaskList">
 <summary>
 Gets the task list for this form.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.DialogOwner">
 <summary>
 Gets the owner that launched the dialog.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationForm.NavigationStep">
 <summary>
 Gets the step in the navigation with which the form is associated (INTERNAL ONLY).
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationForm.Close">
 <summary>
 Close the current active dialog.
 </summary>
 <exception cref="T:System.InvalidOperationException">A specification is not running, or no dialog is active, or the dialog does no support closing in this way.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationForm.Cancel">
 <summary>
 Confirms the current active dialog.
 </summary>
 <exception cref="T:System.InvalidOperationException">A specification is not running, or no dialog is active, or the dialog does no support closing in this way.</exception>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationMacro">
 <summary>
 Represents a specification macro.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationMacro.Deleted">
 <summary>
 Raised when the macro is deleted.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationMacro.NameChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Specification.SpecificationMacro.Name" /> property is changed.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationMacro.CategoryChanged">
 <summary>
 Raised when the category is changed.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationMacro.ConnectionsChanged">
 <summary>
 Raised whenever a connection between a property and an output in this macro has been created or removed.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacro.StartNode">
 <summary>
 Gets the first node that will execute when this macro executes as a part of a flow.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacro.IsDeleted">
 <summary>
 Determines whether the macro has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacro.Name">
 <summary>
 Gets the name of the macro.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacro.Tasks">
 <summary>
 Gets/sets the tasks which make up the macro.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacro.Nodes">
 <summary>
 Gets all flow nodes in this specification macro.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacro.Conditions">
 <summary>
 Gets the conditions in this macro.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacro.Category">
 <summary>
 Gets/sets the category to which the macro belongs.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacro.Save">
 <summary>
 Saves the macro to a string.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacro.Save(System.IO.TextWriter)">
 <summary>
 Saves the macro to the specified text writer.
 </summary>
 <param name="textWriter">The writer to which to save the macro.</param>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacro.Delete">
 <summary>
 Deletes the macro.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacro.Execute">
 <summary>
 Executes the macro.
 </summary>
 <exception cref="T:System.InvalidOperationException">The project is not associated with a running specification.</exception>
 <exception cref="T:System.NotSupportedException">The task sequence contains deferred or delete tasks.</exception>
</member>
<member name="T:DriveWorks.Specification.SpecificationMacros">
 <summary>
 Provides access to the specification macros in a project.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationMacros.MacroAdded">
 <summary>
 Raised when a new macro is added.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationMacros.MacroDeleted">
 <summary>
 Raised when a macro is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacros.Item(System.Int32)">
 <summary>
 Gets the item at the given index.
 </summary>
 <param name="index">The index of the item to get.</param>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacros.Item(System.String)">
 <summary>
 Gets the item with the given name.
 </summary>
 <param name="name">The name of the item to get.</param>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacros.Count">
 <summary>
 Gets the number of items in the collection.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacros.Add(System.String)">
 <summary>
 Adds a new macro with the given name.
 </summary>
 <param name="name">The name of the macro.</param>
 <returns>The newly added macro.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacros.Add(System.String,DriveWorks.SpecificationMacroCategory)">
 <summary>
 Adds a new macro with the given name and category
 </summary>
 <param name="name">The name of the macro.</param>
 <param name="category">The category that the macro belongs to.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacros.Add(System.Xml.Linq.XElement)">
 <summary>
 Adds a new macro created from the given xElement.
 </summary>
 <param name="macroXml">The xElement containing the definition for the specification macro.</param>
 <returns>The newly created macro.</returns>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacros.GetMacro(System.String)">
 <summary>
 Gets the macro with the specified name.
 </summary>
 <param name="macroName">The name of the macro to retrieve.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown when no macro with the specified name exists.</exception>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacros.TryGetMacro(System.String,DriveWorks.Specification.SpecificationMacro@)">
 <summary>
 Attempts to get the macro with the given name.
 </summary>
 <param name="macroName">The name of the macro to get.</param>
 <param name="macro">Receives the macro if found.</param>
 <returns>True if a macro with the given name was found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacros.GetMacros">
 <summary>
 Gets all macros.
 </summary>
 <returns>An array of all specification macros.</returns>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacros.GetEnumerator">
 <summary>
 Gets an object which can be used to enumerate the macros in the collection.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationTaskDetails">
 <summary>
 Provides information about a registered DriveWorks specification task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskDetails.Id">
 <summary>
 Gets the unique identifier assigned to the task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskDetails.SpecificationId">
 <summary>
 Gets the unique identifier of the specification to which the 
 task belongs.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskDetails.Type">
 <summary>
 Gets the name of the provider which understands the task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskDetails.Completed">
 <summary>
 Determines whether the task has been performed.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskDetails.Failed">
 <summary>
 Determines how many times, if any, the task has failed.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskDetails.Data">
 <summary>
 Gets the data associated with the task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskDetails.Tags">
 <summary>
 Gets the tags associated with the task.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationTaskDetails.SetData(System.Byte[])">
 <summary>
 Overwrites the existing data stream with a new byte array.
 </summary>
 <param name="serializedData">The byte array to overwrite the existing data with.</param>
</member>
<member name="T:DriveWorks.Specification.SpecificationTaskList">
 <summary>
 Encapsulates the task list for a running specification.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationTaskList.EntryAdded">
 <summary>
 Raised when an entry is added to the list.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationTaskList.EntryUpdated">
 <summary>
 Raised when an entry in the list is updated.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationTaskList.EntryRemoved">
 <summary>
 Raised when an entry is removed from the list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskList.Count">
 <summary>
 Gets the number of items in the task list.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskList.Item(System.Object)">
 <summary>
 Gets the task list entry with the specified key.
 </summary>
 <param name="key">The key of the task list entry to retrieve.</param>
 <value></value>
 <returns>The task list entry with the given key, or a null reference if one does not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationTaskList.Update">
 <summary>
 Updates the task list.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationTaskList.UpdateRecursive(DriveWorks.Forms.ControlBase,DriveWorks.Project)">
 <summary>
 Recursively updates the task list.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationTaskList.Clear">
 <summary>
 Removes all the entries from the task list.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationTaskList.Add(System.Object,DriveWorks.Specification.TaskListEntryType,System.String,System.Object,System.String)">
 <summary>
 Adds or replaces an entry in the task list.
 </summary>
 <param name="key">The key of the entry to add or replace.</param>
 <param name="message">The task's message.</param>
 <param name="type">The type of task to create.</param>
 <param name="target">The target of the task.</param>
 <param name="targetDisplayName">The display name of the target of the task.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationTaskList.Remove(System.Object)">
 <summary>
 Removes the task list entry with the specified key.
 </summary>
 <param name="key">The key of the task list entry to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationTaskList.GetEnumerator">
 <summary>
 Gets an enumerator for the entries in the task list.
 </summary>
 <returns>
 An enumerator for the entries in the task list.
 </returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.TaskListEntryType">
 <summary>
 The type of a task list entry.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.TaskListEntryType.Information">
 <summary>
 The entry is informative.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.TaskListEntryType.Warning">
 <summary>
 The entry is a warning.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Specification.TaskListEntryType.Error">
 <summary>
 The entry indicates a problem that requires fixing.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationTaskListEntry">
 <summary>
 Represents an entry in a running specification's task list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskListEntry.Key">
 <summary>
 Gets a key which uniquely identifies the task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskListEntry.Type">
 <summary>
 Gets the type of the task list entry.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskListEntry.Message">
 <summary>
 Gets the message for the task list entry.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskListEntry.Target">
 <summary>
 Gets the target to which the message applies.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskListEntry.TargetDisplayName">
 <summary>
 Gets the display name of the target to which the message applies.
 </summary>
</member>
<member name="T:DriveWorks.Specification.TaskAttribute">
 <summary>
 Provides descriptive information about a task.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.TaskAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.TaskAttribute" /> class.
 </summary>
 <param name="displayName">The localized display name of the task, or a resource string which identifies the string to use.</param>
 <param name="image">A resource string which identifies the image to use.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.TaskAttribute.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.TaskAttribute" /> class.
 </summary>
 <param name="displayName">The localized display name of the task, or a resource string which identifies the string to use.</param>
 <param name="image">A resource string which identifies the image to use.</param>
 <param name="categoryName">The localized display name of the task's cateogy, or a resource string which identifies the string to use.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.TaskAttribute.DisplayName">
 <summary>
 Gets a localized display name of the task, or a resource string which identifies the string to use.
 </summary>
</member>
<member name="P:DriveWorks.Specification.TaskAttribute.Image">
 <summary>
 Gets a resource string which identifies the image to use.
 </summary>
</member>
<member name="P:DriveWorks.Specification.TaskAttribute.CategoryName">
 <summary>
 Gets the name of the category that this task belongs to.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationDetailsEventArgs">
 <summary>
 Provides the event data for specification details events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationDetailsEventArgs.#ctor(DriveWorks.Specification.SpecificationDetails)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationDetailsEventArgs" /> type.
 </summary>
 <param name="specificationDetails">The specification details instance which is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationDetailsEventArgs.SpecificationDetails">
 <summary>
 Gets the specification details instance which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.ProjectDetailsEventArgs">
 <summary>
 Provides the event data for project details events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.ProjectDetailsEventArgs.#ctor(DriveWorks.ProjectDetails)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.ProjectDetailsEventArgs" /> type.
 </summary>
 <param name="projectDetails">The project details instance which is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.ProjectDetailsEventArgs.ProjectDetails">
 <summary>
 Gets the project details instance which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationTaskListEntryEventHandler">
 <summary>
 Represents a method that will handle events related to specification task list entries.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationTaskListEntryEventArgs">
 <summary>
 Provides event data for specification task list entry events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationTaskListEntryEventArgs.#ctor(DriveWorks.Specification.SpecificationTaskListEntry)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationTaskListEntryEventArgs" />
 </summary>
 <param name="entry">The entry that is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationTaskListEntryEventArgs.Entry">
 <summary>
 Gets the entry that is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.TaskEventHandler">
 <summary>
 Represents a method which will handle a task event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.TaskEventArgs">
 <summary>
 Provides the event data for task events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.TaskEventArgs.#ctor(DriveWorks.Specification.Task)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.TaskEventArgs" /> type.
 </summary>
 <param name="task">The task which is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.TaskEventArgs.Task">
 <summary>
 Gets the task which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.ConditionEventHandler">
 <summary>
 Represents a method which will handle a condition event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.ConditionEventArgs">
 <summary>
 Provides the event data for condition events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.ConditionEventArgs.#ctor(DriveWorks.Specification.Condition)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.ConditionEventArgs" /> type.
 </summary>
 <param name="condition">The condition which is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.ConditionEventArgs.Condition">
 <summary>
 Gets the condition which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.OperationEventHandler">
 <summary>
 Represents a method which will handle an operation event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.OperationEventArgs">
 <summary>
 Provides the event data for operation events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.OperationEventArgs.#ctor(DriveWorks.Specification.Operation)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.OperationEventArgs" /> type.
 </summary>
 <param name="operation">The operation which is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.OperationEventArgs.Operation">
 <summary>
 Gets the operation which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.TransitionEventHandler">
 <summary>
 Represents a method which will handle a transition event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.TransitionEventArgs">
 <summary>
 Provides the event data for transition events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.TransitionEventArgs.#ctor(DriveWorks.Specification.Transition)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.TransitionEventArgs" /> type.
 </summary>
 <param name="transition">The transition which is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.TransitionEventArgs.Transition">
 <summary>
 Gets the transition which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StateEventHandler">
 <summary>
 Represents a method which will handle a state event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StateEventArgs">
 <summary>
 Provides the event data for state events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.StateEventArgs.#ctor(DriveWorks.Specification.State)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.StateEventArgs" /> type.
 </summary>
 <param name="state">The state which is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StateEventArgs.State">
 <summary>
 Gets the state which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.EventSequenceEventHandler">
 <summary>
 Represents a method which will handle an event sequence event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.EventSequenceEventArgs">
 <summary>
 Provides the event data for event events.
 </summary>
</member>
<member name="M:DriveWorks.Specification.EventSequenceEventArgs.#ctor(DriveWorks.Specification.FlowEvent)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.EventSequenceEventArgs" /> type.
 </summary>
 <param name="event">The event which is the target of the event.</param>
</member>
<member name="P:DriveWorks.Specification.EventSequenceEventArgs.Event">
 <summary>
 Gets the event which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationDocumentEventHandler">
 <summary>
 Represents a method which will handle a specification document event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationDocumentEventArgs">
 <summary>
 Provides the event data for specification document events.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationDocumentEventArgs.#ctor(DriveWorks.Specification.SpecificationDocumentDetails)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationDocumentEventArgs" /> type.
 </summary>
 <param name="documentDetails">The details of the specification document.</param>
</member>
<member name="P:DriveWorks.Specification.SpecificationDocumentEventArgs.DocumentDetails">
 <summary>
 Gets the document details.
 </summary>
</member>
<member name="T:DriveWorks.Specification.AdditionalFoldersCreatedEventHandler">
 <summary>
 Represents a method which will handle the creation of additional folders.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.AdditionalFoldersCreatedEventArgs">
 <summary>
 Provides the event data for the additional folder creation event.
 </summary>
</member>
<member name="M:DriveWorks.Specification.AdditionalFoldersCreatedEventArgs.#ctor(System.String[],System.String[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationDocumentEventArgs" /> type.
 </summary>
<param name="relativePaths">The relative paths of the additional folders that were created.</param>
<param name="fullPaths">The full paths of the additional folders that were created.</param>
</member>
<member name="P:DriveWorks.Specification.AdditionalFoldersCreatedEventArgs.RelativePaths">
 <summary>
 Gets the relative paths of the additional folders that were created.
 </summary>
</member>
<member name="P:DriveWorks.Specification.AdditionalFoldersCreatedEventArgs.FullPaths">
 <summary>
 Gets the full paths of the additional folders that were created.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationMacroEventArgs">
 <summary>
 Provides the event data for specification macro events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationMacroEventArgs.#ctor(DriveWorks.Specification.SpecificationMacro)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationMacroEventArgs" /> type.
 </summary>
 <param name="macro">The macro which is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationMacroEventArgs.Macro">
 <summary>
 Gets the macro which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StateChangeEventHandler">
 <summary>
 Represents a method which will handle a state change event.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.StateChangeEventArgs">
 <summary>
 Provides the event data for state change events.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.StateChangeEventArgs.#ctor(DriveWorks.Specification.State,DriveWorks.Specification.State)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.StateChangeEventArgs" /> type.
 </summary>
 <param name="sourceState">The state which is the source of the event.</param>
 <param name="targetState">The state which is the target of the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.StateChangeEventArgs.SourceState">
 <summary>
 Gets the state which is the source of the event.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StateChangeEventArgs.TargetState">
 <summary>
 Gets the state which is the target of the event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationHostControlContextEventArgs">
 <summary>
 Provides event data for Specification host control based events on specification contexts.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationHostControlContextEventArgs.SpecifcationHost">
 <summary>
 Gets the specification host control for this event.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationHostControlContextEventArgs.SpecificationContext">
 <summary>
 Gets the specification context that relates to this event.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationType">
 <summary>
 Represents the type of a specification, i.e. whether it was newly created, copied, etc.
 </summary>
</member>
<member name="F:DriveWorks.Specification.SpecificationType.NotLoaded">
 <summary>
 The specification hasn't been loaded.
 </summary>
</member>
<member name="F:DriveWorks.Specification.SpecificationType.New">
 <summary>
 The specification is a new specification.
 </summary>
</member>
<member name="F:DriveWorks.Specification.SpecificationType.Existing">
 <summary>
 The specification is an opened existing specification.
 </summary>
</member>
<member name="F:DriveWorks.Specification.SpecificationType.Copied">
 <summary>
 The specification is a copy of an existing specification.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationContext">
 <summary>
 Provides contextual information to a running specification-flow.
 </summary>
 <remarks>
 <para>
 This class can be overridden by a hosting environment to gain
 more control over the specification process.
 </para>
 <para>
 A specification-flow context can be in one of a number of states:
 <list type="table">
     <listheader>
         <term>Term</term>
         <description>Description</description>
     </listheader>
     <item>
         <term>Not Loaded/Unloaded</term>
         <description>The specification context has been newly created and no specification has been loaded into it.</description>
     </item>
     <item>
         <term>Loaded/Stopped</term>
         <description>The specification context has a specification loaded into it, but the specification is not in a running state.</description>
     </item>
     <item>
         <term>Running</term>
         <description>The specification context has a specification loaded which is in a running state.</description>
     </item>
 </list>
 </para>
 </remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.CopyingSpecificationFile">
 <summary>
 Raised before a file for the current specification is copied to its target location.
 </summary>
 <remarks>This event will get raised for every file that is copied as a part of the specification.</remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.CopiedSpecificationFile">
 <summary>
 Raised after a specification file has successfully been copied to the target location.
 </summary>
 <remarks>This event will get raised for every file that has been copied as a part of the specification.</remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.Deleted">
 <summary>
 Raised when the specification is deleted.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.CopyRequested">
 <summary>
 Raised when a copy of an existing specification is requested.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.OpenRequested">
 <summary>
 Raised when the opening of an existing specification is requested.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.StartRequested">
 <summary>
 Raised when the start of a new specification is requested.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.Started">
 <summary>
 Raised when the specification is started for the first time.
 </summary>
 <remarks>
 This happens before the first running event is fired.
 </remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.IsLoadedChanged">
 <summary>
 Raised when specification is loaded into/unloaded from the specification context.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.IsRunningChanging">
 <summary>
 Raised when a specification is about to enter or leave a running state.
 </summary>
 <remarks>
 There is a chance that the specification state might not change due to exceptions etc.
 Typically this can be used to know when a specification (and its project) is about to close (via cancel or transition etc).
 </remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.IsRunningChanged">
 <summary>
 Raised when specification enters or leaves a running state.
 </summary>
 <remarks>
 <para>
 If the specification enters the running state because a task
 requires it, the <see cref="E:DriveWorks.Specification.SpecificationContext.IsRunningChanged" /> event doesn't 
 fire as it is intended to detect state changes as the result
 of a specification action such as a transition or copy operation.
 </para>
 </remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.TransitionSequenceInvoking">
 <summary>
 Raised when a transition task-sequence is about to be invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.TransitionSequenceInvoked">
 <summary>
 Raised when a transition task-sequence has been invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.TransitionInvoking">
 <summary>
 Raised when a transition is about to be invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.TransitionInvoked">
 <summary>
 Raised when a transition has been invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.StateChanging">
 <summary>
 Raised when a state is about to be changed.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.StateChanged">
 <summary>
 Raised when a state has been changed.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.OperationSequenceInvoking">
 <summary>
 Raised when an operation task-sequence is about to be invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.OperationSequenceInvoked">
 <summary>
 Raised when an operation task-sequence has been invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.OperationInvoking">
 <summary>
 Raised when a operation is about to be invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.OperationInvoked">
 <summary>
 Raised when a operation has been invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.EventSequenceInvoking">
 <summary>
 Raised when an event task-sequence is about to be invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.EventSequenceInvoked">
 <summary>
 Raised when an event task-sequence has been invoked.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ActiveFormChanging">
 <summary>
 Raised when the active form is about to change.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ActiveFormChanged">
 <summary>
 Raised when the active form changes.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogChanging">
 <summary>
 Raised when the active dialog is about to change.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogChanged">
 <summary>
 Raised when the active dialog changes.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogOrFormChanging">
 <summary>
 Raised when the active dialog or form is about to change.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogOrFormChanged">
 <summary>
 Raised when the active dialog or form changes.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.DialogOpening">
 <summary>
 Raised when a dialog opens.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.DialogClosing">
 <summary>
 Raised when the active dialog closes.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.DialogClosed">
 <summary>
 Raised when a dialog has been closed.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.TaskListEntryAdded">
 <summary>
 Raised when an entry is added to the specification task list.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.TaskListEntryUpdated">
 <summary>
 Raised when an entry in the specification task list is updated.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.TaskListEntryRemoved">
 <summary>
 Raised when an entry is removed from the specification task list.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ReportCreated">
 <summary>
 Raised when a specification report is created.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ReportCancelled">
 <summary>
 Raised when the current specification report is cancelled.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ReportFinished">
 <summary>
 Raised when the current specification report is finished.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogOrFormUpdated">
 <summary>
 Raised when the values of one or more controls on the active form or dialog have been changed.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ChildContextCreated">
 <summary>
 Raised when a child specification context is created.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.DocumentRegistered">
 <summary>
 Raised when a specification document is registered.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.AdditionalFoldersCreated">
 <summary>
 Raised when additional folders are created.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.Cancelled">
 <summary>
 Raised when a running state is cancelled.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.IsRuleProfilingEnabledChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Specification.SpecificationContext.IsRuleProfilingEnabled"/> property changes.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.SpecificationHosting">
 <summary>
 Raised when a specification is hosting in a <see cref="T:DriveWorks.Forms.SpecificationHostControl"/> inside of this context's project.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.FailedSpecificationHosting">
 <summary>
 Raised when a specification hosting failed.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.FormValueChanged">
 <summary>
 Raised whenever a form value has changed. 
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.EmbeddedSpecificationReopened">
 <summary>
 Raised when an embedded specification has been reopened due to a specification being stopped.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.NewEmbeddedSpecificationStopped">
 <summary>
 Raised when a non-existing, embedded specification is stopped.
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.IsRunningStateLoaded">
 <summary>
 Raised when the running state has been fully loaded. 
 </summary>
 <remarks>
 <para>
 Unlike the <see cref="E:DriveWorks.Specification.SpecificationContext.IsRunningChanged" /> event, this will be fired any time the specification
 enters the running state, even when this is just because a task requires it.
 </para>
 </remarks>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.ProjectClosing">
 <summary>
 Raised just before the current project is about to be closed, but before saving (which may or may not happen).
 </summary>
</member>
<member name="E:DriveWorks.Specification.SpecificationContext.EnteringInitialState">
 <summary>
 Raised when a specification has changed its state to the initial one but before any tasks have been performed.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationContext" /> type.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.Initialize(DriveWorks.Hosting.EngineHost,DriveWorks.Specification.SpecificationEnvironment,DriveWorks.Group,System.IO.DirectoryInfo)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationContext" /> type for a root specification.
 </summary>
 <param name="host">The host which governs the run-time environment.</param>
 <param name="environment">The settings which govern the specification execution environment.</param>
 <param name="group">The group instance to use to query the DriveWorks group.</param>
 <param name="rootDirectory">The root temporary directory to use for temporary files created during the specification process.</param>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.Initialize(DriveWorks.Hosting.EngineHost,DriveWorks.Specification.SpecificationContext,DriveWorks.ProjectChildSpecificationDef,DriveWorks.Specification.SpecificationEnvironment)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationContext" /> type for a child specification.
 </summary>
 <param name="host">The host which governs the run-time environment.</param>
 <param name="parentContext">The parent specification context.</param>
 <param name="parentDefinition">The parent child-specification definition.</param>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.ShowRunningUserInterface">
 <summary>
 Gets/sets whether this specification should have its form UI shown when it starts running.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.RootTemporaryFilesDirectory">
 <summary>
 Gets information about the directory which is the root of all temporary
 folders created for specifications related to this context.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.ProjectFilePath">
 <summary>
 Gets the fully-qualified path to the specification's cached version of the project file (see remarks for details).
 </summary>
 <remarks>
 For a edit of an existing specification, this is the path to the project file in the existing
 specification directory. For a new specification, it is the path to the master project file.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.DesignMasterPath">
 <summary>
 Gets the fully-qualified path to the specification's cached version of the project's design master (see remarks for details).
 </summary>
 <remarks>
 For a edit of an existing specification, this is the path to the design master in the existing
 specification directory. For a new specification, it is the path to the master project's design master.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.ProjectDirectory">
 <summary>
 Gets the fully-qualified path to the directory containing the project on which the specification
 is based.
 </summary>
 <value></value>
 <returns>The fully-qualified path, or a null reference if the specification context is not loaded.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.ProjectName">
 <summary>
 Gets the name of the project for this specification context.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.ProjectId">
 <summary>
 Gets the id of the project for this specification context.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.SpecificationName">
 <summary>
 Gets the specification name of a loaded or running specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.SpecificationTags">
 <summary>
 Gets the tags associated with this specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.SpecificationFilePath">
 <summary>
 Gets the fully-qualified path to the specification file.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.SpecificationDirectory">
 <summary>
 Gets the fully-qualified path to the specification directory.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.TemporaryFilesDirectory">
 <summary>
 Gets the fully-qualified path to the context's temporary files directory.
 </summary>
 <returns>
 The fully-qualified path to the context's temporary files directory if the context is
 in a running state, otherwise, a null reference (Nothing in Visual Basic).
 </returns>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.TemporaryProjectFilePath">
 <summary>
 Gets the fully-qualified path to the context's temporary copy of the project file.
 </summary>
 <returns>
 The fully-qualified path to the context's temporary copy of the project file if the context is
 in a running state, otherwise, a null reference (Nothing in Visual Basic).
 </returns>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.TemporaryDesignMasterPath">
 <summary>
 Gets the fully-qualified path to the context's temporary copy of the design-master.
 </summary>
 <returns>
 The fully-qualified path to the context's temporary copy of the design-master if the context is
 in a running state, otherwise, a null reference (Nothing in Visual Basic).
 </returns>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.Group">
 <summary>
 Gets the group containing the project to be specified.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.Project">
 <summary>
 Gets the project being specified.
 </summary>
 <remarks>
 If no project is running, or the specification is a non-running state, this property will return
 a null reference (Nothing in Visual Basic).
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.Id">
 <summary>
 Gets the identifier which uniquely identifies the current specification.
 </summary>
 <remarks>
 If no specification is open, this property will return
 <see cref="F:System.Int32.MinValue" />.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.Type">
 <summary>
 Gets the type of the specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.Report">
 <summary>
 Gets the active report object.
 </summary>
 <remarks>
 If no project is open, this property will return
 a null reference (Nothing in Visual Basic).
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.ParentContext">
 <summary>
 Gets the context of the parent specification if the current specification
 is a child specification.
 </summary>
 <remarks>
 If this is a root level context, this property will return
 a null reference (Nothing in Visual Basic).
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.IsLoaded">
 <summary>
 Determines whether the specification is loaded.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.IsRunning">
 <summary>
 Determines whether the specification is running. See remarks for details.
 </summary>
 <remarks>
 The IsRunning property determines whether a design master is active for the specification which
 may be true even if the current state of the specification isn't a running state, for example, during
 paused to paused state transitions or during operations where a condition or task requires access to
 a design master.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.IsInRunningState">
 <summary>
 Determines whether the specification is in a running state, as opposed to paused or automatic.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.CurrentState">
 <summary>
 Gets the current specification-flow state of the open specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.ActiveForm">
 <summary>
 Gets the active form in the specification navigation if the specification is running.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.ActiveDialog">
 <summary>
 Gets the latest dialog if the specification is running and one or more dialogs are active.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.ActiveDialogOrForm">
 <summary>
 Gets the active dialog if one is shown, otherwise, gets the active form.
 </summary>
 <remarks>
 <para>
 If a specification isn't running, a null reference (Nothing in Visual Basic) is returned.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.TaskList">
 <summary>
 Gets the task list for the specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.Environment">
 <summary>
 Gets the settings for the specification environment.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.InCancel">
 <summary>
 Determines whether the specification context is in the process of cancelling.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.InTransition">
 <summary>
 Determines whether the specification context is in the process of invoking a transition.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.InOperation">
 <summary>
 Determines whether the specification context is in the process of invoking an operation.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.MetadataDirectoryName">
 <summary>
 Gets the name of a directory which will act as a container
 for artifacts used to manage a specification, or a null reference 
 to put them in the specification folder.
 </summary>
 <remarks>
 <para>
 DriveWorks supports the notion of a metadata directory which is a directory inside the specification directory
 in which the design master, project file, and related metadata are stored. If used, this feature prevents
 the specification directory from becoming cluttered with information which DriveWorks uses to manage
 the specification.
 </para>
 <para>
 If the metadirectory name is zero-length or a null reference (Nothing in Visual Basic), then
 DriveWorks will place metadata files in the specification directory.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.HideMetadataDirectory">
 <summary>
 Gets whether the metadata directory is hidden if used.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.DocumentsRelativeToSpecificationFolder">
 <summary>
 Gets whether documents' paths are calculated relative to the 
 specification's folder, if false, they are calculated relative to the
 default specification folder instead.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.AdditionalFoldersRelativeToSpecificationFolder">
 <summary>
 Gets whether additional folders' paths are calculated relative to the 
 specification's folder, if false, they are calculated relative to the
 default specification folder instead.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.IsArchived">
 <summary>
 Determines whether the specification is marked as archived from view.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.OriginalSpecificationName">
 <summary>
 If the specification is in a transition, gets the name of the specification
 passed to the <see cref="M:DriveWorks.Specification.SpecificationContext.Open(DriveWorks.Specification.SpecificationDetails)" /> method when the specification
 was originally opened.
 </summary>
 <value></value>
 <returns>The original name of the specification, see the remarks for details.</returns>
 <remarks>
 <para>This property only returns a value during a transition for a specification opened by
 a call to the <see cref="M:DriveWorks.Specification.SpecificationContext.Open(DriveWorks.Specification.SpecificationDetails)" /> method.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.IsEmbedded">
 <summary>
 Returns whether or not this is an embedded specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.IsRuleProfilingEnabled">
 <summary>
 Gets/sets whether projects loaded in this specification group should have profiling enabled.
 </summary>
 <remarks>
 A specification group is the entire family for a specification (all related specifications e.g. parent, children and siblings etc).
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.HostingControl">
 <summary>
 The parent specification host control for the specification, if there is one.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.LoadedChildren">
 <summary>
 Gets the loaded child specifications for this specification.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.Start(DriveWorks.ProjectDetails)">
 <summary>
 Starts a new specification based on the given project.
 </summary>
 <param name="projectDetails"></param>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.Copy(DriveWorks.Specification.SpecificationDetails)">
 <summary>
 Starts a new specification based on the given specification.
 </summary>
 <param name="specificationDetails">The details of the specification to clone.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">The project, on which the specification was based, no longer exists.</exception>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.Copy(DriveWorks.Specification.SpecificationDetails,System.Boolean)">
 <summary>
 Starts a new specification based on the given specification.
 </summary>
 <param name="specificationDetails">The details of the specification to clone.</param>
 <param name="keepClosed">Whether or not to migrate the clone specification into the initial running state or not.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">The project, on which the specification was based, no longer exists.</exception>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.Open(DriveWorks.Specification.SpecificationDetails)">
 <summary>
 Opens the given existing specification.
 </summary>
 <param name="specificationDetails">The details of the specification to open.</param>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.Cancel">
 <summary>
 Cancels the specification.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.QueryOperation(System.String)">
 <summary>
 Queries an operation's tasks for confirmation messages that should be shown to an interactive user
 before invoking the operation.
 </summary>
 <param name="operationName">The name of the operation to query.</param>
 <returns>An array of messages, e.g. "Specification x will be deleted", if no messages are collected, an empty array is returned</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.QueryTransition(System.String)">
 <summary>
 Queries an transition's tasks for confirmation messages that should be shown to an interactive user
 before invoking the transition.
 </summary>
 <param name="transitionName">The name of the transition to query.</param>
 <returns>An array of messages, e.g. "Specification x will be deleted", if no messages are collected, an empty array is returned</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.InvokeOperation(System.String)">
 <summary>
 Invokes the specified operation.
 </summary>
 <param name="operationName">The name of the operation to invoke.</param>
 <returns>True if the operation was successfully invoked, false if one or more conditions caused the operation to be aborted.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">The specified operation does not exist for the current state.</exception>
 <exception cref="T:System.UnauthorizedAccessException">Thrown if the current user does not have permission to invoke the operation.</exception>
 <exception cref="T:DriveWorks.Specification.TaskExecutionException">The transition can't be invoked because a task threw an unhandled exception.</exception>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.InvokeOperation(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Invokes the specified operation.
 </summary>
 <param name="operationName">The name of the operation to invoke.</param>
 <param name="inputs">Inputs to be driven in to spec</param>
 <returns>True if the operation was successfully invoked, false if one or more conditions caused the operation to be aborted.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">The specified operation does not exist for the current state.</exception>
 <exception cref="T:System.UnauthorizedAccessException">Thrown if the current user does not have permission to invoke the operation.</exception>
 <exception cref="T:DriveWorks.Specification.TaskExecutionException">The transition can't be invoked because a task threw an unhandled exception.</exception>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.InvokeTransition(System.String)">
 <summary>
 Invokes the specified transition.
 </summary>
 <param name="transitionName">The name of the transition to invoke.</param>
 <returns>True if the transition was successfully invoked, false if one or more conditions caused the transition to be aborted.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">The specified transition does not exist for the current state.</exception>
 <exception cref="T:System.UnauthorizedAccessException">Thrown if the current user does not have permission to invoke the transition.</exception>
 <exception cref="T:DriveWorks.Specification.SpecificationExistsException">The specification name is already registered.</exception>
 <exception cref="T:DriveWorks.Specification.SpecificationNameInvalidException">The specification name contains invalid characters, starts/ends with whitespace, or is too long.</exception>
 <exception cref="T:System.IO.PathTooLongException">One or more paths are too long to complete the specification, most likely the calculated project or specification file name.</exception>
 <exception cref="T:System.InvalidOperationException">The transition can't be invoked because an operation or transition is already being processed, or because the transition takes one running state to another running state.</exception>
 <exception cref="T:DriveWorks.Specification.TaskExecutionException">The transition can't be invoked because a task threw an unhandled exception.</exception>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.InvokeTransition(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Invokes the specified transition.
 </summary>
 <param name="transitionName">The name of the transition to invoke.</param>
 <param name="inputs">The values to be driven into the spec.</param>
 <returns>True if the transition was successfully invoked, false if one or more conditions caused the transition to be aborted.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">The specified transition does not exist for the current state.</exception>
 <exception cref="T:System.UnauthorizedAccessException">Thrown if the current user does not have permission to invoke the transition.</exception>
 <exception cref="T:DriveWorks.Specification.SpecificationExistsException">The specification name is already registered.</exception>
 <exception cref="T:DriveWorks.Specification.SpecificationNameInvalidException">The specification name contains invalid characters, starts/ends with whitespace, or is too long.</exception>
 <exception cref="T:System.IO.PathTooLongException">One or more paths are too long to complete the specification, most likely the calculated project or specification file name.</exception>
 <exception cref="T:System.InvalidOperationException">The transition can't be invoked because an operation or transition is already being processed, or because the transition takes one running state to another running state.</exception>
 <exception cref="T:DriveWorks.Specification.TaskExecutionException">The transition can't be invoked because a task threw an unhandled exception.</exception>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.GetTransitions">
 <summary>
 Gets an array of transitions with the evaluated result of their conditions.
 </summary>
 <returns>An array of invokable transitions.</returns>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.GetOperations">
 <summary>
 Gets an array of transitions with the evaluated result of their conditions.
 </summary>
 <returns>An array of operations transitions.</returns>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.Navigate(DriveWorks.Specification.NavigationOptions)">
 <summary>
 Navigates the forms in a running specification.
 </summary>
 <param name="navigateTo">An option specifying to where to navigate.</param>
 <returns>True if the navigation operation succeeds, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.NavigateTo(System.String)">
 <summary>
 Navigates to a specified form in a running specification.
 </summary>
 <param name="formName">The name of the form to navigate to.</param>
 <returns>True if the navigation operation succeeds, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.GetExpectedSpecificationDirectory">
 <summary>
 Gets the current expected specification directory of a running specification.
 </summary>
 <returns>The full path to the specification directory.</returns>
 <exception cref="T:System.InvalidOperationException">The specification is not running.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.Delete">
 <summary>
 Deletes the specification represented by the context.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.EnsureRunnableProject">
 <summary>
 Returns if the current specification is valid or not.
 </summary>
 <returns>True if the specification is valid.</returns>
 <remarks>Invalid specifications contain a transition with no target state
 or a running state that transitions to another running state.</remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.UpdateArchivedState(System.Boolean)">
 <summary>
 Sets the archived state of a loaded/running specification.
 </summary>
 <param name="isArchived">The new value of the archived flag.</param>
 <exception cref="T:System.InvalidOperationException">A specification must be loaded in order to update its archived state.</exception>
 <remarks></remarks>        
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.NotifyFlowExecutionStarted">
 <summary>
 Called by Flows before executing.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.NotifyFlowExecutionEnded">
 <summary>
 Called by Flows to signal that the flow has finished executing.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.CreateChildContext(System.String,System.IServiceProvider)">
 <summary>
 Creates a new specification context for a child specification.
 </summary>
 <param name="definitionName">The name of the child-specification definition.</param>
 <param name="serviceProvider">A provider of additional services to the child specification.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Specification.SpecificationContext" /> type for the child specification.</returns>
 <remarks></remarks>
 <exception cref="T:DriveWorks.ItemNotFoundException">The specified definition does not exist.</exception>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.CloseActiveDialogCore(DriveWorks.Specification.SpecificationDialogCloseOptions)">
 <summary>
 Called by <see cref="T:DriveWorks.Specification.SpecificationForm"/> when it has been closed.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.SetActiveDialog(DriveWorks.Navigation.FormNavigationStep)">
 <summary>
 Opens a dialog for the given step.
 </summary>
 <param name="formStep">The form step to show.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.SetActiveDialog(DriveWorks.Specification.IDialogOwner,DriveWorks.Navigation.FormNavigationStep)">
 <summary>
 Opens a dialog for the given step.
 </summary>
 <param name="formStep">The form step to show.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.JumpToState(System.String)">
 <summary>
 This will change the current state of the specification,
 this will NOT use transitions to do so.
 </summary>
 <param name="targetStateName">The name of the state to move the specification to.</param>
 <remarks>
 Generally a special case method that is used in
 child specifications to match up state to parent.
 </remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.RegisterSpecificationDocument(System.String,System.Boolean)">
 <summary>
 Registers a new specification document with the active specification.
 </summary>
 <param name="documentPath">The fully qualified path to the document.</param>
 <param name="isHidden">True if the document is filtered from the the normal end-user view.</param>
 <exception cref="T:System.InvalidOperationException">Thrown if the project is not part of a running specification.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.StoreInState(DriveWorks.Specification.State,System.Action{DriveWorks.Specification.SpecificationDetails})">
 <summary>
 This is pretty much only used by the store specification task for doing its thing.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnActiveFormChanging(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.SpecificationContext.ActiveFormChanging" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnActiveFormChanged(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.SpecificationContext.ActiveFormChanged" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogChanging(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.SpecificationContext.ActiveDialogChanging" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogChanged(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.SpecificationContext.ActiveDialogChanged" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogOrFormChanging(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.SpecificationContext.ActiveDialogOrFormChanging" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogOrFormChanged(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.SpecificationContext.ActiveDialogOrFormChanged" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogOrFormUpdated(System.EventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.SpecificationContext.ActiveDialogOrFormUpdated" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnDialogOpening(System.EventArgs)">
 <summary>
 Raises the <see cref="M:DriveWorks.Specification.SpecificationContext.OnDialogOpening(System.EventArgs)" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnDialogClosing(System.EventArgs)">
 <summary>
 Raises the <see cref="M:DriveWorks.Specification.SpecificationContext.OnDialogClosing(System.EventArgs)" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnDialogClosed(System.EventArgs)">
 <summary>
 Raises the <see cref="M:DriveWorks.Specification.SpecificationContext.OnDialogClosed(System.EventArgs)" /> event.
 </summary>
 <param name="e">The event data for the event.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.OnFormValueChanged(System.Object,DriveWorks.Forms.DataModel.ValueChangedEventArgs)">
 <summary>
 Raises the <see cref="E:DriveWorks.Specification.SpecificationContext.FormValueChanged"/> event.
 <param name="e">The event data for the event.</param>
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.AllocateSpecificationId">
 <summary>
 Allocates a specification identifier to the specification, by default, uses the
 next specification identifier from the group.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.AssertLoaded">
 <summary>
 Raises an exception if the specification context is open.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.AssertNotLoaded">
 <summary>
 Raises an exception if the specification context is not open.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.AssertRunning">
 <summary>
 Raises an exception if the specification context is not in a running state.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.AssertNotRunning">
 <summary>
 Raises an exception if the specification context is in a running state.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.ResetSpecificationId">
 <summary>
 Assigns a new specification Id to this specification.
 To be used ONLY for embedded specifications, when they are part of a specification copy.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.CloseActiveDialog_NoChecks(DriveWorks.Specification.SpecificationDialogCloseOptions)">
 <summary>
 Closes the active dialog without any checks.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.LogSettings(DriveWorks.Reporting.IReportWriter,DriveWorks.Specification.SpecificationEnvironment)">
 <summary>
 Logs the specified settings object to the given report.
 </summary>
 <param name="report"></param>
 <param name="settings"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.GetNextForm(DriveWorks.Navigation.NavigationStep)">
 <summary>
 Gets the next form in the navigation, or a null reference.
 </summary>
 <param name="navigationStep">The current navigiation step.</param>
 <returns>The next form in the navigation or a null reference.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.BeginReport(System.Int32,System.String)">
 <remarks>
 This is only exposed outside this class for the store in state task. Super not cool to call whenever you want.
 </remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.LoadedSpecState.#ctor(DriveWorks.Specification.SpecificationContext,System.Int32,DriveWorks.ProjectDetails,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Specification.SpecificationContext.LoadedSpecState" /> class.
 </summary>
 <param name="context">The context for which the object will manage state.</param>
 <param name="specificationId">The specification id of the loaded specification.</param>
 <param name="projectDetails">The details of the project from which the specification was created.</param>
 <param name="projectFilePath">The path to the specification's project file (which is the actual project file for a new specification, or the cached project file for an existing specification).</param>
 <param name="designMasterPath">The path to the specification's design master file.</param>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.LoadedSpecState.ProjectFilePath">
 <summary>
 Returns the path to either the specification's cached project file,
 or the actual project file if the specification is new.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.LoadedSpecState.DesignMasterPath">
 <summary>
 Returns the path to either the specification's cached design master,
 or the actual design master if the specification is new.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.LoadedSpecState.CurrentState">
 <summary>
 Gets the state the specification is currently in.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationContext.LoadedSpecState.SpecificationDetails">
 <summary>
 Gets/sets the specification details.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.LoadedSpecState.ChangeState(DriveWorks.Specification.State)">
 <summary>
 Changes the specification's active state to the given state.
 </summary>
 <param name="newState">The new current state of the specification.</param>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.LoadedSpecState.ResetSpecificationDetails">
 <summary>
 If <see cref="M:DriveWorks.Specification.SpecificationContext.LoadedSpecState.ApplySpecificationDetails(DriveWorks.Specification.SpecificationDetails)" /> has been called, this will clear the specification
 details in the event that something went wrong.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.LoadedSpecState.ApplySpecificationDetails(DriveWorks.Specification.SpecificationDetails)">
 <summary>
 Sets <see cref="P:DriveWorks.Specification.SpecificationContext.LoadedSpecState.SpecificationDetails" /> and related properties.
 </summary>
 <param name="value">The new specification details.</param>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.LoadedSpecState.UpdateSpecificationDetails(System.String,DriveWorks.Specification.State,System.String,System.String,System.String[])">
 <summary>
 Updates the specification details instance with the specified new values.
 </summary>
 <param name="newSpecName">The new spec name.</param>
 <param name="newState">The new state.</param>
 <param name="newSpecDir">The new spec dir.</param>
 <param name="newMetaDir">The new spec meta dir.</param>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.LoadedSpecState.UpdateSpecificationDetails(DriveWorks.Specification.SpecificationDetails)">
 <summary>
 Updates the specification details with the specified details.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.LoadedSpecState.SetEditorOverride(System.Guid)">
 <summary>
 Sets the unique id of the user who will be set as the editor when the specification
 is committed to the group.
 </summary>
 <param name="newEditorId">The unique identifier of the new editor.</param>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.RunningSpecState.#ctor(DriveWorks.Specification.SpecificationContext)">
 <summary>
 This constructor is typically for root specifications or specifications that do not support internal design masters.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.RunningSpecState.#ctor(DriveWorks.Specification.SpecificationContext,DriveWorks.Hosting.ProjectManager)">
 <summary>
 This constructor is typically for projects that have their design master internal and are a child specification.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.RunningSpecState.CloseSpecification(System.Boolean,System.Collections.Generic.IList{DriveWorks.Specification.Task})">
 <summary>
 Closes the specification project, optionally saving and moving the files from their temporary location to their final location.
 </summary>
 <param name="save">Determines whether to save the design master.</param>
 <param name="deferredTaskList">A list of tasks that were deferred.</param>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.RunningSpecState.LoadFirstForm">
 <summary>
 Loads the first form in the specification (must be done after everything is initialized)
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationContext.RunningSpecState.RebuildTaskList">
 <summary>
 Removes all items that are currently in the task list then updates the task list
 with tasks determined from the message codes on any controls on the active form.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationContext.CancelState">
 <summary>
 Stores state information required to cancel a running a specification.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationEnvironment">
 <summary>
 Provides the environment required for a specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.ServiceProvider">
 <summary>
 Gets/sets the service provider to be used by the specification context
 and tasks when interaction with the hosting application is required.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.ReportingLevel">
 <summary>
 Gets/sets the reporting level to use for specification reporting. Setting this value
 will automatically change the <see cref="P:DriveWorks.Specification.SpecificationEnvironment.OverrideProjectReportingLevel" /> to true.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.OverrideProjectReportingLevel">
 <summary>
 Gets/sets whether the reporting level set on the 
 environment should override the equivalent level 
 set on the project. This is automatically set to true
 if the reporting level is changed on the environment.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.TemporaryFolderPath">
 <summary>
 Gets/sets the path to the temporary folder.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.SpecificationBasePath">
 <summary>
 Gets/sets the base path for specification files (this is usually equivalent to the group's default specification folder).
 </summary>
 <remarks>
 This property is usually initialized using the <see cref="P:DriveWorks.Group.DefaultSpecificationFolder" />
 property.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.AllowIgnoreTaskList">
 <summary>
 Gets/sets whether the user is allowed to ignore the state of the task
 list when navigating and invoking transitions.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 <para>
 The principle consumer of this feature is the specification test feature
 in which the user is allowed to navigate even if they have not resolved
 all the tasks in the task list.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.DocumentGeneration">
 <summary>
 Gets/sets when documents are generated using the default specification flow.
 </summary>
 <remarks>
 This setting is defined for the default specification-flow which uses it to determine
 whether to generate documents during the finish process, or release process, or both.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.ReleaseToAutopilot">
 <summary>
 Gets/sets whether the Release-to-Autopilot setting is enabled.
 </summary>
 <remarks>
 This setting is defined for the default specification-flow which uses it to determine
 whether the release transition should be enacted using DriveWorks Autopilot.
 </remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.CanEditCompletedSpecifications">
 <summary>
 Gets/sets whether completed specifications can be edited.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.OverwriteReleasedComponents">
 <summary>
 Gets/sets whether, during the release of components, components that already
 exist are overwritten or used as-is. Only takes effect if <see cref="P:DriveWorks.Specification.SpecificationEnvironment.CanEditCompletedSpecifications" />
 is enabled.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.IsAsynchronous">
 <summary>
 Gets/sets whether or not to run the specification asynchronously.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationEnvironment.IsLocked">
 <summary>
 Determines whether the object has been locked.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationEnvironment.Lock">
 <summary>
 Used internally to lock a settings object to prevent further modification.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationEnvironment.Clone">
 <summary>
 Get an unlocked clone of the current enviroment.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.Condition">
 <summary>
 Represents a condition which governs the availability of an operation, task, or transition in
 a specification-flow.
 </summary>
 <example>
    <code lang="VB" title="Condition Example">
 <![CDATA[
 ' Import the Specification namespace so we have access to Specification flow
 Imports DriveWorks.Specification
 
 <Condition("My Condition", "embedded://MyTasksAndConditions.Puzzle-16x16.png")> _
 Public Class MyCondition
    Inherits Condition
 
    ' Register properties so DriveWorks can see them and build rules for them
    Private mMyProperty As FlowProperty(Of Boolean) = Me.Properties.RegisterBooleanProperty("Condition Result", "Specifies the result of the condition")
 
    Protected Overrides Function Evaluate(ByVal specificationContext As SpecificationContext) As Boolean
 
        ' Do something here to determine if the condition is met
        Return mMyProperty.Value
    End Function
 End Class]]>
 </code>
 </example>
</member>
<member name="E:DriveWorks.Specification.Condition.Deleted">
 <summary>
 Occurs when the condition is deleted.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.PassedOutput">
 <summary>
 The output that gets fulfilled when this condition passes.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.FailedOutput">
 <summary>
 The output that gets fulfilled when this condition does not pass.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.SuppressStandardOutputs">
 <summary>
 Gets whether standard outputs (Passed / Failed) should be suppressed.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.IsDeleted">
 <summary>
 Determines whether the condition has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.FailBehavior">
 <summary>
 Gets/sets the fail behavior of the condition.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.Negated">
 <summary>
 Determins whether the condition evaluation is to be negated (have not applied to it).
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.Title">
 <summary>
 Gets/sets the human-readable title of the condition.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Condition.Delete">
 <summary>
 Deletes the condition.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Condition.GetElement">
 <summary>
 Returns a deep copy of this condition's Xml Element.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.Properties">
 <summary>
 Gets access to the property registration service.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Condition.AssertNotDeleted">
 <summary>
 Throws an instance of the <see cref="T:DriveWorks.ItemDeletedException" /> if the item has been deleted.
 </summary>
 <exception cref="T:DriveWorks.ItemDeletedException">The item has been deleted.</exception>
</member>
<member name="M:DriveWorks.Specification.Condition.DeleteCore">
 <summary>
 Performs any clean-up required when overridden by a derived class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Condition.Evaluate(DriveWorks.Specification.SpecificationContext)">
 <summary>
 When overridden by a derived class, evaluates the condition.
 </summary>
 <param name="specificationContext">The active execution context.</param>
 <returns>True if the condition passes, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.Condition.Flow">
 <summary>
 Gets the flow this node is associated with.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.Top">
 <summary>
 Gets the top position of this condition.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.Left">
 <summary>
 Gets the left position of this condition.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.Outputs">
 <summary>
 Gets a collection of all outputs of this node.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Condition.NavigationOutput">
 <summary>
 Gets the navigation output of this node.
 </summary>
 <remarks>Warning: Connecting another <see cref="T:DriveWorks.EventFlow.IFlowNode"/> to this output bypasses the validation of the condition.</remarks>
</member>
<member name="P:DriveWorks.Specification.Condition.NavigationInput">
 <summary>
 Gets the navigation input of this node.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Condition.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
 <summary>
 Attempts to retrieve the end point with the given name.
 </summary>
 <param name="name">The name of the end point to find.</param>
 <param name="isNavigation">True if the requested end point is a navigation end point.</param>
 <param name="output">The end point (if found), otherwise a null reference.</param>
 <returns>True if the end point was found, otherwise false.</returns>
</member>
<member name="P:DriveWorks.Specification.Condition.Element">
 <summary>
 Gets the XML element which provides the backing data for the condition.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Condition.Initialize(DriveWorks.Specification.Conditions,DriveWorks.Abstractions.ICustomizable,System.Xml.Linq.XElement)">
 <summary>
 Initializes the condition from its serialized information.
 </summary>        
 <param name="manager">The condition manager.</param>
 <param name="changeNotifier">The object to notify when customizations are made.</param>
 <param name="element">The serialized information about the condition.</param>        
</member>
<member name="T:DriveWorks.Specification.Conditions">
 <summary>
 Manages the conditions which govern the availability of an item in a specification-flow.
 </summary>
</member>
<member name="F:DriveWorks.Specification.Conditions.ELEMENT_NAME">
 <summary>
 Gets the element name used for conditions.
 </summary>
</member>
<member name="E:DriveWorks.Specification.Conditions.ConditionCreated">
 <summary>
 Occurs when a condition is created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Conditions.ConditionDeleted">
 <summary>
 Occurs when a condition is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.Conditions.Count">
 <summary>
 Gets the number of conditions in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Conditions.Item(System.Int32)">
 <summary>
 Gets the condition at the specified index.
 </summary>
 <param name="index">The zero-based index of the condition to get.</param>
 <exception cref="T:System.IndexOutOfRangeException">Thrown if the specified index is out of range.</exception>
</member>
<member name="M:DriveWorks.Specification.Conditions.CreateCondition``1(System.String)">
 <summary>
 Creates and adds a new condition to the condition sequence.
 </summary>
 <typeparam name="T">The type of the condition to add.</typeparam>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
 <returns>The newly created condition.</returns>
</member>
<member name="M:DriveWorks.Specification.Conditions.CreateCondition(System.Type,System.String)">
 <summary>
 Creates and adds a new condition to the condition sequence.
 </summary>
 <param name="conditionType">The type of the condition to add.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in <paramref name="conditionType" /> does not inherit from <see cref="T:DriveWorks.Specification.Condition" /> or isn't defined in a extension library.</exception>
 <returns>The newly created condition.</returns>
</member>
<member name="M:DriveWorks.Specification.Conditions.CreateCondition(System.Type,System.String,System.Double,System.Double)">
 <summary>
 Creates and adds a new condition to the condition sequence.
 </summary>
 <param name="conditionType">The type of the condition to add.</param>
 <param name="left">The left position of the condition.</param>
 <param name="top">The top position of the condition.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in <paramref name="conditionType" /> does not inherit from <see cref="T:DriveWorks.Specification.Condition" /> or isn't defined in a extension library.</exception>
 <returns>The newly created condition.</returns>
</member>
<member name="M:DriveWorks.Specification.Conditions.Move(System.Int32,System.Int32)">
 <summary>
 Move the condition from its current index to the specified index.
 </summary>
 <param name="oldIndex">The old index of the condition.</param>
 <param name="newIndex">The new index of the condition.</param>
</member>
<member name="M:DriveWorks.Specification.Conditions.Insert(System.Int32,DriveWorks.Specification.Condition)">
 <summary>
 Inserts the condition into the condition sequence at the specified index. 
 </summary>
 <param name="index">The index at which to insert the condition.</param>
 <param name="condition">The condition to insert.</param>
 <exception cref="T:System.IndexOutOfRangeException">Thrown if the <paramref name="index" /> parameter is out of range.</exception>
 <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="condition" /> parameter is a null reference.</exception>
</member>
<member name="M:DriveWorks.Specification.Conditions.IndexOf(DriveWorks.Specification.Condition)">
 <summary>
 Gets the index of the given condition.
 </summary>
 <param name="condition">The condition whose index to retrieve.</param>
 <returns>The index of the condition, or -1 if the condition is not a part of this collection.</returns>
</member>
<member name="M:DriveWorks.Specification.Conditions.ToArray">
 <summary>
 Copies the conditions into a new array and returns it.
 </summary>
 <returns>An array of conditions.</returns>
</member>
<member name="M:DriveWorks.Specification.Conditions.Clear">
 <summary>
 Clears all of the conditions.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Conditions.GetConditionsWithoutRedirect">
 <summary>
 Gets the conditions without redirect-retrieving them from the macro.
 </summary>
 <devnote>This should *only* be used during the migration of Specification Macros from pre-16 projects.</devnote>
</member>
<member name="M:DriveWorks.Specification.Conditions.CreateCondition(System.Type,System.Xml.Linq.XElement)">
 <summary>
 Creates and adds a new condition to the condition sequence.
 </summary>
 <param name="conditionType">The type of the condition to add.</param>
 <param name="existingElement">The definition of the condition.</param>
 <returns>The newly created condition.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Conditions.GetEnumerator">
 <summary>
 Gets an enumerator suitable for enumerating the conditions in the collection.
 </summary>
 <returns>An IEnumerator specialized for the <see cref="T:DriveWorks.Specification.Condition" /> type.</returns>
</member>
<member name="T:DriveWorks.Specification.FlowEvent">
 <summary>
 Represents an event in a specification-flow.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowEvent.Name">
 <summary>
 Gets the name of the event.
 </summary>
</member>
<member name="P:DriveWorks.Specification.FlowEvent.TaskSequence">
 <summary>
 Gets the task sequence which defines the actions to take when the event
 occurs.
 </summary>
</member>
<member name="T:DriveWorks.Specification.SpecificationNameInvalidException">
 <summary>
 Thrown when a transition could not be invoked because the specification name
 is invalid.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationNameRuleInvalidException">
 <summary>
 Thrown when a transition could not be invoked because the specification's name
 rule is invalid.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.SpecificationExistsException">
 <summary>
 Thrown when a transition could not be invoked because a specification with the same name already 
 exists.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.IncompleteNavigationException">
 <summary>
 Thrown when a specification is started based on a project with an incomplete navigation.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.InvalidTransitionTargetException">
 <summary>
 Thrown when a specficaiton transition has no target state or connects two running states together.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.TaskListNotEmptyException">
 <summary>
 Thrown when the task list contains tasks which require resolution before performing some
 action in the specification.    
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.InitialStateInvalidException">
 <summary>
 Thrown when a specification cannot be loaded because the initial state is not specified.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.PropertyInvalidException">
 <summary>
 Thrown when a project cannot be loaded because a referenced property could
 not be found or was of the wrong type.
 </summary>
</member>
<member name="P:DriveWorks.Specification.PropertyInvalidException.TypeName">
 <summary>
 Gets the name of the type.
 </summary>
</member>
<member name="P:DriveWorks.Specification.PropertyInvalidException.PropertyName">
 <summary>
 Gets the name of the property that wasn't found.
 </summary>
</member>
<member name="T:DriveWorks.Specification.StateNotFoundException">
 <summary>
 Thrown when a project cannot be loaded because one or more referenced states
 could not be found.
 </summary>
</member>
<member name="P:DriveWorks.Specification.StateNotFoundException.StateId">
 <summary>
 Gets the identifier of the state that was not found.
 </summary>
</member>
<member name="T:DriveWorks.Specification.ConditionNotFoundException">
 <summary>
 Thrown when a project cannot be loaded because implementations could not be found for one or
 more conditions.
 </summary>
</member>
<member name="P:DriveWorks.Specification.ConditionNotFoundException.TypeName">
 <summary>
 Gets the type name of the condition for which an implementation could not be found.
 </summary>
</member>
<member name="T:DriveWorks.Specification.TaskNotFoundException">
 <summary>
 Thrown when a project cannot be loaded because implementations could not be found for one or
 more tasks.
 </summary>
</member>
<member name="P:DriveWorks.Specification.TaskNotFoundException.TypeName">
 <summary>
 Gets the type name of the task for which an implementation could not be found.
 </summary>
</member>
<member name="T:DriveWorks.Specification.NoInitialStateException">
 <summary>
 Thrown when an attempt is made to start a specification based on a project
 with a specification flow whose initial state is not set.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.NotRunningStateException">
 <summary>
 Thrown when an attempt is made to start a specification based on a project
 with a specification flow whose initial state is not a running state.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.MacroAbortedException">
 <summary>
 Thrown when DriveWorks macro execution is aborted.
 </summary>
</member>
<member name="T:DriveWorks.Specification.TaskExecutionException">
 <summary>
 Thrown when a DriveWorks task fails to run.
 </summary>
</member>
<member name="T:DriveWorks.Specification.UnparsableFlowPropertyValueException">
 <summary>
 Thrown when a FlowProperty's rule results in a value that can't
 be parsed to the FlowProperty's type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.UnparsableFlowPropertyValueException.PropertyName">
 <summary>
 The name of the property
 </summary>
</member>
<member name="P:DriveWorks.Specification.UnparsableFlowPropertyValueException.Value">
 <summary>
 The value that was given to the property
 </summary>
</member>
<member name="P:DriveWorks.Specification.UnparsableFlowPropertyValueException.ExpectedType">
 <summary>
 The type the property expected, i.e.: "numerical", "boolean"
 </summary>
</member>
<member name="M:DriveWorks.Specification.UnparsableFlowPropertyValueException.#ctor(System.String,System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Specification.UnparsableFlowPropertyValueException" /> class.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="value">The value that was given.</param>
 <param name="type">The expected type.</param>
</member>
<member name="T:DriveWorks.Specification.Operation">
 <summary>
 Represents an operation which can be invoked for a given state.
 </summary>
</member>
<member name="E:DriveWorks.Specification.Operation.Deleted">
 <summary>
 Raised when the operation is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Operation.NameChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Specification.Operation.Name" /> property is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Operation.TitleChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Specification.Operation.Title" /> property is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.Operation.State">
 <summary>
 Gets the state to which the operation belongs.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Operation.Name">
 <summary>
 Gets the unique name of the operation.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Operation.Title">
 <summary>
 Gets/sets the title of the operation as will be seen by the user.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Operation.TaskSequence">
 <summary>
 Gets/sets the task sequence which is executed when the task is executed
 </summary>
</member>
<member name="P:DriveWorks.Specification.Operation.Teams">
 <summary>
 Gets a team manager which can be used to decide which teams have
 access to the operation.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Operation.Conditions">
 <summary>
 Gets a condition manager which can be used to add and work with conditions
 which can control the availability of the operation in an extensible way.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Operation.Element">
 <summary>
 Gets the XML element which provides the backing data for the operation
 </summary>
</member>
<member name="M:DriveWorks.Specification.Operation.Delete">
 <summary>
 Deletes the transition.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.Operations">
 <summary>
 Manages the operations which are available for a given state in a specification-flow.
 </summary>
</member>
<member name="E:DriveWorks.Specification.Operations.OperationCreated">
 <summary>
 Occurs when an operation is created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Operations.OperationDeleted">
 <summary>
 Occurs when an operation is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Operations.OperationMoved">
 <summary>
 Occurs when an operation's index is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Operations.TryGetOperation(System.String,DriveWorks.Specification.Operation@)">
 <summary>
 Gets the operation with the specified name.
 </summary>
 <param name="name">The name of the operation to get.</param>
 <param name="operation">Receives the operation.</param>
 <returns>True if the operation was found and returned, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Operations.GetOperation(System.String)">
 <summary>
 Gets the operation with the specified name.
 </summary>
 <param name="name">The name of the operation to get.</param>
 <returns>The operation with the specified name.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">The operation could not be found.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Operations.CreateOperation(System.String)">
 <summary>
 Creates and returns a new operation with the specified name.
 </summary>
 <param name="name">The unique name of the operation.</param>
 <returns></returns>
 <remarks>
 Multiple operations can share the same title and been hidden/shown based on conditions to allow 
 operations which are conceptually similar but with different semantics based on the environment
 state.
 </remarks>
</member>
<member name="M:DriveWorks.Specification.Operations.Move(System.Int32,System.Int32)">
 <summary>
 Move the operation from its current index to the specified index.
 </summary>
 <param name="oldIndex">The old index of the operation.</param>
 <param name="newIndex">The new index of the operation.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Operations.ToArray">
 <summary>
 Copies the operations to an array and returns it.
 </summary>
 <returns>An array of operations.</returns>
</member>
<member name="P:DriveWorks.Specification.Operations.Count">
 <summary>
 Gets the number of operations in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Operations.Item(System.Int32)">
 <summary>
 Gets the operation at the specified index.
 </summary>
 <param name="index">The index of the operation to retrieve.</param>
</member>
<member name="M:DriveWorks.Specification.Operations.NotifyDeleting(DriveWorks.Specification.Operation)">
 <summary>
 Used by the transition class to notify the manager
 when it is being deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Operations.NotifyDeleted(DriveWorks.Specification.Operation)">
 <summary>
 Used by the transition class to notify the manager
 when it has been deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Operations.RenameNameChanging(DriveWorks.Specification.Operation,System.String)">
 <summary>
 Used by operation class to notify the manager
 when its name is changing.
 </summary>
 <param name="o">The operation whose name is changing.</param>
 <param name="newName">The new name of the operation.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Operations.GetEnumerator">
 <summary>
 Gets an enumerator suitable for enumerating the operations in the collection.
 </summary>
 <returns>An IEnumerator specialized for the <see cref="T:DriveWorks.Specification.Operation" /> type.</returns>
</member>
<member name="T:DriveWorks.Specification.SpecificationFlowDefinition">
 <summary>
 Supports working with a customized specification-flow definition on a project.
 </summary>
 <remarks>
 <para>
 For more information about specification flow, consult the specification-flow topic in the user 
 and API documentation.
 </para>
 <para>
 Technically it is possible through the API to modify the specification-flow definition
 for a specification, however this is not recommended and is not supported.
 </para>
 </remarks>
 <devdoc>
 The specification-flow API should not have any dependencies outside of the <see cref="N:DriveWorks.Specification" />
 namespace.
 </devdoc>
</member>
<member name="E:DriveWorks.Specification.SpecificationFlowDefinition.IsDefaultChanged">
 <summary>
 Raised when the IsDefault property is changed after the specification flow is customized from default or is reset back to default.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationFlowDefinition.InitialState">
 <summary>
 Gets/sets the initial state of a newly created specification.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationFlowDefinition.States">
 <summary>
 Gets the states which have been defined for the specification flow.
 </summary>
 <returns>An instance of the <see cref="P:DriveWorks.Specification.SpecificationFlowDefinition.States" /> class which can be used to create and retrieve states.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.SpecificationFlowDefinition.IsDefault">
 <summary>
 Gets whether the current specification-flow is the default specification-flow.
 </summary>
 <remarks>
 If the specification flow has not been customized, a default specification-flow
 is loaded from the Engine.
 </remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationFlowDefinition.ResetDefault">
 <summary>
 Resets the specification-flow to the default.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationFlowDefinition.Customize">
 <summary>
 Let the definition know it has been customized and therefore the changes need persisting in the project.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationFlowDefinition.LoadSpecificationFlow(System.IO.TextReader)">
 <summary>
 Loads in a custom specification flow from XML.
 </summary>
 <param name="reader">Input XML for new specification flow.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.SpecificationFlowDefinition.ExportXml">
 <summary>
 Get a copy of the current specification flow XML.
 </summary>
</member>
<member name="M:DriveWorks.Specification.SpecificationFlowDefinition.GetDefaultSpecificationFlow(System.Boolean)">
 <summary>
 Gets the XML representing the default specification flow.
 </summary>
 <param name="stripComments">True to strip comments from the specification flow XML, otherwise false.</param>
 <returns>An <see cref="T:System.Xml.Linq.XElement" /> which has been loaded from the default specification flow definition.</returns>
</member>
<member name="P:DriveWorks.Specification.SpecificationFlowDefinition.Host">
 <summary>
 Gets the host to which the specification flow belongs.
 </summary>
</member>
<member name="P:DriveWorks.Specification.SpecificationFlowDefinition.ProjectState">
 <summary>
 Gets the current project state for this definition.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>This will return nothing if we are lightly loaded. But it shouldn't be needed if that is the case.</remarks>
</member>
<member name="T:DriveWorks.Specification.StateType">
 <summary>
 Represents the type of state.
 </summary>
</member>
<member name="F:DriveWorks.Specification.StateType.Running">
 <summary>
 If a state is a "Running" state it means it provides forms to the end-user.
 </summary>
</member>
<member name="F:DriveWorks.Specification.StateType.Paused">
 <summary>
 If a state is a "Paused" state, it means it is waiting for the user to perform an operation
 which will move the specification into another state.
 </summary>
</member>
<member name="F:DriveWorks.Specification.StateType.Automatic">
 <summary>
 If a state is an "Automatic" state, it means it is waiting for a DriveWorks Server machine
 to enact an operation which will move the specification into another state.
 </summary>
</member>
<member name="T:DriveWorks.Specification.State">
 <summary>
 Provides a means for working with the definition of a specific state in a specification-flow.
 </summary>
</member>
<member name="E:DriveWorks.Specification.State.Deleted">
 <summary>
 Raised when the <see cref="M:DriveWorks.Specification.State.Delete" /> method is called to delete the state.
 </summary>
</member>
<member name="E:DriveWorks.Specification.State.TitleChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Specification.State.Title" /> property changes.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.State.TypeChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Specification.State.Type" /> property changes.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.State.Id">
 <summary>
 Gets the unique identifier of the state.
 </summary>
</member>
<member name="P:DriveWorks.Specification.State.Title">
 <summary>
 Gets/sets the title.
 </summary>
</member>
<member name="P:DriveWorks.Specification.State.Type">
 <summary>
 Gets/sets the type of state.
 </summary>
</member>
<member name="P:DriveWorks.Specification.State.Operations">
 <summary>
 Gets the operation manager for the state.
 </summary>
</member>
<member name="P:DriveWorks.Specification.State.Transitions">
 <summary>
 Gets the transition manager for the state.
 </summary>
</member>
<member name="P:DriveWorks.Specification.State.OnEnterEvent">
 <summary>
 Gets the event definition which describes the actions taken when the state is entered.
 </summary>
</member>
<member name="P:DriveWorks.Specification.State.OnLeaveEvent">
 <summary>
 Gets the event definition which describes the actions taken when the state is exited.
 </summary>
</member>
<member name="P:DriveWorks.Specification.State.Teams">
 <summary>
 Gets the teams which have access to the state.
 </summary>
</member>
<member name="P:DriveWorks.Specification.State.IsDeleted">
 <summary>
 Gets whether the state has been deleted and therefore can't be used.
 </summary>
</member>
<member name="M:DriveWorks.Specification.State.Delete">
 <summary>
 Deletes the state from the specification-flow.
 </summary>
</member>
<member name="M:DriveWorks.Specification.State.CloneXml">
 <summary>
 Creates a clone of the state's underlying XML and returns it.
 </summary>
 <returns>An XElement instance containing the cloned XML.</returns>
</member>
<member name="M:DriveWorks.Specification.State.AssertNotDeleted">
 <summary>
 Throws the <see cref="T:DriveWorks.ItemDeletedException" /> if the state has been deleted.
 </summary>
</member>
<member name="T:DriveWorks.Specification.States">
 <summary>
 Provides access to the states for a specification flow.
 </summary>
</member>
<member name="E:DriveWorks.Specification.States.StateCreated">
 <summary>
 Occurs when a state is created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.States.StateDeleted">
 <summary>
 Occurs when a state is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.States.Count">
 <summary>
 Gets the number of states in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Specification.States.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to get.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The specified index was out of the range of the collection.</exception>
</member>
<member name="M:DriveWorks.Specification.States.CreateState">
 <summary>
 Creates and returns a new state.
 </summary>
 <returns>A new instance of the <see cref="T:DriveWorks.Specification.State" /> type.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.States.GetState(System.Guid)">
 <summary>
 Gets the state with the specified identifier.
 </summary>
 <param name="stateId">The unique identifier of the state to get.</param>
 <returns>The state with the specified identifier.</returns>
 <remarks></remarks>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified state is not found.</exception>
</member>
<member name="M:DriveWorks.Specification.States.TryGetState(System.Guid,DriveWorks.Specification.State@)">
 <summary>
 Tries to get the state with the specified identifier.
 </summary>
 <param name="stateId">The unique identifier of the state to get.</param>
 <param name="state">A reference to a variable which will receive the state.</param>
 <returns>True if the state was found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Specification.States.TryGetState(System.String,DriveWorks.Specification.State@)">
 <summary>
 Tries to get the state with the specified title.
 </summary>
 <param name="title">The title of the state to try find.</param>
 <param name="state">The matching state or null.</param>
 <returns>True if the state is found.</returns>
</member>
<member name="M:DriveWorks.Specification.States.CreateState(System.Guid)">
 <summary>
 Creates and returns a new state, created with a specific ID.
 </summary>
 <param name="stateId">The ID to give the new state.</param>
 <returns>A new instance of the <see cref="T:DriveWorks.Specification.State" /> type.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.States.NotifyDeleting(DriveWorks.Specification.State)">
 <summary>
 Called by the <see cref="T:DriveWorks.Specification.State" /> class to notify the
 manager that it is being deleted.
 </summary>
 <param name="state">The affected state.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.States.NotifyDeleted(DriveWorks.Specification.State)">
 <summary>
 Called by the <see cref="T:DriveWorks.Specification.State" /> class to notify the
 manager that it has been deleted.
 </summary>
 <param name="state">The affected state.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Specification.Task">
 <summary>
 The base class for all tasks which can be added to the task sequences for events which get fired
 by operations, transitions, and states.
 </summary>
 <example>
    <code lang="VB" title="Task Example">
 <![CDATA[
 ' Import main DriveWorks types
 Imports DriveWorks
 
 ' Import the Specification namespace so we have access to Specification flow
 Imports DriveWorks.Specification
 
 <Task("My Task", "embedded://MyTasksAndConditions3.Puzzle-16x16.png")> _
 Public Class MyTask
    Inherits Task
 
    ' Register properties so DriveWorks can see them and build rules for them
    Private mMyName As FlowProperty(Of String) = Me.Properties.RegisterStringProperty("Name", "Name of the constant to set")
    Private mMyValue As FlowProperty(Of String) = Me.Properties.RegisterStringProperty("Value", "Value of the constant")
 
    Protected Overrides Sub Execute(ByVal ctx As SpecificationContext)
        Dim theConstant As ProjectConstant = Nothing
 
        ' Perform the main work of the task here
        If ctx.Project.Constants.TryGetConstant(mMyName.Value, theConstant) Then
 
            ' Set the constant value 
            theConstant.Value = mMyValue.Value
        Else
 
            ' Report that we couldn't find the constant
            ctx.Report.WriteEntry(Reporting.ReportingLevel.Minimal, Reporting.ReportEntryType.Error, "My Task", "Constant: " & mMyName.Value, "The constant didn't exist", Nothing)
        End If
    End Sub
 End Class]]>
 </code>
 </example>
</member>
<member name="E:DriveWorks.Specification.Task.Deleted">
 <summary>
 Occurs when the task is deleted.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Task.Outputs">
 <summary>
 Gets the collection of all outputs that belong to this task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Task.Flow">
 <summary>
 Gets the <see cref="T:DriveWorks.EventFlow.FlowBase"/> that owns this Task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Task.NavigationInput">
 <summary>
 Gets the end point that allows logical navigation connections to be made to this task.
 </summary>
 <remarks>This end point can be mapped to a <see cref="T:DriveWorks.EventFlow.NodeNavigationOutput"/> to set up the order in which the tasks will execute.</remarks>
</member>
<member name="P:DriveWorks.Specification.Task.NavigationOutput">
 <summary>
 Gets the end point that allows logical navigation connections to be made from this task.
 </summary>
 <remarks>This end point can be mapped to a <see cref="T:DriveWorks.EventFlow.NodeNavigationInput"/> to set up the order in which the tasks will execute.</remarks>
</member>
<member name="P:DriveWorks.Specification.Task.Left">
 <summary>
 Gets the left position of this task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Task.Top">
 <summary>
 Gets the top position of this task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Task.Title">
 <summary>
 Gets/sets the human-readable title of the task.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Task.Conditions">
 <summary>
 Gets a condition manager which can be used to add and work with conditions
 which can control whether the task gets executed.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Task.Delete">
 <summary>
 Deletes the condition.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Task.GetElement">
 <summary>
 Returns a deep copy of this task's Xml Element.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Task.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
 <summary>
 Attempts to retrieve the end point with the given name.
 </summary>
 <param name="name">The name of the end point to find.</param>
 <param name="isNavigation">True if the requested end point is a navigation end point.</param>
 <param name="output">The end point (if found), otherwise a null reference.</param>
 <returns>True if the end point was found, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Specification.Task.DeleteCore">
 <summary>
 Performs any clean-up required when overridden by a derived class.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Task.Execute(DriveWorks.Specification.SpecificationContext)">
 <summary>
 When overridden by a derived class, executes the action represented by the task.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
</member>
<member name="M:DriveWorks.Specification.Task.GetConfirmationMessage(DriveWorks.Specification.SpecificationContext)">
 <summary>
 When overridden by a derived class, gets a confirmation message which should be shown to an interactive
 user before executing the task sequence to which task belongs.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>A confirmation message for the user, or a null reference if no confirmation is necessary.</returns>
</member>
<member name="M:DriveWorks.Specification.Task.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Determines whether the task requires the specification context to be open.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>True if the specification needs to be running for the task to execute.</returns>
</member>
<member name="M:DriveWorks.Specification.Task.IsDeferred(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Determines whether the task should be executed after the design master for the specification
 is saved.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>True if the task should be executed after the design master is closed.</returns>
</member>
<member name="M:DriveWorks.Specification.Task.IsDeleteContextTask(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Determines whether the task will be deleting the specification context in it's execution.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>True if the task will delete the specification context.</returns>
 <remarks>Tasks that qualify will be made to run last, despite their task ordering.</remarks>
</member>
<member name="M:DriveWorks.Specification.Task.RequiresSingleContext(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Determines whether the task can be executed if there is more than one specification selected.
 </summary>
 <param name="ctx">The specification context for the active specification.</param>
 <returns>True if the task requires only one specification to be selectedn in order to execute.</returns>
</member>
<member name="M:DriveWorks.Specification.Task.InitializeMetadata(System.Xml.Linq.XElement)">
 <summary>
 Called when the backing store for this task has been initialized and the meta data is available to be read.
 </summary>
 <param name="element">The XML element containing the serialized meta data.</param>
</member>
<member name="M:DriveWorks.Specification.Task.AssertNotDeleted">
 <summary>
 Throws an instance of the <see cref="T:DriveWorks.ItemDeletedException" /> if the item has been deleted.
 </summary>
 <exception cref="T:DriveWorks.ItemDeletedException">The item has been deleted.</exception>
</member>
<member name="P:DriveWorks.Specification.Task.Properties">
 <summary>
 Gets access to the property registration service.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Task.Element">
 <summary>
 Gets the XML element which provides the backing data for the task.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Task.Initialize(DriveWorks.Specification.TaskSequence,DriveWorks.Abstractions.ICustomizable,DriveWorks.Hosting.LibraryManager,System.Xml.Linq.XElement)">
 <summary>
 Initializes the task from its serialized information.
 </summary>
 <param name="manager">The task manager.</param>
 <param name="changeNotifier">The object to notify when customizations are made.</param>
 <param name="element">The serialized information about the task.</param>
</member>
<member name="T:DriveWorks.Specification.TaskSequence">
 <summary>
 Represents a sequence of tasks to be executed for an operation or event.
 </summary>
</member>
<member name="F:DriveWorks.Specification.TaskSequence.ELEMENT_NAME">
 <summary>
 Gets the element name used for task sequences
 </summary>
</member>
<member name="E:DriveWorks.Specification.TaskSequence.TaskCreated">
 <summary>
 Occurs when a task is created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.TaskSequence.TaskDeleted">
 <summary>
 Occurs when a task is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.TaskSequence.Count">
 <summary>
 Gets the number of tasks which have been added to this instance.
 </summary>
</member>
<member name="P:DriveWorks.Specification.TaskSequence.Item(System.Int32)">
 <summary>
 Gets the task at the specified index.
 </summary>
 <param name="index">The zero-based index of the task to retrieve.</param>
 <exception cref="T:System.IndexOutOfRangeException">Thrown if the specified index is out of range.</exception>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.CreateTask``1(System.String)">
 <summary>
 Creates and adds a new task to the task sequence.
 </summary>
 <typeparam name="T">The type of the task to add.</typeparam>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
 <returns>The newly created task.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.CreateTask``1(System.String,System.Boolean)">
 <summary>
 Creates and adds a new task to the task sequence.
 </summary>
 <typeparam name="T">The type of the task to add.</typeparam>
 <param name="title">The title of the task</param>
 <param name="createConnection">True to create a connection between this task and the previously added task. (Or Start if no other task has been added).</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
 <returns>The newly created task.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.CreateTask``1(System.String,System.Double,System.Double)">
 <summary>
 Creates and adds a new task to the task sequence.
 </summary>
 <typeparam name="T">The type of the task to add.</typeparam>
 <param name="title">The title of the task</param>
 <param name="left">The left position of the task.</param>
 <param name="top">The top position of the task.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
 <returns>The newly created task.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.CreateTask``1(System.String,System.Double,System.Double,System.Boolean)">
 <summary>
 Creates and adds a new task to the task sequence.
 </summary>
 <typeparam name="T">The type of the task to add.</typeparam>
 <param name="title">The title of the task</param>
 <param name="left">The left position of the task.</param>
 <param name="top">The top position of the task.</param>
 <param name="createConnection">True to create a connection between this task and the previously added task. (Or Start if no other task has been added).</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
 <returns>The newly created task.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.CreateTask(System.Type,System.String)">
 <summary>
 Creates and adds a new task to the task sequence.
 </summary>
 <param name="title">The title of the task</param>
 <param name="taskType">The type of the task to add.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in <paramref name="taskType" /> does not inherit from <see cref="T:DriveWorks.Specification.Task" /> or isn't defined in a extension library.</exception>
 <returns>The newly created task.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.CreateTask(System.Type,System.String,System.Boolean)">
 <summary>
 Creates and adds a new task to the task sequence.
 </summary>
 <param name="taskType">The type of the task to add.</param>
 <param name="title">The title of the task</param>
 <param name="createConnection">True to create a connection between this task and the previously added task. (Or Start if no other task has been added).</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in <paramref name="taskType" /> does not inherit from <see cref="T:DriveWorks.Specification.Task" /> or isn't defined in a extension library.</exception>
 <returns>The newly created task.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.CreateTask(System.Type,System.String,System.Double,System.Double)">
 <summary>
 Creates and adds a new task to the task sequence.
 </summary>
 <param name="taskType">The type of the task to add.</param>
 <param name="title">The title of the task</param>
 <param name="left">The left position of the task.</param>
 <param name="top">The top position of the task.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in <paramref name="taskType" /> does not inherit from <see cref="T:DriveWorks.Specification.Task" /> or isn't defined in a extension library.</exception>
 <returns>The newly created task.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.CreateTask(System.Type,System.String,System.Double,System.Double,System.Boolean)">
 <summary>
 Creates and adds a new task to the task sequence.
 </summary>
 <param name="taskType">The type of the task to add.</param>
 <param name="title">The title of the task</param>
 <param name="createConnection">True to create a connection between the created task and the last added task.</param>
 <param name="left">The left position of the task.</param>
 <param name="top">The top position of the task.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in <paramref name="taskType" /> does not inherit from <see cref="T:DriveWorks.Specification.Task" /> or isn't defined in a extension library.</exception>
 <returns>The newly created task.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.Move(System.Int32,System.Int32)">
 <summary>
 Move the task from its current index to the specified index.
 </summary>
 <param name="oldIndex">The old index of the task.</param>
 <param name="newIndex">The new index of the task.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.ToArray">
 <summary>
 Copies the tasks to a new array and returns it.
 </summary>
 <returns>A new array containing all the tasks in this instance.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.IndexOf(DriveWorks.Specification.Task)">
 <summary>
 Gets the index of the given task.
 </summary>
 <param name="task">The task whose index to retrieve.</param>
 <returns>The index of the given task, or -1 if the task is not in this collection.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.Clear">
 <summary>
 Clears all of the tasks.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.TaskSequence.Flow">
 <summary>
 The specification macro this sequence belongs to (if it belongs to a macro).
 </summary>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.CreateTask(System.Type,System.Xml.Linq.XElement)">
 <summary>
 Creates and adds a new task to the task sequence.
 </summary>
 <param name="taskType">The type of the task to add.</param>
 <param name="existingElement">An existing element to use as in the task.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in <paramref name="taskType" /> does not inherit from <see cref="T:DriveWorks.Specification.Task" /> or isn't defined in a extension library.</exception>
 <returns>The newly created task.</returns>
</member>
<member name="M:DriveWorks.Specification.TaskSequence.GetEnumerator">
 <summary>
 Gets an enumerator suitable for enumerating the tasks in the task sequence.
 </summary>
 <returns>An IEnumerator specialized for the <see cref="T:DriveWorks.Specification.Task" /> type.</returns>
</member>
<member name="T:DriveWorks.Specification.Teams">
 <summary>
 Manages the list of teams which have access to a given item in a specification-flow.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Teams.IsUniversal">
 <summary>
 Gets/sets whether the instance is Universal, i.e. all teams are allowed
 by the instance.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Teams.IsOwnerPermitted">
 <summary>
 Gets/sets whether the owner of a specification is permitted.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Teams.IsCreatorPermitted">
 <summary>
 Gets/sets whether the creator of a specification is permitted.
 </summary>
</member>
<member name="M:DriveWorks.Specification.Teams.Import(System.String)">
 <summary>
 Imports a team list from it's serialized representation.
 </summary>
 <param name="serializedForm">A serialized team list.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Teams.RemoveTeam(System.Guid)">
 <summary>
 Removes the team with the specified identifier from the collection.
 </summary>
 <param name="teamId">The unique identifier of the team to remove.</param>
 <remarks>
 If an attempt is made to remove a team from an instance which is marked as "All Teams Allowed", i.e. the <see cref="P:DriveWorks.Specification.Teams.IsUniversal" /> property returns true,
 no action is taken by this method.
 </remarks>
</member>
<member name="M:DriveWorks.Specification.Teams.AddTeam(System.Guid)">
 <summary>
 Adds the team with the specified identifier to the collection.
 </summary>
 <param name="teamId">The unique identifier of the team to add.</param>
 <remarks>
 If an attempt is made to add a team to an instance which is marked as "All Teams Allowed", i.e. the <see cref="P:DriveWorks.Specification.Teams.IsUniversal" /> property returns true,
 no action is taken by this method until the list is cleared by calling the <see cref="M:DriveWorks.Specification.Teams.Clear" /> method first, or
 until the <see cref="P:DriveWorks.Specification.Teams.IsUniversal" /> property is set to false.
 </remarks>
</member>
<member name="M:DriveWorks.Specification.Teams.Clear">
 <summary>
 Clears the list of teams allowed by this instance.
 </summary>
 <remarks>
 If the instance is marked as "All Teams Allowed", i.e. the <see cref="P:DriveWorks.Specification.Teams.IsUniversal" /> property returns true,
 then this method will set the <see cref="P:DriveWorks.Specification.Teams.IsUniversal" /> property to false.
 </remarks>
</member>
<member name="M:DriveWorks.Specification.Teams.IsPermitted(System.Guid[],System.Guid,System.Guid,System.Guid)">
 <summary>
 Checks to see if the team with the specified identifier is allowed
 according to the current access control list.
 </summary>
 <param name="currentUserId">The identifier of the user to check for permission.</param>
 <param name="creatorId">The identifier of the specification's creator.</param>
 <param name="ownerId">The identifier of the specification's owner.</param>
 <param name="teamsToCheck">The unique identifier of the teams to check.</param>
 <returns>True if the team with the specified identifier is allowed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Teams.ToTeamArray">
 <summary>
 Gets an array of the team identifiers in the control list.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Teams.ToArray">
 <summary>
 Copies all of the team identifiers to a new array and returns them.
 </summary>
 <returns>An array of team identifiers represented as strings.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Teams.ToArray(System.Boolean)">
 <summary>
 Copies all of the team identifiers to a new array and returns them.
 </summary>
 <param name="includePermissions">True to include !, ?, * in the returned array if the associated permissions are set, false to return only team information.</param>
 <returns>An array of team identifiers represented as strings.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Teams.ToString">
 <summary>
 Converts the team collection to a string of comma-delimited identifiers.
 </summary>
</member>
<member name="T:DriveWorks.Specification.Transition">
 <summary>
 Represents a transition from one state to another.
 </summary>
</member>
<member name="E:DriveWorks.Specification.Transition.Deleted">
 <summary>
 Raised when the transition is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Transition.NameChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Specification.Transition.Name" /> property is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Transition.TitleChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Specification.Transition.Title" /> property is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Transition.TargetStateChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Specification.Transition.TargetState" /> property is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transition.ResolveTargetState(DriveWorks.Specification.States)">
 <summary>
 For use by the <see cref="T:DriveWorks.Specification.States" /> type to resolve
 the target state once all the states have been loaded.
 </summary>
 <param name="states">The states object.</param>
</member>
<member name="P:DriveWorks.Specification.Transition.IsDeleted">
 <summary>
 Determines whether the transition has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Transition.State">
 <summary>
 Gets the state to which the transition belongs.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Transition.Name">
 <summary>
 Gets the unique name of the transition.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Transition.Title">
 <summary>
 Gets/sets the title of the transition.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Transition.OnInvokeEvent">
 <summary>
 Gets the event definition which describes the actions taken when the transition is invoked.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Transition.Teams">
 <summary>
 Gets the teams which have access to the transition.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Transition.Conditions">
 <summary>
 Gets the conditions which govern the availability of the transition.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Transition.TargetState">
 <summary>
 Gets/sets the state which is the target of the transition.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Transition.Element">
 <summary>
 Gets the XML element which provides the backing data for the transition
 </summary>
</member>
<member name="M:DriveWorks.Specification.Transition.Delete">
 <summary>
 Deletes the transition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transition.InitializeLifetimeService">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Specification.Transitions">
 <summary>
 Manages the transitions which are available for a given state in a specification-flow.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Transitions.TransitionCreated">
 <summary>
 Occurs when a transition is created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Transitions.TransitionDeleted">
 <summary>
 Occurs when a transition is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Specification.Transitions.TransitionMoved">
 <summary>
 Occurs when a transition's index has changed.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Specification.Transitions.Count">
 <summary>
 Returns the number of transitions in the collection.
 </summary>
</member>
<member name="P:DriveWorks.Specification.Transitions.Item(System.Int32)">
 <summary>
 Gets the transition at the specified index.
 </summary>
 <param name="index">The zero-based index of the transition to get.</param>
 <returns>The transition at the specified index.</returns>
</member>
<member name="M:DriveWorks.Specification.Transitions.CreateTransition(System.String)">
 <summary>
 Creates and returns a new transition.
 </summary>
 <param name="name">The unique name of the transition.</param>
 <returns>A new instance of the <see cref="T:DriveWorks.Specification.Transition" /> class.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transitions.Move(System.Int32,System.Int32)">
 <summary>
 Move the transition from its current index to the specified index.
 </summary>
 <param name="oldIndex">The old index of the transition.</param>
 <param name="newIndex">The new index of the transition.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transitions.TryGetTransition(System.String,DriveWorks.Specification.Transition@)">
 <summary>
 Gets the transition with the specified name.
 </summary>
 <param name="name">The name of the transition to get.</param>
 <param name="transition">Receives the transition.</param>
 <returns>True if the transition was found and returned, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transitions.GetTransition(System.String)">
 <summary>
 Gets the transition with the specified name.
 </summary>
 <param name="name">The name of the transition to get.</param>
 <returns>The transition with the specified name.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">The transition could not be found.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transitions.GetTransitionsByTitle(System.String)">
 <summary>
 Gets the transitions in the collection with the specified title.
 </summary>
 <param name="title">The title of the transitions to retrieve.</param>
 <returns>An array of transitions.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transitions.ToArray">
 <summary>
 Copies all the transitions to a new array and returns it.
 </summary>
 <returns>An array of transitions.</returns>
</member>
<member name="M:DriveWorks.Specification.Transitions.NotifyDeleting(DriveWorks.Specification.Transition)">
 <summary>
 Used by the transition class to notify the manager
 when it is being deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transitions.NotifyDeleted(DriveWorks.Specification.Transition)">
 <summary>
 Used by the transition class to notify the manager
 when it has been deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transitions.NotifyNameChanging(DriveWorks.Specification.Transition,System.String)">
 <summary>
 Used by transition class to notify the manager
 when its name is changing.
 </summary>
 <param name="t">The transition whose name is changing.</param>
 <param name="newName">The new name of the transition.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.Transitions.GetEnumerator">
 <summary>
 Gets an enumerator suitable for enumerating the transitions in the collection.
 </summary>
 <returns>An IEnumerator specialized for the <see cref="T:DriveWorks.Specification.Transition" /> type.</returns>
</member>
<member name="T:DriveWorks.Specification.RuleResults">
 <summary>
 Provides access to the rule results for an entity such as a document or
 component.
 </summary>
 <remarks>
 
 </remarks>
</member>
<member name="M:DriveWorks.Specification.RuleResults.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Constructs a new instance of the rule results class from a dictionary.
 </summary>
 <param name="results">A dictionary mapping rule identifiers to rule results. The dictionary MUST
 be constructed with the static instance of the case-insensitive string comparer.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.RuleResults.Load(System.Xml.XmlReader)">
 <summary>
 Loads the rule results from the given XML reader.
 </summary>
 <param name="reader">An instance of an type derived from XmlReader, which has been positioned at a RuleResults element.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Specification.RuleResults" /> type.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.RuleResults.Load(System.Xml.Linq.XElement)">
 <summary>
 Loads the rule results for the specified XML element which must have the name RuleResults
 in the specification namespace (http://schemas.driveworks.co.uk/specification/)
 </summary>
 <param name="element">The RuleResults element from which to load results.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Specification.RuleResults" /> type which has been populated with the rule results from the serialized XML, or a null reference if the input element is not a RuleResults element.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.RuleResults.Save(System.Xml.XmlWriter)">
 <summary>
 Saves the rule results to the specified XML writer.
 </summary>
 <param name="writer"></param>
 <remarks>
 Rule results are saved using the specification XML namespace
 (http://schemas.driveworks.co.uk/specification/)
 </remarks>
</member>
<member name="M:DriveWorks.Specification.RuleResults.TryGetResult(System.String,System.Object@)">
 <summary>
 Tries getting the result for the rule with the specified identifier.
 </summary>
 <param name="ruleId">The identifier of the rule for which to retrieve the result.</param>
 <param name="result">A reference to a variable which will receive the result of the rule.</param>
 <returns>True if a value was found for the specified rule, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.RuleResults.GetResult(System.String)">
 <summary>
 Gets the result for the rule with the specified identifier.
 </summary>
 <param name="ruleId">The identifier of the rule for which to retrieve the result.</param>
 <returns>The result of the calculated rule.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified rule identifier does not correspond to a value in the result set.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Specification.RuleResults.ResultToString(System.Object,System.Globalization.CultureInfo)">
 <summary>
 Takes the result of a rule calculation and coverts it to a string.
 </summary>
 <param name="result">The result to convert.</param>
 <param name="ci">The culture information to use for culture aware conversions.</param>
 <returns>A string representing the result.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.EventFlowResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ExCannotConnectToSameNode">
<summary>
  Looks up a localized string similar to A connection cannot be created between two endpoints on the same node..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ExConditionOutputsOnlyValidOnConditions">
<summary>
  Looks up a localized string similar to Decision outputs can only be added to Conditions..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ExConditionsCannotHaveDataOutputs">
<summary>
  Looks up a localized string similar to Conditions cannot have outputs that are not navigation outputs..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ExEngineUnexpectedNodeType">
<summary>
  Looks up a localized string similar to Unexpected node in execution. Expected Task or Condition.
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ExInvalidOutputForNavigationInput">
<summary>
  Looks up a localized string similar to Only navigation and condition outputs can be connected to navigation inputs..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ExNodeOutputCollectionAddNotSupported">
<summary>
  Looks up a localized string similar to Add() is not support, please use one of the Create methods..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ExOutputNameAlreadyUsed">
<summary>
  Looks up a localized string similar to An output with the name &apos;{0}&apos; already exists..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ExStartIsAReservedName">
<summary>
  Looks up a localized string similar to The name &apos;Start&apos; is already taken..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.ExStartNodeCannotBeMoved">
<summary>
  Looks up a localized string similar to Start nodes cannot be moved.
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.MacroStartNodeName">
<summary>
  Looks up a localized string similar to Macro Start.
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.NodeSkippedMissingInput">
<summary>
  Looks up a localized string similar to The required property &apos;{0}&apos; was not given a value..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.NodeSkippedMissingInputs">
<summary>
  Looks up a localized string similar to The required properties &apos;{0}&apos; were not given a value..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.StartNodeArgumentDesc">
<summary>
  Looks up a localized string similar to The argument passed to the macro..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.StartNodeCallerDesc">
<summary>
  Looks up a localized string similar to The caller that executed the macro..
</summary>
</member>
<member name="P:DriveWorks.EventFlowResources.UnmappedNodeSkippedMessage">
<summary>
  Looks up a localized string similar to The node was not mapped into the flow in a meaningful way..
</summary>
</member>
<member name="T:DriveWorks.SpecificationMacroCategories">
 <summary>
 Provides access to a projects specification macro categories.
 </summary>
</member>
<member name="E:DriveWorks.SpecificationMacroCategories.CategoryCreated">
 <summary>
 Raised when a new specification macro category is created.
 </summary>
</member>
<member name="E:DriveWorks.SpecificationMacroCategories.CategoryDeleted">
 <summary>
 Raised when a macro category is deleted.
 </summary>
</member>
<member name="E:DriveWorks.SpecificationMacroCategories.CategoryParentChanged">
 <summary>
 Raised when a macro category's parent changes.
 </summary>
</member>
<member name="E:DriveWorks.SpecificationMacroCategories.CategoryNameChanged">
 <summary>
 Raised when a macro category's name changes.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.#ctor(DriveWorks.ProjectState,DriveWorksTK.Xml.XDemandElement)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.SpecificationMacroCategories" /> type.
 </summary>
 <param name="projectState">The state for the project whose categories are to be managed.</param>
 <param name="categoriesElement">The XML element in the project file which contains the category information.</param>
</member>
<member name="P:DriveWorks.SpecificationMacroCategories.Project">
 <summary>
 Gets the project to which the macro category manager belongs.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.GetCategories">
 <summary>
 Gets an array of the root-level macro categories.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.CreateCategory(System.String)">
 <summary>
 Creates a new macro category with the specified name.
 </summary>
 <param name="name">The name of the new category which must be unique in the current scope.</param>
 <returns>The newly created macro category.</returns>
 <exception cref="T:DriveWorks.ItemExistsException">Thrown if a category with the specified name already exists in the current scope.</exception>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.GetCategory(System.String)">
 <summary>
 Gets the named category.
 </summary>
 <param name="name">The name of the category to retrieve.</param>
 <returns>The found category.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified category is not found.</exception>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.TryGetCategory(System.String,DriveWorks.SpecificationMacroCategory@)">
 <summary>
 Gets the named category.
 </summary>
 <param name="name">The name of the category to retrieve.</param>
 <param name="macroCategory">A reference to a macro which will receive the category.</param>
 <returns>True if the specified category was found, otherwise false.</returns>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.GetCategoryByPath(System.String)">
 <summary>
 Gets the category with the specified path.
 </summary>
 <param name="path">The full path to the category, delimited with the backslash character.</param>
 <returns>The found category or nothing if it could not be found.</returns>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.NotifyCategoryCreated(DriveWorks.SpecificationMacroCategory)">
 <summary>
 Raises the <see cref="E:DriveWorks.SpecificationMacroCategories.CategoryCreated" /> event when a project macro category is created.
 </summary>
 <param name="vc">The macro category that was created.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.NotifyNameChanged(DriveWorks.SpecificationMacroCategory)">
 <summary>
 Used by categories to raise the category name changed event on the category manager.
 </summary>
 <param name="category">The category which has changed.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.CreateMacroCategoryCore(DriveWorks.SpecificationMacroCategory,System.String)">
 <summary>
 Used by both the manager and macro category classes to create a macro category and register it in the AllById dictionary.
 This method does not raise any events as the macro category element still needs binding to its parent, and the macro
 category object needs registering in the parent's by-name dictionary. 
 </summary>
 <param name="parentCategory">The parent macro category passed to the new macro category's constructor.</param>
 <param name="name">The name of the macro category.</param>
 <returns>The new macro category.</returns>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.UpdateChildName(System.String,System.String,DriveWorks.SpecificationMacroCategory)">
 <summary>
 For use by the <see cref="T:DriveWorks.SpecificationMacroCategory" /> type to update the by-name child dictionary.
 </summary>
 <param name="oldName">The old name of the child category.</param>
 <param name="newName">The new name of the child category.</param>
 <param name="child">The child category whose name has changed.</param>
</member>
<member name="P:DriveWorks.SpecificationMacroCategories.Element">
 <summary>
 For use by the <see cref="T:DriveWorks.Specification.SpecificationMacro" /> type during reparenting.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.RegisterCategory(System.Guid,DriveWorks.SpecificationMacroCategory)">
 <summary>
 For use by the <see cref="T:DriveWorks.SpecificationMacroCategory" /> type to update the by-id all-children dictionary.
 </summary>
 <param name="child">The child that was added.</param>
 <param name="childId">The id of the child.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.NotifyDeleted(DriveWorks.SpecificationMacroCategory)">
 <summary>
 Used by categories to raise the category deleted event on the category manager.
 </summary>
 <param name="category">The category which has changed.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.NotifyParentChanged(DriveWorks.SpecificationMacroCategory)">
 <summary>
 Used by categories to raise the category parent changed event on the category manager.
 </summary>
 <param name="category">The category which has changed.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.LoadCategory(System.Xml.Linq.XElement)">
 <summary>
 Loads and adds a category element from its XML, for use by the constructor.
 </summary>
 <param name="categoryElement">The element to load and add, if it has no parent, it will automatically be parented to the categories root element.</param>
 <returns>The loaded category.</returns>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.RegisterCategory(DriveWorks.SpecificationMacroCategory)">
 <summary>
 Used by the <see cref="T:DriveWorks.SpecificationMacroCategory"/> class to register a category with its parent category.
 </summary>
 <param name="category">The category to register.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.UnregisterCategory(DriveWorks.SpecificationMacroCategory)">
 <summary>
 Used by the <see cref="T:DriveWorks.SpecificationMacroCategory"/> class to unregister a category from its former parent category.
 </summary>
 <param name="category">The category to unregister.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategories.TryGetCategoryById(System.Guid,DriveWorks.SpecificationMacroCategory@)">
 <summary>
 For use by the <see cref="T:DriveWorks.Specification.SpecificationMacro" /> type to resolve its parent category.
 </summary>
 <param name="categoryId">The id of the category to try to resolve.</param>
 <param name="category">A reference to the macro which will receive the category.</param>
 <returns>True if the specified category is located, otherwise false.</returns>
</member>
<member name="T:DriveWorks.SpecificationMacroCategory">
 <summary>
 Provides access to a specification macro category.
 </summary>
</member>
<member name="E:DriveWorks.SpecificationMacroCategory.Deleted">
 <summary>
 Raised when the macro category is deleted.
 </summary>
</member>
<member name="E:DriveWorks.SpecificationMacroCategory.ParentChanged">
 <summary>
 Raised when the parent is changed.
 </summary>
</member>
<member name="E:DriveWorks.SpecificationMacroCategory.NameChanged">
 <summary>
 Raised when the name of the macro category changes.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.#ctor(DriveWorks.SpecificationMacroCategories,DriveWorks.SpecificationMacroCategory,System.Xml.Linq.XElement)">
 <summary>
 Initializes an instance of the <see cref="T:DriveWorks.SpecificationMacroCategory" /> type.
 </summary>
 <param name="categories">The macro category manager.</param>
 <param name="parent">The parent of the macro category.</param>
 <param name="element">The element backing the macro category.</param>
</member>
<member name="P:DriveWorks.SpecificationMacroCategory.Name">
 <summary>
 Gets/sets the name of the macro category.
 </summary>
</member>
<member name="P:DriveWorks.SpecificationMacroCategory.Id">
 <summary>
 Gets the unique string which identifies the macro category.
 </summary>
</member>
<member name="P:DriveWorks.SpecificationMacroCategory.Parent">
 <summary>
 Gets the parent of the category.
 </summary>
</member>
<member name="P:DriveWorks.SpecificationMacroCategory.IsDeleted">
 <summary>
 Determines whether the specification macro category has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.SpecificationMacroCategory.Element">
 <summary>
 Gets the XML element which backs the macro category, this is for use
 by the macro category manager.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.GetFullPath">
 <summary>
 Gets the fully qualified path to the macro category.
 </summary>
 <returns>A string of the form "RootCategoryName\ChildCategory0\ChildCategory1\ChildCategory...\ThisCategory".</returns>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.Delete">
 <summary>
 Deletes an empty macro category.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if the macro category contains any child categories or macros.</exception>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.GetCategory(System.String)">
 <summary>
 Gets the child specification macro category with the specified name.
 </summary>
 <param name="name">The name of the category to get.</param>
 <returns>The named category.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown when the specified category is not found.</exception>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.GetCategories">
 <summary>
 Gets all the category's child categories.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.GetMacros">
 <summary>
 Gets all the macros in the category.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.TryGetCategory(System.String,DriveWorks.SpecificationMacroCategory@)">
 <summary>
 Tries to get a category with the specified name.
 </summary>
 <param name="name">The name of the category to get.</param>
 <param name="macroCategory">Receives the named category if it was found, otherwise receives a null reference.</param>
 <returns>True if the named category was found, otherwise false.</returns>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.CreateCategory(System.String)">
 <summary>
 Creates a new macro category with the specified name.
 </summary>
 <param name="name">The name of the new category which must be unique in the current scope.</param>
 <returns>The newly created macro category.</returns>
 <exception cref="T:DriveWorks.ItemExistsException">Thrown if a category with the specified name already exists in the current scope.</exception>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.UpdateChildName(System.String,System.String,DriveWorks.SpecificationMacroCategory)">
 <summary>
 Called by a child variable when its name changes to update the parent category's by-name dictionary.
 </summary>
 <param name="oldName">The old name of the child macro.</param>
 <param name="newName">The new name of the child macro.</param>
 <param name="child">The variable whose name was changed.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.LoadCategory(System.Xml.Linq.XElement)">
 <summary>
 Loads and adds a category element from its XML, for use by transactions and the constructor.
 </summary>
 <param name="categoryElement">The element to load and add, if it has no parent, it will automatically be parented to the category's element.</param>
 <returns>The loaded category.</returns>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.RegisterCategory(DriveWorks.SpecificationMacroCategory)">
 <summary>
 Used by the <see cref="T:DriveWorks.SpecificationMacroCategory"/> class to register a category with its parent category.
 </summary>
 <param name="category">The category to register.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.UnregisterCategory(DriveWorks.SpecificationMacroCategory)">
 <summary>
 Used by the <see cref="T:DriveWorks.SpecificationMacroCategory"/> class to unregister a category from its former parent category.
 </summary>
 <param name="category">The category to register.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.RegisterMacro(DriveWorks.Specification.SpecificationMacro)">
 <summary>
 Used by the <see cref="T:DriveWorks.Specification.SpecificationMacro" /> class to register a macro with its parent category.
 </summary>
 <param name="macro">The macro to register.</param>
</member>
<member name="M:DriveWorks.SpecificationMacroCategory.UnregisterMacro(DriveWorks.Specification.SpecificationMacro)">
 <summary>
 Used by the <see cref="T:DriveWorks.Specification.SpecificationMacro" /> class to unregister a macro from its former parent category.
 </summary>
 <param name="macro">The macro to unregister.</param>
</member>
<member name="T:DriveWorks.SpecificationMacroCategoryEventArgs">
 <summary>
 Provides the data for the event raised when a specification macro category is changed.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationMacroCategoryEventArgs.#ctor(DriveWorks.SpecificationMacroCategory)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.SpecificationMacroCategoryEventArgs" /> type.
 </summary>
 <param name="category">The category that was changed.</param>
</member>
<member name="P:DriveWorks.SpecificationMacroCategoryEventArgs.Category">
 <summary>
 Gets the category that was changed.
 </summary>
</member>
<member name="T:DriveWorks.ProfilerSpecificationMonitor">
 <summary>
 Provides support for monitoring a specification in the profiler. 
 </summary>
 <remarks>This also monitors for any child or hosted specifications within this specification.</remarks>
</member>
<member name="E:DriveWorks.ProfilerSpecificationMonitor.MonitoringFinished">
 <summary>
 Raised when the profiler should stop monitoring this specification.
 </summary>
</member>
<member name="E:DriveWorks.ProfilerSpecificationMonitor.ProfilingStarted">
 <summary>
 Raised when the monitored specification should start being profiled.
 </summary>
</member>
<member name="E:DriveWorks.ProfilerSpecificationMonitor.ProfilingFinished">
 <summary>
 Raised when the monitored specification should no longer be profiled. 
 </summary>
</member>
<member name="E:DriveWorks.ProfilerSpecificationMonitor.ChildSpecificationMonitoringStarted">
 <summary>
 Raised when the profiler should start monitoring a child specification of this specification.
 </summary>
</member>
<member name="E:DriveWorks.ProfilerSpecificationMonitor.HostedSpecificationMonitoringStarted">
 <summary>
 Raised when the profiler should start monitoring a specification that is being hosted in this specification.
 </summary>
</member>
<member name="E:DriveWorks.ProfilerSpecificationMonitor.HostedSpecificationMonitoringFinished">
 <summary>
 Raised when the profiler should stop monitoring a specification that is being hosted in this specification.
 </summary>
</member>
<member name="E:DriveWorks.ProfilerSpecificationMonitor.ProjectChanged">
 <summary>
 Raised when the instance of the project for this specification has changed.
 </summary>
 <remarks>This will be for embedded specifications when they are re-opened after a cancel.</remarks>
</member>
<member name="M:DriveWorks.ProfilerSpecificationMonitor.#ctor(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.ProfilerSpecificationMonitor"/> class.
 </summary>
 <param name="specification">The specification to monitor for the profiler.</param>
</member>
<member name="M:DriveWorks.ProfilerSpecificationMonitor.Initialize">
 <summary>
 Performs any initialization needed for monitoring this specification in the profiler.
 </summary>
</member>
<member name="P:DriveWorks.ProfilerSpecificationMonitor.Project">
 <summary>
 Gets the project for the specification being monitored.
 </summary>
</member>
<member name="P:DriveWorks.ProfilerSpecificationMonitor.Profiler">
 <summary>
 Gets the profiler for the specification being monitored.
 </summary>
</member>
<member name="P:DriveWorks.ProfilerSpecificationMonitor.Context">
 <summary>
 Gets the underlying specification being monitored by the profiler.
 </summary>
</member>
<member name="T:DriveWorks.ISafeProjectExecutor">
 <summary>
 Provides a contract for a service that allows for thread-safe execution of project functions.
 </summary>
</member>
<member name="M:DriveWorks.ISafeProjectExecutor.Invoke(System.Action)">
 <summary>
 Invokes an action synchronously on the same thread as the dispatcher.
 </summary>
</member>
<member name="M:DriveWorks.ISafeProjectExecutor.BeginInvoke(System.Action)">
 <summary>
 Invokes an action asynchronously on the same thread as the dispatcher. 
 </summary>
</member>
<member name="T:DriveWorks.TableValueConverter">
 <summary>
 Implements a type converter for table values.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Messaging.GetAgentSettingMessage">
 <summary>
 Provides a message object for requesting an agent's setting value.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Messaging.GetAgentSettingMessage.#ctor(System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Messaging.GetAgentSettingMessage"/> class.
 </summary>
 <param name="settingName">The name of the setting to get the value of.</param>
 <remarks>see <see cref="T:DriveWorks.Messaging.StandardAgentSettingNames"/> for collection of standard setting names that can be used.</remarks>
</member>
<member name="P:DriveWorks.Messaging.GetAgentSettingMessage.SettingName">
 <summary>
 Gets the name of the requested setting.
 </summary>
 <remarks>see <see cref="T:DriveWorks.Messaging.StandardAgentSettingNames"/> for collection of standard setting names that can be used.</remarks>
</member>
<member name="T:DriveWorks.Messaging.SetAgentSettingMessage">
 <summary>
 Provides a message object for requesting an agent's setting value to be changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Messaging.SetAgentSettingMessage.#ctor(System.String,System.Object)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Messaging.SetAgentSettingMessage"/> class.
 </summary>
 <param name="settingName">The name of the setting to be changed.</param>
 <param name="value">The new value to set on the setting. This value MUST be serializable.</param>
 <remarks>see <see cref="T:DriveWorks.Messaging.StandardAgentSettingNames"/> for collection of standard setting names that can be used.</remarks>
</member>
<member name="P:DriveWorks.Messaging.SetAgentSettingMessage.SettingName">
 <summary>
 Gets the name of the setting value to be changed.
 </summary>
 <remarks>see <see cref="T:DriveWorks.Messaging.StandardAgentSettingNames"/> for collection of standard setting names that can be used.</remarks>
</member>
<member name="P:DriveWorks.Messaging.SetAgentSettingMessage.Value">
 <summary>
 Gets the new value to set the specified setting to.
 </summary>
</member>
<member name="T:DriveWorks.Messaging.RequestEventArgs">
 <summary>
 Provides event data for events involving an agent request.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Messaging.RequestEventArgs.#ctor(DriveWorks.Messaging.AgentMessage)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Messaging.RequestEventArgs" /> class.
 </summary>
 <param name="message">The message.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Messaging.RequestEventArgs.Message">
 <summary>
 Gets the request message.
 </summary>
</member>
<member name="P:DriveWorks.Messaging.RequestEventArgs.ReplyMessageData">
 <summary>
 Gets/sets the reply message to send back to the sender of this request.
 </summary>
</member>
<member name="T:DriveWorks.Messaging.StandardAgentSettingNames">
 <summary>
 Provides a collection of standard agent settings that can be retrieved or set 
 with the use of <see cref="T:DriveWorks.Messaging.GetAgentSettingMessage"/> and <see cref="T:DriveWorks.Messaging.SetAgentSettingMessage"/>
 via <see cref="M:DriveWorks.Group.SendAgentNotification(System.String,System.Object)"/> and <see cref="M:DriveWorks.Group.SendAgentRequest(System.String,System.Object)"/>.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Messaging.StandardAgentSettingNames.IsSpecificationQueueEnabled">
 <summary>
 The name of the setting that controls whether or not the specification processing queue is enabled on an agent.
 </summary>
</member>
<member name="F:DriveWorks.Messaging.StandardAgentSettingNames.IsEmailQueueEnabled">
 <summary>
 The name of the setting that controls whether or not the email processing queue is enabled on an agent.
 </summary>
</member>
<member name="F:DriveWorks.Messaging.StandardAgentSettingNames.IsModelGenerationQueueEnabled">
 <summary>
 The name of the setting that controls whether or not the model generation queue is enabled on an agent.
 </summary>
</member>
<member name="F:DriveWorks.Messaging.StandardAgentSettingNames.Is3DPreviewQueueEnabled">
 <summary>
 The name of the setting that controls whether or the 3D preview processing queue is enabled on an agent.
 </summary>
</member>
<member name="T:DriveWorks.Messaging.AgentMessage">
 <summary>
 Provides information about a received agent message.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Messaging.AgentMessage.SenderMachineName">
 <summary>
 Gets the name of the machine that sent this message.
 </summary>
</member>
<member name="P:DriveWorks.Messaging.AgentMessage.SenderUserName">
 <summary>
 Gets the group login name of the user that sent this message.
 </summary>
</member>
<member name="P:DriveWorks.Messaging.AgentMessage.Data">
 <summary>
 Gets the message that was sent by the user.
 </summary>
</member>
<member name="T:DriveWorks.Messaging.NotificationEventArgs">
 <summary>
 Provides event data for events involving an agent notification.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Messaging.NotificationEventArgs.#ctor(DriveWorks.Messaging.AgentMessage)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Messaging.NotificationEventArgs" /> class.
 </summary>
 <param name="message">The message.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Messaging.NotificationEventArgs.Message">
 <summary>
 Gets the notification message.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Messaging.StartAgentNotification">
 <summary>
 Serves as a notification message specifying that an agent should start.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Messaging.StopAgentNotification">
 <summary>
 Serves as a notification message specifying that an agent should stop.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.SerializationUtility">
 <summary>
 Provides methods for serializing and deserializing data.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.GroupDataTable">
 <summary>
 Provides a base class for a Group level table.
 </summary>
</member>
<member name="E:DriveWorks.GroupDataTable.NameChanged">
 <summary>
 Raised when the name of this table changes.
 </summary>
</member>
<member name="E:DriveWorks.GroupDataTable.Deleted">
 <summary>
 Raised when this table is deleted.
 </summary>
</member>
<member name="E:DriveWorks.GroupDataTable.TableDataChanged">
 <summary>
 Raised when the data in this table changes.
 </summary>
</member>
<member name="P:DriveWorks.GroupDataTable.Id">
 <summary>
 Gets the unique identifier for this table.
 </summary>
</member>
<member name="P:DriveWorks.GroupDataTable.Name">
 <summary>
 Gets the display name for this table.
 </summary>
</member>
<member name="P:DriveWorks.GroupDataTable.IsDirty">
 <summary>
 Gets if the cache table data is not the latest version.
 </summary>
</member>
<member name="M:DriveWorks.GroupDataTable.GetColumns">
 <summary>
 Gets all columns present in this table.
 </summary>
</member>
<member name="M:DriveWorks.GroupDataTable.GetTableData">
 <summary>
 Gets the data for this table.
 </summary>
</member>
<member name="M:DriveWorks.GroupDataTable.SetTableData(System.Object[0:,0:])">
 <summary>
 Sets the data of this table to the specified data.
 </summary>
 <param name="tableData">The data to set this table to.</param>
</member>
<member name="M:DriveWorks.GroupDataTable.Delete">
 <summary>
 Removes the table from the group.
 </summary>
</member>
<member name="M:DriveWorks.GroupDataTable.SetRows(System.String[0:,0:],System.String)">
 <summary>
 Updates rows of this table with the specified data based on control column names.
 </summary>
 <param name="dataToWrite">The data used to update the table.</param>
 <param name="controlColumnNames">The name of the control columns used to identify which rows to update.</param>
</member>
<member name="P:DriveWorks.GroupDataTable.MetaData">
 <summary>
 The stored data for this table.
 </summary>
 <remarks>
 Setting this property will instantly commit the change to the group.
 </remarks>
</member>
<member name="M:DriveWorks.GroupDataTable.EnsureTableDataIsLatest">
 <summary>
 Will fetch the latest version of table data, if version is out of sync.
 </summary>
</member>
<member name="M:DriveWorks.GroupDataTable.RaiseTableDataChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.GroupDataTable.TableDataChanged"/> event.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupDataTable.Initialize">
 <summary>
 Called after table has been constructed and is ready for initialization.
 </summary>
 <remarks>
 Inheritors should use this as an effective constructor.
 </remarks>
</member>
<member name="M:DriveWorks.GroupDataTable.OnMetaDataChanged">
 <summary>
 Called whenever the data property changes.
 </summary>
</member>
<member name="M:DriveWorks.GroupDataTable.OnDeleted">
 <summary>
 Called before the table is about to be deleted.
 </summary>
</member>
<member name="T:DriveWorks.GroupDataTables">
 <summary>
 Provides access to group tables and their management.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.GroupDataTables.TableAdded">
 <summary>
 Raised when a new table is added to the group.
 </summary>
</member>
<member name="E:DriveWorks.GroupDataTables.TableDeleted">
 <summary>
 Raised when a table is removed from the group.
 </summary>
</member>
<member name="M:DriveWorks.GroupDataTables.AddTable``1(System.String)">
 <summary>
 Adds a table of the specified type to the group.
 </summary>
 <typeparam name="TTableType">The type of table to create.</typeparam>
 <param name="name">The name to give the new table.</param>
 <returns>The created table.</returns>
</member>
<member name="M:DriveWorks.GroupDataTables.AddTable(System.Type,System.String)">
 <summary>
 Adds a table of the specified type to the group.
 </summary>
 <param name="tableType">The type of table to create.</param>
 <param name="name">The name to give the new table.</param>
 <returns>The created table.</returns>
</member>
<member name="M:DriveWorks.GroupDataTables.TryGetTable(System.String,DriveWorks.GroupDataTable@)">
 <summary>
 Attempts to find a table with the specified name.
 </summary>
 <param name="tableName">The name of the table to find.</param>
 <param name="table">Reference to set to the found table, if it's found.</param>
 <returns>True if the  table was found.</returns>
</member>
<member name="T:DriveWorks.GroupTables.SimpleGroupTable">
 <summary>
 Provides access to a data store that is stored and synced throughout a DriveWorks group.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Security.GroupTablePermission">
 <summary>
 Provides information about permissions of access to group tables.
 </summary>
</member>
<member name="F:DriveWorks.Security.GroupTablePermission.None">
 <summary>
 No access or view or edit group table data.
 </summary>
</member>
<member name="F:DriveWorks.Security.GroupTablePermission.View">
 <summary>
 Access to view table data, not edit.
 </summary>
</member>
<member name="F:DriveWorks.Security.GroupTablePermission.Edit">
 <summary>
 Access to view and edit group table data.
 </summary>
</member>
<member name="T:DriveWorks.Security.TeamGroupTablePermission">
 <summary>
 Provides information about a permission held by a team on a given group table.
 </summary>
</member>
<member name="M:DriveWorks.Security.TeamGroupTablePermission.#ctor(System.Guid,System.Guid,DriveWorks.Security.GroupTablePermission)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Security.TeamGroupTablePermission" /> type.
 </summary>
 <param name="teamId">The unique identifier of the team to which the permission applies.</param>
 <param name="groupTableId">The unique identifier of the group data table to which permission is given.</param>
 <param name="permissionType">The type of the permission which is enabled.</param>
</member>
<member name="P:DriveWorks.Security.TeamGroupTablePermission.TeamId">
 <summary>
 Gets the unique identifier of the team to which the permission applies.
 </summary>
</member>
<member name="P:DriveWorks.Security.TeamGroupTablePermission.GroupTableId">
 <summary>
 Gets the unique identifier of the group data table to which the permission applies.
 </summary>
</member>
<member name="P:DriveWorks.Security.TeamGroupTablePermission.PermissionType">
 <summary>
 Gets the type of the permission granted to the team on the group table.
 </summary>
</member>
<member name="T:DriveWorks.Security.StandardProjectPermissions">
 <summary>
 Provides quick access to standard project permissions.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Security.StandardProjectPermissions.EditPermission">
 <summary>
 The permission required to edit a DriveWorks project.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Security.StandardProjectPermissions.SpecifyPermission">
 <summary>
 The permission required to specify a DriveWorks project.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Security.TeamProjectPermission">
 <summary>
 Provides information about a permission held by a team on a given project.
 </summary>
</member>
<member name="M:DriveWorks.Security.TeamProjectPermission.#ctor(System.Guid,System.Guid,System.Guid)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Security.TeamProjectPermission" /> type.
 </summary>
 <param name="teamId">The unique identifier of the team to which the permission applies.</param>
 <param name="projectId">The unique identifier of the project to which permission is given.</param>
 <param name="permissionId">The unique identifier of the permission which is enabled, generally one of the values from <see cref="T:DriveWorks.Security.StandardProjectPermissions" />.</param>
 <remarks>
 </remarks>
</member>
<member name="P:DriveWorks.Security.TeamProjectPermission.TeamId">
 <summary>
 Gets the unique identifier of the team to which the permission applies.
 </summary>
</member>
<member name="P:DriveWorks.Security.TeamProjectPermission.ProjectId">
 <summary>
 Gets the unique identifier of the project to which the permission applies.
 </summary>
</member>
<member name="P:DriveWorks.Security.TeamProjectPermission.PermissionId">
 <summary>
 Gets the unique identifier of the permission granted to the team on the project.
 </summary>
 <remarks>
 This is generally one of the values from <see cref="T:DriveWorks.Security.StandardProjectPermissions" />.
 </remarks>
</member>
<member name="T:DriveWorks.Security.AuthenticationProviderNameAttribute">
 <summary>
 Used to markup an authentication provider with its provider name so it can be registered with the 
 <see cref="T:DriveWorks.Security.AuthenticationProviderFactory" />.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Security.AuthenticationProviderNameAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Security.AuthenticationProviderNameAttribute" /> type.
 </summary>
 <param name="providerName">The name of the authentication provider.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.AuthenticationProviderNameAttribute.ProviderName">
 <summary>
 Gets the authentication provider's name.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Security.DriveWorksAuthenticationProvider">
 <summary>
 Implements a provider which authenticates DriveWorks users.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Security.DriveWorksAuthenticationProvider.Authenticate(DriveWorks.Security.IProviderCredentials)">
 <summary>
 Authenticates DriveWorks credentials.
 </summary>
 <param name="credentials">The credentials to authenticate which must be an instance of the <see cref="T:DriveWorks.Security.DriveWorksCredentials" /> type.</param>
 <returns>A principal representing a DriveWorks user.</returns>
 <remarks></remarks>
 <exception cref="T:System.ArgumentOutOfRangeException">The credentials are of the wrong type.</exception>
</member>
<member name="T:DriveWorks.Security.DriveWorksCredentials">
 <summary>
 Represents the credentials required for a DriveWorks user.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Security.DriveWorksCredentials.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Security.DriveWorksCredentials" /> type.
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:DriveWorks.Security.DriveWorksCredentials.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Security.DriveWorksCredentials" /> type.
 </summary>
 <param name="userName">The name of the DriveWorks user.</param>
 <param name="password">The password for the DriveWorks user.</param>
 <param name="passwordHash">The password hash of the DriveWorks user.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Security.DriveWorksCredentials.Create(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Security.DriveWorksCredentials" /> type.
 </summary>
 <param name="userName">The name of the DriveWorks user.</param>
 <param name="password">The password of the DriveWorks user.</param>
 <remarks>This method preserves the user's password.</remarks>
 <returns>An initialized instance of the type with the given credentials.</returns>
</member>
<member name="M:DriveWorks.Security.DriveWorksCredentials.CreateFromHash(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Security.DriveWorksCredentials" /> type.
 </summary>
 <param name="userName">The name of the DriveWorks user.</param>
 <param name="passwordHash">The hashed password of the DriveWorks user.</param>
 <remarks></remarks>
 <returns>An initialized instance of the type with the given credentials.</returns>
</member>
<member name="P:DriveWorks.Security.DriveWorksCredentials.UserName">
 <summary>
 Gets/sets the name of the represented DriveWorks user.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.DriveWorksCredentials.PasswordHash">
 <summary>
 Gets/sets the hashed password of the represented DriveWorks user.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Security.DriveWorksCredentials.SetPassword(System.String,System.Boolean)">
 <summary>
 Hashes and stores the given password.
 </summary>
 <param name="password">The password to hash and store.</param>
 <param name="preservePassword">True to store the password, false to discard it after the hash has been computed.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Security.DriveWorksPrincipal">
 <summary>
 Represents an authenticated DriveWorks principal.
 </summary>
 <remarks>
 DriveWorks user details are always stored in the DriveWorks database.
 </remarks>
</member>
<member name="P:DriveWorks.Security.DriveWorksPrincipal.DisplayName">
 <summary>
 Always returns a null reference.
 </summary>
 <remarks>
 DriveWorks user details are always stored in the DriveWorks database so there is no
 need or way to provide the details in a principal.
 </remarks>
</member>
<member name="P:DriveWorks.Security.DriveWorksPrincipal.EmailAddress">
 <summary>
 Always returns a null reference.
 </summary>
 <remarks>
 DriveWorks user details are always stored in the DriveWorks database so there is no
 need or way to provide the details in a principal.
 </remarks>
</member>
<member name="P:DriveWorks.Security.DriveWorksPrincipal.LoginName">
 <summary>
 Gets the principal identifier which is the DriveWorks user login name.
 </summary>
</member>
<member name="P:DriveWorks.Security.DriveWorksPrincipal.Provider">
 <summary>
 Gets the DriveWorks Authentication Provider instance which created the principal.
 </summary>
</member>
<member name="P:DriveWorks.Security.DriveWorksPrincipal.Token">
 <summary>
 Gets the principal token which in the case of a DriveWorks user is the MD5 hash of the user's password.
 </summary>
</member>
<member name="M:DriveWorks.Security.DriveWorksPrincipal.GetRoles">
 <summary>
 Always returns an empty array.
 </summary>
 <remarks>
 DriveWorks team membership is provided by the group.
 </remarks>
</member>
<member name="T:DriveWorks.Security.IAuthenticationProvider">
 <summary>
 Provides a contract for pluggable authentication systems in DriveWorks.
 </summary>
 <remarks>
 In order for an instance of a type derived from this interface to be registered with the
 <see cref="T:DriveWorks.Security.AuthenticationProviderFactory" />, the derived type must be marked with the
 <see cref="T:DriveWorks.Security.AuthenticationProviderNameAttribute" /> attribute.
 </remarks>
</member>
<member name="M:DriveWorks.Security.IAuthenticationProvider.Authenticate(DriveWorks.Security.IProviderCredentials)">
 <summary>
 Authenticates the given credentials and returns the relevant principal.
 </summary>
 <param name="credentials">The credentials to authenticate.</param>
 <returns>An instance of a type derived from <see cref="T:DriveWorks.Security.IProviderPrincipal" /> which represents the authenticated principal, or  a null reference if the credentials are invalid.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Security.IProviderCredentials">
 <summary>
 Represents a set of credentials specific to an authentication provider.
 </summary>
 <remarks>
 <para>
 This interface may be implemented by a derived type in order to integrate DriveWorks authentication
 with a 3rd party credential provider.
 </para>
 <para>
 Users should consume either the <see cref="T:DriveWorks.Security.DriveWorksCredentials" /> or the <see cref="T:DriveWorks.Security.WindowsCredentials" /> types to logon
 as either a DriveWorks user or a Windows user respectively.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.Security.IProviderCredentials.ProviderName">
 <summary>
 A string which identifies a provider which can authenticate the validity of the credentials.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.IProviderCredentials.PrincipalId">
 <summary>
 A string which identifies the principal to whom the credentials belong. 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.IProviderCredentials.Token">
 <summary>
 A string which the provider can use to authenticate the validity of the credentials.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Security.IProviderCredentials.GetPassword">
 <summary>
 Gets the principal's password if it is available.
 </summary>
</member>
<member name="T:DriveWorks.Security.TeamDetails">
 <summary>
 Provides information about a registered team of users in a DriveWorks group.
 </summary>
 <remarks>
 Modifications made to an instance of TeamDetails are 
 not immediately reflected in the group from which the instance was obtained.
 
 To apply any modifications, call the <see cref="M:DriveWorks.GroupSecurity.TryUpdateTeam(DriveWorks.Security.TeamDetails)" /> method.
 </remarks>
</member>
<member name="M:DriveWorks.Security.TeamDetails.#ctor(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Security.TeamDetails" /> type.
 </summary>
 <param name="id">The unique identifier of the team.</param>
 <param name="providerName"></param>
 <param name="teamName"></param>
 <param name="displayName"></param>
 <param name="isAllowedCapture"></param>
 <param name="canEditallSpecifications"></param>
 <param name="editGroupSecurity"></param>
</member>
<member name="P:DriveWorks.Security.TeamDetails.Id">
 <summary>
 Gets the unique identifier of the team.
 </summary>
</member>
<member name="P:DriveWorks.Security.TeamDetails.ProviderName">
 <summary>
 Gets the name of the provider responsible for the team.
 </summary>
</member>
<member name="P:DriveWorks.Security.TeamDetails.TeamName">
 <summary>
 Gets/sets the unique name of the team.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.TeamDetails.DisplayName">
 <summary>
 Gets/sets the display name of the team.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.TeamDetails.IsAllowedCapture">
 <summary>
 Gets/sets whether users in the team have permission to add, edit, and delete capture information.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.TeamDetails.CanEditAllSpecifications">
 <summary>
 Gets/sets whether users in the team can view and edit all specifications.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.TeamDetails.CanEditGroupSecurity">
 <summary>
 Gets/sets whether users in the team can edit the group's teams and users details.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Security.UserDetails">
 <summary>
 Provides information about a registered user in a DriveWorks group.
 </summary>
 <remarks>
 Modifications made to an instance of UserDetails are 
 not immediately reflected in the group from which the instance was obtained.
 
 To apply any modifications, call the <see cref="M:DriveWorks.GroupSecurity.TryUpdateUser(DriveWorks.Security.UserDetails)" /> method.
 </remarks>
</member>
<member name="M:DriveWorks.Security.UserDetails.#ctor(System.Guid,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Security.UserDetails" /> type.
 </summary>
 <param name="id">The unique identifier of the user.</param>
 <param name="isEnabled">Whether the user is enabled and log in.</param>
 <param name="loginName">The login name of the user.</param>
 <param name="displayName">The display name of the user.</param>
 <param name="emailAddress">The e-mail address of the user.</param>
 <param name="isTeamLeader">The type of user.</param>
 <param name="providerName">The name of the provider responsible for the user.</param>
</member>
<member name="P:DriveWorks.Security.UserDetails.Id">
 <summary>
 Gets the user identifier.
 </summary>
</member>
<member name="P:DriveWorks.Security.UserDetails.ProviderName">
 <summary>
 Gets the name of the provider responsible for the user.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.UserDetails.LoginName">
 <summary>
 Gets the unique name of the principal.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.UserDetails.DisplayName">
 <summary>
 Gets sets the user display name.
 </summary>
</member>
<member name="P:DriveWorks.Security.UserDetails.EmailAddress">
 <summary>
 Gets/sets the user e-mail address.
 </summary>
</member>
<member name="P:DriveWorks.Security.UserDetails.IsTeamLeader">
 <summary>
 Gets/sets whether the user is a team leader or a standard user.
 </summary>
</member>
<member name="P:DriveWorks.Security.UserDetails.IsEnabled">
 <summary>
 Gets/sets whether the user's account is enabled.
 </summary>
</member>
<member name="T:DriveWorks.Security.AuthenticationProviderFactory">
 <summary>
 Provides registration and creation facilities for authentication providers.
 </summary>
</member>
<member name="M:DriveWorks.Security.AuthenticationProviderFactory.RegisterProvider(System.Type)">
 <summary>
 Registers an authentication provider with DriveWorks.
 </summary>
 <param name="providerType">The type of the provider to register.</param>
 <remarks>
 Authentication providers must implement the <see cref="T:DriveWorks.Security.IAuthenticationProvider" /> interface
 and be marked with the <see cref="T:DriveWorks.Security.AuthenticationProviderNameAttribute" /> attribute.
 </remarks>
</member>
<member name="M:DriveWorks.Security.AuthenticationProviderFactory.CreateProvider(System.String)">
 <summary>
 Creates an instance of the provider which has been registered with the specified providerName.
 </summary>
 <param name="providerName">The name of the provider to instantiate.</param>
 <returns>A provider implementation or a null reference (Nothing in Visual Basic) if the providerName is unknown.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Security.IProviderPrincipal">
 <summary>
 Represents a provider-specific security principal.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.IProviderPrincipal.Provider">
 <summary>
 Gets the provider which returned the principal.
 </summary>
</member>
<member name="P:DriveWorks.Security.IProviderPrincipal.Name">
 <summary>
 Gets a string which uniquely identifies the principal
 </summary>
</member>
<member name="P:DriveWorks.Security.IProviderPrincipal.DisplayName">
 <summary>
 Gets a string which can be used in user interfaces to represent the principle.
 </summary>
</member>
<member name="P:DriveWorks.Security.IProviderPrincipal.EmailAddress">
 <summary>
 Gets the principal's e-mail address if applicable.
 </summary>
</member>
<member name="P:DriveWorks.Security.IProviderPrincipal.Token">
 <summary>
 Gets a string which is compared by DriveWorks with a stored token in the Group to validate the returned principal.
 </summary>
 <remarks>
 The return value may be a null reference as the token checking feature is an optional additional security measure.
 </remarks>
</member>
<member name="M:DriveWorks.Security.IProviderPrincipal.GetRoles">
 <summary>
 Gets the roles to which the principal belongs.
 </summary>
 <returns>
 An array of roles which may not be a null reference.
 </returns>
 <remarks>
 If the given principal is not registered in the DriveWorks Group, but it belongs to a role
 which is registered, the principal will be registered automatically in the Group.
 </remarks>
</member>
<member name="T:DriveWorks.Security.IProviderRole">
 <summary>
 Represents a provider-specific security role.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Security.IProviderRole.Provider">
 <summary>
 Gets the provider which returned the role.
 </summary>
</member>
<member name="P:DriveWorks.Security.IProviderRole.DisplayName">
 <summary>
 Gets a string which can be used in user interfaces to represent the role.
 </summary>
</member>
<member name="P:DriveWorks.Security.IProviderRole.Id">
 <summary>
 Gets a string which uniquely identifies the role
 </summary>
</member>
<member name="T:DriveWorks.Security.WindowsCredentials">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Security.DataProtectionApi">
 <summary>
 Provides access to the cryptographic capabilities in the Windows Data Protection API.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Security.DataProtectionApi.MachineProtect(System.Byte[])">
 <summary>
 Uses the Windows data protection API to encrypt the specified input bytes using the machine key.
 </summary>
 <param name="input">The data to be encrypted.</param>
 <returns>The encrypted series of bytes.</returns>
 <remarks>This method calls the CryptProtectData API call with CRYPTPROTECT_LOCAL_MACHINE specified.</remarks>
</member>
<member name="M:DriveWorks.Security.DataProtectionApi.MachineUnprotect(System.Byte[])">
 <summary>
 Decryptes the specified input bytes which have been encrypted with the machine key using the Windows data protection API.
 </summary>
 <param name="input">The data to be decrypted.</param>
 <returns>The decrypted series of bytes.</returns>
 <remarks>This method calls the CryptUnprotectData API call with CRYPTPROTECT_LOCAL_MACHINE specified.</remarks>
</member>
<member name="T:DriveWorks.IExportableTable">
 <summary>
 Provides a contract for tables that can have their data read and set.
 </summary>
</member>
<member name="M:DriveWorks.IExportableTable.GetColumns">
 <summary>
 Returns a collection of column names for this table.
 </summary>
</member>
<member name="M:DriveWorks.IExportableTable.GetTableData">
 <summary>
 Returns the data present in this table.
 </summary>
</member>
<member name="M:DriveWorks.IExportableTable.SetTableData(System.Object[0:,0:])">
 <summary>
 Sets the data for this table.
 </summary>
 <param name="tableData">The new data to set in this table.</param>
</member>
<member name="T:DriveWorks.GroupTableExport">
 <summary>
 Document that when generated will update a group table's data.
 </summary>
</member>
<member name="P:DriveWorks.GroupTableExport.TableName">
 <summary>
 Gets/sets the name of the table that this document will drive.
 </summary>
</member>
<member name="M:DriveWorks.GroupTableExport.GetDetails">
 <summary>
 Gets the details for this document.
 </summary>
 <remarks>
 This is used to view and edit most information for this document.
 Changes must be committed on the object in order to apply changes to this document.
 </remarks>
</member>
<member name="M:DriveWorks.GroupTableExport.GetExportSummary">
 <summary>
 Gets a summary of changes that would take place if the document was generated now.
 </summary>
</member>
<member name="T:DriveWorks.TableExportDetails">
 <summary>
 Represents a collection of information for a table export document.
 </summary>
</member>
<member name="P:DriveWorks.TableExportDetails.Columns">
 <summary>
 Gets the export columns used in the export document
 </summary>
</member>
<member name="P:DriveWorks.TableExportDetails.Exports">
 <summary>
 Gets the export rows used in this export document.
 </summary>
</member>
<member name="P:DriveWorks.TableExportDetails.Element">
 <summary>
 Gets the main element that should only be modified during commit.
 </summary>
</member>
<member name="M:DriveWorks.TableExportDetails.CommitChanges">
 <summary>
 Applies all changed values to the export document.
 </summary>
</member>
<member name="M:DriveWorks.TableExportDetails.CommitChangesCore">
 <summary>
 Applies all changed values to the element.
 </summary>
</member>
<member name="T:DriveWorks.IArrayTableExportDocument">
 <summary>
 Provides a contract for documents that export data to tables.
 </summary>
</member>
<member name="P:DriveWorks.IArrayTableExportDocument.TableName">
 <summary>
 Gets/sets the name of that target table that will be exported to.
 </summary>
</member>
<member name="P:DriveWorks.IArrayTableExportDocument.ReportEntryClass">
 <summary>
 Gets the report entry class for the document (typically the document's type).
 </summary>
</member>
<member name="M:DriveWorks.IArrayTableExportDocument.GetDetails">
 <summary>
 Returns details for this document that will be used during generation (export).
 </summary>
</member>
<member name="M:DriveWorks.IArrayTableExportDocument.FetchTargetTable">
 <summary>
 Returns the target table for this export document.
 </summary>
</member>
<member name="M:DriveWorks.IArrayTableExportDocument.GetExportSummary">
 <summary>
 Returns a summary for the export that would take place if executed now.
 </summary>
</member>
<member name="T:DriveWorks.TableExportCell">
 <summary>
 Provides interaction with a cell in table export document.
 </summary>
</member>
<member name="P:DriveWorks.TableExportCell.Header">
 <summary>
 Gets the header for the field that this cell is in.
 </summary>
</member>
<member name="P:DriveWorks.TableExportCell.Rule">
 <summary>
 Gets the rule for this cell.
 </summary>
</member>
<member name="T:DriveWorks.TableExportRow">
 <summary>
 Represents an export row that will be used in a table export document.
 </summary>
</member>
<member name="P:DriveWorks.TableExportRow.Cell(System.String)">
 <summary>
 Gets a cell with the specified header from this row.
 </summary>
 <param name="header">The column header for the cell to fetch.</param>
 <remarks>If a cell by the specified header does not exist, it will be created.</remarks>
</member>
<member name="M:DriveWorks.TableExportRow.TryGetCell(System.String,DriveWorks.TableExportCell@)">
 <summary>
 Attempts to get the cell for the specified header.
 </summary>
 <param name="header">The header of the column to get the corresponding cell for.</param>
 <param name="cell">The reference to set the cell to if found.</param>
 <returns>True if the cell was found.</returns>
</member>
<member name="M:DriveWorks.TableExportRow.GetCells">
 <summary>
 Gets all cells that have been given a value on this export row.
 </summary>
</member>
<member name="M:DriveWorks.TableExportRow.Add(System.String)">
 <summary>
 Adds a cell with the specified column header to this row.
 </summary>
 <param name="header">The header of the column that this cell will belong to.</param>
 <returns>The created cell.</returns>
</member>
<member name="M:DriveWorks.TableExportRow.Remove(DriveWorks.TableExportCell)">
 <summary>
 Removes the specified cell from this row.
 </summary>
 <param name="cell">The cell to remove from this row.</param>
 <returns>True if the cell was removed.</returns>
</member>
<member name="T:DriveWorks.TableExportColumn">
 <summary>
 Represents a table export column.
 </summary>
</member>
<member name="E:DriveWorks.TableExportColumn.CommonRuleChanged">
 <summary>
 Raised when the common rule for this column has changed.
 </summary>
</member>
<member name="P:DriveWorks.TableExportColumn.Header">
 <summary>
 Gets the header of this column.
 </summary>
</member>
<member name="P:DriveWorks.TableExportColumn.IsCommon">
 <summary>
 Gets/sets whether this column is common.
 </summary>
</member>
<member name="P:DriveWorks.TableExportColumn.IsControl">
 <summary>
 Gets/sets whether this is a control column.
 </summary>
</member>
<member name="P:DriveWorks.TableExportColumn.CommonRule">
 <summary>
 Gets the rule for this column if it is common.
 </summary>
</member>
<member name="T:DriveWorks.TableExportColumns">
 <summary>
 Represents a collection of columns for table export document.
 </summary>
</member>
<member name="M:DriveWorks.TableExportColumns.Add(System.String)">
 <summary>
 Adds a column to this collection with the specified header.
 </summary>
 <param name="header">The header to give the new column.</param>
 <returns>The created Column.</returns>
</member>
<member name="M:DriveWorks.TableExportColumns.Remove(DriveWorks.TableExportColumn)">
 <summary>
 Removes the specified column from this collection of columns.
 </summary>
 <param name="column">The column to remove.</param>
 <returns>True if the column was removed.</returns>
</member>
<member name="M:DriveWorks.TableExportColumns.Clear">
 <summary>
 Removes all columns from this collection of columns.
 </summary>
</member>
<member name="M:DriveWorks.TableExportColumns.GetEnumerator">
 <summary>
 Gets an enumerator that iterates over the collection.
 </summary>
</member>
<member name="T:DriveWorks.TableExportRows">
 <summary>
 Represents a collection of table export rows for a table export document.
 </summary>
</member>
<member name="M:DriveWorks.TableExportRows.Add">
 <summary>
 Adds a row to this collection of rows.
 </summary>
 <returns>The created row.</returns>
</member>
<member name="M:DriveWorks.TableExportRows.Insert(System.Int32)">
 <summary>
 Inserts a row to this collection of rows.
 </summary>
 <returns>The created row.</returns>
</member>
<member name="M:DriveWorks.TableExportRows.Remove(DriveWorks.TableExportRow)">
 <summary>
 Removes the specified row from this collection of rows.
 </summary>
 <param name="row">The row to remove.</param>
 <returns>True if the row was removed.</returns>
</member>
<member name="M:DriveWorks.TableExportRows.GetEnumerator">
 <summary>
 Gets an enumerator that iterates over the collection.
 </summary>
</member>
<member name="T:DriveWorks.TableExportSummary">
 <summary>
 Represents a preview of all changes that will take place if a table export document is exported.
 </summary>
</member>
<member name="P:DriveWorks.TableExportSummary.ExportDetails">
 <summary>
 The details of the export that this summary is for.
 </summary>
</member>
<member name="P:DriveWorks.TableExportSummary.Rows">
 <summary>
 Collection of summary details for individual rows that could be exported.
 </summary>
</member>
<member name="P:DriveWorks.TableExportSummary.Errors">
 <summary>
 Collection of error messages from the summary generation.
 </summary>
</member>
<member name="P:DriveWorks.TableExportSummary.Warnings">
 <summary>
 Collection of warning message from the summary generation.
 </summary>
</member>
<member name="T:DriveWorks.TableExportSummaryRow">
 <summary>
 Represents a summary of an data table's export row.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.SimpleTableExport">
 <summary>
 Document that when generated will update a project simple table's data.
 </summary>
</member>
<member name="P:DriveWorks.SimpleTableExport.TableName">
 <summary>
 Gets/sets the name of the table that this document will drive.
 </summary>
</member>
<member name="M:DriveWorks.SimpleTableExport.GetDetails">
 <summary>
 Gets the details for this document.
 </summary>
 <remarks>
 This is used to view and edit most information for this document.
 Changes must be committed on the object in order to apply changes to this document.
 </remarks>
</member>
<member name="M:DriveWorks.SimpleTableExport.GetExportSummary">
 <summary>
 Gets a summary of changes that would take place if the document was generated now.
 </summary>
</member>
<member name="T:DriveWorks.ValueChangedEventArgs`1">
 <summary>
 Provides event data for value changing events.
 </summary>
 <typeparam name="T">The type for the value that has changed</typeparam>
</member>
<member name="M:DriveWorks.ValueChangedEventArgs`1.#ctor(`0,`0)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.ValueChangedEventArgs`1"/> class.
 </summary>
 <param name="oldValue">The previous value for the item that has changed.</param>
 <param name="newValue">The new value for the item that has changed.</param>
</member>
<member name="P:DriveWorks.ValueChangedEventArgs`1.OldValue">
 <summary>
 Gets the old value.
 </summary>
</member>
<member name="P:DriveWorks.ValueChangedEventArgs`1.NewValue">
 <summary>
 Gets the new value.
 </summary>
</member>
<member name="T:DriveWorks.ValueEventArgs`1">
 <summary>
 Provides event data for value specific events.
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ValueEventArgs`1.#ctor(`0)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.ValueEventArgs`1"/> class.
 </summary>
 <param name="value">The item that is specific to this event.</param>
</member>
<member name="P:DriveWorks.ValueEventArgs`1.Value">
 <summary>
 Gets the item specific to this event.
 </summary>
</member>
<member name="T:DriveWorks.ITableValue">
 <summary>
 Represents a tabular value which can be used with DriveWorks' controls.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ITableValue.Rows">
 <summary>
 Gets the number of rows in the array.
 </summary>
</member>
<member name="P:DriveWorks.ITableValue.Columns">
 <summary>
 Gets the number of columns in the array.
 </summary>
</member>
<member name="M:DriveWorks.ITableValue.GetElement(System.Int32,System.Int32)">
 <summary>
 Gets the element at the given row and column index.
 </summary>
 <param name="columnIndex">The column index of the element to get.</param>
 <param name="rowIndex">The row index of the element to get.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.ITableValue.GetElementAsDouble(System.Globalization.CultureInfo,System.Int32,System.Int32)">
 <summary>
 Gets the element at the given row and column index as a double, converting using Titan's
 data conversion rules if necessary.
 </summary>
 <param name="columnIndex">The column index of the element to get.</param>
 <param name="rowIndex">The row index of the element to get.</param>
 <param name="ci">The culture information to use for conversions.</param>
 <returns>The value, converted value, or a null reference if conversion fails.</returns>        
</member>
<member name="M:DriveWorks.ITableValue.GetElementAsString(System.Globalization.CultureInfo,System.Int32,System.Int32)">
 <summary>
 Gets the element at the given row and column index as a string, converting using Titan's
 data conversion rules if necessary.
 </summary>
 <param name="columnIndex">The column index of the element to get.</param>
 <param name="rowIndex">The row index of the element to get.</param>
 <param name="ci">The culture information to use for conversions.</param>
 <returns>The value, or converted value.</returns>  
</member>
<member name="M:DriveWorks.ITableValue.GetElementAsDateTime(System.Globalization.CultureInfo,System.Int32,System.Int32)">
 <summary>
 Gets the element at the given row and column index as a date-time, converting using Titan's
 data conversion rules if necessary.
 </summary>
 <param name="columnIndex">The column index of the element to get.</param>
 <param name="rowIndex">The row index of the element to get.</param>
 <param name="ci">The culture information to use for conversions.</param>
 <returns>The value, converted value, or a null reference if conversion fails.</returns>  
</member>
<member name="M:DriveWorks.ITableValue.GetElementAsBoolean(System.Globalization.CultureInfo,System.Int32,System.Int32)">
 <summary>
 Gets the element at the given row and column index as a boolean, converting using Titan's
 data conversion rules if necessary.
 </summary>
 <param name="columnIndex">The column index of the element to get.</param>
 <param name="rowIndex">The row index of the element to get.</param>
 <param name="ci">The culture information to use for conversions.</param>
 <returns>The value, converted value, or a null reference if conversion fails.</returns>  
</member>
<member name="M:DriveWorks.ITableValue.ToArray">
 <summary>
 Creates a two dimensional object array containing the values from the array value.
 </summary>
 <remarks>Wherever possible this method should be avoided as it can be very expensive in terms of memory and time taken.</remarks>
 <returns></returns>
</member>
<member name="T:DriveWorks.Settings.ProServerManagementConsoleSettings">
 <summary>
 Provides access to management console settings.
 </summary>
</member>
<member name="P:DriveWorks.Settings.ProServerManagementConsoleSettings.UserName">
 <summary>
 Gets or sets the login name of the user with permissions to access the management console.
 </summary>
</member>
<member name="P:DriveWorks.Settings.ProServerManagementConsoleSettings.Password">
 <summary>
 Gets or sets the password of the user with permissions to access the management console.
 </summary>
</member>
<member name="T:DriveWorks.IndexesChangedEventArgs">
 <summary>
 Provides event data about an index change.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.IndexesChangedEventArgs.#ctor(System.Collections.Generic.IEnumerable{DriveWorks.ChangedValue{System.Int32}})">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.IndexesChangedEventArgs"/> class.
 </summary>
 <param name="changedIndexes">The original index.</param>
</member>
<member name="P:DriveWorks.IndexesChangedEventArgs.ChangedIndexes">
 <summary>
 The original index, before the change.
 </summary>
</member>
<member name="T:DriveWorks.ChangedValue`1">
 <summary>
 Provides the new and old values of an object
 </summary>
 <typeparam name="T">The type for the object that has changed.</typeparam>
</member>
<member name="M:DriveWorks.ChangedValue`1.#ctor(`0,`0)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.ChangedValue`1"/> class.
 </summary>
 <param name="oldValue">The old value.</param>
 <param name="newValue">the new value.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ChangedValue`1.OldValue">
 <summary>
 The old, original value.
 </summary>
</member>
<member name="P:DriveWorks.ChangedValue`1.NewValue">
 <summary>
 The new, current value.
 </summary>
</member>
<member name="T:DriveWorks.IPreviewDocument">
 <summary>
 Provides a contract for documents that can be used to interact with preview documents.
 </summary>
</member>
<member name="E:DriveWorks.IPreviewDocument.PreviewResultInvalidated">
 <summary>
 Raised when the preview result becomes out of date.
 </summary>
</member>
<member name="M:DriveWorks.IPreviewDocument.GetPreview">
 <summary>
 Generates the document and updates the preview result.
 </summary>
</member>
<member name="M:DriveWorks.IPreviewDocument.GetPreview(System.String)">
 <summary>
 Generates the document and updates the preview result.
 </summary>
 <param name="lightPreset">Name of the lighting preset to apply.</param>
</member>
<member name="M:DriveWorks.IPreviewDocument.GetMacroNameByInstanceAddress(System.String)">
 <summary>
 Takes an instance address and returns the result of its click macro rule.
 </summary>
 <param name="address">Address of the instance you want to find the macro for.</param>
 <returns>The name of the macro for the instance with the given address.</returns>
</member>
<member name="M:DriveWorks.IPreviewDocument.TryGetTouchPointMacroAndArgument(System.Object,System.String,System.String@,System.String@)">
 <summary>
 Takes an instance address and returns the result of its click macro argument rule.
 </summary>
 <param name="preview">The preview object to check. This can be null.</param>
 <param name="address">Address of the instance you want to find the macro name and argument for.</param>
 <param name="macroName">Name of the touchpoint macro if found.</param>
 <param name="macroArgument">Touchpoint macro argument if found</param>
 <returns>True if a macro name was found. Note that <paramref name="macroArgument"/> might be set despite this though.</returns>
</member>
<member name="T:DriveWorks.Generation.IAgentRegistration">
 <summary>
 Represents a registered agent.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Generation.IAgentRegistration.SetPreferredFailureThreshold(System.Int32)">
 <summary>
 Sets the preferred failure threshold for the agent.
 </summary>
 <param name="newThreshold">The new preferred failure threshold.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Generation.IAgentRegistration.GetNextPendingComponent">
 <summary>
 Gets the next pending component to be generated by the agent.
 </summary>
 <returns>True if there is a pending component.</returns>
</member>
<member name="M:DriveWorks.Generation.IAgentRegistration.GetNextPendingComponent(DriveWorks.JobRequestTagInformation)">
 <summary>
 Gets the next pending component to be generated by the agent, taking into account the tag of the component.
 </summary>
 <param name="tagInformation">The tag information for the job request.</param>
 <returns>True if there is a pending component.</returns>
</member>
<member name="P:DriveWorks.Generation.IAgentRegistration.Current">
 <summary>
 Gets the current pending component.
 </summary>
</member>
<member name="P:DriveWorks.Generation.IAgentRegistration.TagInformation">
 <summary>
 Gets information as to the tags that this agent supports and blocks.
 </summary>
</member>
<member name="M:DriveWorks.Generation.IAgentRegistration.SetTagInformation(DriveWorks.JobRequestTagInformation)">
 <summary>
 Sets the tag information for this agent. 
 </summary>
 <param name="tagInformation">The information about the tags that this agent supports or blocks.</param>
</member>
<member name="T:DriveWorks.Generation.IPendingComponent">
 <summary>
 Represents a component to be generated.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Generation.IPendingComponent.ReleasedComponentId">
 <summary>
 Gets the unique identifier of the component to be generated.
 </summary>
</member>
<member name="P:DriveWorks.Generation.IPendingComponent.ClientDetails">
 <summary>
 Gets the client that this component has been given to for processing.
 </summary>
</member>
<member name="P:DriveWorks.Generation.IPendingComponent.Flags">
 <summary>
 Gets the flags associated with this component
 </summary>
</member>
<member name="M:DriveWorks.Generation.IPendingComponent.NotifyGenerating">
 <summary>
 Notifies the generation agent manager that the component generation started.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Generation.IPendingComponent.NotifyFailed">
 <summary>
 Notifies the generation agent manager that the component generation failed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Generation.IPendingComponent.NotifyGenerated">
 <summary>
 Notifies the generation agent manager that the component was successfully generated.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Generation.IPendingComponent.NotifyPreviewFileCreated(System.String)">
 <summary>
 Notifies the generation agent manager that a preview file has been created of the generated component.
 </summary>
 <param name="previewPath">The full path to the final created preview file.</param>
</member>
<member name="M:DriveWorks.Generation.IPendingComponent.NotifyPreviewFailed(System.String)">
 <summary>
 Notifies the generation agent manager that we failed to create a preview of the generated component.
 </summary>
 <param name="reason">The reason for the failure.</param>
</member>
<member name="M:DriveWorks.Generation.IPendingComponent.NotifyRequiresRetry">
 <summary>
 Notifies the generation agent manager that the agent could not process this component and requires it to be retried.
 </summary>
 <remarks>This does not affect the failure count on the component.</remarks>
</member>
<member name="T:DriveWorks.CapturedComponentStatus">
 <summary>
 Represents the status of a captured component.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.CapturedComponentStatus.#ctor(System.Nullable{System.Guid},System.String,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.CapturedComponentStatus" /> class.
 </summary>
 <param name="id">The unique identifier of the captured component (or a null reference if the captured component does not exist).</param>
 <param name="path">The full path to the captured component (or a null reference if the captured component does not exist).</param>
 <param name="isDeleted">True if the captured component is deleted, otherwise false.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.CapturedComponentStatus.Id">
 <summary>
 Gets the unique identifier of the captured component if it exists, otherwise a null 
 reference is returned.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.CapturedComponentStatus.Path">
 <summary>
 Gets the full path of the captured component if it exists, otherwise a null 
 reference is returned.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.CapturedComponentStatus.IsDeleted">
 <summary>
 Determines whether the captured component is deleted in the target group.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectComponentManager">
 <summary>
 Provides functionality to update a DriveWorks Project file as necessary during import from another group.
 </summary>
</member>
<member name="M:DriveWorks.ProjectComponentManager.#ctor(System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.ProjectComponentManager"/> class.
 </summary>
 <param name="projectLocation">Location of the project file to manage.</param>
 <remarks>This is a *.driveproj file.</remarks>
</member>
<member name="P:DriveWorks.ProjectComponentManager.ProjectLocation">
 <summary>
 Gets the location of the project file that is being used by this manager.
 </summary>
</member>
<member name="M:DriveWorks.ProjectComponentManager.GetProjectCapturedComponentIds">
 <summary>
 Gets a collection of captured component Ids, as specified in the project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectComponentManager.UpdateProjectComponentIds(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
 <summary>
 Will update the project file with the given component identifiers.
 </summary>
 <param name="remappedComponentIds">Collection of original component identifiers to new identifiers.</param>
 <remarks>
 Typically used after importing a project to a new group and some component identifiers have changed.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectComponentManager.Dispose">
 <summary>
 Cleans up the resources used by the project component manager.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.SpecificationPropertiesResult">
 <summary>
 Represents the result of trying to retrieve the properties for a Specification.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.SpecificationPropertiesResult.Success">
 <summary>
 The specification properties were loaded successfully.
 </summary>
</member>
<member name="F:DriveWorks.SpecificationPropertiesResult.InvalidXml">
 <summary>
 The specification properties could not be loaded because the XML was
 malformed.
 </summary>
</member>
<member name="F:DriveWorks.SpecificationPropertiesResult.FileMissing">
 <summary>
 The specification properties could not be loaded because the specification
 file could not be found.
 </summary>
</member>
<member name="F:DriveWorks.SpecificationPropertiesResult.AccessDenied">
 <summary>
 The specification properties file could not be accessed. This could be due to 
 insufficient permissions.
 </summary>
</member>
<member name="T:DriveWorks.DialogUserMessage">
 <summary>
 Provides a base for user messages that wish to use dialogs.
 </summary>
</member>
<member name="M:DriveWorks.DialogUserMessage.#ctor(System.String,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.DialogUserMessage"/> class.
 </summary>
 <param name="messageBody">The main text that will appear in the message to the user.</param>
 <param name="messageTitle">The title for the message.</param>
 <param name="messageIcon">The type of icon that will appear next the message.</param>
 <param name="messageButtons">The available options that the user will have to respond with.</param>
</member>
<member name="P:DriveWorks.DialogUserMessage.Body">
 <summary>
 Gets the main content of the message for the user.
 </summary>
</member>
<member name="P:DriveWorks.DialogUserMessage.Title">
 <summary>
 Gets the title of the user message.
 </summary>
</member>
<member name="P:DriveWorks.DialogUserMessage.Icon">
 <summary>
 Gets the icon style for the user message.
 </summary>
</member>
<member name="P:DriveWorks.DialogUserMessage.Buttons">
 <summary>
 Gets the available buttons that the user has to respond with.
 </summary>
</member>
<member name="P:DriveWorks.DialogUserMessage.DialogResult">
 <summary>
 Gets/sets the result that the user has specified.
 </summary>
</member>
<member name="T:DriveWorks.SpecificationDialogMessage">
 <summary>
 Provides information about specification specific dialog messages.
 </summary>
</member>
<member name="M:DriveWorks.SpecificationDialogMessage.#ctor(DriveWorks.Specification.SpecificationContext,System.String,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.SpecificationDialogMessage"/> class.
 </summary>
 <param name="specification">The specification that this message is is being raised from.</param>
 <param name="messageBody">The main text that will appear in the message to the user.</param>
 <param name="messageTitle">The title for the message.</param>
 <param name="messageIcon">The type of icon that will appear next the message.</param>
 <param name="messageButtons">The available options that the user will have to respond with.</param>
</member>
<member name="P:DriveWorks.SpecificationDialogMessage.Specification">
 <summary>
 The specification that this message has been raised from.
 </summary>
</member>
<member name="T:DriveWorks.UserMessage">
 <summary>
 Provides a base class for all user messages that can be raised from the engine to be shown to users.
 </summary>
</member>
<member name="T:DriveWorks.AgentDetails">
 <summary>
 Provides information about a group agent.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.AgentDetails.#ctor(System.String,System.String,System.String)">
 <summary>
 Creates a new instance of the AgentDetails class.
 </summary>
 <param name="machineName">The name of the machine for this agent.</param>
 <param name="operatingSystem">The operating system for this agent.</param>
 <param name="processorArchitecture">The processor architecture for this agent.</param>
</member>
<member name="P:DriveWorks.AgentDetails.MachineName">
 <summary>
 Gets the machine name of this agent.
 </summary>
</member>
<member name="P:DriveWorks.AgentDetails.OperatingSystem">
 <summary>
 Gets the operating system name for this agent.
 </summary>
</member>
<member name="P:DriveWorks.AgentDetails.ProcessorArchitecture">
 <summary>
 Gets the processor architecture for this agent.
 </summary>
</member>
<member name="T:DriveWorks.AgentLogEntry">
 <summary>
 Provides information about a log entry for an agent.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.AgentLogEntry.AgentName">
 <summary>
 Name the of the agent that logged this entry.
 </summary>
</member>
<member name="P:DriveWorks.AgentLogEntry.DateAndTime">
 <summary>
 the date and time of this log entry.
 </summary>
</member>
<member name="P:DriveWorks.AgentLogEntry.SourceDisplayName">
 <summary>
 The source display name of this log entry.
 </summary>
</member>
<member name="P:DriveWorks.AgentLogEntry.TargetDisplayName">
 <summary>
 The target display name of this entry.
 </summary>
</member>
<member name="P:DriveWorks.AgentLogEntry.Description">
 <summary>
 The description for this entry.
 </summary>
</member>
<member name="P:DriveWorks.AgentLogEntry.Type">
 <summary>
 The log type for this entry.
 </summary>
</member>
<member name="T:DriveWorks.RemoteGroupServerVersionException">
 <summary>
 Thrown when the version number of the client connection is different
 to the version number of the server.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.RemoteGroupServerVersionException.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.RemoteGroupServerVersionException" /> class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.RemoteGroupServerVersionException.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.RemoteGroupServerVersionException" /> class with a specified error message.
 </summary>
 <param name="message">The message which describes the error.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.RemoteGroupServerVersionException.#ctor(System.String,System.Exception)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.RemoteGroupServerVersionException" /> class with a specified error message.
 </summary>
 <param name="message">The message which describes the error.</param>
 <param name="innerException">The inner exception.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.RemoteGroupVersionDetails">
 <summary>
 Stores version details that are serializable.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.RemoteGroupVersionDetails.#ctor(System.Int32,System.Int32)">
 <summary>
 Creates a new instantiation of the <see cref="T:DriveWorks.RemoteGroupVersionDetails" /> class.
 </summary>
 <param name="major">The major version number.</param>
 <param name="minor">The minor versio number.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.RemoteGroupVersionDetails.Major">
 <summary>
 Gets the major version number.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.RemoteGroupVersionDetails.Minor">
 <summary>
 Gets the minor version number.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectDisplayFile">
 <summary>
 Represents a display file rule.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectDisplayFile.ValueChanged">
 <summary>
 Determines when the <see cref="P:DriveWorks.ProjectDisplayFile.Value" /> property changes.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDisplayFile.Value">
 <summary>
 Gets the value of the display file rule.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDisplayFile.RaiseValueChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.ProjectDisplayFile.ValueChanged" /> event.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDisplayFile.Disconnect">
 <summary>
 Ensures that event handlers are unbound.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectEmbeddedSpecificationDetails.Definition">
 <summary>
 Gets the child specification definition associated with this embedded specification.
 </summary>
 <remarks>This will return null if it hasn't been initialized yet.</remarks>
</member>
<member name="M:DriveWorks.ProjectEmbeddedSpecifications.EnsureChildrenLoaded">
 <summary>
 Loads all child specifications, ready to be used.
 If any specifications are to be synchronized with this project, then that will also be set up.
 </summary>
</member>
<member name="T:DriveWorks.CopiedFile">
 <summary>
 Provides support for creating duplicates of files
 as part of the DriveWorks specification.
 </summary>
 <para>
 To create a new instance of a copied document, use the
 <see cref="P:DriveWorks.ProjectDocument.Project">Project</see>.<see cref="T:DriveWorks.ProjectDocuments">Documents</see>.<see cref="M:DriveWorks.ProjectDocuments.CreateDocument(System.Type,System.String)">CreateDocument</see> 
 method.
 </para>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.CopiedFile.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="T:DriveWorks.DocumentLocalizedResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.CannotGenerateOfficeDocIis">
<summary>
  Looks up a localized string similar to This document cannot be generated. Microsoft Office documents using pre-2007 file formats cannot be created by DriveWorks Live when running in Microsoft Internet Information Services. For more information, search the documentation for KB13103033..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.ErrorMessageFormat">
<summary>
  Looks up a localized string similar to {0}Error Message: {1}.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.ExInvalidAttachmentMessage">
<summary>
  Looks up a localized string similar to The path to the attachment &apos;{0}&apos; is not a valid Windows file path..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.ExInvalidDocumentPath">
<summary>
  Looks up a localized string similar to The path or filename &apos;{0}&apos; is not valid part of a Windows path..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.ExInvalidPath">
<summary>
  Looks up a localized string similar to The path generated for this document is invalid, please check your output document path rule..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.ExRootElementDeleted">
<summary>
  Looks up a localized string similar to The documents root element has been deleted..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.ExTableNotFound">
<summary>
  Looks up a localized string similar to Could not find table to export to..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.ExWordInstallCorrupt">
<summary>
  Looks up a localized string similar to Microsoft Word could not be started, the information for Microsoft Word in the registry appears to be corrupt..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.InitialEmailBody">
<summary>
  Looks up a localized string similar to Dear &lt;&lt; =DWCurrentUserName &gt;&gt;,{0}{0}Please find attached the documents and models generated for this specification,{0}{0}From,{0}{0}&lt;&lt; =DWCurrentUserName &gt;&gt;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgAllFilesGeneratedAndSaved">
<summary>
  Looks up a localized string similar to All files generated and saved..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgCouldNotFindSourceFile">
<summary>
  Looks up a localized string similar to Could not find master file at: {0}.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgCouldNotWriteDocument">
<summary>
  Looks up a localized string similar to Could not write generated document. &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDatabasePermissionError">
<summary>
  Looks up a localized string similar to A problem has occurred updating the database which may indicate that the database is read-only or that you don&apos;t have permission to update it. A detailed message from the data provider follows: &apos;{0}&apos; .
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDocumentFormated">
<summary>
  Looks up a localized string similar to Document Formated.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDocumentGenerationCompletion">
<summary>
  Looks up a localized string similar to Document Generation Completion.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDocumentSuppressed">
<summary>
  Looks up a localized string similar to The document &apos;{0}&apos; has been suppressed..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDrivenExcelCell">
<summary>
  Looks up a localized string similar to Value &apos;{0}&apos; inserted in cell reference &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDrivenWordBookmark">
<summary>
  Looks up a localized string similar to Value &apos;{0}&apos; inserted in bookmark &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDrivenWordTableCell">
<summary>
  Looks up a localized string similar to Value &apos;{0}&apos; inserted in row {1} column {2}.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDrivenXmlField">
<summary>
  Looks up a localized string similar to Value &apos;{0}&apos; inserted in field &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDrivingBookmarks">
<summary>
  Looks up a localized string similar to Driving Bookmarks.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDrivingTable">
<summary>
  Looks up a localized string similar to Driving Table &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDrivingValues">
<summary>
  Looks up a localized string similar to Driving Values.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgDuplicateRoot">
<summary>
  Looks up a localized string similar to The rule applied to the root element would result in multiple root elements being applied to the new document. Only a single root element is allowed therefore all other occurrences have been ignored..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgEmailNotSent">
<summary>
  Looks up a localized string similar to Email not sent.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgEmailNotSentEmptySubject">
<summary>
  Looks up a localized string similar to Email not sent because the subject rule resulted in an empty value.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgErrorDuringUpdateOfDatabase">
<summary>
  Looks up a localized string similar to A problem occurred during the update of the database..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgErrorGeneratingDocument">
<summary>
  Looks up a localized string similar to There was an error generating this document. {0}.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgErrorUpdatingDatabase">
<summary>
  Looks up a localized string similar to A problem occurred whilst trying to update the database. The following error message was produced: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgExecutingQueryString">
<summary>
  Looks up a localized string similar to The following query string was being executed when the problem occurred: {0}.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgExportWhenInvalid">
<summary>
  Looks up a localized string similar to Value must be either &apos;{0}&apos; or &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFailedGeneration">
<summary>
  Looks up a localized string similar to Failed Generation.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFailedToCreateDirectory">
<summary>
  Looks up a localized string similar to An problem occurred whilst trying to create the path &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFailedToProcessRow">
<summary>
  Looks up a localized string similar to Failed to process row: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFailedToWriteToFile">
<summary>
  Looks up a localized string similar to An error occurred whilst trying to write to the file &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFailedWriteDocument">
<summary>
  Looks up a localized string similar to Failed To Write Generated Document.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFileNotFoundDetail">
<summary>
  Looks up a localized string similar to Source file could not be found at location: {0}.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFileWasNotFound">
<summary>
  Looks up a localized string similar to File was not found..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFindingTable">
<summary>
  Looks up a localized string similar to Finding Table.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFindingTableDetail">
<summary>
  Looks up a localized string similar to Finding table: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFinishedGeneratingDocument">
<summary>
  Looks up a localized string similar to Finished Generating Document.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgFinishedGeneration">
<summary>
  Looks up a localized string similar to Finished Generation.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgGatheringTableDetails">
<summary>
  Looks up a localized string similar to Gathering table details.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgGeneratingAndUpdatingTargetDatabase">
<summary>
  Looks up a localized string similar to Generating and Updating Target Database.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgGeneratingDocument">
<summary>
  Looks up a localized string similar to Generating Document.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgGeneratingFromFile">
<summary>
  Looks up a localized string similar to Generating from file: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgGenerationCompletedSuccessfully">
<summary>
  Looks up a localized string similar to Generation Completed Successfully.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgGenerationFailed">
<summary>
  Looks up a localized string similar to Generation Failed.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgGenerationWarning">
<summary>
  Looks up a localized string similar to A problem occured while generating the document..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgInvalidAttribute">
<summary>
  Looks up a localized string similar to There was a problem creating an attribute on the &apos;{0}&apos; element..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgInvalidAttributeException">
<summary>
  Looks up a localized string similar to {0} Attribute: {1}=&quot;{2}&quot;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgInvalidAttributeTable">
<summary>
  Looks up a localized string similar to Unable to drive the &apos;{0}&apos; attribute&apos;s value from a table..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgMissingRootNode">
<summary>
  Looks up a localized string similar to The XML Tree document &apos;{0}&apos; could not be generated as it contains no root node..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgNoErrorMessage">
<summary>
  Looks up a localized string similar to No error message..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgNoRowDataToProcess">
<summary>
  Looks up a localized string similar to Did not process row as there was no data to process..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgOpeningConnection">
<summary>
  Looks up a localized string similar to Opening connection.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgOpeningConnectionTo">
<summary>
  Looks up a localized string similar to Opening connection to: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgPdfExportFail">
<summary>
  Looks up a localized string similar to The PDF could not be exported. {0}.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgPdfNoExportBecauseVersionCannotParse">
<summary>
  Looks up a localized string similar to The PDF could not be exported because the version of the application ({0}) was not recognized..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgPdfNoExportTooOld">
<summary>
  Looks up a localized string similar to The PDF could not be exported because the version of the application ({0}) does not support exporting PDFs..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgProcessingRow">
<summary>
  Looks up a localized string similar to Processing row {0}.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgReadingSourceFile">
<summary>
  Looks up a localized string similar to Reading Source File.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgRequiredFieldMissing">
<summary>
  Looks up a localized string similar to Required field missing. The following error message was produced: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgRowExistsNoUpdate">
<summary>
  Looks up a localized string similar to The row already exists and there is nothing to update.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgSavingGeneratedDocument">
<summary>
  Looks up a localized string similar to Saving generated document to: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgSkipping">
<summary>
  Looks up a localized string similar to Skipping &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgStartingGeneration">
<summary>
  Looks up a localized string similar to Starting generation.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgStartingGeneration1">
<summary>
  Looks up a localized string similar to Starting Generation.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgSuppressedDocumentNameRule">
<summary>
  Looks up a localized string similar to The document&apos;s name was evaluated to &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgTableUpdatedStatistics">
<summary>
  Looks up a localized string similar to {0} rows updated and {1} appended..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgTableUpdateSuccessful">
<summary>
  Looks up a localized string similar to Table has been updated successfully.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgTextDocumentFailedToBuildFullPath">
<summary>
  Looks up a localized string similar to A problem occurred whilst trying to build the path &apos;{0}&apos; for the document with the name &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgTextDocumentFailedToBuildPath">
<summary>
  Looks up a localized string similar to A problem occurred whilst trying to build the path &apos;{0}&apos; for the document..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgTextLineIsDelete">
<summary>
  Looks up a localized string similar to The line&apos;s rule was evaluated to &lt;delete&gt;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgTypeMissMatchFields">
<summary>
  Looks up a localized string similar to Could not update the database for this row as there is a type miss-match on one or more of the fields. The following error message was produced: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgUnexpectedError">
<summary>
  Looks up a localized string similar to Unexpected Error.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgUpdatingData">
<summary>
  Looks up a localized string similar to Updating Data.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgWhereSyntaxError">
<summary>
  Looks up a localized string similar to There is a problem with the control fields in this row, please make sure they are set and that there are no errors with them..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgWordOverlappingBookmarkDescription">
<summary>
  Looks up a localized string similar to An overlapping Bookmark was encountered..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgWordOverlappingBookmarkDetails">
<summary>
  Looks up a localized string similar to The bookmark &apos;{0}&apos; overlaps bookmark &apos;{1}&apos;. This could cause the document to not generate as expected..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.MsgWritingGeneratedDocument">
<summary>
  Looks up a localized string similar to Writing Generated Document.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RowSkippedClass">
<summary>
  Looks up a localized string similar to Row skipped.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RptColumnMissingFromTargetTable">
<summary>
  Looks up a localized string similar to Export document referrers to column &apos;{0}&apos;, but this column is not present in the target table..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RptCouldNotFindRuleResultForTableExport">
<summary>
  Looks up a localized string similar to Could not find a rule result for table export of: &apos;{0}&apos;, rule id: &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RptCouldNotFindTableWithName">
<summary>
  Looks up a localized string similar to Could not find the table with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RptErrorUpdatingTableData">
<summary>
  Looks up a localized string similar to There was an error while attempting to update the table data..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RptExCopiedFileDeleteTempFile">
<summary>
  Looks up a localized string similar to There was a problem removing the temporary file &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RptExportsToColumnIgnored">
<summary>
  Looks up a localized string similar to Exports to this column will be ignored..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RptGroupTableExportClass">
<summary>
  Looks up a localized string similar to Group Table Export.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RptSimpleTableExportClass">
<summary>
  Looks up a localized string similar to Simple Table Export.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.RptSkippingRowControlFieldBlank">
<summary>
  Looks up a localized string similar to Skipping export of row &apos;{0}&apos;, as the control field &apos;{1}&apos; is blank..
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.SummaryTypeMismatch">
<summary>
  Looks up a localized string similar to Possible type mismatch on column &apos;{0}&apos; expecting &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.DocumentLocalizedResources.TaskDisplayNameReleaseEmails">
<summary>
  Looks up a localized string similar to Release Emails.
</summary>
</member>
<member name="T:DriveWorks.Email">
 <summary>
 Provides support for sending custom emails,
 as part of the driveworks specification.
 </summary>
 <remarks>
 <para>
 To create a new instance of a the email document, use the
 <see cref="P:DriveWorks.ProjectDocument.Project">Project</see>.<see cref="T:DriveWorks.ProjectDocuments">Documents</see>.<see cref="M:DriveWorks.ProjectDocuments.CreateDocument(System.Type,System.String)">CreateDocument</see> 
 method.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Email.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="P:DriveWorks.Email.SenderRule">
 <summary>
 The rule for the sender segment of the email.
 </summary>
</member>
<member name="P:DriveWorks.Email.ReceiverRule">
 <summary>
 The rule for the receiver segment of the email.
 </summary>
</member>
<member name="P:DriveWorks.Email.CcRule">
 <summary>
 The rule for the CC segment of the email.
 </summary>
</member>
<member name="P:DriveWorks.Email.BccRule">
 <summary>
 The rule for the BCC segment of the email.
 </summary>
</member>
<member name="P:DriveWorks.Email.SubjectRule">
 <summary>
 The rule for the subject segment of the email.
 </summary>
</member>
<member name="P:DriveWorks.Email.AttachmentRule">
 <summary>
 The rule for the attachment segment of the email.
 </summary>
</member>
<member name="P:DriveWorks.Email.TagsRule">
 <summary>
 The rule for a set of tags that are associated with this email.
 </summary>
</member>
<member name="P:DriveWorks.Email.BodyText">
 <summary>
 Gets the body text with all rules visible.
 </summary>
</member>
<member name="P:DriveWorks.Email.FinalBodyText">
 <summary>
 Gets body text with resolved formulae.
 </summary>
</member>
<member name="P:DriveWorks.Email.PreventOutlookNewlineRemoval">
 <summary>
 Prevent Outlook from automatically removing newlines in text emails.
 </summary>
 <devnote>http://support.microsoft.com/kb/287816</devnote>
</member>
<member name="P:DriveWorks.Email.SendAsHTML">
 <summary>
 Gets/sets whether or not the email's body is HTML.
 </summary>
</member>
<member name="P:DriveWorks.Email.RawBodyText">
 <summary>
 Un-formatted stored body text.
 </summary>
 <remarks>Un-formatted in a sense that the rule IDs have been replaced.</remarks>
</member>
<member name="M:DriveWorks.Email.GenerateTestEmail(DriveWorks.EmailDocumentDetails,System.Boolean)">
 <summary>
 Generates and sends a test email.
 </summary>
</member>
<member name="M:DriveWorks.Email.GetResults">
 <summary>
 Calculates the email's rules and returns the results
 </summary>
</member>
<member name="M:DriveWorks.Email.GetDetails">
 <summary>
 Gets all of the document information cached into an object that can be edited and commited to update this document.
 </summary>
</member>
<member name="M:DriveWorks.Email.GetBodyText">
 <summary>
 Use for getting body text with formulae.
 </summary>
</member>
<member name="M:DriveWorks.Email.ConvertBody(DriveWorks.Specification.RuleResults)">
 <summary>
 Use for getting body text with resolved formula values.
 </summary>
</member>
<member name="M:DriveWorks.Email.ConvertBodyForStorage(System.String)">
 <summary>
 Use for setting body text.
 </summary>
 <remarks>
 Will clear old rules and add in new ones for found formulae, 
 and convert formula in text to rule IDs - for storage.
 </remarks>
</member>
<member name="T:DriveWorks.EmailResult">
 <summary>
 Helper class to store email details.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.EmailResult.Sender">
 <summary>
 Gets the email's sender.
 </summary>
</member>
<member name="P:DriveWorks.EmailResult.Subject">
 <summary>
 Gets the email's subject.
 </summary>
</member>
<member name="P:DriveWorks.EmailResult.Reciever">
 <summary>
 Gets the email's receiver.
 </summary>
</member>
<member name="P:DriveWorks.EmailResult.Attachments">
 <summary>
 Gets the email's attachment list.
 </summary>
</member>
<member name="P:DriveWorks.EmailResult.Bcc">
 <summary>
 Gets the email's blind carbon copy list.
 </summary>
</member>
<member name="P:DriveWorks.EmailResult.Cc">
 <summary>
 Gets the carbon copy list.
 </summary>
</member>
<member name="P:DriveWorks.EmailResult.Tags">
 <summary>
 Gets the tags associated with this email.
 </summary>
</member>
<member name="T:DriveWorks.ExcelDocument">
 <summary>
 Provides support for creating Microsoft Excel documents as part
 of a DriveWorks specification.
 </summary>
 <remarks>
 <para>
 To create a new instance of an Excel document, use the
 <see cref="P:DriveWorks.ProjectDocument.Project">Project</see>.<see cref="T:DriveWorks.ProjectDocuments">Documents</see>.<see cref="M:DriveWorks.ProjectDocuments.CreateDocument(System.Type,System.String)">CreateDocument</see> 
 method.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.ExcelDocument.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="P:DriveWorks.ExcelDocument.CreateHtmlFile">
 <summary>
 Gets/sets if additional HTML file should be created during generation.
 </summary>
</member>
<member name="P:DriveWorks.ExcelDocument.HideHtmlFile">
 <summary>
 Gets/sets if generated HTML files should be hidden from the specification's documents list.
 </summary>
</member>
<member name="P:DriveWorks.ExcelDocument.CreatePdfFile">
 <summary>
 Gets/sets if the document should be exported to PDF after it is generated.
 </summary>
</member>
<member name="P:DriveWorks.ExcelDocument.HidePdfFile">
 <summary>
 Gets/sets if generated PDF files should be hidden from the specification's documents list.
 </summary>
</member>
<member name="M:DriveWorks.ExcelDocument.SetRange(System.String,System.String)">
 <summary>
 Sets/adds ranges to be driven.
 </summary>
 <param name="name">Name of the range to be driven.</param>
 <param name="formula">Formula of the range.</param>
 <remarks>A name must exactly equal Excel file's range name.</remarks>
</member>
<member name="M:DriveWorks.ExcelDocument.SetRange(System.String,System.String,System.String)">
 <summary>
 Sets/adds ranges to be driven.
 </summary>
 <param name="name">Name of the range to be driven.</param>
 <param name="formula">Formula of the range.</param>
 <param name="comment">Comment of the range</param>
 <remarks>A name must exactly equal Excel file's range name.</remarks>
</member>
<member name="M:DriveWorks.ExcelDocument.GetRange(System.String)">
 <summary>
 Get the formula for a driven range name.
 </summary>
 <param name="name">Name of the driven range.</param>
 <returns>The formula for the driven range, or nothing if it does not exist.</returns>
</member>
<member name="M:DriveWorks.ExcelDocument.GetRangeNames">
 <summary>
 Gets a list of all the driven range names.
 </summary>
</member>
<member name="M:DriveWorks.ExcelDocument.GetRangeValues">
 <summary>
 Gets all resolved values for ranges.
 </summary>
 <returns>A dictionary where the key is the range name and the value is the resolved value.</returns>
</member>
<member name="M:DriveWorks.ExcelDocument.RemoveRange(System.String)">
 <summary>
 Removes a range from the list of ranges to be driven.
 </summary>
 <param name="name">Name of the range to be removed from the drive list.</param>
</member>
<member name="M:DriveWorks.ExcelDocument.ClearRanges">
 <summary>
 Removes all ranges from the list of ranges to be driven.
 </summary>
</member>
<member name="M:DriveWorks.ExcelDocument.RangeExists(System.String)">
 <summary>
 Sees if a given range exists with a specific name.
 </summary>
 <param name="rangeName">Name of the range to find the existence of.</param>
</member>
<member name="M:DriveWorks.ExcelDocument.LoadRangesFromFile(System.Boolean)">
 <summary>
 Matches range information with ranges from file. 
 Creates missing ranges and removes unused ones.
 </summary>
 <param name="overwrite">If the ranges from the file should overwrite the existing ones.</param>
</member>
<member name="M:DriveWorks.ExcelDocument.GenerateCore(System.String,DriveWorks.Specification.RuleResults)">
 <summary>
 Generates a new driven Excel document.
 </summary>
 <param name="generateDirectory">Relative directory to place driven document.</param>
 <param name="results">Resolved rules.</param>
</member>
<member name="M:DriveWorks.ExcelDocument.GeneratePreviewCore(System.String,DriveWorks.Specification.RuleResults)">
 <summary>
 Generates a new driven Excel document.
 </summary>
 <param name="previewDirectory">Relative directory to place driven document.</param>
 <param name="results">Resolved rules.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ExcelDocument.GenerateDocument(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
 <summary>
 Sets values for specified named ranges in a Microsoft Excel document.
 </summary>
 <param name="fullDocumentPath">The full path to the Microsoft Excel document.</param>
 <param name="newValues">Dictionary with cell names as the key and the values to change them to as the corresponding value.</param>
 <returns>False when document does not generate - errors will be reported.</returns>
</member>
<member name="M:DriveWorks.ExcelDocument.GenerateOpenDocument(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 Continuation of GenerateDocument, used for open style Excel documents (Excel 2007).
 </summary>
 <param name="fullDocumentPath">The full path to the Microsoft Excel document.</param>
 <param name="newValues">Dictionary with cell names as the key and the values to change them to as the corresponding value.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ExcelDocument.GetRangeElement(System.String)">
 <summary>
 Gets the stored range element for a range.
 </summary>
 <param name="name">Name of the range to get.</param>
 <returns>Stored range element.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ExcelDocument.GetRangeElements">
 <summary>
 Gets a list of all the range elements for this document.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ExcelDocument.CreateHtmlOutput(System.String,Microsoft.Office.Interop.Excel.Workbook)">
 <summary>
 Will create a HTML file from a workbook sheet page, that matches this documents specified sheet attribute.
 </summary>
 <param name="documentFullPath">Full path to where to save the HTML file (including filename).</param>
 <param name="excelWorkBook">Open workbook with sheet inside.</param>
 <remarks>Will overwrite existing file.</remarks>
</member>
<member name="T:DriveWorks.ExcelUtility">
 <summary>
 Collection of shared functions for Microsoft Excel documents
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ExcelUtility.GetRangeValueFromFile(System.String,System.String)">
 <summary>
 Gets a single value from a range name in an Excel document.
 </summary>
 <param name="documentPath">The full path of the Excel Document.</param>
 <param name="rangeName">The name of the range to get the value from.</param>
 <returns>The value from the range name.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ExcelUtility.GetRangeValuesFromFile(System.String)">
 <summary>
 Get all the named ranges and their values from a Excel document.
 </summary>
 <param name="documentPath">The full path of the Excel Document.</param>
 <returns>Dictionary of all the named ranges in the document. Keys are the names and the value is name's value.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ExcelUtility.GetAvailableRangesFromFile(System.String)">
 <summary>
 Gets the names of all the named cells in the specified Microsoft Excel document.
 </summary>
 <param name="documentPath">The full path to the Microsoft Excel document.</param>
 <returns>An array of strings, each representing a single cell name.</returns>
</member>
<member name="M:DriveWorks.ExcelUtility.GetXDocument(System.String,System.String)">
 <summary>
 Gets an XDocument from XML file inside a Microsoft Excel or Word File.
 </summary>
 <param name="documentPathOuter">Path leading to main container file.</param>
 <param name="documentPathInner">Path leading to internal xml file.</param>
 <returns>XDocument representation of an xml file</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ExcelUtility.SaveXDocument(System.String,System.String,System.Xml.Linq.XDocument)">
 <summary>
 Saves an XDocument to a XML file inside a Microsoft Excel or Word File.
 </summary>
 <param name="documentPathOuter">Path leading to main container file.</param>
 <param name="documentPathInner">Path leading to internal xml file.</param>
 <param name="document">The XDocument to save.</param>
 <returns>If the operation succeeded or not.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ExcelUtility.GetLocationDetails(System.String)">
 <summary>
 Extracts a sheet name from a formatted string found inside Excel files.
 </summary>
</member>
<member name="T:DriveWorks.ColumnType">
 <summary>
 Determines the type of an <see cref="T:DriveWorks.DataExportColumnDefinition">Data Export column</see>.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DataExportColumnDefinition">
 <summary>
 Used by the <see cref="T:DriveWorks.OdbcExport"/> and <see cref="T:DriveWorks.SqlServerExport"/> classes to represent a table column.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.DataExportColumnDefinition.Name">
 <summary>
 Gets/sets the Name of the column.
 </summary>
</member>
<member name="P:DriveWorks.DataExportColumnDefinition.DefinitionType">
 <summary>
 Gets/sets the data type of the column.
 </summary>
</member>
<member name="P:DriveWorks.DataExportColumnDefinition.IsControl">
 <summary>
 Get/sets if the column is a control column.
 </summary>
</member>
<member name="P:DriveWorks.DataExportColumnDefinition.IsCommon">
 <summary>
 Determines if the column is a common column.
 </summary>
</member>
<member name="P:DriveWorks.DataExportColumnDefinition.CommonRule">
 <summary>
 Gets/sets the common rule for this column
 </summary>
 <remarks>
 Null if column does not have a common rule.
 </remarks>
</member>
<member name="P:DriveWorks.DataExportColumnDefinition.CommonRuleId">
 <summary>
 Gets/sets the Id of the common rule.
 </summary>
</member>
<member name="T:DriveWorks.DataExportRowDefinition">
 <summary>
 Used by the <see cref="T:DriveWorks.OdbcExport"/> and <see cref="T:DriveWorks.SqlServerExport"/> classes to represent a row that will be exported.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.DataExportRowDefinition.GetFields">
 <summary>
 Returns a dictionary of the fields that have been specified on this row.
 </summary>
 <remarks>
 The key value is the name of the column and the value is the rule for that cell.
 </remarks>
</member>
<member name="M:DriveWorks.DataExportRowDefinition.AddField(System.String,System.String,System.String)">
 <summary>
 Adds a cell to the row.
 </summary>
 <param name="name">The name of the column that this cell is on.</param>
 <param name="formula">The rule for the cell.</param>
 <param name="comment">The comment for the rule.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.DataExportRowDefinition.RemoveField(System.String)">
 <summary>
 Removes a cell from the row.
 </summary>
 <param name="name">The name of the column that the cell is on.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DataExportSummaryType">
 <summary>
 Specifies the result of exporting a row.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DataExportSummaryType.Updated">
 <summary>
 The row updates an exisiting row in the database.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DataExportSummaryType.Inserted">
 <summary>
 The row is inserted into the database.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DataExportSummaryType.Failed">
 <summary>
 The row failed to export.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DataExportWhen">
 <summary>
 Determines when a data export is processed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DataExportWhen.OnFinish">
 <summary>
 The data export is processed on finish.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DataExportWhen.OnRelease">
 <summary>
 The data export is processed on release.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DataExportWhen.OnAny">
 <summary>
 The data export is processed in any specification state.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.DataExportColumnData.Name">
 <summary>
 The name of the column.
 </summary>
</member>
<member name="P:DriveWorks.DataExportColumnData.DataType">
 <summary>
 The data type of the column.
 </summary>
</member>
<member name="P:DriveWorks.DataExportColumnData.ColumnType">
 <summary>
 The type of column - Common, Control or NotSpecified.
 </summary>
</member>
<member name="P:DriveWorks.DataExportColumnData.CommonRule">
 <summary>
 The common rule for the column.
 </summary>
</member>
<member name="P:DriveWorks.DataExportColumnData.Index">
 <summary>
 Gets/sets the index of the column
 </summary>
</member>
<member name="P:DriveWorks.DataExportDocumentData.ServerName">
 <summary>
 Gets/sets the name of the Sql Server to connect to.
 </summary>
 <remarks>Will only be used for SqlServerExport documents.</remarks>
</member>
<member name="P:DriveWorks.DataExportDocumentData.DatabaseName">
 <summary>
 Gets/Sets the name of the database to connect to.
 </summary>
</member>
<member name="P:DriveWorks.DataExportDocumentData.TableName">
 <summary>
 Gets/Sets the name of the table to connect to.
 </summary>
</member>
<member name="P:DriveWorks.DataExportDocumentData.ExportWhen">
 <summary>
 Gets/Sets when the data will be exported during the specification.
 </summary>
 <remarks>The value can either be OnFinished or OnRelease.</remarks>
</member>
<member name="P:DriveWorks.DataExportDocumentData.WindowsAuthentication">
 <summary>
 Gets/sets whether to use Windows Authentication to connect to the 
 Sql Server database.
 </summary>
 <remarks>The alternative used is Sql Server Authentication.</remarks>
</member>
<member name="P:DriveWorks.DataExportDocumentData.UserName">
 <summary>
 Gets/Sets the username that is used to connect to the database.
 </summary>
</member>
<member name="P:DriveWorks.DataExportDocumentData.Password">
 <summary>
 Gets/Sets the password that is used to connect to the database.
 </summary>
</member>
<member name="P:DriveWorks.DataExportDocumentData.Columns">
 <summary>
 An array of all the columns in the selected table.
 </summary>
</member>
<member name="P:DriveWorks.DataExportDocumentData.Rows">
 <summary>
 An array of the stored rows in the document.
 </summary>
</member>
<member name="P:DriveWorks.DataExportDocumentData.ControlColumns">
 <summary>
 A list of control columns. Control columns depict where export row data
 is to match the existing data for updating/appending rows.
 </summary>
</member>
<member name="P:DriveWorks.DataExportDocumentData.CommonColumns">
 <summary>
 A list of common columns. Common columns are always the same for each row.
 Used to save calculation time.
 </summary>
</member>
<member name="M:DriveWorks.DataExportDocumentData.AddRow">
 <summary>
  Adds an empty row to the list of rows currently in the document.
 </summary>
 <returns>Returns the index of the added row.</returns>
</member>
<member name="M:DriveWorks.DataExportDocumentData.AddRow(System.Collections.Generic.Dictionary{System.String,DriveWorks.ProjectDocumentRule})">
 <summary>
 Adds a row to the list of rows that are currently in the document.
 </summary>
 <param name="fields"> The dictionary of fields that are specified this row.
 Key is the field name. 
 Value is the rule for the cell.
 </param>
</member>
<member name="M:DriveWorks.DataExportDocumentData.InsertRow(System.Int32)">
 <summary>
 Inserts a row into the document at the specified row index.
 </summary>
 <param name="rowIndex">The row index to insert the row at.</param>
</member>
<member name="M:DriveWorks.DataExportDocumentData.RemoveRow(DriveWorks.DataExportRowData)">
 <summary>
 Removes a row from the list of rows that are currently in the document. 
 </summary>
 <param name="row">The row to remove from the document.</param>
</member>
<member name="M:DriveWorks.DataExportDocumentData.ClearRows">
 <summary>
 Removes all the rows that have been stored.
 </summary>
</member>
<member name="M:DriveWorks.DataExportDocumentData.AddColumn(System.String,System.String,DriveWorks.ColumnType)">
 <summary>
 Adds a control column or a none specified column to the list of columns that are 
 currently in the document.
 </summary>
 <param name="name">The name of this column.</param>
 <param name="type">The data type for this column.</param>
 <param name="colType">The type of column - Common, Control or NotSpecified.</param>
</member>
<member name="M:DriveWorks.DataExportDocumentData.AddCommonColumn(System.String,System.String,System.String,System.String)">
 <summary>
 Adds a common column to the list of columns that are currently in the document.
 </summary>
 <param name="name">The name of this column.</param>
 <param name="type">The data type for this column</param>
 <param name="formula">The formula to set for this column.</param>
 <param name="comment">The comment to set for this column.</param>
</member>
<member name="M:DriveWorks.DataExportDocumentData.ClearColumns">
 <summary>
 Removes all the columns that are currently in the document.
 </summary>
</member>
<member name="M:DriveWorks.DataExportDocumentData.EditField(System.Int32,System.String,System.String,System.String)">
 <summary>
 Sets the specified field's rule and comment.
 </summary>
 <param name="rowIndex">The index of the row that the field is in.</param>
 <param name="fieldName">The name of the field that is being edited.</param>
 <param name="newFormula">The new formula to set for the field.</param>
 <param name="newComment">The new comment to set for the field.</param>
</member>
<member name="M:DriveWorks.DataExportDocumentData.GetField(System.Int32,System.Int32)">
 <summary>
 Retrieves the field at the specified row and column index.
 </summary>
 <param name="rowIndex">The index of the row that the field is in.</param>
 <param name="columnIndex">The index of the column that the field is in.</param>
 <returns>Returns the specified field.</returns>
</member>
<member name="M:DriveWorks.DataExportDocumentData.ChangeColumnType(DriveWorks.DataExportColumnData,DriveWorks.ColumnType)">
 <summary>
 Changes the column type of the specified column.
 </summary>
 <param name="column">The column whose type is being changed.</param>
 <param name="colType">The new column type to set for the column.</param>
</member>
<member name="M:DriveWorks.DataExportDocumentData.GetColumn(System.String)">
 <summary>
 Retrieves the specified column.
 </summary>
 <param name="columnName">The name of the column to retrieve.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.DataExportRowData.Fields">
 <summary>
 Gets the fields of this row.
 </summary>
</member>
<member name="M:DriveWorks.DataExportRowData.AddField(System.String,System.String,System.String)">
 <summary>
 Adds a field to this row.
 </summary>
 <param name="name">The name of the column that the field is in.</param>
 <param name="formula">The new formula to set for the field.</param>
 <param name="comment">The new comment to set for the field.</param>
</member>
<member name="M:DriveWorks.DataExportRowData.TryGetField(System.String,DriveWorks.DataExportFieldData@)">
 <summary>
 Tries getting the field from this row at the specified column.
 </summary>
 <param name="columnName">The name of the column to get the field for.</param>
 <param name="field">A reference to a variable which will receive the field.</param>
 <returns>True if the field was found.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.DataExportFieldData.ColumnName">
 <summary>
 The name of the column that this field is in.
 </summary>
</member>
<member name="P:DriveWorks.DataExportFieldData.Rule">
 <summary>
 The rule for this field.
 </summary>
</member>
<member name="P:DriveWorks.DataExportFieldData.Comment">
 <summary>
 The comment for this field.
 </summary>
</member>
<member name="T:DriveWorks.DataExportSummaryInfo">
 <summary>
 Used to provide a summary of what will be done for a particular row when a Data Export is ran.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.IDataExportDefinition">
 <summary>
 Provides a contract for a Data Export document.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.IDataExportDefinition.GetExportSummary">
 <summary>
 Determines what would happen per-row if the export were executed.
 </summary>
</member>
<member name="P:DriveWorks.IDataExportDefinition.DatabaseName">
 <summary>
 Gets the name of the database that the document will be exported to.
 </summary>
</member>
<member name="P:DriveWorks.IDataExportDefinition.TableName">
 <summary>
 Gets the name of the table that the document will be exported to.
 </summary>
</member>
<member name="P:DriveWorks.IDataExportDefinition.ExportWhen">
 <summary>
 Gets the value that determines when the document will be exported.
 </summary>
</member>
<member name="P:DriveWorks.IDataExportDefinition.Username">
 <summary>
 Gets the username needed to connect to the database.
 </summary>
</member>
<member name="P:DriveWorks.IDataExportDefinition.Password">
 <summary>
 Gets the password needed to connect to the database.
 </summary>
</member>
<member name="P:DriveWorks.IDataExportDefinition.Columns">
 <summary>
 Gets all the columns in the data export document.
 </summary>
</member>
<member name="P:DriveWorks.IDataExportDefinition.Rows">
 <summary>
 Gets all the rows in the data export document.
 </summary>
</member>
<member name="P:DriveWorks.IDataExportDefinition.CommonColumns">
 <summary>
 Gets all the common columns in the data export document.
 </summary>
</member>
<member name="M:DriveWorks.IDataExportDefinition.GetRules(System.String[])">
 <summary>
 Retrieves the rules of the specified rule Id's. 
 </summary>
 <param name="ruleIds">The Id's of the rules to retrieve.</param>
 <returns>The rules stored with the specified rule Id's.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.IDataExportDefinition.AddRule(System.String,System.String)">
 <summary>
 Adds the specified rule to the data export document.
 </summary>
 <param name="id">The id for the new rule.</param>
 <param name="formula">The rule to set.</param>
 <returns>The newly added rule.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.IDataExportDefinition.DeleteRule(DriveWorks.ProjectDocumentRule)">
 <summary>
 Deletes the specified rule from the data export document.
 </summary>
 <param name="rule">The rule to be deleted.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.IDataExportDefinition.AddColumn(System.String,System.String,DriveWorks.ColumnType)">
 <summary>
 Adds a column to the document.
 </summary>
 <param name="name">The name of the column.</param>
 <param name="type">The data type for this column.</param>
 <param name="columnType">The type of column - Common, Control or Not Specified.</param>
 <returns>Returns the added column</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.IDataExportDefinition.AddCommonColumn(System.String,System.String,System.String,System.String)">
 <summary>
 Adds a common column to the document.
 </summary>
 <param name="name">The name of this column.</param>
 <param name="type">The data type for this column.</param>
 <param name="commonRule">The common rule to set for this column.</param>
 <param name="commonComment">The common comment to set for this column.</param>
 <returns>Returns the added column.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.IDataExportDefinition.AddRow(System.Collections.Generic.IDictionary{System.String,DriveWorks.Abstractions.IHasRule})">
 <summary>
 Adds a row to the list of export rows.
 </summary>
 <param name="fields">The dictionary of fields that are specified on this row.
 Key is the field name and the value is the rule for the cell.</param>
 <returns>Returns the added row.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.IDataExportDefinition.ClearRows">
 <summary>
 Removes all rows from the list of export rows.
 </summary>
</member>
<member name="M:DriveWorks.IDataExportDefinition.ClearColumns">
 <summary>
 Removes all column specifications.
 </summary>
</member>
<member name="T:DriveWorks.OdbcExport">
 <summary>
 Provides support for exporting data to an ODBC database 
 as part of a DriveWorks specification.
 </summary>
 <remarks>
 <para>
 To create a new instance of an OdbcExport document, use the
 <see cref="P:DriveWorks.ProjectDocument.Project">Project</see>.<see cref="T:DriveWorks.ProjectDocuments">Documents</see>.<see cref="M:DriveWorks.ProjectDocuments.CreateDocument(System.Type,System.String)">CreateDocument</see> 
 method.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.OdbcExport.DatabaseName">
 <summary>
 Gets/Sets the name of the ODBC database to connect to.
 </summary>
</member>
<member name="P:DriveWorks.OdbcExport.TableName">
 <summary>
 Gets/Sets the name of the table to connect to.
 </summary>
</member>
<member name="P:DriveWorks.OdbcExport.ExportWhen">
 <summary>
 Gets/Sets when the data will be exported during the specification.
 </summary>
 <remarks>
 The value can either be OnFinished or OnRelease.
</remarks>
</member>
<member name="P:DriveWorks.OdbcExport.UserName">
 <summary>
 Username that is used to connect to the database.
 </summary>
</member>
<member name="P:DriveWorks.OdbcExport.Password">
 <summary>
 Password that is used to connect to the database.
 </summary>
</member>
<member name="P:DriveWorks.OdbcExport.Columns">
 <summary>
 An array of all the columns that are used from the table.
 </summary>
</member>
<member name="P:DriveWorks.OdbcExport.Rows">
 <summary>
 All of the new rows that will be update or append the table.
 </summary>
</member>
<member name="P:DriveWorks.OdbcExport.ControlColumns">
 <summary>
 Gets a collection of control columns. Control columns depict where export row data
 is to match the existing data for updating/appending rows.
 </summary>
</member>
<member name="P:DriveWorks.OdbcExport.CommonColumns">
 <summary>
 Gets A collection of common columns. Common columns are always the same for each row.
 Used to save calculation time.
 </summary>
</member>
<member name="M:DriveWorks.OdbcExport.AddRow(System.Collections.Generic.IDictionary{System.String,DriveWorks.Abstractions.IHasRule})">
 <summary>
 Adds a row to the list of export rows.
 </summary>
 <param name="fields">
 The dictionary of fields that are specified on this row.
 Key is the field name and the value is the rule for the cell.
 </param>
</member>
<member name="M:DriveWorks.OdbcExport.RemoveRow(DriveWorks.DataExportRowDefinition)">
 <summary>
 Remove a row from the list of rows to be exported.
 </summary>
 <param name="row">The row to be removed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.OdbcExport.ClearRows">
 <summary>
 Removes all rows from the list of export rows.
 </summary>
 <remarks>Also removes any rules that have been set on the row's fields.</remarks>
</member>
<member name="M:DriveWorks.OdbcExport.AddColumn(System.String,System.String,DriveWorks.ColumnType)">
 <summary>
 Adds a column that is present in the target table.
 </summary>
 <param name="name">The name of the column.</param>
 <param name="type">The data type for this column.</param>
 <param name="columnType">The type of column; Control, Common or NotSpecified.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.OdbcExport.AddCommonColumn(System.String,System.String,System.String,System.String)">
 <summary>
 Adds a common column to the table
 </summary>
 <param name="name">The name of this column.</param>
 <param name="type">The data type for this column.</param>
 <param name="commonRule">The common rule to set for this column.</param>
 <param name="commonComment">The common comment to set for the column.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.OdbcExport.ClearColumns">
 <summary>
 Removes all column specifications.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.OdbcExport.GetExportSummary">
 <summary>
 Retrieve the generation summary for the document in a specifications test mode.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.OdbcExport.TypeMatch(System.String,System.Object)">
 <summary>
 Performs a rough check to see if the two types are compatible with each other.
 </summary>
 <param name="typeString">The name of the type that the value has to be compatible with.</param>
 <param name="value">Value to match against.</param>
 <returns>True if the type matches.</returns>
</member>
<member name="T:DriveWorks.SqlServerExport">
 <summary>
 Provides support for exporting data to an SQl Server database
 as part of a DriveWorks specification.
 </summary>
 <remarks>
 <para>
 To create a new instance of an SqlServerDataExport document, use the
 <see cref="P:DriveWorks.ProjectDocument.Project">Project</see>.<see cref="T:DriveWorks.ProjectDocuments">Documents</see>.<see cref="M:DriveWorks.ProjectDocuments.CreateDocument(System.Type,System.String)">CreateDocument</see> 
 method.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.SqlServerExport.ServerName">
 <summary>
 Gets/Sets the name of the SQL Server to connect to.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerExport.DatabaseName">
 <summary>
 Gets/Sets the name of the SQL Server database to connect to.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerExport.TableName">
 <summary>
 Gets/Sets the name of the table to connect to.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerExport.ExportWhen">
 <summary>
 Gets/Sets when the data will be exported during the specification.
 </summary>
 <remarks>
 The value can either be OnFinished or OnRelease.
</remarks>
</member>
<member name="P:DriveWorks.SqlServerExport.WindowsAuthentication">
 <summary>
 Determines whether to use Windows Authentication to connect
 to the SQL Server. 
 </summary>
 <remarks>
 If false SQL Server Authentication is used instead.
</remarks>
</member>
<member name="P:DriveWorks.SqlServerExport.UserName">
 <summary>
 Gets/Sets the Username that is used to connect to the SQL Server.
 </summary>
 <remarks>
 May be nothing if Windows Authentication is used to connect to 
 the SQL Server.
 </remarks>
</member>
<member name="P:DriveWorks.SqlServerExport.Password">
 <summary>
 Gets/Sets the Password that is used to connect to the SQL Server.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 May be nothing if Windows Authentication is used to connect
 to the SQL Server.
 </remarks>
</member>
<member name="P:DriveWorks.SqlServerExport.Columns">
 <summary>
 Gets an array of all the columns that are used in the table.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerExport.Rows">
 <summary>
 Gets all of the new rows that will be updated or append the table.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerExport.ControlColumns">
 <summary>
 Gets a collection of control columns. Control columns depict where export row data
 is to match the existing data for updating/appending rows.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerExport.CommonColumns">
 <summary>
 Gets A collection of common columns. Common columns are always the same for each row.
 Used to save calculation time.
 </summary>
</member>
<member name="M:DriveWorks.SqlServerExport.AddRow(System.Collections.Generic.IDictionary{System.String,DriveWorks.Abstractions.IHasRule})">
 <summary>
 Adds a row to the list of export rows.
 </summary>
 <param name="fields">
 The dictionary of fields that are specified on this row.
 Key is the field name and the Value is the rule for the cell.
 </param>
</member>
<member name="M:DriveWorks.SqlServerExport.RemoveRow(DriveWorks.DataExportRowDefinition)">
 <summary>
 Removes a row from the list of rows to be exported.
 </summary>
 <param name="row">The row to be removed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SqlServerExport.ClearRows">
 <summary>
 Removes all rows from the list of export rows.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SqlServerExport.AddColumn(System.String,System.String,DriveWorks.ColumnType)">
 <summary>
 Adds a column that is present in the target table.
 </summary>
 <param name="name">The name of the column.</param>
 <param name="type">The data type for this column.</param>
 <param name="columnType">The type of column - Common, Control or Not Specified.</param>
 <returns>The column definition.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SqlServerExport.AddCommonColumn(System.String,System.String,System.String,System.String)">
 <summary>
 Adds a common column to the table.
 </summary>
 <param name="name">The name of this column.</param>
 <param name="type">The data type for this column.</param>
 <param name="commonRule">The common rule to set for this column.</param>
 <param name="commonComment">The common comment to set for the column.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SqlServerExport.ClearColumns">
 <summary>
 Removes all column specifications.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SqlServerExport.GetExportSummary">
 <summary>
 Retrieve the generation summary for the document in a specifications test mode.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SqlServerExport.TypeMatch(System.String,System.Object)">
 <summary>
 Performs a rough check to see if the two types are comptabile with each other.
 </summary>
 <param name="typeString">The name of the type that the value has to be compatible with.</param>
 <param name="value">Value to match against.</param>
 <returns>True if the type matches.</returns>
</member>
<member name="T:DriveWorks.FileDocumentBase">
 <summary>
 Provides a base for documents that are based on using specific files.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.FileDocumentBase.SourceFilePath">
 <summary>
 Gets/sets the path to the master file. 
 This is often a relative path.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.FileDocumentBase.DocumentPathRule">
 <summary>
 Gets the rule which calculates the relative path for the document.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.FileDocumentBase.DocumentPathValue">
 <summary>
 Gets the resolved path offset that this document will have
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.FileDocumentBase.DocumentNameRule">
 <summary>
 Gets/sets the name of the output file
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.FileDocumentBase.DocumentNameValue">
 <summary>
 Gives the resolved name that this document will have.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.FileDocumentBase.IsHidden">
 <summary>
 Property to determine if the generated document is hidden from the end-user view.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.FileDocumentBase.RealSourceFilePath">
 <summary>
 Gets the full path to the source file
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.FileDocumentBase.BuildGenerationLocation(System.String,DriveWorks.Specification.RuleResults)">
 <summary>
 Gets the full path.
 </summary>
 <param name="targetLocation"></param>
 <param name="results"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.DocumentUtility.IsSuppressionResult(System.Object)">
 <summary>
 Determines if a rule result means to suppress the thing to which the rule is associated.
 </summary>
 <param name="result"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.InternalExcelDocument">
 <summary>
 Implements the legacy internal Excel document type for DriveWorks.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.InternalExcelDocument.ExportHtml">
 <summary>
 Gets/sets whether an HTML version of the document should be exported.
 </summary>
</member>
<member name="P:DriveWorks.InternalExcelDocument.RelativePathRule">
 <summary>
 Gets the rule which calculates the relative path for the document.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.InternalExcelDocument.RelativePathValue">
 <summary>
 Gets the resolved path offset that this document will have
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.InternalExcelDocument.FileNameRule">
 <summary>
 Gets/sets the name of the output file
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.InternalExcelDocument.FileNameValue">
 <summary>
 Gives the resolved name that this document will have.
 </summary>
</member>
<member name="P:DriveWorks.InternalExcelDocument.IsHidden">
 <summary>
 Property to determine if the generated document is hidden from the end-user view.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.InternalExcelDocument.SetRanges(System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 Sets/adds ranges to be driven.
 </summary>
 <remarks>A name must exactly equal Excel file's range name.</remarks>
</member>
<member name="M:DriveWorks.InternalExcelDocument.GetRangeFormulae">
 <summary>
 Get the current range formulae from the excel sheet.
 </summary>
</member>
<member name="M:DriveWorks.InternalExcelDocument.GetRangeValues">
 <summary>
 Gets all the ranges resolved values from the sheet.
 </summary>
 <returns>A dictionary where the key is the range name and the value is the resolved value.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ReferencedFile">
 <summary>
 Provides support for referencing an arbitrary file as part of a DriveWorks Specification.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ReferencedFile.#ctor">
 <summary>
 Prevent public creation
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ReferencedFile.ReferencedFilePath">
 <summary>
 Gets the rule which controls the path to the referenced file for the document.
 </summary>
</member>
<member name="P:DriveWorks.ReferencedFile.ReferencedFilePathValue">
 <summary>
 Returns the evaluated path of the referenced file.
 </summary>
</member>
<member name="P:DriveWorks.ReferencedFile.IsHidden">
 <summary>
 Gets/sets whether the document is hidden.
 </summary>
</member>
<member name="P:DriveWorks.ReferencedFile.IsDisplay">
 <summary>
 Gets/sets whether the document has a display file rule.
 </summary>
</member>
<member name="M:DriveWorks.ReferencedFile.InitializeNewCore">
 <inheritdoc />
</member>
<member name="M:DriveWorks.ReferencedFile.InitializeExistingCore">
 <inheritdoc />
</member>
<member name="M:DriveWorks.ReferencedFile.GenerateCore(System.String,DriveWorks.Specification.RuleResults)">
 <inheritdoc />
</member>
<member name="T:DriveWorks.WordDocument">
 <summary>
 Provides the capability to work with Microsoft Word documents.
 </summary>
</member>
<member name="M:DriveWorks.WordDocument.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="P:DriveWorks.WordDocument.CreateHtmlFile">
 <summary>
 Gets/sets if the document should be exported to HTML after it is generated.
 </summary>
</member>
<member name="P:DriveWorks.WordDocument.HideHtmlFile">
 <summary>
 Gets/sets if generated HTML files should be hidden from the specification's documents list.
 </summary>
</member>
<member name="P:DriveWorks.WordDocument.CreatePdfFile">
 <summary>
 Gets/sets if the document should be exported to PDF after it is generated.
 </summary>
</member>
<member name="P:DriveWorks.WordDocument.HidePdfFile">
 <summary>
 Gets/sets if generated PDF files should be hidden from the specification's documents list.
 </summary>
</member>
<member name="M:DriveWorks.WordDocument.SetRange(System.String,System.String)">
 <summary>
 Sets/adds a bookmark to be driven.
 </summary>
 <param name="name">Name of the range to be driven.</param>
 <param name="formula">Formula of the range.</param>
 <remarks>A name must exactly equal Word file's range name.</remarks>
</member>
<member name="M:DriveWorks.WordDocument.SetRange(System.String,System.String,System.String)">
 <summary>
 Sets/adds a bookmark to be driven.
 </summary>
 <param name="name">Name of the range to be driven.</param>
 <param name="formula">Formula of the range.</param>
 <param name="comment">Comment associated with the range.</param>
 <remarks>A name must exactly equal the Word file's range name.</remarks>
</member>
<member name="M:DriveWorks.WordDocument.GetRange(System.String)">
 <summary>
 Get the rule for a driven bookmark.
 </summary>
 <param name="name">Name of the driven range.</param>
 <returns>The formula for the driven range, or nothing if it does not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.WordDocument.GetRangeNames">
 <summary>
 Gets a list of all the driven ranges names.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.WordDocument.GetRangeValues">
 <summary>
 Gets all the ranges resolved values.
 </summary>
 <returns>A dictionary where the key is the range name and the value is the resolved value.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.WordDocument.RemoveRange(System.String)">
 <summary>
 Removes a bookmark from the list of ranges to be driven.
 </summary>
 <param name="name">Name of the range to be removed from the drive list.</param>
</member>
<member name="M:DriveWorks.WordDocument.ClearRanges">
 <summary>
 Removes all bookmarks from the list of ranges to be driven.
 </summary>
</member>
<member name="M:DriveWorks.WordDocument.RangeExists(System.String)">
 <summary>
 Sees if a given driven bookmark exists with a specific name.
 </summary>
 <param name="rangeName">Name of the driven bookmark to find the existence of.</param>
</member>
<member name="M:DriveWorks.WordDocument.LoadRangesFromFile(System.Boolean)">
 <summary>
 Matches range information with ranges from file. 
 Creates missing ranges and removes unused ones.
 </summary>
 <param name="overwrite">If the ranges from the file should overwrite the existing ones.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.WordDocument.GenerateDocument(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
 <summary>
 Changes the text in zero or more bookmarks in the specified Microsoft Word document.
 </summary>
 <param name="fullDocumentPath">The full path to the word document.</param>
 <param name="newValues">A dictionary where each key is the name of a bookmark, and each value is the text to drive into the bookmark.</param>
 <returns>False when document does not generate - errors will be reported.</returns>
</member>
<member name="M:DriveWorks.WordDocument.GetRangeElement(System.String)">
 <summary>
 Gets the stored range element for a range.
 </summary>
 <param name="name">Name of the range to get.</param>
 <returns>Stored range element.</returns>
</member>
<member name="M:DriveWorks.WordDocument.GetRangeElements">
 <summary>
 Gets a list of all the range elements for this document.
 </summary>
</member>
<member name="T:DriveWorks.WordUtility">
 <summary>
 Collection of shared functions for Microsoft Excel documents
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.WordUtility.GetBookmarkValueFromFile(System.String,System.String)">
 <summary>
 Get a single bookmark value from a Word document.
 </summary>
 <param name="fullDocumentPath">The path to the Word document.</param>
 <param name="bookmarkName">The name of the bookmark to get the value of.</param>
 <returns>The text from within the bookmark.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.WordUtility.GetBookmarkNamesFromFile(System.String)">
 <summary>
 Gets the names of all the bookmarks in the specified Microsoft Word document.
 </summary>
 <param name="fullDocumentPath">The full path to the word document.</param>
 <returns>An array of strings, each representing a single bookmark.</returns>
</member>
<member name="M:DriveWorks.WordUtility.GetWordXDocument(System.String)">
 <summary>
 Gets a XDocument that represents the main XML document for a Word Document i.e /word/document.xml
 </summary>
 <param name="documentPath">The full path to the Word document.</param>
 <returns>The main XML document for an open Word document</returns>
 <remarks>Only works with .docx and .docm files.</remarks>
</member>
<member name="M:DriveWorks.WordUtility.SaveWordXDocument(System.String,System.Xml.Linq.XDocument)">
 <summary>
 Overwrites the main XML file of a Word Document with the given XDocument i.e /word/document.xml
 </summary>
 <param name="documentPath">The full path to the Word document.</param>
 <param name="document">The data that is to be writen.</param>
 <remarks>Only works with .docx and .docm files.</remarks>
</member>
<member name="T:DriveWorks.XmlTemplateDocument">
 <summary>
 Provides the capability to work with XML documents.
 </summary>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.SetRange(System.String,System.String)">
 <summary>
 Sets/adds ranges to be driven.
 </summary>
 <param name="name">Name of the range to be driven.</param>
 <param name="formula">Formula of the range.</param>
 <remarks>A name must exactly equal XML file's range name.</remarks>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.SetRange(System.String,System.String,System.String)">
 <summary>
 Sets/adds ranges to be driven.
 </summary>
 <param name="name">Name of the range to be driven.</param>
 <param name="formula">Formula of the range.</param>
 <remarks>A name must exactly equal XML file's range name.</remarks>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.GetRange(System.String)">
 <summary>
 Get the rule for a driven range.
 </summary>
 <param name="name">Name of the driven range.</param>
 <returns>The formula for the driven range, or nothing if it does not exist.</returns>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.GetRangeNames">
 <summary>
 Gets a list of all the driven ranges names.
 </summary>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.GetRangeValues">
 <summary>
 Gets all the ranges resolved values.
 </summary>
 <returns>A dictionary where the key is the range name and the value is the resolved value.</returns>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.RemoveRange(System.String)">
 <summary>
 Removes a range from the list of ranges to be driven.
 </summary>
 <param name="name">Name of the range to be removed from the drive list.</param>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.ClearRanges">
 <summary>
 Removes all Tagged Elements from the list of ranges to be driven.
 </summary>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.RangeExists(System.String)">
 <summary>
 Sees if a given driven range exists with a specific name.
 </summary>
 <param name="rangeName">Name of the driven range to find the existence of.</param>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.LoadRangesFromFile(System.Boolean)">
 <summary>
 Matches range information with ranges from file. 
 Creates missing ranges and removes unused ones.
 </summary>
 <param name="overwrite">If the ranges from the file should overwrite the existing ones.</param>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.GenerateDocument(DriveWorks.Specification.RuleResults)">
 <summary>
 Generates an object representation of the document with the changed values.
 </summary>
 <param name="results">A list of results to set in the document.</param>
 <returns>XDocument with changed values from the results.</returns>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.CopySupportingFiles(System.Xml.Linq.XDocument,System.String)">
 <summary>
 Copies over all supporting files that are specified in the xml document.
 </summary>
 <param name="element">Full xml document</param>
 <param name="targetLocation">Target path of the xml document (for relative copying)</param>
 <returns>Returns the location of the xsl file that is used if a transform flag is specified.</returns>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.TransformDocument(System.Xml.Linq.XDocument,System.String,System.String)">
 <summary>
 Overwrites the given file with a transformed html based file based on the given xsl file.
 </summary>
 <param name="fileLocation">The location of the xml file to transform.</param>
 <param name="styleFileLocation">The location of the xsl file to transform the xml with.</param>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.GetRangeElement(System.String)">
 <summary>
 Gets the stored range element for a range.
 </summary>
 <param name="name">Name of the range to get.</param>
 <returns>Stored range element.</returns>
</member>
<member name="M:DriveWorks.XmlTemplateDocument.GetRangeElements">
 <summary>
 Gets a list of all the range elements for this document.
 </summary>
</member>
<member name="T:DriveWorks.ProjectFilterList">
 <summary>
 Provides access to a collection filter strings for a specific section of DriveWorks, for a specific project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFilterList.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Creates a new instance of the ProjectFilterList class.
 </summary>
 <param name="project">The project to attach to.</param>
 <param name="UISection">The unique section to attach to.</param>
</member>
<member name="P:DriveWorks.ProjectFilterList.Filters">
 <summary>
 Gets the collection of filters for this project filter list.
 </summary>
</member>
<member name="T:DriveWorks.ProjectRuleTechnology">
 <summary>
 Specifies the rule technology used in the Project.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.ProjectRuleTechnology.Excel">
 <summary>
 Specifies that this Project uses Excel for its calculations.
 </summary>
</member>
<member name="F:DriveWorks.ProjectRuleTechnology.Titan">
 <summary>
 Specifies that this Project uses the Titan rule engine for its calculations.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.RelativeToDirectory">
 <summary>
 Specifies how relative paths are handled.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RelativeToDirectory.Auto">
 <summary>
 For a project, this is equivalent to <see cref="F:DriveWorks.RelativeToDirectory.Project" />, for a specification it is equivalent
 to <see cref="F:DriveWorks.RelativeToDirectory.Specification" />.
 </summary>
</member>
<member name="F:DriveWorks.RelativeToDirectory.Project">
 <summary>
 Relative paths are resolved relative to the project directory, for a specification,
 this means the original project directory.
 </summary>
</member>
<member name="F:DriveWorks.RelativeToDirectory.Specification">
 <summary>
 Relative paths are resolved relative to the specification directory. For a project,
 this is equivalent to <see cref="F:DriveWorks.RelativeToDirectory.Project" />.
 </summary>
</member>
<member name="F:DriveWorks.RelativeToDirectory.SpecificationMetadata">
 <summary>
 Relative paths are resolved relative to the specification metadata directory. For a project,
 this is equivalent to <see cref="F:DriveWorks.RelativeToDirectory.Project" />.
 </summary>
</member>
<member name="F:DriveWorks.RelativeToDirectory.GroupContent">
 <summary>
 Relative paths are resolved relative to the groups' content directory if it is set, otherwise null is returned.
 </summary>
</member>
<member name="T:DriveWorks.TableLocalizedResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.ArrayValueTruncationMessage">
<summary>
  Looks up a localized string similar to Table is too large to preview fully..
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.ErrorConnectionFailed">
<summary>
  Looks up a localized string similar to Could not connect to SQL server..
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.ExDatabaseNameNotSet">
<summary>
  Looks up a localized string similar to Could not create connection string, database name has not been specified..
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.ExServerAddressNotSet">
<summary>
  Looks up a localized string similar to Could not create connection string, a server address has not been specified..
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.RollupTableChildSpecColumnName">
<summary>
  Looks up a localized string similar to Child Specification Control.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.RollupTableLevelColumnName">
<summary>
  Looks up a localized string similar to Level.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.RollupTableNameColumnName">
<summary>
  Looks up a localized string similar to Name.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.RollupTableParentColumnName">
<summary>
  Looks up a localized string similar to Parent Specification.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.RollupTableRowColumnName">
<summary>
  Looks up a localized string similar to Row Index.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.RollupTableStateColumnName">
<summary>
  Looks up a localized string similar to State.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.RollupTableTypeColumnName">
<summary>
  Looks up a localized string similar to Type.
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.ValMsgDataCorruptedODBC">
<summary>
  Looks up a localized string similar to The SQL table information in the project file is in the wrong format..
</summary>
</member>
<member name="P:DriveWorks.TableLocalizedResources.ValMsgDataCorruptedSQL">
<summary>
  Looks up a localized string similar to The ODBC table information in the project file is in the wrong format..
</summary>
</member>
<member name="T:DriveWorks.ImportedDataTable">
 <summary>
 Provides access to a data table that has been imported from an excel source
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ImportedDataTable.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="P:DriveWorks.ImportedDataTable.FileLocation">
 <summary>
 The location of the orginal workbook that created this data table.
 </summary>
</member>
<member name="P:DriveWorks.ImportedDataTable.SheetName">
 <summary>
 The name of the original sheet that created this data table.
 </summary>
</member>
<member name="M:DriveWorks.ImportedDataTable.SetData(System.Object[0:,0:])">
 <summary>
 Set the data for this table.
 </summary>
 <param name="data">The new data to place in the table.</param>
 <remarks>Previous values will be lost</remarks>
</member>
<member name="M:DriveWorks.ImportedDataTable.GetData">
 <summary>
 Returns the cached data from the design master.
 This is much faster than re-loading from file.
 </summary>
</member>
<member name="M:DriveWorks.ImportedDataTable.GetTableData(System.Object[0:,0:]@)">
 <summary>
 Will load values from source excel workbook in the table.
 </summary>
 <param name="result">The new values gathered from the Workbook</param>
 <returns>True if the process was completed succesfully.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.OdbcDataTable">
 <summary>
 Provides support for retrieving data from ODBC data sources.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.OdbcDataTable.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="P:DriveWorks.OdbcDataTable.DataSourceName">
 <summary>
 The name of the odbc data source.
 </summary>
</member>
<member name="P:DriveWorks.OdbcDataTable.Username">
 <summary>
 The username (if any) used to connect to the odbc data source.
 </summary>
</member>
<member name="P:DriveWorks.OdbcDataTable.Password">
 <summary>
 The password (if any) used to connect to the odbc data source.
 </summary>
</member>
<member name="P:DriveWorks.OdbcDataTable.TableName">
 <summary>
 The name of the table to read from the odbc data source.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.OdbcDataTable.RefreshTableOnLoad">
 <summary>
 If the data from the talbew should be re-loaded each time the project is launched.
 </summary>
</member>
<member name="P:DriveWorks.OdbcDataTable.AllFields">
 <summary>
 If all the avialable fields should be read, as apposed to reading the specified ones.
 </summary>
</member>
<member name="P:DriveWorks.OdbcDataTable.Fields">
 <summary>
 The fields that are used from the selected table.
 </summary>
</member>
<member name="M:DriveWorks.OdbcDataTable.RefreshOnProjectLoad">
 <summary>
 Allow fresh on load option.
 </summary>
</member>
<member name="M:DriveWorks.OdbcDataTable.GetConnection">
 <summary>
 Gets an open connection to the specified data table
 </summary>
</member>
<member name="M:DriveWorks.OdbcDataTable.GetAllFields">
 <summary>
 Gets all fields from specified data table
 </summary>
</member>
<member name="M:DriveWorks.OdbcDataTable.GetTableDetails">
 <summary>
 Gets the table detials for the specified table
 </summary>
</member>
<member name="M:DriveWorks.OdbcDataTable.GetChosenFields">
 <summary>
 Gets the chosenfields from main element
 </summary>
</member>
<member name="M:DriveWorks.OdbcDataTable.SetChosenFields(System.String[])">
 <summary>
 Sets the chosen fields in main element
 </summary>
</member>
<member name="T:DriveWorks.SimpleDataTable">
 <summary>
 Provides access to a simple typed in data table, for use within DriveWorks.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SimpleDataTable.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="M:DriveWorks.SimpleDataTable.SetTableData(System.Object[0:,0:])">
 <summary>
 Set data for this table. 
 </summary>
 <param name="data">The new data to set to this table.</param>
</member>
<member name="M:DriveWorks.SimpleDataTable.GetTableData(System.Object[0:,0:]@)">
 <summary>
 Gets the raw table data as a zero-based two-dimensional array of values.
 </summary>
 <param name="result">
 A reference to a variable which will receive a zero-based two dimension object array of values
 representing the raw table data.
 </param>
 <returns>
 True if the operation succeeded, otherwise false.
 </returns>
 <remarks>
 If a serious problem occurs an exception should be
 thrown but under no circumstances may any user-interface elements be shown.
 </remarks>
</member>
<member name="T:DriveWorks.SqlServerDataTable">
 <summary>
 Provides support for retrieving data from SQL data sources.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SqlServerDataTable.#ctor">
 <devdoc>
 The constructor is private to prevent direct instantiation
 - the DriveWorks Engine uses reflection so isn't worried about this.
 </devdoc>
</member>
<member name="M:DriveWorks.SqlServerDataTable.InitalizeCommon">
 <summary>
 Read table xml data into memory.
 </summary>
 <exception cref="T:DriveWorks.TableDataCorruptException"/>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.SqlServerDataTable.ServerAddress">
 <summary>
 The SQL server address, including the instance name.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerDataTable.DatabaseName">
 <summary>
 The database name to connect to.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerDataTable.TableName">
 <summary>
 The name of the table to read from.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerDataTable.TableSchema">
 <summary>
 The schema of the table to read from.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerDataTable.RefreshTableOnLoad">
 <summary>
 If the data from the table should be re-loaded each time the project is launched.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerDataTable.WindowsAuthentication">
 <summary>
 Whether to use Windows authentication to sign into the SQL database.
 </summary>
 <remarks>
 Setting this value to true will clear the currently stored Username and Password.
 </remarks>
</member>
<member name="P:DriveWorks.SqlServerDataTable.Username">
 <summary>
 The username (if any) used to connect to the SQL server.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerDataTable.Password">
 <summary>
 The password (if any) used to connect to the SQL server.
 </summary>
</member>
<member name="P:DriveWorks.SqlServerDataTable.AllFields">
 <summary>
 If all the available fields should be read, as apposed to reading the specified ones.
 </summary>
</member>
<member name="M:DriveWorks.SqlServerDataTable.GetFields">
 <summary>
 The fields that are used from the selected table.
 </summary>
</member>
<member name="M:DriveWorks.SqlServerDataTable.SetChosenFields(System.String[])">
 <summary>
 Sets the chosen fields for this table.
 </summary>
 <remarks>
 Will set <see cref="P:DriveWorks.SqlServerDataTable.AllFields" /> to false.
 </remarks>
</member>
<member name="M:DriveWorks.SqlServerDataTable.RefreshOnProjectLoad">
 <summary>
 Allow fresh on load option.
 </summary>
</member>
<member name="M:DriveWorks.SqlServerDataTable.GetConnectionString">
 <summary>
 Gets a connection string that can be used to connect to the SQL server specified.
 </summary>
 <exception cref="T:System.InvalidOperationException">
 Thrown when server address or database name not set.
 </exception>
</member>
<member name="M:DriveWorks.SqlServerDataTable.GetAllFields">
 <summary>
 Gets all fields from specified data table
 </summary>
</member>
<member name="M:DriveWorks.SqlServerDataTable.GetChosenFields">
 <summary>
 Gets the chosen fields from main element
 </summary>
</member>
<member name="T:DriveWorks.FunctionInformation">
 <summary>
 Provides information about a function.
 </summary>
</member>
<member name="M:DriveWorks.FunctionInformation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.String[],System.Boolean,System.Boolean,DriveWorks.FunctionInformationAttributes,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.FunctionInformation"/> class.
 </summary>
 <param name="functionInvariantName">The name of the function as it will be used in rules.</param>
 <param name="functionLocalizedName">The localized name, as will be see in UI etc.</param>
 <param name="functionDescription">A short description of what the function does (to help users in UI).</param>
 <param name="argumentNames">A collection of argument names for the function, in the order that they are used.</param>
 <param name="argumentDescriptions">A collection of argument descriptions for the function, in the order that they are used.</param>
 <param name="argumentTypes">A collection of argument types for the function, in the order that they are used.</param>
 <param name="hasParamArray">Whether or not the function can accept any number of arguments.</param>
 <param name="isDeprecated">Whether or not the function should be used or not any more.</param>
 <param name="attributes">Flags specified for this function.</param>
 <param name="category">Category that the function belongs to.</param>
</member>
<member name="P:DriveWorks.FunctionInformation.FunctionName">
 <summary>
 Gets the name of the function as it will be used in rules.
 </summary>
</member>
<member name="P:DriveWorks.FunctionInformation.FunctionLocalizedName">
 <summary>
 The localized name, as will be see in UI etc.
 </summary>
</member>
<member name="P:DriveWorks.FunctionInformation.FunctionDescription">
 <summary>
 A short description of what the function does (to help users in UI).
 </summary>
</member>
<member name="P:DriveWorks.FunctionInformation.FunctionCategory">
 <summary>
 Category that the function belongs to.
 </summary>
</member>
<member name="P:DriveWorks.FunctionInformation.ArgumentNames">
 <summary>
 A collection of argument names for the function, in the order that they are used.
 </summary>
</member>
<member name="P:DriveWorks.FunctionInformation.ArgumentDescriptions">
 <summary>
 A collection of argument descriptions for the function, in the order that they are used.
 </summary>
</member>
<member name="P:DriveWorks.FunctionInformation.ArgumentTypes">
 <summary>
 A collection of argument types for the function, in the order that they are used.
 </summary>
</member>
<member name="P:DriveWorks.FunctionInformation.HasParameterArray">
 <summary>
 Whether or not the function can accept any number of arguments.
 </summary>
</member>
<member name="P:DriveWorks.FunctionInformation.IsDeprecated">
 <summary>
 Whether or not the function should be used or not any more.
 </summary>
</member>
<member name="P:DriveWorks.FunctionInformation.Attributes">
 <summary>
 Flags specified for this function.
 </summary>
</member>
<member name="T:DriveWorks.ProjectDisplayFileManager">
 <summary>
 Manages display files for a project.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDisplayFileManager.SetDisplayFileDetails(DriveWorks.ProjectDocument,System.String,System.String)">
 <summary>
 Updates the details of a display file in the design master.
 </summary>
 <param name="document">The document for which to create/update the details of the associated display file.</param>
 <param name="rule">The current rule for the display file.</param>
 <param name="comment">The current comment for the display file.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDisplayFileManager.DeleteDisplayFile(DriveWorks.ProjectDocument)">
 <summary>
 Deletes the display file associated with the given document.
 </summary>
 <param name="document">The document to which the display file is associated.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ReleaseReportingResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ComponentLoopAffParameterName">
<summary>
  Looks up a localized string similar to Loop Additional File Formats.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ComponentLoopCountParameterName">
<summary>
  Looks up a localized string similar to Loop Count.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ComponentLoopEnabledParameterName">
<summary>
  Looks up a localized string similar to Loop Enabled.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ComponentPropertiesParameterTypeDisplayName">
<summary>
  Looks up a localized string similar to Component Properties.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ComponentPropertiesParameterTypeName">
<summary>
  Looks up a localized string similar to ComponentProperties.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ComponentTagsParameterName">
<summary>
  Looks up a localized string similar to Tags.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ComponentTagsParameterTypeDisplayName">
<summary>
  Looks up a localized string similar to Component Tags.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ComponentTagsParameterTypeName">
<summary>
  Looks up a localized string similar to ComponentTags.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ConstructionInformation">
<summary>
  Looks up a localized string similar to Construction Information.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluateComponentReferences">
<summary>
  Looks up a localized string similar to Evaluate Component References.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluateConditions">
<summary>
  Looks up a localized string similar to Evaluating Conditions.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluateConditionsDetails">
<summary>
  Looks up a localized string similar to Evaluating conditions for task.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedAsAction">
<summary>
  Looks up a localized string similar to Action: {0}.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedAsDrivenAlternative">
<summary>
  Looks up a localized string similar to Using driven alternative: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedAsDuplicateComponent">
<summary>
  Looks up a localized string similar to Duplicate component already exists: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedAsDuplicatePath">
<summary>
  Looks up a localized string similar to Duplicate path exists: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedAsInvalidName">
<summary>
  Looks up a localized string similar to Invalid Component Name: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedAsNewComponent">
<summary>
  Looks up a localized string similar to Creating new component: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedAsNewComponentInvalidPath">
<summary>
  Looks up a localized string similar to Invalid path for new component: &apos;{0}.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedAsStandardAlternative">
<summary>
  Looks up a localized string similar to Using standard alternative: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedAsStandardAlternativeWithInvalidPath">
<summary>
  Looks up a localized string similar to Invalid path for standard alternative: &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluatedInvalidCharactersInModelRule">
<summary>
  Looks up a localized string similar to The file name rule for &apos;{0}&apos; contains forbidden characters. Rule value is &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluateRules">
<summary>
  Looks up a localized string similar to Evaluate Rules.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.EvaluationResult">
<summary>
  Looks up a localized string similar to Evaluation Result.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.GeneratingModelInformation">
<summary>
  Looks up a localized string similar to Generating model generation information.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.GetMasterData">
<summary>
  Looks up a localized string similar to Get Master Data.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.GroupReleasedComponents_ImportReleaseData_CopyingRelatedComponentReports">
<summary>
  Looks up a localized string similar to Copying {0} related component reports..
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.GroupReleasedComponents_ImportReleaseData_GenerationTasksWereCopied">
<summary>
  Looks up a localized string similar to {0} generation tasks were copied..
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.InvalidLoopCount">
<summary>
  Looks up a localized string similar to The value &apos;{0}&apos; is not a valid loop count. Loop count must be an integral value..
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.InvalidLoopCountDetails">
<summary>
  Looks up a localized string similar to The component will not be looped.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ModelInformationConstruction">
<summary>
  Looks up a localized string similar to Model information construction.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ModelInformationConstructionDescription">
<summary>
  Looks up a localized string similar to Constructing model information from master and rules.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ProfileEventEvaluateComponentRules">
<summary>
  Looks up a localized string similar to Calculate rules for component &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ProfileEventEvaluateScopedComponentTasks">
<summary>
  Looks up a localized string similar to Calculating rules for scoped tasks.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ProfileEventEvaluateTasksInScope">
<summary>
  Looks up a localized string similar to Calculate rules for tasks in the &apos;{0}&apos; scope.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ProfileEventEvaluatingComponentSetList">
<summary>
  Looks up a localized string similar to Evaluating component set list.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ProfileEventReleaseComponent">
<summary>
  Looks up a localized string similar to Releasing component &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ProfileEventReleaseComponents">
<summary>
  Looks up a localized string similar to Release Components.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ProfileEventReleasingComponentSet">
<summary>
  Looks up a localized string similar to Evaluating references for component set &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.ReleasingModel">
<summary>
  Looks up a localized string similar to Releasing Model.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.RetrieveAndCalculateRules">
<summary>
  Looks up a localized string similar to Retrieving and calculating results.
</summary>
</member>
<member name="P:DriveWorks.ReleaseReportingResources.RuleResult">
<summary>
  Looks up a localized string similar to Rule Result.
</summary>
</member>
<member name="T:DriveWorks.DomainObject">
 <summary>
 Internal Use Only. Inherited by all DriveWorks objects that need to be available
 in multiple appdomains.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.DomainObject.InitializeLifetimeService">
 <summary>
 Overridden to return an infinite lease.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ControlResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.AllowClearSelectionDescription">
<summary>
  Looks up a localized string similar to If TRUE, allows the user to clear the active selection, otherwise if FALSE, an item is always selected..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.AllowClearSelectionDisplayName">
<summary>
  Looks up a localized string similar to Clear Selection Allowed.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.AllowedProjectsDescription">
<summary>
  Looks up a localized string similar to Determines the list of projects from which child specifications can be created..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.AllowedProjectsDisplayName">
<summary>
  Looks up a localized string similar to Allowed Projects.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.AutoCenterDescription">
<summary>
  Looks up a localized string similar to Controls whether to automatically center panning on the 3D scene&apos;s center rather than the origin..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.AutoCenterName">
<summary>
  Looks up a localized string similar to Camera Auto-Center.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.AutopilotPreviewRequestedMacroNameDescription">
<summary>
  Looks up a localized string similar to The name of the macro to run before starting to preview a model via Autopilot..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.AutopilotPreviewRequestedMacroNameDisplayName">
<summary>
  Looks up a localized string similar to On Autopilot Preview Requested Macro.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.BackColorDescription">
<summary>
  Looks up a localized string similar to Controls the color of the control&apos;s background..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.BackColorDisplayName">
<summary>
  Looks up a localized string similar to Background Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.BackgroundClickedMacroDesc">
<summary>
  Looks up a localized string similar to The macro to run when the user clicks outside the model..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.BackgroundClickedMacroName">
<summary>
  Looks up a localized string similar to On Background Clicked Macro.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.BorderStyleDescription">
<summary>
  Looks up a localized string similar to Configures the border style of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.BorderStyleDisplayName">
<summary>
  Looks up a localized string similar to Border Style.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionColorDescription">
<summary>
  Looks up a localized string similar to Controls the caption color of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionColorDisplayName">
<summary>
  Looks up a localized string similar to Caption Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionDescription">
<summary>
  Looks up a localized string similar to Controls the control&apos;s caption..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionDisplayName">
<summary>
  Looks up a localized string similar to Caption.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionFontDescription">
<summary>
  Looks up a localized string similar to Determines the font used for the controls caption..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionFontDisplayName">
<summary>
  Looks up a localized string similar to Caption Font.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionHorizontalAlignmentDescription">
<summary>
  Looks up a localized string similar to Controls whether the text inside the caption is horizontally aligned to the left, right or center.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionHorizontalAlignmentDisplayName">
<summary>
  Looks up a localized string similar to Caption Horizontal Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionWidthDescription">
<summary>
  Looks up a localized string similar to Controls the width of the control&apos;s caption..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CaptionWidthDisplayName">
<summary>
  Looks up a localized string similar to Caption Width.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CatAdvanced">
<summary>
  Looks up a localized string similar to Advanced.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CatAppearance">
<summary>
  Looks up a localized string similar to Appearance.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CatAutopilotMode">
<summary>
  Looks up a localized string similar to Autopilot Mode.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CatBehavior">
<summary>
  Looks up a localized string similar to Behavior.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CatDesign">
<summary>
  Looks up a localized string similar to Design.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CatEvents">
<summary>
  Looks up a localized string similar to Events.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CatGeneral">
<summary>
  Looks up a localized string similar to General.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CatLayout">
<summary>
  Looks up a localized string similar to Layout.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CatMisc">
<summary>
  Looks up a localized string similar to Misc.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CharacterLimitDescription">
<summary>
  Looks up a localized string similar to Limits the number of characters that can be entered in the TextBox. If set to 0, any number of characters can be entered..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CharacterLimitDisplayName">
<summary>
  Looks up a localized string similar to Character Limit.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CheckBoxAlignDescription">
<summary>
  Looks up a localized string similar to Controls whether the check box is on the left or right of the caption..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CheckBoxAlignDisplayName">
<summary>
  Looks up a localized string similar to Check Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CheckedDescription">
<summary>
  Looks up a localized string similar to Controls whether the check box is checked..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CheckedDisplayName">
<summary>
  Looks up a localized string similar to Checked.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CheckedRuleOverrideDescription">
<summary>
  Looks up a localized string similar to Controls whether the check box is checked..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.CheckedRuleOverrideDisplayName">
<summary>
  Looks up a localized string similar to Checked (Override Rule).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationBehaviorDescription">
<summary>
  Looks up a localized string similar to Specifies whether the control is in single, or multiple; child specification mode..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationBehaviorDisplayName">
<summary>
  Looks up a localized string similar to Behavior.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationNameColumnVisibleDescription">
<summary>
  Looks up a localized string similar to Specifies whether the name column is visible or not..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationNameColumnVisibleName">
<summary>
  Looks up a localized string similar to Name Column Visible.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationProjectDefinitionNotFound">
<summary>
  Looks up a localized string similar to Could not find project defintion for project: {0}.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationProjectsDescription">
<summary>
  Looks up a localized string similar to One or more project names, delimited by the &apos;|&apos; symbol, which control which specification types can be added to the child specification list..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationProjectsDisplayName">
<summary>
  Looks up a localized string similar to Projects.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationStateColumnVisibleDescription">
<summary>
  Looks up a localized string similar to Specifies whether the state column is visible or not..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationStateColumnVisibleName">
<summary>
  Looks up a localized string similar to State Column Visible.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationTypeColumnVisibleDescription">
<summary>
  Looks up a localized string similar to Specifies whether the type column is visible or not..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ChildSpecificationTypeColumnVisibleName">
<summary>
  Looks up a localized string similar to Type Column Visible.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ColumnWidthsDescription">
<summary>
  Looks up a localized string similar to One or more values delimited by the &apos;|&apos; symbol. Setting one value applies that width to all columns..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ColumnWidthsDisplayName">
<summary>
  Looks up a localized string similar to Column Widths.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ControlOrPropertyNameExistsExceptionMessage">
<summary>
  Looks up a localized string similar to A control or a property already exists with the name you have entered, please enter a different name..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DatabaseDescription">
<summary>
  Looks up a localized string similar to Determines the database to which to connect..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DatabaseDisplayName">
<summary>
  Looks up a localized string similar to Database.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DataTableItemsDescription">
<summary>
  Looks up a localized string similar to The items to show in the table, in array format..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DateDefaultValueDescription">
<summary>
  Looks up a localized string similar to Controls the default value of the date picker which is used before another date is set..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DateFormatDescription">
<summary>
  Looks up a localized string similar to How the date value for this control should be formatted..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DateFormatDisplayName">
<summary>
  Looks up a localized string similar to Date Format.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DateMaximumDescription">
<summary>
  Looks up a localized string similar to The maximum date that can be selected on the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DateMinimumDescription">
<summary>
  Looks up a localized string similar to The minimum date that can be selected on the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DateOverrideRuleDescription">
<summary>
  Looks up a localized string similar to Specifies the selected date in the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DateOverrideRuleDisplayName">
<summary>
  Looks up a localized string similar to Date (Override Rule).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DateValueDescription">
<summary>
  Looks up a localized string similar to Specifies the selected date in the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DateValueDisplayName">
<summary>
  Looks up a localized string similar to Date.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DecimalPlacesDescription">
<summary>
  Looks up a localized string similar to Controls the number of decimal places shown in the control. If the value is set to a negative value, DriveWorks automatically determines the required number of decimal places..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DecimalPlacesDisplayName">
<summary>
  Looks up a localized string similar to Decimal Places.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultFileNameDescription">
<summary>
  Looks up a localized string similar to The file name and path to use for the next uploaded file. If a file extension is omitted it will be taken from the uploaded file. It is possible to use prefixes such as &lt;Project&gt;, for more information consult the help..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultFileNameDisplayName">
<summary>
  Looks up a localized string similar to Default File Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultFontDescription">
<summary>
  Looks up a localized string similar to Sets the default font for all controls on the form..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultFontDisplayName">
<summary>
  Looks up a localized string similar to Default Font.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultIdentityDescription">
<summary>
  Looks up a localized string similar to Controls the default identity value of the control, if the default identity value is based on a rule and the value of the rule changes, then the selected identity value of the control will be changed to be the default identity value..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultIndexDescription">
<summary>
  Looks up a localized string similar to Controls the default index of the control, if the default index is based on a rule and the value of the rule changes, then the selected index of the control will be changed to be the default index..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultRotationZoomDescription">
<summary>
  Looks up a localized string similar to Default Orientation for the 3D preview camera. Values in the order: horizontal rotation, vertical rotation and zoom distance. Then camera pan X, Y and Z position values in millimeters. E.g. &quot;90|45|50|0|2|0&quot;..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultRotationZoomDisplayName">
<summary>
  Looks up a localized string similar to Camera Default Orientation.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultRowIdentityDisplayName">
<summary>
  Looks up a localized string similar to Default Row Identity.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultRowIndexDisplayName">
<summary>
  Looks up a localized string similar to Default Row Index.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultValue">
<summary>
  Looks up a localized string similar to Default Value.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DefaultValueDescription">
<summary>
  Looks up a localized string similar to Controls the default value of the list control, if the default value is based on a rule and the value changes, then the selected value of the list control will be changed to be the default value.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DialogDescription">
<summary>
  Looks up a localized string similar to Determines which dialog to show..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DialogDisplayName">
<summary>
  Looks up a localized string similar to Dialog Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DisplayUnitsDescription">
<summary>
  Looks up a localized string similar to Determines the unit of measurement used to display the value of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DisplayUnitsDisplayName">
<summary>
  Looks up a localized string similar to Display Units.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DisplayValueDescription">
<summary>
  Looks up a localized string similar to Provides access to the value of the control, expressed in display units..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DisplayValueDisplayName">
<summary>
  Looks up a localized string similar to Display Value.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DuplicateFileBehaviorDescription">
<summary>
  Looks up a localized string similar to Determines how duplicate files should be handled..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.DuplicateFileBehaviorDisplayName">
<summary>
  Looks up a localized string similar to Duplicate File Behavior.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.EnabledDescription">
<summary>
  Looks up a localized string similar to Controls whether the control is enabled (if the result is TRUE) or disabled (if the result is anything other than TRUE, e.g. FALSE)..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.EnabledDisplayName">
<summary>
  Looks up a localized string similar to Enabled.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.EnableImageModeDescription">
<summary>
  Looks up a localized string similar to Specifies whether to use image mode for the 3D Preview Control when viewed in a browser..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.EnableImageModeName">
<summary>
  Looks up a localized string similar to Enable Image Mode.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.EnableOrthographicDescription">
<summary>
  Looks up a localized string similar to Whether the default camera should use an orthographic projection instead of perspective..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.EnableOrthographicName">
<summary>
  Looks up a localized string similar to Camera Enable Orthographic.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.EnablePanDescripton">
<summary>
  Looks up a localized string similar to Controls whether panning is enabled..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.EnablePanName">
<summary>
  Looks up a localized string similar to Camera Enable Pan.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ErrorDescription">
<summary>
  Looks up a localized string similar to Determines whether the value of the control is in error. The result of this rule is a string containing the error message if the value is in error, otherwise a blank string or the number zero. For more information see the help..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ErrorDisplayName">
<summary>
  Looks up a localized string similar to Error Result.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExCannotExtendPropertyDescription">
<summary>
  Looks up a localized string similar to Cannot extend property..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExControlTypeLoad">
<summary>
  Looks up a localized string similar to The control type &apos;{0}&apos; could not be resolved..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExItemListMustBeInSpec">
<summary>
  Looks up a localized string similar to Must be in a specification to begin editing an item list..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExMsgOnlySpecificationsCanHostOtherSpecifications">
<summary>
  Looks up a localized string similar to Only specifications can host other specifications..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExMsgPreviewControlGetPreviewProblem">
<summary>
  Looks up a localized string similar to There was a problem generating a preview. {0}.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExMsgPreviewControlInvalidData">
<summary>
  Looks up a localized string similar to The file &apos;{0}&apos; contains invalid data. {1}.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExMsgPreviewControlMissingFile">
<summary>
  Looks up a localized string similar to Could not find the file &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExMsgPreviewControlServerPreviewNotBeGenerated">
<summary>
  Looks up a localized string similar to The preview could not be generated at this time. {0}.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExMsgPreviewControlServerPreviewURLInvalid">
<summary>
  Looks up a localized string similar to The preview service URL is invalid. Ensure the Preview Service Location setting is using an IP address, host name or fully qualified domain name..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExNotInitialized">
<summary>
  Looks up a localized string similar to The object has not been initialized..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExUploadControlFileIsLargerThanUploadLimit">
<summary>
  Looks up a localized string similar to The file is larger than the upload limit..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExUploadControlInvalidFileExtension">
<summary>
  Looks up a localized string similar to This type of file can not be uploaded with this control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExUploadControlInvalidPath">
<summary>
  Looks up a localized string similar to The path for the uploaded file &apos;{0}&apos; is invalid. {1}.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExUploadControlNoPermissionsToPath">
<summary>
  Looks up a localized string similar to You do not have the required permissions to access the path &apos;{0}&apos;. {1}.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExUploadControlProblemAttemptingStoreFile">
<summary>
  Looks up a localized string similar to There was a problem attempting to store the uploaded file. {0}.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ExUploadControlUnableResolvePath">
<summary>
  Looks up a localized string similar to The final file path cannot be resolved..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.FieldNamesDescription">
<summary>
  Looks up a localized string similar to Determines what fields should be returned from the table, the fields should be delimited by the &apos;|&apos; symbol.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.FieldNamesDisplayName">
<summary>
  Looks up a localized string similar to Field Names.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.FileFilterDescription">
<summary>
  Looks up a localized string similar to The filter to use when picking a file to upload. E.g. Image File:png,jpg|Word File:doc,docx|Excel File:xls.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.FileFilterDisplayName">
<summary>
  Looks up a localized string similar to File Filter.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.FilenameDisplayName">
<summary>
  Looks up a localized string similar to File Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.FileSizeLimitDescription">
<summary>
  Looks up a localized string similar to The limit on the size of the file that can be uploaded. The units can be specified, or bytes will be assumed..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.FileSizeLimitDisplayName">
<summary>
  Looks up a localized string similar to File Size Limit.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.FormNameDescription">
<summary>
  Looks up a localized string similar to Gets or sets the name of the form to be displayed inline..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.FormNameDisplayName">
<summary>
  Looks up a localized string similar to Form Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.GenerationMethodDescription">
<summary>
  Looks up a localized string similar to Specifies which model generation method to use when previewing the model..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.GenerationMethodDisplayName">
<summary>
  Looks up a localized string similar to Generation Method.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.GroupNameDescription">
<summary>
  Looks up a localized string similar to The name of the group to which the option belongs..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.GroupNameDisplayName">
<summary>
  Looks up a localized string similar to Group Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderBackgroundColorDescription">
<summary>
  Looks up a localized string similar to Controls the background color of the headers..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderBackgroundColorDisplayName">
<summary>
  Looks up a localized string similar to Header Background Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderColorDescription">
<summary>
  Looks up a localized string similar to Controls the text color of the headers..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderColorDisplayName">
<summary>
  Looks up a localized string similar to Header Text Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderFontDescription">
<summary>
  Looks up a localized string similar to Controls the font of the headers..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderFontDisplayName">
<summary>
  Looks up a localized string similar to Header Font.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderTextHorizontalAlignmentDescription">
<summary>
  Looks up a localized string similar to Controls whether the header text is aligned to the left, right or center..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderTextHorizontalAlignmentDisplayName">
<summary>
  Looks up a localized string similar to Header Text Horizontal Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderTextVerticalAlignmentDescription">
<summary>
  Looks up a localized string similar to Controls whether the header text is aligned to the top, center or bottom..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeaderTextVerticalAlignmentDisplayName">
<summary>
  Looks up a localized string similar to Header Text Vertical Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeightDescription">
<summary>
  Looks up a localized string similar to Controls the height of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HeightDisplayName">
<summary>
  Looks up a localized string similar to Height.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HiddenFieldsDescription">
<summary>
  Looks up a localized string similar to A pipe-bar delimited list of fields which should not be displayed in the data table..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HiddenFieldsDisplayName">
<summary>
  Looks up a localized string similar to Hidden Fields.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HiddenItemValuesDescription">
<summary>
  Looks up a localized string similar to A pipe-bar delimited list of Item Value columns which should not be displayed in the Item List..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HiddenItemValuesName">
<summary>
  Looks up a localized string similar to Hidden Item Values.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HiddenResultColumnsDescription">
<summary>
  Looks up a localized string similar to A pipe-bar delimited list of Result columns which should not be displayed in the Child Specification List..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HiddenResultColumnsName">
<summary>
  Looks up a localized string similar to Hidden Result Columns.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HideCharactersDescription">
<summary>
  Looks up a localized string similar to Whether or not the TextBox should behave like a password TextBox..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HideCharactersDisplayName">
<summary>
  Looks up a localized string similar to Hide Characters.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HorizontalScrollDescription">
<summary>
  Looks up a localized string similar to Controls the visibility behaviour of the horizontal scroll bar for this frame control&apos;s content..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HorizontalScrollVisibilityDisplayName">
<summary>
  Looks up a localized string similar to Horizontal Scroll Visibility.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HoverColorDescription">
<summary>
  Looks up a localized string similar to Control color while the cursor is hovering over it..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HoverColorDisplayName">
<summary>
  Looks up a localized string similar to Hover Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HoverUnderlineDescription">
<summary>
  Looks up a localized string similar to Specifes whether the text should be underlined when being hovered over..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.HoverUnderlineDisplayName">
<summary>
  Looks up a localized string similar to Hover Underline.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.IdentityFieldsDescription">
<summary>
  Looks up a localized string similar to A pipe-bar delimited list of the names of the fields which, taken together, uniquely identity a row in the table..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.IdentityFieldsDisplayName">
<summary>
  Looks up a localized string similar to Identity Fields.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.IncrementDescription">
<summary>
  Looks up a localized string similar to A decimal quantity by which the value is incremented and decremented..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.IncrementDisplayName">
<summary>
  Looks up a localized string similar to Increment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.InputBackgroundColorDescription">
<summary>
  Looks up a localized string similar to Controls the background color of the control&apos;s input area..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.InputBackgroundColorDisplayName">
<summary>
  Looks up a localized string similar to Input Background Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.InputValuesPropertyDescription">
<summary>
  Looks up a localized string similar to Optional table of values to drive into the specification. This should be a table with 2 columns: &quot;&quot;Name&quot;&quot; and &quot;&quot;Value&quot;&quot;. Names can be constants or controls etc..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.InputValuesPropertyDisplayName">
<summary>
  Looks up a localized string similar to Input Values.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.IsReadOnlyDescription">
<summary>
  Looks up a localized string similar to Prevents the text from being edited but still allows for text selection and scrolling..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.IsReadOnlyDisplayName">
<summary>
  Looks up a localized string similar to Read Only.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ItemListItemsDescription">
<summary>
  Looks up a localized string similar to One or more dialog names, delimited by the &apos;|&apos; symbol, which control which items can be added to the item list..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ItemListItemsDisplayName">
<summary>
  Looks up a localized string similar to Items.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ItemListNameColumnVisibleDescription">
<summary>
  Looks up a localized string similar to Specifies whether the name column is visible or not..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ItemListNameColumnVisibleName">
<summary>
  Looks up a localized string similar to Name Column Visible.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ItemListTypeColumnVisibleDescription">
<summary>
  Looks up a localized string similar to Specifies whether the type column is visible or not..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ItemListTypeColumnVisibleName">
<summary>
  Looks up a localized string similar to Type Column Visible.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ItemsDescription">
<summary>
  Looks up a localized string similar to A list of items, delimited by the &apos;|&apos; symbol, which control the items shown in the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ItemsDisplayName">
<summary>
  Looks up a localized string similar to Items.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LabelHorizontalAlignmentDescription">
<summary>
  Looks up a localized string similar to Controls the horizontal alignment of the text in the Label. This is a string value of either &quot;Left&quot;, &quot;Center&quot; or &quot;Right&quot;..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LabelHorizontalAlignmentDisplayName">
<summary>
  Looks up a localized string similar to Text Horizontal Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LabelTextDescription">
<summary>
  Looks up a localized string similar to The text shown on the label..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LabelTextDisplayName">
<summary>
  Looks up a localized string similar to Text.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LeftDescription">
<summary>
  Looks up a localized string similar to Controls the left position of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LeftDisplayName">
<summary>
  Looks up a localized string similar to Left.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LightingPresetDesc">
<summary>
  Looks up a localized string similar to Lighting setup to use in the 3D Preview Control.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LightingPresetName">
<summary>
  Looks up a localized string similar to Lighting.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LinkBehaviorDescription">
<summary>
  Looks up a localized string similar to Determines whether the link, when clicked on the web, should be opened in the current window or in a new window/tab..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LinkBehaviorDisplayName">
<summary>
  Looks up a localized string similar to Link Behavior.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LinkDescription">
<summary>
  Looks up a localized string similar to Specifies the URL to direct to..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.LinkDisplayName">
<summary>
  Looks up a localized string similar to Hyperlink.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ListColorDescription">
<summary>
  Looks up a localized string similar to Controls the color of list items..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ListColorDisplayName">
<summary>
  Looks up a localized string similar to List Item Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ListFontDescription">
<summary>
  Looks up a localized string similar to Controls the font of list items..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ListFontDisplayName">
<summary>
  Looks up a localized string similar to List Item Font.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.MacroArgumentDescription">
<summary>
  Looks up a localized string similar to Provides an optional argument to the macro.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.MacroArgumentDisplayName">
<summary>
  Looks up a localized string similar to Macro Argument.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.MacroDescription">
<summary>
  Looks up a localized string similar to Determines the name of the macro to fire when the macro button is clicked..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.MacroDisplayName">
<summary>
  Looks up a localized string similar to Macro Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.MaxDescription">
<summary>
  Looks up a localized string similar to Limits the maximum value of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.MaxDisplayName">
<summary>
  Looks up a localized string similar to Maximum.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.MinDescription">
<summary>
  Looks up a localized string similar to Limits the minimum value of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.MinDisplayName">
<summary>
  Looks up a localized string similar to Minimum.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ModelClickedMacroDesc">
<summary>
  Looks up a localized string similar to The macro to run when the user clicks on the model..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ModelClickedMacroName">
<summary>
  Looks up a localized string similar to On Model Clicked Macro.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.NameDescription">
<summary>
  Looks up a localized string similar to The name of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.NameDisplayName">
<summary>
  Looks up a localized string similar to (Name).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.NativeUnitsDescription">
<summary>
  Looks up a localized string similar to Determines the unit of measurement used when storing the control&apos;s value..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.NativeUnitsDisplayName">
<summary>
  Looks up a localized string similar to Native Units.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.NativeValueDescription">
<summary>
  Looks up a localized string similar to Provides access to the native value of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.NativeValueDisplayName">
<summary>
  Looks up a localized string similar to Native Value.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.NumericValueDescription">
<summary>
  Looks up a localized string similar to Provides access to the value of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnCancelledMacroNamePropertyDescription">
<summary>
  Looks up a localized string similar to The name of a macro to execute when the hosted specification has been cancelled..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnCancelledMacroNamePropertyDisplayName">
<summary>
  Looks up a localized string similar to On Cancelled Macro Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnEnterMacroDescription">
<summary>
  Looks up a localized string similar to Specifies a macro to run before the current form becomes active..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnEnterMacroName">
<summary>
  Looks up a localized string similar to On Enter.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnNextMacroDescription">
<summary>
  Looks up a localized string similar to Specifies a macro to run before the next form is shown..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnNextMacroName">
<summary>
  Looks up a localized string similar to On Next.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnPreviousMacroDescription">
<summary>
  Looks up a localized string similar to Specifies a macro to run before the previous form is shown..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnPreviousMacroName">
<summary>
  Looks up a localized string similar to On Previous.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnTransitionedMacroNamePropertyDescription">
<summary>
  Looks up a localized string similar to The name of a macro to execute when the hosted specification has finished transitioning (moved to a different state)..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnTransitionedMacroNamePropertyDisplayName">
<summary>
  Looks up a localized string similar to On Transitioned Macro Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnUploadCompleteMacroDescription">
<summary>
  Looks up a localized string similar to The name of the macro to call when uploading of a file is complete. The macro&apos;s argument will be the name of this control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OnUploadCompleteMacroDisplayName">
<summary>
  Looks up a localized string similar to On Upload Complete Macro.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptGroupItemAlignDescription">
<summary>
  Looks up a localized string similar to Controls the alignment of options in the option group..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptGroupItemAlignDisplayName">
<summary>
  Looks up a localized string similar to Option Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptGroupMaxRowsDescription">
<summary>
  Looks up a localized string similar to The maximum number of rows before option group items end up being added to another column, 0 means no columns will ever be added..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptGroupMaxRowsDisplayName">
<summary>
  Looks up a localized string similar to Number of Rows.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptionButtonAlignmentDescription">
<summary>
  Looks up a localized string similar to Controls the alignment of the option control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptionButtonControlAlreadyRegisteredException">
<summary>
  Looks up a localized string similar to The control &apos;{0}&apos; has already been registered..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptionColorDescription">
<summary>
  Looks up a localized string similar to Controls the color of option group items..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptionColorDisplayName">
<summary>
  Looks up a localized string similar to Option Item Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptionFontDescription">
<summary>
  Looks up a localized string similar to Controls the font of option group items..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptionFontDisplayName">
<summary>
  Looks up a localized string similar to Option Item Font.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptionTextHorizontalAlignmentDescription">
<summary>
  Looks up a localized string similar to Controls whether the option text is horizontally aligned to the left, right or center.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OptionTextHorizontalAlignmentDisplayName">
<summary>
  Looks up a localized string similar to Option Text Horizontal Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OrientationDescription">
<summary>
  Looks up a localized string similar to The display orientation of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.OrientationDisplayName">
<summary>
  Looks up a localized string similar to Orientation.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PanMaxRadiusDescription">
<summary>
  Looks up a localized string similar to The maximum distance from the Camera Default Orientation&apos;s position you are allowed to pan in millimeters..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PanMaxRadiusName">
<summary>
  Looks up a localized string similar to Camera Pan Max Radius.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PasswordDescription">
<summary>
  Looks up a localized string similar to Configures the password used to connect to the database..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PasswordDisplayName">
<summary>
  Looks up a localized string similar to Password.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PicFilenameDescription">
<summary>
  Looks up a localized string similar to An absolute path, or path relative to the project file, of the picture to show..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PicSizeModeDescription">
<summary>
  Looks up a localized string similar to Controls how the picture is sized within the picture box..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PicSizeModeDisplayName">
<summary>
  Looks up a localized string similar to Size Mode.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureDefaultDescription">
<summary>
  Looks up a localized string similar to The default picture to be shown for this control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureDefaultDisplayName">
<summary>
  Looks up a localized string similar to Picture.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureHoverDescription">
<summary>
  Looks up a localized string similar to The picture to be shown when the control is in a hover state..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureHoverDisplayName">
<summary>
  Looks up a localized string similar to Picture (Hover).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureLocationCheckedDescription">
<summary>
  Looks up a localized string similar to The picture to be shown for this control when checked..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureLocationCheckedDisplayName">
<summary>
  Looks up a localized string similar to Picture (Checked).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PicturePressedDescription">
<summary>
  Looks up a localized string similar to The picture to be shown when the control is in a pressed state..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PicturePressedDisplayName">
<summary>
  Looks up a localized string similar to Picture (Pressed).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureSelectedDescription">
<summary>
  Looks up a localized string similar to The picture to display on the option when the option is selected..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureSelectedDisplayName">
<summary>
  Looks up a localized string similar to Picture (Selected).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureSizeModeDescription">
<summary>
  Looks up a localized string similar to Controls how the picture will be sized to the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureSizeModeDisplayName">
<summary>
  Looks up a localized string similar to Picture Size Mode.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureStyleDescription">
<summary>
  Looks up a localized string similar to Controls how the picture will appear on the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PictureStyleDisplayName">
<summary>
  Looks up a localized string similar to Picture Style.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewControlPreviewIgnoredDetail">
<summary>
  Looks up a localized string similar to Only the last requested preview will be shown when more than one is queued..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewControlPreviewIgnoredMsg">
<summary>
  Looks up a localized string similar to The preview for {0} was ignored..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewControlTagsDescription">
<summary>
  Looks up a localized string similar to Specifies the tags that each Autopilot will use to determine whether it can process the preview. 

Note: These Tags will override any Tags set in Model Rules. .
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewControlTagsDisplayName">
<summary>
  Looks up a localized string similar to Tags.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewDocumentDescription">
<summary>
  Looks up a localized string similar to The name of the project document that provides the preview model to show..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewDocumentDisplayName">
<summary>
  Looks up a localized string similar to Preview Document Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewDocumentShowMenu">
<summary>
  Looks up a localized string similar to Enable Animations.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewDocumentShowMenuDescription">
<summary>
  Looks up a localized string similar to Shows or hides the control menu.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewEngineDescription">
<summary>
  Looks up a localized string similar to Leave this property empty so the default preview engine will be used (recommended), or set to the name of a specific preview engine to override the default..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewEngineDisplayName">
<summary>
  Looks up a localized string similar to Preview Engine.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewFileNameDescription">
<summary>
  Looks up a localized string similar to The absolute or project-relative path of a supported static 3D file to show. If this is set, the preview functionality is disabled..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewFinishedMacroDesc">
<summary>
  Looks up a localized string similar to The name of the macro to run when the generated 3D preview has completed..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.PreviewFinishedMacroName">
<summary>
  Looks up a localized string similar to On Preview Complete Macro.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ReverseDirectionDescription">
<summary>
  Looks up a localized string similar to Reverses the direction of the slider control.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ReverseDirectionDisplayName">
<summary>
  Looks up a localized string similar to Reverse Direction.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RotationLimitsDescription">
<summary>
  Looks up a localized string similar to The limits for rotation from the Camera Default Orientation&apos;s rotation in the format: &quot;Left|Right|Up|Down&quot;.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RotationLimitsName">
<summary>
  Looks up a localized string similar to Camera Rotation Limits.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowBackgroundColorDescription">
<summary>
  Looks up a localized string similar to Controls the background color of all rows, except the header row..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowBackgroundColorDisplayName">
<summary>
  Looks up a localized string similar to Row Background Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowHeightDescription">
<summary>
  Looks up a localized string similar to Controls the height of each row in the data table, including the header row.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowHeightDisplayName">
<summary>
  Looks up a localized string similar to Row Height.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowHoverBackgroundColorDescription">
<summary>
  Looks up a localized string similar to Specifies the background color to display on a row that the cursor is over..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowHoverBackgroundColorDisplayName">
<summary>
  Looks up a localized string similar to Row Hover Background Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowHoverTextColorDescription">
<summary>
  Looks up a localized string similar to Specifies the text color to display on a row that the cursor is over..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowHoverTextColorDisplayName">
<summary>
  Looks up a localized string similar to Row Hover Text Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowTextHorizontalAlignmentDescription">
<summary>
  Looks up a localized string similar to Controls whether row text is aligned to the left, right or center..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowTextHorizontalAlignmentDisplayName">
<summary>
  Looks up a localized string similar to Row Text Horizontal Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowTextVerticalAlignmentDescription">
<summary>
  Looks up a localized string similar to Controls whether row text is aligned to the top, center or bottom..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RowTextVerticalAlignmentDisplayName">
<summary>
  Looks up a localized string similar to Row Text Vertical Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RptClass_SpecificationHostControl">
<summary>
  Looks up a localized string similar to Specification Host Control.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RptDialogNotSupportedInHostedSpecifications">
<summary>
  Looks up a localized string similar to Dialogs are not supported in specifications that are hosted by a Specification Host Control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.RptMsgSpecificationHostControlConnectCreateChildContext">
<summary>
  Looks up a localized string similar to Unable to start the child specification &apos;{0}&apos;. Child specifications created inside a hosted specification must be hosted inside the Specification Host Control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedItemDescription">
<summary>
  Looks up a localized string similar to The selected item in the list..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedItemDisplayName">
<summary>
  Looks up a localized string similar to Selected Item.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedItemRemovedBehaviorDescription">
<summary>
  Looks up a localized string similar to Specifies the action taken by the list control when the list of items is changed, and the selected item is not in the new list..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedItemRemovedBehaviorDisplayName">
<summary>
  Looks up a localized string similar to Selected Item Removed Behavior.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedItemRuleOverrideDescription">
<summary>
  Looks up a localized string similar to The selected item in the list..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedItemRuleOverrideDisplayName">
<summary>
  Looks up a localized string similar to Selected Item (Override Rule).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedOptionDescription">
<summary>
  Looks up a localized string similar to The name of the selected option button control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedOptionDisplayName">
<summary>
  Looks up a localized string similar to Selected Option.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedOptionOverrideDescription">
<summary>
  Looks up a localized string similar to The name of the selected option button control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedOptionOverrideDisplayName">
<summary>
  Looks up a localized string similar to Selected Option (Override Rule).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowBackgroundColorDescription">
<summary>
  Looks up a localized string similar to Specifies the background color of the selected row. .
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowBackgroundColorDisplayName">
<summary>
  Looks up a localized string similar to Selected Row Background Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowFontDescription">
<summary>
  Looks up a localized string similar to Specifies the selected row&apos;s font..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowFontDisplayName">
<summary>
  Looks up a localized string similar to Selected Row Font.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowIdentityDescription">
<summary>
  Looks up a localized string similar to Gets or sets the selection by identity value..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowIdentityDisplayName">
<summary>
  Looks up a localized string similar to Selected Row Identity.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowIndexDescription">
<summary>
  Looks up a localized string similar to Gets or sets the selection by index..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowIndexDisplayName">
<summary>
  Looks up a localized string similar to Selected Row Index.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowTextColorDescription">
<summary>
  Looks up a localized string similar to Specifies the color of the selected row&apos;s text..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SelectedRowTextColorDisplayName">
<summary>
  Looks up a localized string similar to Selected Row Text Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowBorderDescription">
<summary>
  Looks up a localized string similar to Determines whether to show or hide the option group border..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowBorderDisplayName">
<summary>
  Looks up a localized string similar to Show Border.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowCheckDescription">
<summary>
  Looks up a localized string similar to Specifies whether to show the check box..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowCheckDisplayName">
<summary>
  Looks up a localized string similar to Show Check.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowDataTableGridLinesDescription">
<summary>
  Looks up a localized string similar to Specifies whether to show or hide the data table&apos;s grid lines..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowDataTableGridLinesDisplayName">
<summary>
  Looks up a localized string similar to Show Grid Lines.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowLimitsDescription">
<summary>
  Looks up a localized string similar to Specifies whether to show the minimum and maximum value limits on the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowLimitsDisplayName">
<summary>
  Looks up a localized string similar to Show Limits.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowOptionDescription">
<summary>
  Looks up a localized string similar to Determines whether to show or hide the option button..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowOptionDisplayName">
<summary>
  Looks up a localized string similar to Show Option.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowStandardNavigationDescription">
<summary>
  Looks up a localized string similar to Controls whether the standard form navigation buttons will be shown on this form..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowStandardNavigationDisplayName">
<summary>
  Looks up a localized string similar to Show Standard Navigation.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowTaskListDescription">
<summary>
  Looks up a localized string similar to Controls whether the task list will be displayed for this form..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowTaskListDisplayName">
<summary>
  Looks up a localized string similar to Show Task List.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowTextBoxBorderDescription">
<summary>
  Looks up a localized string similar to Specifies whether or not to show the border for this control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ShowTextBoxBorderDisplayName">
<summary>
  Looks up a localized string similar to Show Border.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SliderTrackColorDescription">
<summary>
  Looks up a localized string similar to Specifies the color of the slider&apos;s track..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.SliderTrackColorDisplayName">
<summary>
  Looks up a localized string similar to Track Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TabIndexDescription">
<summary>
  Looks up a localized string similar to Configures the position of the control in the form tab order..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TabIndexDisplayName">
<summary>
  Looks up a localized string similar to Tab Index.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TableNameDescription">
<summary>
  Looks up a localized string similar to Specifies the name of the table from which to retrieve data..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TableNameDisplayName">
<summary>
  Looks up a localized string similar to Table Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TagDescription">
<summary>
  Looks up a localized string similar to Optional text which can be used to describe the control, but which doesn&apos;t affect the control&apos;s behavior..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TagDisplayName">
<summary>
  Looks up a localized string similar to (Tag).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TaskListEnabledDescription">
<summary>
  Looks up a localized string similar to Specifies whether to enable the task list for a dialog..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TaskListEnabledDisplayName">
<summary>
  Looks up a localized string similar to Task List Enabled.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextBoxDataBindingDescription">
<summary>
  Looks up a localized string similar to Binds the text box to a value retrieved from a database..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextBoxDataBindingDisplayName">
<summary>
  Looks up a localized string similar to Binding Expression.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextBoxMultilineDescription">
<summary>
  Looks up a localized string similar to Specifies whether the text box is multi-line (TRUE) or single line (FALSE)..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextBoxMultilineDisplayName">
<summary>
  Looks up a localized string similar to Multiline.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextColorDescription">
<summary>
  Looks up a localized string similar to Specifies the color of the control&apos;s text..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextColorDisplayName">
<summary>
  Looks up a localized string similar to Text Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextDescription">
<summary>
  Looks up a localized string similar to Specifies the text shown in the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextDisplayName">
<summary>
  Looks up a localized string similar to Text.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextFontDescription">
<summary>
  Looks up a localized string similar to Specifies the font of the text shown in the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextFontDisplayName">
<summary>
  Looks up a localized string similar to Font.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextHorizontalAlignmentDescription">
<summary>
  Looks up a localized string similar to Controls whether the text is horizontally aligned to the left, right or center.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextHorizontalAlignmentDisplayName">
<summary>
  Looks up a localized string similar to Text Horizontal Alignment.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextRuleOverrideDescription">
<summary>
  Looks up a localized string similar to Specifies the text shown in the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextRuleOverrideDisplayName">
<summary>
  Looks up a localized string similar to Text (Override Rule).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextUnderlineDescription">
<summary>
  Looks up a localized string similar to Specifies whether the text should be underlined..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TextUnderlineDisplayName">
<summary>
  Looks up a localized string similar to Text Underline.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ThumbImageDescription">
<summary>
  Looks up a localized string similar to An absolute path, or path relative to the project file, of an image which will replace the slider&apos;s default thumb..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ThumbImageDisplayName">
<summary>
  Looks up a localized string similar to Thumb Image.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TimeoutDescription">
<summary>
  Looks up a localized string similar to Specifies the number of seconds to wait before the preview times out. 0 should be used to specify no timeout..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TimeoutDisplayName">
<summary>
  Looks up a localized string similar to Timeout.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TooltipDurationDescription">
<summary>
  Looks up a localized string similar to Controls the duration, in seconds, for which the tooltip will remain visible. Values of 0 and below indicate an infinite duration..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TooltipDurationDisplayName">
<summary>
  Looks up a localized string similar to Tooltip Duration.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TooltipTextDescription">
<summary>
  Looks up a localized string similar to Specifies the text to display in a tooltip when hovering over the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TooltipTextDisplayName">
<summary>
  Looks up a localized string similar to Tooltip Text.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TopDescription">
<summary>
  Looks up a localized string similar to Controls the top position of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.TopDisplayName">
<summary>
  Looks up a localized string similar to Top.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UnenforcedMaxDescription">
<summary>
  Looks up a localized string similar to Stores a maximum value, which is not enforced by DriveWorks, but can be used in other rules to implement validation..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UnenforcedMinDescription">
<summary>
  Looks up a localized string similar to Stores a minimum value, which is not enforced by DriveWorks, but can be used in other rules to implement validation..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UnitColorDescription">
<summary>
  Looks up a localized string similar to Specifies the color of the unit&apos;s text..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UnitColorDisplayName">
<summary>
  Looks up a localized string similar to Unit Color.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UnitFontDescription">
<summary>
  Looks up a localized string similar to Specifies the font used in the unit dropdown..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UnitFontDisplayName">
<summary>
  Looks up a localized string similar to Unit Font.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UrlDescription">
<summary>
  Looks up a localized string similar to Specifies the URL to navigate to. The URL string must include the protocol, e.g. http.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UrlDisplayName">
<summary>
  Looks up a localized string similar to URL.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UseRelativePathRulesDescription">
<summary>
  Looks up a localized string similar to Determines the location that the .drive3d files will be output to when using the OnDemand generation method. 
True will use the relative path rules set in Model Rules to determine the output location. 
False will use the group content folder..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UseRelativePathRulesDisplayName">
<summary>
  Looks up a localized string similar to Use Relative Path Rules.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UserNameDescription">
<summary>
  Looks up a localized string similar to Specifies the user name to use when connecting to the database..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UserNameDisplayName">
<summary>
  Looks up a localized string similar to User Name.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UseSWExtensionSuffixDescription">
<summary>
  Looks up a localized string similar to Specifies whether to include the SOLIDWORKS file type extension in the file name of the .drive3d that will be created when using the OnDemand generation method. 
False will omit this from the file name, otherwise True will include it.

Note: If the suffix is omitted all parts and assemblies must have unique file names..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.UseSWExtensionSuffixDisplayName">
<summary>
  Looks up a localized string similar to Use SOLIDWORKS Extension Suffix.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ValueDescription">
<summary>
  Looks up a localized string similar to Controls the numeric value of the control.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ValueDisplayName">
<summary>
  Looks up a localized string similar to Value.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ValueRuleOverrideDescription">
<summary>
  Looks up a localized string similar to Controls the numeric value of the control.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ValueRuleOverrideDisplayName">
<summary>
  Looks up a localized string similar to Value (Override Rule).
</summary>
</member>
<member name="P:DriveWorks.ControlResources.VerticalScrollBarDescription">
<summary>
  Looks up a localized string similar to Controls the visibility behaviour of the vertical scroll bar for this frame control&apos;s content..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.VerticalScrollVisibilityDisplayName">
<summary>
  Looks up a localized string similar to Vertical Scroll Visibility.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.VisibleDescription">
<summary>
  Looks up a localized string similar to Determines whether the control is visible (TRUE) or hidden (FALSE)..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.VisibleDisplayName">
<summary>
  Looks up a localized string similar to Visible.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.WhereClauseDescription">
<summary>
  Looks up a localized string similar to Specifies the SQL WHERE clause used to filter result rows from the table..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.WhereClauseDisplayName">
<summary>
  Looks up a localized string similar to Where Clause.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.WidthDescription">
<summary>
  Looks up a localized string similar to Controls the width of the control..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.WidthDisplayName">
<summary>
  Looks up a localized string similar to Width.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.WordWrapDescription">
<summary>
  Looks up a localized string similar to Specifies whether the text box text is word wrapped when in multiline mode (TRUE) or scrolls out of view (FALSE)..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.WordWrapDisplayName">
<summary>
  Looks up a localized string similar to Word Wrap.
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ZoomLimitsDescription">
<summary>
  Looks up a localized string similar to The limits for camera zoom distance in the format: &quot;Min|Max&quot;..
</summary>
</member>
<member name="P:DriveWorks.ControlResources.ZoomLimitsName">
<summary>
  Looks up a localized string similar to Camera Zoom Limits.
</summary>
</member>
<member name="T:DriveWorks.SerializationResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.SerializationResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.SerializationResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.SerializationResources.UnexpectedElement">
<summary>
  Looks up a localized string similar to The element that was returned was not the expected element..
</summary>
</member>
<member name="P:DriveWorks.SerializationResources.UnexpectedEOS">
<summary>
  Looks up a localized string similar to The end of the serialized control data was reached, but more data was required..
</summary>
</member>
<member name="P:DriveWorks.SerializationResources.UnexpectedToken">
<summary>
  Looks up a localized string similar to An unexpected token was found while reading the serialized control data..
</summary>
</member>
<member name="T:DriveWorks.Globals">
 <summary>
 Philip: I really don't like modules, however, I don't want the code for these 
 getting copied and pasted into every single class that uses them, nor do I want
 to keep writing things like "BitHelper.IsSet(someValue, someFlag)" because it's just
 too verbose. Ideally they'd be extension methods, but that wouldn't work with Enumerations.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Globals.IsDriveWorksCode(System.Reflection.MethodInfo)">
 <summary>
 Determines if the specified method is in a DriveWorks assembly.
 </summary>
 <param name="mi">The method to inspect.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Globals.RaiseEventEx(System.MulticastDelegate,System.Boolean,System.Boolean,DriveWorks.Hosting.IHostExceptionHandler,System.Reflection.MethodBase,System.Object[])">
 <summary>
 Raises the specified event and dispatches exceptions to an exception handler.
 </summary>
 <param name="evt">The event to raise.</param>
 <param name="useControlInvoke">True to use the Invoke method of a Control if the delegate is on a control.</param>
 <param name="ignoreDriveWorksCode">True to not handle exceptions in DriveWorks methods.</param>
 <param name="eh">The exception handler.</param>
 <param name="sourceMethod">The method for which the event is being raised.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Globals.RaiseEventEx(System.MulticastDelegate,System.Boolean,System.Boolean,DriveWorks.Hosting.IHostExceptionHandler,System.Func{System.Exception,System.Delegate,DriveWorks.Hosting.HostExceptionData},System.Object[])">
 <summary>
 Raises the specified event and dispatches exceptions to an exception handler.
 </summary>
 <param name="evt">The event to raise.</param>
 <param name="useControlInvoke">True to use the Invoke method of a Control if the delegate is on a control.</param>
 <param name="ignoreDriveWorksCode">True to not handle exceptions in DriveWorks methods.</param>
 <param name="eh">The exception handler.</param>
 <param name="ef">A callback method which will create the exception data to pass to the exception handler.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.RemoteGroupManager">
 <summary>
 Provides support for creating, deleting, and enumerating remote groups.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.RemoteGroupManager.Connect(System.String)">
 <summary>
 Connects to the specified remote group server.
 </summary>
 <param name="serverName">The name of the server to which to connect.</param>
</member>
<member name="M:DriveWorks.RemoteGroupManager.CreateGroup(System.String,System.String,System.String,DriveWorks.Security.IProviderCredentials)">
 <summary>
 Creates a new group with the specified details
 </summary>
 <param name="groupName">The name of the group to create.</param>
 <param name="creationUsername">The server's admin username.</param>
 <param name="creationPassword">The server's admin password.</param>
 <param name="credentials">Initial login details for the new group.</param>
</member>
<member name="M:DriveWorks.RemoteGroupManager.DeleteGroup(System.String,System.String,System.String)">
 <summary>
 Deletes a group from the server.
 </summary>
 <param name="groupName">The name of the group to delete.</param>
 <param name="creationUsername">The server's admin username.</param>
 <param name="creationPassword">The server's admin password.</param>
</member>
<member name="M:DriveWorks.RemoteGroupManager.GetGroupNames">
 <summary>
 Gets a collection of all the groups on the server that are available to connect to.
 </summary>
 <remarks>
 Some group names will not be returned, if they are not being hosted by this server.
 </remarks>
</member>
<member name="M:DriveWorks.RemoteGroupManager.GetGroupDetails">
 <summary>
 Gets a collection of all the groups on the server and their details.
 </summary>
 <remarks>
 This returns all groups - even the ones that this server is not hosting.
 </remarks>
</member>
<member name="M:DriveWorks.RemoteGroupManager.ReleaseOwnership(System.String)">
 <summary>
 Orders the server to release ownership of the specified group providing that the group is not in use by this server.
 </summary>
 <param name="groupName">The name of the group to be released</param>
 <remarks>This can be called on any server, but will only check if the group is in use if called on the owning server for the group.</remarks>
</member>
<member name="M:DriveWorks.RemoteGroupManager.UpscaleGroup(System.IO.Stream,System.String,System.String,System.String)">
 <summary>
 Converts the specified group into shared group that will be hosted by this server.
 </summary>
 <param name="drivegroupStream">File stream to the drivegroup file that you wish to convert.</param>
 <param name="groupName">The name of the group to upscale to - this can be different from the original group name.</param>
 <param name="creationUsername">The server's admin username.</param>
 <param name="creationPassword">The server's admin password.</param>
</member>
<member name="M:DriveWorks.RemoteGroupManager.CheckSqlConnection(System.String,System.String,System.String)">
 <summary>
 Ask Pro Server to attempt to connect to the specified SQL Server.
 </summary>
 <param name="serverAddress">The address of the SQL server to connect to.</param>
 <param name="username">The SQL user name to use. This can be null if you wish to use Windows credentials.</param>
 <param name="password">The SQL password to use (if SQL authentication is being used).</param>
</member>
<member name="T:DriveWorks.RemoteGroupServer">
 <summary>
 Provides support for hosting a remote group.
 </summary>
</member>
<member name="M:DriveWorks.RemoteGroupServer.#ctor(System.String)">
 <summary>
 Creates a new remote group server for the specified SQL Server connection.
 </summary>
 <param name="connectionString">The connection string to use to connect to the SQL Server.</param>
</member>
<member name="M:DriveWorks.RemoteGroupServer.Start">
 <summary>
 Starts the underlying Remote Admin and Group Connection services.
 </summary>
</member>
<member name="M:DriveWorks.RemoteGroupServer.Start(System.ServiceModel.Dispatcher.IErrorHandler,System.ServiceModel.Dispatcher.IErrorHandler)">
 <summary>
 Starts the underlying Remote Admin and Group Connection services.
 </summary>
</member>
<member name="M:DriveWorks.RemoteGroupServer.Stop">
 <summary>
 Stops the underlying Remote Admin and Group Connection services.
 </summary>
</member>
<member name="M:DriveWorks.RemoteGroupServer.EnsureTcpPortSharingServiceIsSetup">
 <summary>
 Enables pro server and its services to be hosted in more than one application at once.
 </summary>
 <remarks>
 This method attempts to find the "NetTcpPortSharing" service and start it (if it is not already running).
 </remarks>
</member>
<member name="M:DriveWorks.RemoteGroupServer.GetRemoteGroupCoordinator(System.String)">
 <summary>
 Gets the coordinator for the given remote group which is hosted by this server.
 </summary>
 <param name="groupName">The name of the group for which to get the coordinator.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.SettingChangedEventArgs">
 <summary>
 Provides event data for the <see cref="E:DriveWorks.Group.SettingChanged" /> event.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.SettingChangedEventArgs.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.SettingChangedEventArgs" /> class.
 </summary>
 <param name="settingName">The name of the setting that was changed.</param>
 <param name="settingValue">The new value of the setting that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.SettingChangedEventArgs.SettingName">
 <summary>
 Gets the name of the setting that was changed.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.SettingChangedEventArgs.SettingValue">
 <summary>
 Gets the new value of the setting that was changed.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.CaptureImportDuplicateBehavior">
 <summary>
 Controls the import of duplicate capture items for the <see cref="T:DriveWorks.CaptureImportManager" />.
 </summary>
</member>
<member name="F:DriveWorks.CaptureImportDuplicateBehavior.Fail">
 <summary>
 Don't allow duplicate items to be imported.
 </summary>
</member>
<member name="F:DriveWorks.CaptureImportDuplicateBehavior.Replace">
 <summary>
 Replace the existing item in the group.
 </summary>
</member>
<member name="T:DriveWorks.CaptureImportManager">
 <summary>
 Provides the ability to import components from one source into the group which 
 created the import manager.
 </summary>
</member>
<member name="P:DriveWorks.CaptureImportManager.DuplicateBehavior">
 <summary>
 Gets/sets the default behavior for duplicated items.
 </summary>
 <remarks>
 The default value of this property is <see cref="F:DriveWorks.CaptureImportDuplicateBehavior.Replace" />
 </remarks>
</member>
<member name="M:DriveWorks.CaptureImportManager.AddFromComponent(DriveWorks.Components.CapturedComponent)">
 <summary>
 Adds the given component to the collection of components to import.
 </summary>
 <param name="component">The component to add.</param>
</member>
<member name="M:DriveWorks.CaptureImportManager.AddFromComponent(DriveWorks.Components.CapturedComponent,System.String)">
 <summary>
 Adds the given component to the collection of components to import, and changes
 it's master path to the new path given.
 </summary>
 <param name="component">The component to add.</param>
 <param name="newPath">The new master path of the component.</param>
</member>
<member name="M:DriveWorks.CaptureImportManager.Import">
 <summary>
 Performs the import process.
 </summary>
 <returns>A dictionary mapping the original captured component identifiers to their new captured component identifiers for components which required remapping.</returns>
</member>
<member name="M:DriveWorks.CaptureImportManager.PruneOrphanedReferences(System.Func{System.Guid,System.Boolean})">
 <summary>
 Removes stale references from the components to import. 
 </summary>
 <param name="isOrphanedCheck">A delegate that determines whether the reference is stale.</param>
</member>
<member name="T:DriveWorks.GroupReleasedComponents">
 <summary>
 Provides accessors for a group's released component information.
 </summary>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.CreateReportWriter(System.Guid,System.String,DriveWorks.Reporting.ReportingLevel)">
 <summary>
 Creates a new report writer which will write a report for the given component.
 </summary>
 <param name="componentId">The identifier of the component for which to write the report.</param>
 <param name="title">The title of the report.</param>
 <param name="level">The maximum entry level to write to the report.</param>
 <returns>A report writer.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetReports(System.Guid)">
 <summary>
 Gets a specification's reports.
 </summary>
 <param name="componentId">The identifier of the component for which to write the report.</param>
 <returns>An array of reports for the specified component.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponent(System.Guid)">
 <summary>
 Gets the released component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component.</param>
 <returns>The component with the specified identifier if it is registered, otherwise a null reference.</returns>
 <exception cref="T:System.NotSupportedException">The component type is not supported.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentReferenceTree(System.Guid[])">
 <summary>
 Gets hierarchical reference information about the components with the given identifiers.
 </summary>
 <param name="ids">The identifiers of the released components to traverse and return reference information.</param>
 <returns>An instance of an object which implements the <see cref="T:DriveWorks.Components.IReleasedComponentReferenceTree" /> interface.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentReferences(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets an object which will enumerate the released component references in the group.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets an object which will enumerate the released components in the group.
 </summary>
 <param name="topLevelOnly">True to only get top level (root) components.</param>
 <param name="includeGenerated">True to include generated components, false to exclude them.</param>
 <param name="includeNotGenerated">True to include components which haven't been generated, false to exclude them.</param>
 <param name="includeFailed">True to include failed components, false to exclude them.</param>
 <returns>An enumerator over the released components in the group.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponents(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets an object which will enumerate the released components in the group.
 </summary>
 <param name="topLevelOnly">True to only get top level (root) components.</param>
 <param name="includeGenerated">True to include generated components, false to exclude them.</param>
 <param name="includeNotGenerated">True to include components which haven't been generated, false to exclude them.</param>
 <param name="includeFailed">True to include failed components, false to exclude them.</param>
 <param name="includeDeferred">True to include deferred components, false to exclude them.</param>
 <returns>An enumerator over the released components in the group.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetTasksForComponent(System.Guid)">
 <summary>
 Gets an object which will enumerate all released tasks associated with the given component.
 </summary>
 <param name="componentId">The id of the component whose tasks to enumerate.</param>
 <returns>A collection of the released component's tasks in the group.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.SaveReleaseResults(DriveWorks.Components.ReleaseComponentsResults)">
 <summary>
 Saves the results of releasing one or more components.
 </summary>
 <param name="results">The results to save to the database.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentDetailsByName(System.String,System.String,System.Boolean)">
 <summary>
 Get's the component details for a component with the specified name.
 </summary>
 <param name="name">The name of the component for which to get the details.</param>
 <param name="type">The type of the component for which to get the details.</param>
 <param name="throwIfMissing">Throws an exception if a component with the specified name and type cannot be found, if false, a null reference is returned if the component isn't found.</param>
 <returns>The component's details.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">No component could be found with the specified name and type.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentDetailsByPath(System.String,System.Boolean)">
 <summary>
 Get's the component details for a component with the specified path.
 </summary>
 <param name="path">The full path to the component for which to get the details.</param>
 <param name="throwIfMissing">Throws an exception if a component with the specified path cannot be found, if false, a null reference is returned if the component isn't found.</param>
 <returns>The component's details.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">No component could be found with the specified path.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentDetailsById(System.Guid,System.Boolean)">
 <summary>
 Get's the component details for a component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component.</param>
 <param name="throwIfMissing">Throws an exception if a component with the specified identiifer cannot be found, if false, a null reference is returned if the component isn't found.</param>
 <returns>The component's details.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">No component could be found with the specified path.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentsDetailsById(System.Guid[])">
 <summary>
 Gets the details of all driven components matching the specified component ids.
 </summary>
 <param name="componentIds">The unique identifiers of the components to retrieve the details of.</param>
 <returns>An array of driven component details matching the specified component ids.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.MarkFailed(System.Guid,System.Int32)">
 <summary>
 Marks the specified component as having failed the given number of times.
 </summary>
 <param name="componentId">The unique identifier of the component.</param>
 <param name="failedCount">The total number of times the component has failed to be generated.</param>
 <remarks>
 <para>The <paramref name="failedCount" /> must be at least one (1).</para>
 <para>Marking a component as having failed automatically clears the generating and generated fields.</para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.MarkGenerated(System.Guid)">
 <summary>
 Marks the specified component as being generated.
 </summary>
 <param name="componentId">The unique identifier of the component</param>
 <remarks>
 <para>Marking a component as having been generated automatically clears the generating and failed fields.</para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.MarkToGenerate(System.String)">
 <summary>
 Marks the specified component as requiring generation.
 </summary>
 <param name="componentTargetPath">The full path to the released component to update.</param>
 <remarks>
 <para>Marking a component as requiring generation clears the generating, generated, and failed fields.</para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.MarkGenerating(System.Guid)">
 <summary>
 Marks the specified component as being in the process of being generated.
 </summary>
 <param name="componentId">The unique identifier of the component</param>
 <remarks>
 </remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.DeleteFileReferenceByTargetPath(System.String)">
 <summary>
 Deletes a released component and references to it from the group.
 </summary>
 <param name="componentTargetPath">The full path to the released component to delete.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.TryUpdatePreviewPath(System.Guid,System.String)">
 <summary>
 Updates the path to the preview file created for the specified component.
 </summary>
 <param name="componentId">The Id of the released component for which to update the path.</param>
 <param name="newPreviewPath">The full path to the preview file.</param>
 <returns>True if the path was successfully updated, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.TryUpdateTargetPath(System.String,System.String)">
 <summary>
 Tries to update the target path of a released component.
 </summary>
 <param name="originalPath">The original path.</param>
 <param name="newPath">The new path.</param>
 <returns>True if the released component was successfully updated.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.TryUpdateMasterPath(System.String,System.String)">
 <summary>
 Tries to update the master path of all released components matching the specified master path.
 </summary>
 <param name="originalPath">The original path.</param>
 <param name="newPath">The new path.</param>
 <returns>True if the master path was successfully updated. False if we failed to update anything.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.DeleteReleasedComponentReport(System.Guid)">
 <summary>
 Deletes the specified component report.
 </summary>
 <param name="reportId">The component report to delete.</param>
 <returns>True if the report was deleted successfully.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.DeleteReleasedComponentReports(System.Guid)">
 <summary>
 Deletes all component reports for the specified component.
 </summary>
 <param name="componentId">The Id of the component for which all of its reports should be deleted.</param>
 <returns>True if all reports were deleted successfully.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.UpdateReleasedComponentTags(System.Guid,System.String[])">
 <summary>
 Updates the specified released component's tags.
 </summary>
 <param name="componentId">The Id of the component for which to change the tags.</param>
 <param name="newTags">The new tags to apply to the component.</param>
 <returns>True if the tags were successfully updated, otherwise False.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.UpdateReleasedComponentFlags(System.Guid,DriveWorks.Components.ReleasedComponentFlags)">
 <summary>
 Updates the specified released component's flags.
 </summary>
 <param name="componentId">The Id of the component for which to change the flags.</param>
 <param name="newFlags">The new flags to apply to the component.</param>
 <returns>True if the flags were successfully updated, otherwise False.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentsForGenerationInSpecificationOrder">
 <summary>
 Internal Use Only. Gets components which are generatable (i.e. they have no ungenerated children), in the order
 of the specifications to which they belong.
 </summary>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetOrphanComponentsForGeneration">
 <summary>
 Internal Use Only. Gets components which are generatable (i.e. they have no ungenerated children), and which
 don't belong to any specifications.
 </summary>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.ImportReleaseData(DriveWorks.Group,System.Func{System.String,System.String},System.Boolean,System.Boolean,System.Action{System.String})">
 <summary>
 Imports release data directly from another group.
 </summary>
 <param name="sourceGroup">The group to import from.</param>
 <param name="pathTranslator">A function that will take a source file path and translate it to the target path. Path can remain the same.</param>
 <param name="importReports">Whether or not to import reports.</param>
 <param name="mapToSpecifications">Whether or not to map components to specifications.</param>
 <param name="reporter">A function that will be called with helpful human messages about progress.</param>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentsAwaitingPreviewEnumerator(System.Boolean)">
 <summary>
 Gets an object which will enumerate the released components that are awaiting a preview in the group.
 </summary>
 <param name="topLevelOnly">True to only get top level (root) components.</param>
 <returns>An enumerator for released components awaiting a preview in the group.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentData(System.Guid)">
 <summary>
 Gets the released component data for the component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component.</param>
 <returns>The component data for the component with the specified identifier if it is registered, otherwise a null reference.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.GetComponentData(System.String)">
 <summary>
 Gets the released component data for the component with the specified identifier.
 </summary>
 <param name="targetPath">The target path of the component.</param>
 <returns>The component data for the component with the specified identifier if it is registered, otherwise a null reference.</returns>
</member>
<member name="M:DriveWorks.GroupReleasedComponents.BatchUpdateExistingComponentTags(System.Collections.Generic.Dictionary{System.String[],System.Guid[]})">
 <summary>
 Updates the components with the specified tags.
 </summary>
 <param name="tagsToExistingComponentMap">A map of tags to the component ids that need these tags applying.</param>
</member>
<member name="T:DriveWorks.GroupReports">
 <summary>
 Provides accessors for a group's report information.
 </summary>
</member>
<member name="M:DriveWorks.GroupReports.GetReportAsXDocument(System.Guid)">
 <summary>
 Gets a report as XML stored in an XDocument.
 </summary>
 <param name="reportId">The unique identifier of the report to get.</param>
 <returns>An instance of the <see cref="T:System.Xml.Linq.XDocument" /> class.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReports.ExportReport(System.Guid,System.String)">
 <summary>
 Exports a report to the given location as a drivereport file.
 </summary>
 <param name="reportId">The id of the report to export.</param>
 <returns>Success</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupReports.TryUpdateReportPath(System.Guid,System.String)">
 <summary>
 Attempts to update the reports directory.
 </summary>
 <param name="id">The identification of the report to update.</param>
 <param name="newPath">The new directory of the report.</param>
 <returns>True if the report directory is successfully updated.</returns>
</member>
<member name="M:DriveWorks.GroupReports.GetReportDetails(System.Guid)">
 <summary>
 Gets matching report details based on the specified report identifier.
 </summary>
 <param name="reportId">The identifier of the report to get the details of.</param>
 <returns>The matching details or null if nothing is found.</returns>
</member>
<member name="T:DriveWorks.GroupResultEnumerator`1">
 <summary>
 Provides a base class for enumerated results.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupResultEnumerator`1.CreateEmptyEnumerator">
 <summary>
 Creates and returns an enumerator over an empty collection.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.GroupResultEnumerator`1.EstimatedResultCount">
 <summary>
 Gets a count of the results expected to be retrieved by the enumerator.
 </summary>
</member>
<member name="P:DriveWorks.GroupResultEnumerator`1.CurrentResultIndex">
 <summary>
 Gets the index of the current result.
 </summary>
</member>
<member name="P:DriveWorks.GroupResultEnumerator`1.IsDisposed">
 <summary>
 Determines whether the object has been disposed.
 </summary>
</member>
<member name="M:DriveWorks.GroupResultEnumerator`1.GetEstimatedResultCount">
 <summary>
 When overridden by a derived class, gets an estimate of the number of
 results that will be retrieved by the enumerator.
 </summary>
</member>
<member name="M:DriveWorks.GroupResultEnumerator`1.GetNext(`0@)">
 <summary>
 When overridden by a derived class, gets the next item.
 </summary>
 <param name="item">The item that was retrieved.</param>
 <returns>True if an item was retrieved, or false if the end of the collection was reached.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupResultEnumerator`1.ResetCore">
 <summary>
 When overridden by a derived class, resets the enumerator.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.GroupResultEnumerator`1.Current">
 <summary>
 Gets the current item.
 </summary>
</member>
<member name="M:DriveWorks.GroupResultEnumerator`1.MoveNext">
 <summary>
 Moves to the next item in the collection.
 </summary>
 <returns>True if an item was retrieved, or false if the end of the collection was reached.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupResultEnumerator`1.Reset">
 <summary>
 Resets the enumerator.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupResultEnumerator`1.Dispose(System.Boolean)">
 <summary>
 When overridden by a derived class, implements logic to
 dispose instances of the class.
 </summary>
 <param name="disposing">True if the object is being explicitly disposed, or false if being called from its finalizer.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupResultEnumerator`1.Dispose">
 <summary>
 Disposes the enumerator.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.GroupRuleVersionHistory">
 <summary>
 Provides accessors for a group's rule revision history information.
 </summary>
</member>
<member name="M:DriveWorks.GroupRuleVersionHistory.GetHistory(System.Guid)">
 <summary>
 Gets the complete rule version history for the entire project.
 </summary>
 <param name="projectId">The id of the project to get the history of.</param>
</member>
<member name="M:DriveWorks.GroupRuleVersionHistory.GetHistory(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Gets the rule version history for the specified item property.
 </summary>
 <param name="project">The project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
 <returns>An array of rule version entries.</returns>
</member>
<member name="M:DriveWorks.GroupRuleVersionHistory.GetHistory(System.Guid,System.String,System.String,System.String)">
 <summary>
 Gets the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
 <returns>An array of rule version entries.</returns>
</member>
<member name="M:DriveWorks.GroupRuleVersionHistory.AddHistory(System.Guid,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Adds a rule revision to the group's rule version history.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
 <param name="rule">The rule at the current version.</param>
 <param name="comment">The comment at the current version.</param>
</member>
<member name="M:DriveWorks.GroupRuleVersionHistory.AddHistory(DriveWorks.RuleVersionDetails)">
 <summary>
 Adds a specific item of history to the group's rule history storage.
 </summary>
 <param name="details">The details to add.</param>
</member>
<member name="M:DriveWorks.GroupRuleVersionHistory.ClearHistory(System.Guid,System.String,System.String,System.String)">
 <summary>
 Clears the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
</member>
<member name="M:DriveWorks.GroupRuleVersionHistory.DeleteHistory(System.Guid)">
 <summary>
 Remove all rule history for a specific project.
 </summary>
 <param name="projectId">The id of the project to remove the history of.</param>
</member>
<member name="M:DriveWorks.GroupRuleVersionHistory.DeleteHistory(System.Guid,System.String,System.String,System.String)">
 <summary>
 Deletes the rule version history for the specified item property.
 </summary>
 <param name="projectId">The unique identifier of the project to which the item belongs.</param>
 <param name="itemTypeName">The type name of the item, e.g. "D" for document, "T" for table, "V" for variable, etc.</param>
 <param name="itemName">The name of the item that the property, to which the rule is bound, belongs.</param>
 <param name="propertyName">The optional name of the property to which the rule is bound (this may not apply to certain items, e.g. variables).</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.TeamChangedEventHandler">
 <summary>
 Represents the method that will handle an event raised due to a team changing.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.UserChangedEventHandler">
 <summary>
 Represents the method that will handle an event raised due to a user changing.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.TeamChangedEventArgs">
 <summary>
 Provides the data raised for an event raised due to a team changing.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.TeamChangedEventArgs.#ctor(DriveWorks.Security.TeamDetails)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.TeamChangedEventArgs" /> class.
 </summary>
 <param name="team">The team that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.TeamChangedEventArgs.Team">
 <summary>
 Gets the team that was changed.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.UserChangedEventArgs">
 <summary>
 Provides the data raised for an event raised due to a user changing.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.UserChangedEventArgs.#ctor(DriveWorks.Security.UserDetails)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.UserChangedEventArgs" /> class.
 </summary>
 <param name="user">The user that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.UserChangedEventArgs.User">
 <summary>
 Gets the user that was changed.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.IGroupResultEnumerator">
 <summary>
 Provides a contract for enumerated results retrieved from a group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.IGroupResultEnumerator.EstimatedResultCount">
 <summary>
 Gets a count of the results expected to be retrieved by the enumerator.
 </summary>
 <returns>The estimated result count, or -1 if not supported.</returns>
</member>
<member name="P:DriveWorks.IGroupResultEnumerator.CurrentResultIndex">
 <summary>
 Gets the index of the current result.
 </summary>
</member>
<member name="T:DriveWorks.IGroupResultEnumerator`1">
 <summary>
 Provides a contract for enumerated results retrieved from a group.
 </summary>
 <typeparam name="T">The type of result.</typeparam>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ReportDetails">
 <summary>
 Encapsulates information about a report.
 </summary>
</member>
<member name="M:DriveWorks.ReportDetails.#ctor(System.Guid,System.String,System.DateTime,System.Nullable{System.DateTime},System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ReportDetails" /> class.
 </summary>
 <param name="id">The unique identifier of the report.</param>
 <param name="title">The title of the report.</param>
 <param name="dateStarted">The date the report was started.</param>
 <param name="dateCompleted">The date the report was completed.</param>
 <param name="path">The path to the report if it is a legacy DriveWorks 6 report.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ReportDetails.Id">
 <summary>
 Gets the unique identifier of the report.
 </summary>
</member>
<member name="P:DriveWorks.ReportDetails.Title">
 <summary>
 Gets the title of the report.
 </summary>
</member>
<member name="P:DriveWorks.ReportDetails.DateStarted">
 <summary>
 Gets the date and time the report was started.
 </summary>
</member>
<member name="P:DriveWorks.ReportDetails.DateCompleted">
 <summary>
 Gets the date and time the report was completed, or a null reference if the report has not been completed.
 </summary>
</member>
<member name="P:DriveWorks.ReportDetails.Path">
 <summary>
 Gets the path to the report file if the report is a legacy DriveWorks 6 report.
 </summary>
</member>
<member name="P:DriveWorks.ReportDetails.InformationCount">
 <summary>
 Gets the number of information entries in this report.
 </summary>
</member>
<member name="P:DriveWorks.ReportDetails.WarningCount">
 <summary>
 Gets the number of warning entries in this report.
 </summary>
</member>
<member name="P:DriveWorks.ReportDetails.ErrorCount">
 <summary>
 Gets the number of error entries in this report.
 </summary>
</member>
<member name="T:DriveWorks.RuleVersionDetails">
 <summary>
 Provides information about a single version of a revisioned rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.RuleVersionDetails.Rule">
 <summary>
 Gets the rule for the version.
 </summary>
</member>
<member name="P:DriveWorks.RuleVersionDetails.Comment">
 <summary>
 Gets the comment for the version.
 </summary>
</member>
<member name="P:DriveWorks.RuleVersionDetails.VersionDate">
 <summary>
 Gets the date that the rule and/or comment were changed.
 </summary>
</member>
<member name="P:DriveWorks.RuleVersionDetails.UserId">
 <summary>
 Gets the unique identifier of the user which changed the rule and/or comment.
 </summary>
</member>
<member name="P:DriveWorks.RuleVersionDetails.UserDisplayName">
 <summary>
 Gets the display name of the user, which changed the rule and/or comment, as it was when the change was made.
 </summary>
</member>
<member name="T:DriveWorks.IGroupReportWriter">
 <summary>
 Provides a contract for report writers which write to a DriveWorks Group.
 </summary>
</member>
<member name="P:DriveWorks.IGroupReportWriter.Id">
 <summary>
 Gets the unique identifier associated with the report.
 </summary>
</member>
<member name="T:DriveWorks.ManifestResource">
 <summary>
 Dummy class used to make resource resolution easier.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ManifestResource.Get(System.String)">
 <summary>
 Gets the resource with the given name.
 </summary>
 <param name="unqualifiedResourceName">The name of the resource without any namespace information.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ManifestResource.Read(System.String)">
 <summary>
 Gets the resource with the given name.
 </summary>
 <param name="unqualifiedResourceName">The name of the resource without any namespace information.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DistanceMeasurementUnitOptions">
 <summary>
 Provides the measurement unit options supported
 by DriveWorks measurement-enabled facilities
 </summary>
</member>
<member name="F:DriveWorks.DistanceMeasurementUnitOptions.Feet">
 <summary>
 The measurement is given in decimal feet.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DistanceMeasurementUnitOptions.Inches">
 <summary>
 The measurement is given in decimal inches.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DistanceMeasurementUnitOptions.Meters">
 <summary>
 The measurement is given in meters.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DistanceMeasurementUnitOptions.Millimeters">
 <summary>
 The measurement is given in millimeters.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.MeasurementHelper">
 <summary>
 Provides methods to help when working with measurement values.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.MeasurementHelper.ConvertDistanceUnits(System.Double,DriveWorks.DistanceMeasurementUnitOptions,DriveWorks.DistanceMeasurementUnitOptions)">
 <summary>
 Converts the given measurement of distance into an alternative representation.
 </summary>
 <param name="sourceValue">The source value expressed in <paramref name="sourceUnits" />.</param>
 <param name="sourceUnits">The units in which the source value is expressed.</param>
 <param name="targetUnits">The units in to which to convert.</param>
 <returns>The converted distance.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ConnectionManager">
 <summary>
 Manages connections for all projects created by a given engine host.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ConnectionManager.IsDisabled">
 <summary>
 Gets or sets whether database connections are currently disabled. Note, changing the 
 disabled state will not cause rules to be recalculated.
 </summary>
</member>
<member name="M:DriveWorks.ConnectionManager.GetData(System.Boolean,System.String,System.String,System.String,System.String)">
 <summary>
 Performs a DriveWorks GetData operation given an arbitrary SQL statement.
 </summary>
 <param name="isArray">True if the result is going to be used in an array rule, and therefore should be delimited by | characters, false if a single value is expected.</param>
 <param name="dsn">The data source name which identifies the ODBC connection to connect to.</param>
 <param name="userName">The username to use for the connection.</param>
 <param name="password">The password to use for the connection.</param>
 <param name="sql">The SQL string to execute against the connection.</param>
 <returns>The requested data.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ConnectionManager.GetData(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Performs a DriveWorks GetData operation given a table, result field, and where clause.
 </summary>
 <param name="isArray">True if the result is going to be used in an array rule, and therefore should be delimited by | characters, false if a single value is expected.</param>
 <param name="dsn">The data source name which identifies the ODBC connection to connect to.</param>
 <param name="userName">The username to use for the connection.</param>
 <param name="password">The password to use for the connection.</param>
 <param name="tableName">The table from which to get data.</param>
 <param name="fieldName">The name of the field from which results should be retrieved.</param>
 <param name="whereClause">The where clause used to filter the results.</param>
 <returns>The requested data.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ConnectionManager.GetDataDispatch(System.Boolean,System.String)">
 <summary>
 Performs a DriveWorks GetData operation given a GetData string.
 </summary>
 <param name="isArray">True if the result is going to be used in an array rule, and therefore should be delimited by | characters, false if a single value is expected.</param>
 <param name="getDataString">The GetData string to execute.</param>
 <returns>The result of the GetData string.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ConnectionManager.GetOdbcConnection(System.String,System.String,System.String)">
 <summary>
 Gets an ODBC connection.
 </summary>
 <param name="databaseName">The DSN name to which to connect.</param>
 <param name="userName">The username to use for the connection.</param>
 <param name="password">The password to use for the connection.</param>
 <returns>An instance of the <see cref="T:System.Data.Odbc.OdbcConnection" /> class representing an open connection.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ConnectionManager.GetSqlConnection(System.String,System.String,System.String)">
 <summary>
 Gets a SQL connection.
 </summary>
 <param name="connectionString">The connection string to use for connection.</param>
 <param name="userName">The username to use for the connection.</param>
 <param name="password">The password to use for the connection.</param>
 <returns>An instance of the <see cref="T:System.Data.SqlClient.SqlConnection" /> class representing an open connection.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ConnectionManager.QueryData(System.String,System.String,System.String,System.String)">
 <summary>
 Performs a DriveWorks QueryData operation given an arbitrary SQL statement.
 </summary>
 <param name="dsn">The data source name which identifies the ODBC or SQL connection to connect to.</param>
 <param name="sql">The SQL string to execute against the connection.</param>
 <param name="username">The username to use for the connection.</param>
 <param name="password">The password to use for the connection.</param>
 <returns>The requested data.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ConnectionManager.QueryDataValues(System.String,System.String,System.String,System.String)">
 <summary>
 Performs a DriveWorks QueryData operation given an arbitrary SQL statement.
 </summary>
 <param name="dsn">The data source name which identifies the ODBC or SQL connection to connect to.</param>
 <param name="sql">The SQL string to execute against the connection.</param>
 <param name="username">The username to use for the connection.</param>
 <param name="password">The password to use for the connection.</param>
 <returns></returns>
 <remarks>The result will not include the column headers.</remarks>
</member>
<member name="M:DriveWorks.ConnectionManager.QueryDataValues(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Performs a DriveWorks QueryData operation given an arbitrary SQL statement.
 </summary>
 <param name="dsn">The data source name which identifies the ODBC or SQL connection to connect to.</param>
 <param name="sql">The SQL string to execute against the connection.</param>
 <param name="username">The username to use for the connection.</param>
 <param name="password">The password to use for the connection.</param>
 <param name="includeHeaders">A flag to indicate whether column headers should be included in the result.</param>
 <returns>The requested data.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ConnectionManager.DbExecute(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Executes a query against a database.
 </summary>
 <param name="dsn">The connection string or ODBC DSN to which to connect.</param>
 <param name="sql">The SQL command to execute.</param>
 <param name="username">Optionally, the user name to use to connect.</param>
 <param name="password">Optionally, the user password to use to connect.</param>
 <param name="preview">Indicates whether the result should be committed or not.</param>
 <returns>A number indicating how many records were affected, or a string containing the error message if something went wrong.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DisposableProject">
 <summary>
 Represents a temporary project which can be used to query information about
 a project and later disposed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.DisposableProject.#ctor(DriveWorks.Hosting.ProjectManager)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.DisposableProject" /> class.
 </summary>
 <param name="manager">The project manager containing the project to wrap.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.DisposableProject.Project">
 <summary>
 Gets the project represented by the instance.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.DisposableProject.IsDisposed">
 <summary>
 Determines whether the project has already been disposed.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.DisposableProject.Dispose">
 <summary>
 Closes the project represented by the instance.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectItemListBackingStore">
 <summary>
 Provides an abstract design-master specific representation of
 a item list's backing store.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStore.Initialize">
 <summary>
 Performs initial setup of the backing store.
 </summary>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStore.GetData">
 <summary>
 Gets the data in the store as a data table.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStore.AddItemData(System.Object[])">
 <summary>
 Adds a new item to the backing store.
 </summary>
 <param name="values">Values to store. This MUST include the item name and type as the first 2 values</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStore.UpdateItemData(System.Int32,System.String,System.Object[])">
 <summary>
 Updates an item in the backing store.
 </summary>
 <param name="rowIndex">The row of the item to update.</param>
 <param name="values">The new values to store on the row. NOT including the item type.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStore.RemoveItemData(System.Int32)">
 <summary>
 Removes an item from the backing store.
 </summary>
 <param name="rowIndex">The Index of the item to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStore.MoveItemUp(System.Int32)">
 <summary>
 Moves an item up in the table of items.
 </summary>
 <param name="rowIndex">The index of the row to move up.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStore.MoveItemDown(System.Int32)">
 <summary>
 Moves an item down in the table of items.
 </summary>
 <param name="rowIndex">The index of the row to move down.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStore.Rename(System.String)">
 <summary>
 Informs the backing store that the item list is changing its name.
 </summary>
 <param name="newName">New name of the item list.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStore.UpdateColumns">
 <summary>
 Informs the backing store that it should update its columns to match the current definition.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectItemListBackingStoreManager">
 <summary>
 Provides a contract for a design-master specific object which manages
 backing stores for item lists.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStoreManager.GetStoreByName(System.String,DriveWorks.Columns,System.Boolean)">
 <summary>
 Gets a backing store with the given name.
 </summary>
 <param name="name">The name of the backing store.</param>
 <param name="dataColumns">The columns that are used in this item list</param>
 <param name="throwIfMissing">False to return a null reference if the store is not found, otherwise true to throw an exception.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStoreManager.CreateStore(System.String,DriveWorks.Columns)">
 <summary>
 Create a new backing for an item list.
 </summary>
 <param name="name">The name of the backing store</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListBackingStoreManager.RemoveStore(System.String)">
 <summary>
 Removes a backing store for an item list.
 </summary>
 <param name="name">The name of the backing store to remove.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectChildSpecificationBackingStore">
 <summary>
 Provides an abstract design-master specific representation of
 a child specification's backing store.
 </summary>
</member>
<member name="E:DriveWorks.ProjectChildSpecificationBackingStore.ItemIndexChanging">
 <summary>
 Raised when any item is about to be moved.
 </summary>
</member>
<member name="E:DriveWorks.ProjectChildSpecificationBackingStore.ItemIndexChanged">
 <summary>
 Raised when any item has moved.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStore.Initialize">
 <summary>
 Performs initial setup of the backing store.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStore.GetData">
 <summary>
 Gets the data in the store as an array.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStore.AddItemData(System.Object[])">
 <summary>
 Adds a new item to the backing store.
 </summary>
 <param name="values">Values to store. This MUST include the item name and type as the first 2 values</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStore.UpdateItemData(System.Int32,System.String,System.Object[])">
 <summary>
 Updates an item in the backing store.
 </summary>
 <param name="rowIndex">The row of the item to update.</param>
 <param name="specificationName">The new specification name for this item.</param>
 <param name="values">The new values to store on the row. MUST including the item name and type.</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStore.RemoveItemData(System.Int32)">
 <summary>
 Removes an item from the backing store.
 </summary>
 <param name="rowIndex">The Index of the item to remove.</param>
 <remarks>This should call RaiseItemIndexChanged.</remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStore.MoveItemUp(System.Int32)">
 <summary>
 Moves an item up in the table of items.
 </summary>
 <param name="rowIndex">The index of the row to move up.</param>
 <remarks>This should call RaiseItemIndexChanged.</remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStore.MoveItemDown(System.Int32)">
 <summary>
 Moves an item down in the table of items.
 </summary>
 <param name="rowIndex">The index of the row to move down.</param>
 <remarks>This should call RaiseItemIndexChanged.</remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStore.Rename(System.String)">
 <summary>
 Informs the backing store that the child specification is changing its name.
 </summary>
 <param name="newName">New name of the child specification.</param>
</member>
<member name="T:DriveWorks.ProjectChildSpecificationBackingStoreManager">
 <summary>
 Provides a contract for a design-master specific object which manages
 backing stores for child specifications.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStoreManager.GetStoreByName(System.String,DriveWorks.Columns,System.Boolean)">
 <summary>
 Gets a backing store with the given name.
 </summary>
 <param name="name">The name of the backing store.</param>
 <param name="dataColumns">The columns that are used in this child specification list</param>
 <param name="throwIfMissing">False to return a null reference if the store is not found, otherwise true to throw an exception.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStoreManager.CreateStore(System.String,DriveWorks.Columns)">
 <summary>
 Create a new backing for a child specification list.
 </summary>
 <param name="name">The name of the backing store</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationBackingStoreManager.RemoveStore(System.String)">
 <summary>
 Removes a backing store for a child specification list.
 </summary>
 <param name="name">The name of the backing store to remove.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DeleteVariableCategoryBehavior">
 <summary>
 Specifies the behavior to use when deleting a variable category.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DeleteVariableCategoryBehavior.None">
 <summary>
 Delete a single variable category with no children.
 </summary>
 <remarks>
 If the variable category has any children, an exception will be thrown.
 </remarks>
</member>
<member name="F:DriveWorks.DeleteVariableCategoryBehavior.DeleteCategoriesAndMoveVariables">
 <summary>
 Deletes descendent categories, and moves all descendent variables to the category's parent.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.DeleteVariableCategoryBehavior.MoveCategoriesAndVariables">
 <summary>
 Moves child categories and variables to the category's parent.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Navigation.NavigationStepDataProvider">
 <summary>
 Provides an interface between the <see cref="P:DriveWorks.Navigation.NavigationStepDataProvider.NavigationStep" />
 classes and an implementation of the <see cref="T:DriveWorks.Navigation.ProjectNavigation" /> base class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.Initialize(DriveWorks.Navigation.NavigationStep)">
 <summary>
 Initializes the provider with its twin step.
 </summary>
 <param name="navigationStep">The navigation step for which the provider is working.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Navigation.NavigationStepDataProvider.NavigationStep">
 <summary>
 Gets the step for which the provider is working.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.SetStepLeft(System.Int32)">
 <summary>
 Called by a navigation step when its left position changes.
 </summary>
 <param name="left"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.SetStepTop(System.Int32)">
 <summary>
 Called by a navigation step when its top position changes.
 </summary>
 <param name="top"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.SetStepNextMacroRule(System.String)">
 <summary>
 Called by a navigation step when the macro to be executed when its next step is navigated-to
 changes.
 </summary>
 <param name="nextMacroRule"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.SetStepPreviousMacroRule(System.String)">
 <summary>
 Called by a navigation step when the macro to be executed when its previous step is navigated-to
 changes.
 </summary>
 <param name="previousMacroRule"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.DeleteStep">
 <summary>
 Called by a navigation step when it is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.SetNextStep(DriveWorks.Navigation.NavigationStep)">
 <summary>
 Called by a navigationStep step when its next step is changed.
 </summary>
 <param name="nextStep"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.SetNextStepByName(System.String)">
 <summary>
 Called by <see cref="M:DriveWorks.Navigation.NavigationStepDataProvider.SetNextStep(DriveWorks.Navigation.NavigationStep)" /> or by the navigation class when a depended-upon step's name
 has changed.
 </summary>
 <param name="nextStepName"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.SetDecisionNextStep(System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep)">
 <summary>
 Called by the decision navigation step when its condition, or either if its next steps are changed.
 </summary>
 <param name="condition"></param>
 <param name="nextStepIfTrue"></param>
 <param name="nextStepIfFalse"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.SetDecisionNextStepByName(System.String,System.String,System.String)">
 <summary>
 Called by <see cref="M:DriveWorks.Navigation.NavigationStepDataProvider.SetDecisionNextStep(System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep)" /> or by the navigation class when a depended-upon step's name
 has changed.
 </summary>
 <param name="condition"></param>
 <param name="nextStepIfTrue"></param>
 <param name="nextStepIfFalse"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepDataProvider.SetDecisionNextStepByRule(System.String)">
 <summary>
 Called by <see cref="M:DriveWorks.Navigation.NavigationStepDataProvider.SetDecisionNextStep(System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep)" /> or by the navigation class when a depended-upon step's name
 has changed.
 </summary>
 <param name="decisionRule"></param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Navigation.ProjectNavigation">
 <summary>
 Provides access to a project's navigation information.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.ProjectNavigation.NavigationStepCreated">
 <summary>
 Raised when a navigation step is created.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.ProjectNavigation.NavigationStepDeleted">
 <summary>
 Raised when a navigation step is deleted.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.ProjectNavigation.NavigationStepNameChanged">
 <summary>
 Raised when the name of a navigation step is changed.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.ProjectNavigation.ControlCreated">
 <summary>
 Raised whenever a control is created on any form or dialog.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.ProjectNavigation.ControlNameChanged">
 <summary>
 Raised whenever any control is renamed.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.ProjectNavigation.ControlDeleted">
 <summary>
 Raised whenever any control is deleted.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.ProjectNavigation.Project">
 <summary>
 Gets the project.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.ProjectNavigation.Item(System.Int32)">
 <summary>
 Gets the navigation step at the given index.
 </summary>
 <param name="index">The index of the step to get.</param>
 <returns>A navigation step.</returns>
</member>
<member name="P:DriveWorks.Navigation.ProjectNavigation.Count">
 <summary>
 Gets the total number of steps in the navigation (including the start and finish steps).
 </summary>
</member>
<member name="P:DriveWorks.Navigation.ProjectNavigation.StartStep">
 <summary>
 Gets the first step in the navigation.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.ProjectNavigation.FinishStep">
 <summary>
 Gets the final step in the navigation.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.GetForms(System.Boolean,System.Boolean)">
 <summary>
 Gets the project's forms.
 </summary>
 <param name="includeDialogForms">True to include forms which are not linked into the navigation, false to filter them out of the result.</param>
 <param name="includeStandardForms">True to include forms which are linked into the navigation, false to filter them out of the result.</param>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.GetDecisions">
 <summary>
 Gets all of the decisions in the navigation.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.GetSteps">
 <summary>
 Gets all of the steps in the navigation.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.GetStep(System.String)">
 <summary>
 Gets the named navigation step.
 </summary>
 <param name="name">The name of the step to retrieve.</param>
 <returns>The named instance of the <see cref="T:DriveWorks.Navigation.NavigationStep" />.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown when the named navigation step does not exist.</exception>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.TryGetStep``1(System.String,``0@)">
 <summary>
 Gets the named navigation step.
 </summary>
 <param name="name">The name of the step to retrieve.</param>
 <param name="navigationStep">A reference to a variable which will received the retrieved navigation step.</param>
 <returns>True if the item was successfully retrieved, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.TryGetStep(System.String,DriveWorks.Navigation.NavigationStep@)">
 <summary>
 Gets the named navigation step.
 </summary>
 <param name="name">The name of the step to retrieve.</param>
 <param name="navigationStep">A reference to a variable which will received the retrieved navigation step.</param>
 <returns>True if the item was successfully retrieved, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.CreateDecision(System.String)">
 <summary>
 Creates a new decision.
 </summary>
 <param name="name">The name of the new decision.</param>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.CreateForm(System.String)">
 <summary>
 Creates a new form.
 </summary>
 <param name="name">The name of the new form.</param>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.GetControl(System.String)">
 <summary>
 Gets a control given its name.
 </summary>
 <param name="name">The name of the control to get.</param>
 <returns>The specified control.</returns>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.TryGetControl(System.String,DriveWorks.Forms.ControlBase@)">
 <summary>
 Gets a control given its name.
 </summary>
 <param name="name">The name of the control to get.</param>
 <param name="control">The control.</param>
 <returns>True if the control was found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.TryGetControl``1(System.String,``0@)">
 <summary>
 Gets a control given its name.
 </summary>
 <param name="name">The name of the control to get.</param>
 <param name="control">The control.</param>
 <returns>True if the control was found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.ValidateStepName(System.String,System.String)">
 <summary>
 Validates the step name and throws an exception if it isn't valid.
 </summary>
 <param name="newName">The name of the step.</param>
 <param name="oldName">The old name of the step or a null reference if the step is new.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The name contains one or more invalid characters, or the name is zero-length.</exception>
 <exception cref="T:System.ArgumentNullException">The name is a null reference (Nothing in Visual Basic).</exception>
 <exception cref="T:DriveWorks.ItemExistsException">The name is already in use.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.PatchStepNames(DriveWorks.Navigation.NavigationStep,System.String)">
 <summary>
 Called automatically when the name of a step changes or a step is deleted, in order to 
 update references throughout the navigation graph. 
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="newName">The new name of the step.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.ProjectNavigation.RemoveStep(DriveWorks.Navigation.NavigationStep)">
 <summary>
 Called by the derived class to remove a step which has been deleted and patch
 the navigation graph.
 </summary>
 <param name="ns"></param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Navigation.NavigationStepChangedEventHandler">
 <summary>
 Represents the method that will handle the event raised when a navigation step is changed.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
</member>
<member name="T:DriveWorks.Navigation.NavigationStepEventArgs">
 <summary>
 Provides the data for the event raised when a navigation step is changed.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepEventArgs.#ctor(DriveWorks.Navigation.NavigationStep)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Navigation.NavigationStepEventArgs" /> type.
 </summary>
 <param name="navigationStep">The navigation step that was changed.</param>
</member>
<member name="P:DriveWorks.Navigation.NavigationStepEventArgs.NavigationStep">
 <summary>
 Gets the navigation step that was changed.
 </summary>
</member>
<member name="T:DriveWorks.Navigation.NavigationStepNameChangedEventHandler">
 <summary>
 Represents the method that will handle the event raised when a navigation step's name is changed.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
</member>
<member name="T:DriveWorks.Navigation.NavigationStepNameChangedEventArgs">
 <summary>
 Provides the event data for events raised when the name
 of a navigation step changes.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.NavigationStepNameChangedEventArgs.#ctor(DriveWorks.Navigation.NavigationStep,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Navigation.NavigationStepNameChangedEventArgs" /> type.
 </summary>
 <param name="navigationStep">The navigation step that was changed.</param>
 <param name="oldName">The old name of the navigation step.</param>
 <param name="newName">The new name of the navigation step.</param>
</member>
<member name="P:DriveWorks.Navigation.NavigationStepNameChangedEventArgs.OldName">
 <summary>
 Gets the old name of the navigation step.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.NavigationStepNameChangedEventArgs.NewName">
 <summary>
 Gets the new name of the navigation step.
 </summary>
</member>
<member name="T:DriveWorks.Navigation.ControlNameChangedEventArgs">
 <summary>
 Provides the event data for events raised when the name of a control changes.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.ControlNameChangedEventArgs.Control">
 <summary>
 The instance of the control that changed.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.ControlNameChangedEventArgs.OldName">
 <summary>
 The original name of the control
 </summary>
</member>
<member name="P:DriveWorks.Navigation.ControlNameChangedEventArgs.NewName">
 <summary>
 The new name of the control.
 </summary>
</member>
<member name="T:DriveWorks.Navigation.NavigationDataCorruptException">
 <summary>
 Thrown when navigation information cannot be loaded because the underlying data store is 
 in the wrong format.
 </summary>
</member>
<member name="T:DriveWorks.Navigation.DecisionNavigationStep">
 <summary>
 Represents a binary conditional branch in a project's navigation.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.DecisionNavigationStep.ConditionExpressionChanged">
 <summary>
 Raised when the value of the <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.ConditionExpression" /> property changes.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfTrueChanged">
 <summary>
 Raised when the value of the <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfTrue" /> property changes.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfFalseChanged">
 <summary>
 Raised when the value of the <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfFalse" /> property changes.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.DecisionNavigationStep.NextStep">
 <summary>
 Overridden to throw an exception if it is attempted to change the next step as a decision's next step
 is governed by the <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.ConditionExpression" />, <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfTrue" />, and <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfFalse" />
 properties.
 </summary>
 <returns>The current next step based on the result of calculating the <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.ConditionExpression" /> property.</returns>
</member>
<member name="M:DriveWorks.Navigation.DecisionNavigationStep.ResolveReferences">
 <summary>
 Overridden to resolve <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfTrue" /> and <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfFalse" />.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Navigation.DecisionNavigationStep.ConditionExpression">
 <summary>
 Gets/sets an expression which evaluates to either true or false and ultimately
 determines which navigation step is activated next.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfTrue">
 <summary>
 Gets the next step to be shown if <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.ConditionExpression" /> evaluates to true.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfFalse">
 <summary>
 Gets the next step to be shown if <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.ConditionExpression" /> evaluates to true.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.DecisionNavigationStep.GetVersionHistory">
 <summary>
 Gets the rule condition rule history for this decision.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.DecisionNavigationStep.ApplyComment(System.String)">
 <summary>
 Sets the comment for the Decision step without updating the history
 </summary>
 <param name="comment">The comment for the rule</param>
</member>
<member name="P:DriveWorks.Navigation.DecisionNavigationStep.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.DecisionNavigationStep.Comment">
 <summary>
 Gets/sets the comment associated with the Navigation step's rule.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.DecisionNavigationStep.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and the comment for the Decision Step.
 </summary>
 <param name="newRule">The rule to evaluate.</param>
 <param name="newComment">The comment for the rule</param>
</member>
<member name="M:DriveWorks.Navigation.DecisionNavigationStep.SetRuleAndComment(System.String,System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep)">
 <summary>
 Sets the rule and the comment for the Decision Step.
 </summary>
 <param name="newRule">The rule to evaluate.</param>
 <param name="newComment">The comment for the rule.</param>
 <param name="stepIfTrue">The step to be shown if the condition evaluates to true.</param>
 <param name="stepIfFalse">The step to be shown if the condition evaluates to false.</param>
</member>
<member name="T:DriveWorks.Navigation.FinishNavigationStep">
 <summary>
 Represents the final navigation step in a project's navigation.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.FinishNavigationStep.NextStep">
 <summary>
 Overridden to throw an exception if it is attempted to change the next step as the Finish step cannot have a next step.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if it is attempted to modify the property's value.</exception>
</member>
<member name="M:DriveWorks.Navigation.FinishNavigationStep.DeleteCore">
 <summary>
 Overridden to throw an instance of <see cref="T:System.InvalidOperationException" />
 as deletion of the finish step is not allowed.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Navigation.FormNavigationStep">
 <summary>
 Represents a form in a project's navigation.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.FormNavigationStep.SetForm(DriveWorks.Forms.Form)">
 <summary>
 Used by derived versions of the <see cref="T:DriveWorks.Forms.DataModel.FormsDataManager" /> type to provide the DriveWorks Form once it has been loaded.
 </summary>
 <param name="form">The DriveWorks form for this step.</param>
</member>
<member name="P:DriveWorks.Navigation.FormNavigationStep.Form">
 <summary>
 Gets the actual DriveWorks form represented by this navigation step.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.FormNavigationStep.IsDialog">
 <summary>
 Gets whether this form step is a dialog form step, i.e. it is not linked into the navigation.
 </summary>
 <returns>True if the form step is a dialog</returns>
</member>
<member name="M:DriveWorks.Navigation.FormNavigationStep.DeleteCore">
 <summary>
 Overridden to remove the form from the form host.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Navigation.NavigationStep">
 <summary>
 The base class for all steps in a project's navigation.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.NavigationStep.LeftChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Navigation.NavigationStep.Left" /> property is changed.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.NavigationStep.TopChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Navigation.NavigationStep.Left" /> property is changed.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.NavigationStep.Deleted">
 <summary>
 Raised when the navigation step is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Navigation.NavigationStep.NextMacroRuleChanged">
 <summary>
 Raised when the rule, which determines the macro to be fired when the next step is activated, changes.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.NavigationStep.NextMacroNameChanged">
 <summary>
 Raised when the macro to be fired when the next step is activated changes.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.NavigationStep.PreviousMacroRuleChanged">
 <summary>
 Raised when the rule, which determines the macro to be fired when the previous step is activated, changes.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.NavigationStep.PreviousMacroNameChanged">
 <summary>
 Raised when the macro to be fired when the previous step is activated changes.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.NavigationStep.NextStepChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Navigation.NavigationStep.NextStep" /> property changes.
 </summary>
</member>
<member name="E:DriveWorks.Navigation.NavigationStep.NameChanged">
 <summary>
 Raised when the <see cref="P:DriveWorks.Navigation.NavigationStep.Name" /> property changes.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStep.#ctor(System.Boolean)">
 <summary>
 Internal constructor for use by derived types in the Engine assembly.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.NavigationStep.SetCommonParameters(DriveWorks.Navigation.ProjectNavigation,DriveWorks.Navigation.NavigationStepDataProvider,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Sets the value of properties which are common to all navigation step types.
 </summary>
 <param name="navigation">The project navigation which manages the step.</param>
 <param name="provider">The data provider.</param>
 <param name="name">The name of the step.</param>
 <param name="left">The left position of the step in the navigation designer.</param>
 <param name="top">The top position of the step in the navigation designer.</param>
 <param name="onNextMacroName">The name of the macro to be executed when the next step is activated.</param>
 <param name="onNextMacroRule">The rule which defines the name of the macro to be executed when the next step is activated.</param>
 <param name="onPreviousMacroName">The name of the macro to be executed when the previous step is activated.</param>
 <param name="onPreviousMacroRule">The rule which defines the name of the macro to be executed when the previous step is activated.</param>    
 <param name="nextStepName">The name of the next step in the navigation.</param>
</member>
<member name="M:DriveWorks.Navigation.NavigationStep.ApplyNextStepName(System.String)">
 <summary>
 Used by the <see cref="T:DriveWorks.Navigation.NavigationStep" /> type to update the next step if the next step has been deleted or renamed.
 </summary>
 <param name="nextStepName">The name of the step which comes next in the navigation.</param>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.Navigation">
 <summary>
 Gets the project navigation.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.CanRename">
 <summary>
 Gets a value indicating whether the name
 of the navigation step can be changed.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.Name">
 <summary>
 Gets/sets the name of the navigation step.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.Top">
 <summary>
 Gets the top position of the step in the navigation designer.
 </summary>   
 <remarks>
 Changes to this property do not cause a cache update.
 </remarks>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.Left">
 <summary>
 Gets the left position of the  step in the navigation designer.
 </summary>
 <remarks>
 Changes to this property do not cause a cache update.
 </remarks>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.OnNextMacroName">
 <summary>
 Gets the name of the macro to be executed when the next step is activated.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.OnNextMacroRule">
 <summary>
 Gets/sets the rule which defines the name of the macro to be executed when the next step is activated.
 </summary>
 <remarks>
 Changes to this property cause a cache update.
 </remarks>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.OnPreviousMacroName">
 <summary>
 Gets the name of the macro to be executed when the previous step is activated.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.OnPreviousMacroRule">
 <summary>
 Gets/sets the rule which defines the name of the macro to be executed when the previous step is activated.
 </summary>
 <remarks>
 Changes to this property cause a cache update.
 </remarks>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.IsDeleted">
 <summary>
 Gets whether the navigation step has been deleted.
 </summary>
 <returns>True if the navigation step has been deleted, otherwise false.</returns>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.NextStep">
 <summary>
 Gets/sets the navigation step to be activated after this.
 </summary>
 <remarks>
 Changes to this property do not cause a cache update.
 </remarks>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.PreviousStepCount">
 <summary>
 Returns the count of steps which have this step set as their next step.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.NavigationStep.Delete">
 <summary>
 Deletes the step from the navigation.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.NavigationStep.DeleteCore">
 <summary>
 Performs any derived-type specific deletion.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStep.ChangeNameCore(System.String)">
 <summary>
 When overridden by a derived class, changes the name
 of the navigation step.
 </summary>
 <param name="newName">The new name to apply.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.NavigationStep.AssertNotDeleted">
 <summary>
 Checks to see if the item has been deleted, and if it has, throws an instance of the
 <see cref="T:DriveWorks.ItemDeletedException" /> exception.
 </summary>
</member>
<member name="P:DriveWorks.Navigation.NavigationStep.DataProvider">
 <summary>
 Gets the data provider for the navigation step.
 </summary>
</member>
<member name="M:DriveWorks.Navigation.NavigationStep.ResolveReferences">
 <summary>
 Called by the <see cref="T:DriveWorks.Navigation.ProjectNavigation" /> type so the step can resolve
 references to other navigation steps at the end of the cache refresh.
 </summary>
</member>
<member name="T:DriveWorks.Navigation.StartNavigationStep">
 <summary>
 Represents the initial step in a project's navigation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Navigation.StartNavigationStep.DeleteCore">
 <summary>
 Overridden to throw an instance of <see cref="T:System.InvalidOperationException" />
 as deletion of the finish step is not allowed.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectDataTableBackingStore">
 <summary>
 Provides a representation of a data table's backing store.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStore.Serialize">
 <summary>
 Converts the contents of the data table to a CSV string.
 </summary>
</member>
<member name="T:DriveWorks.ProjectDataTableBackingStoreManager">
 <summary>
 Provides an object which manages backing stores for data tables.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectDataTableBackingStoreManager.StoresSaved">
 <summary>
 Raised when the stores have been saved.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreManager.CreateStore(System.String)">
 <summary>
 Creates a new backing store with the given name.
 </summary>
 <param name="name">The name of the backing store.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreManager.CreateInMemoryStore(System.String)">
 <summary>
 Creates an in-memory backing store with the given name.
 </summary>
 <param name="name">The name of the backing store.</param>
 <returns></returns>
 <remarks>This store will not be serialized. It exists only for the lifetime of the application or until it is deleted.</remarks>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreManager.GetStoreByName(System.String,System.Boolean)">
 <summary>
 Gets a backing store with the given name.
 </summary>
 <param name="name">The name of the backing store.</param>
 <param name="throwIfMissing">False to return a null reference if the store is not found, otherwise true to throw an exception.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreManager.RenameStore(System.String,System.String)">
 <summary>
 Renames the backing store with the given name.
 </summary>
 <param name="oldName">The old name of the store.</param>
 <param name="newName">The new name of the store.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTableBackingStoreManager.DeleteStore(System.String)">
 <summary>
 Deletes the backing store with the given name.
 </summary>
 <param name="name">The name of the backing store to delete.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectListItemData">
 <summary>
 Provides a simple wrapper for a <see cref="T:DriveWorks.Forms.ItemList">Item List</see> or <see cref="T:DriveWorks.Forms.ChildSpecificationList">child Specification List</see> Item.
 </summary>
 <remarks>Can NOT be used to edit the item data.</remarks>
</member>
<member name="P:DriveWorks.ProjectListItemData.Name">
 <summary>
 The name of the item.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectListItemData.ItemType">
 <summary>
 The type of item.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectListItemData.ItemValues">
 <summary>
 The values from the item. Key is column name and value is the current value.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectListItemData.GetItemValuesNative">
 <summary>
 The values from the item. Key is column name and value is the current value.
 </summary>
</member>
<member name="M:DriveWorks.ProjectListItemData.GetItemValueNative(System.String)">
 <summary>
 Retrieves the item value for the specified column name.
 </summary>
 <param name="columnName">The name of the column for which to retrieve the value.</param>
 <returns>Nothing if a column matching that name doesn't exist, otherwise the value for the column.</returns>
 <remarks>This will perform a case-insensitive search for the column.</remarks>
</member>
<member name="P:DriveWorks.ProjectListItemData.Index">
 <summary>
 Gets the index of this item in the list.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectListItemData.Equals(System.Object)">
 <summary>
 Determines whether two ProjectListItemData objects are equal.
 </summary>
 <param name="obj">The ProjectListItemData object to compare to.</param>
 <returns>True if the two objects are equal.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectMessage">
 <summary>
 Provides access to a project's messages.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectMessage.MessageChanged">
 <summary>
 Raised when the message changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectMessage.RuleChanged">
 <summary>
 Raised when the message rule changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectMessage.Deleted">
 <summary>
 Raised when the message is deleted.
 </summary>
</member>
<member name="E:DriveWorks.ProjectMessage.CommentChanged">
 <summary>
 Raised when the message's comment is changed.
 </summary>
</member>
<member name="P:DriveWorks.ProjectMessage.Project">
 <summary>
 Gets the project
 </summary>
</member>
<member name="P:DriveWorks.ProjectMessage.Code">
 <summary>
 Gets the message code
 </summary>
</member>
<member name="P:DriveWorks.ProjectMessage.Message">
 <summary>
 Gets the current message.
 </summary>
</member>
<member name="P:DriveWorks.ProjectMessage.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="P:DriveWorks.ProjectMessage.Rule">
 <summary>
 Gets/sets the rule which defines the message.
 </summary>
</member>
<member name="P:DriveWorks.ProjectMessage.Comment">
 <summary>
 Gets/sets the comment which defines the message.
 </summary>
</member>
<member name="M:DriveWorks.ProjectMessage.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectMessage.IsDeleted">
 <summary>
 Gets whether the message has been deleted.
 </summary>
</member>
<member name="M:DriveWorks.ProjectMessage.Delete">
 <summary>
 Deletes the message.
 </summary>
</member>
<member name="M:DriveWorks.ProjectMessage.DeleteCore">
 <summary>
 Performs the work of deleting the message.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectMessages">
 <summary>
 Provides access to a project's messages.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectMessages.MessageCreated">
 <summary>
 Raised when message is created
 </summary>
</member>
<member name="E:DriveWorks.ProjectMessages.MessageMessageChanged">
 <summary>
 Raised when the message's message changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectMessages.MessageRuleChanged">
 <summary>
 Raised when the message's rule changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectMessages.MessageDeleted">
 <summary>
 Raised when the message is deleted.
 </summary>
</member>
<member name="E:DriveWorks.ProjectMessages.MessageCommentChanged">
 <summary>
 Raised when the message's comment is changed.
 </summary>
</member>
<member name="M:DriveWorks.ProjectMessages.#ctor(DriveWorks.ProjectState)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectMessages" /> type.
 </summary>
 <param name="projectState">The state for the project whose messages are to be managed.</param>
</member>
<member name="P:DriveWorks.ProjectMessages.Project">
 <summary>
 Gets the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectMessages.CreateMessage(System.Int32)">
 <summary>
 Creates and returns a new message.
 </summary>
 <returns>The newly created message.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectMessages.GetMessages">
 <summary>
 Gets all the messages which exist in the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectMessages.GetMessage(System.Int32)">
 <summary>
 Gets the message with the specified display name.
 </summary>
 <param name="code">The code of the message to retrieve.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown when no messages with the specified display name exists.</exception>
</member>
<member name="M:DriveWorks.ProjectMessages.TryGetMessage(System.Int32,DriveWorks.ProjectMessage@)">
 <summary>
 Gets the message with the specified display name.
 </summary>
 <param name="code">The code of the message to retrieve.</param>
 <param name="message">A reference to a variable which will receive the message.</param>
 <returns>True if the message is found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.ProjectMessages.MessageNotifyMessageMessageChanged(DriveWorks.ProjectMessage)">
 <summary>
 Used by the project message to tell the messages collection to raise the message changed event.
 </summary>
 <param name="message">The message which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectMessages.MessageNotifyMessageDeleted(DriveWorks.ProjectMessage)">
 <summary>
 Used by the project message to tell the messages collection to raise the message deleted event.
 </summary>
 <param name="message">The message which has deleted.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectMessages.MessageNotifyMessageRuleChanged(DriveWorks.ProjectMessage)">
 <summary>
 Used by the project message to tell the messages collection to raise the message rule changed event.
 </summary>
 <param name="message">The message which has had its rule changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectMessages.MessageNotifyMessageCommentChanged(DriveWorks.ProjectMessage)">
 <summary>
 Used by the project message to tell the messages collection to raise the message comment changed event.
 </summary>
 <param name="message">The message which has had it's comment changed.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectSpecialVariable">
 <summary>
 Provides access to an individual special variable.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecialVariable.ValueChanged">
 <summary>
 Raised whenever the value of the Special Variable changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecialVariable.RuleChanged">
 <summary>
 Raised whenever the rule for the Special Variable changes. 
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecialVariable.CommentChanged">
 <summary>
 Raised whenever the comment for the Special Variable's rule changes. 
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariable.DisplayName">
 <summary>
 Gets the display name of the special variable as it appears in the design master.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariable.Value">
 <summary>
 Gets/sets the value of the special variable.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariable.Rule">
 <summary>
 Gets/sets the rule which defines the value of the special variable.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariable.Comment">
 <summary>
 Gets/sets the comment of the special variable.
 </summary>
</member>
<member name="M:DriveWorks.ProjectSpecialVariable.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectSpecialVariable.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="T:DriveWorks.ProjectConstant">
 <summary>
 Represents a constant value in a project.
 </summary>
</member>
<member name="E:DriveWorks.ProjectConstant.NameChanged">
 <summary>
 Raised when the name is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectConstant.ValueChanged">
 <summary>
 Raised when the value is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectConstant.Deleted">
 <summary>
 Raised when the constant is deleted.
 </summary>
</member>
<member name="E:DriveWorks.ProjectConstant.CategoryNameChanged">
 <summary>
 Raised when the category name is changed.
 </summary>
</member>
<member name="P:DriveWorks.ProjectConstant.Project">
 <summary>
 Gets the project to which the constant belongs.
 </summary>
</member>
<member name="P:DriveWorks.ProjectConstant.Constants">
 <summary>
 Gets the constants collection.
 </summary>
</member>
<member name="P:DriveWorks.ProjectConstant.Name">
 <summary>
 Gets the name of the constant in a form which can be used in rules.
 </summary>
</member>
<member name="P:DriveWorks.ProjectConstant.DisplayName">
 <summary>
 Gets/sets the name of the constant.
 </summary>
</member>
<member name="P:DriveWorks.ProjectConstant.Value">
 <summary>
 Gets/sets the current value of the constant.
 </summary>
</member>
<member name="P:DriveWorks.ProjectConstant.Text">
 <summary>
 Gets a textual representation of the current value of the constant.
 </summary>    
</member>
<member name="P:DriveWorks.ProjectConstant.IsDeleted">
 <summary>
 Gets whether the constant has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.ProjectConstant.Category">
 <summary>
 Gets/sets the name of the constant category.
 </summary>
</member>
<member name="M:DriveWorks.ProjectConstant.Delete">
 <summary>
 Deletes the constant.
 </summary>
</member>
<member name="M:DriveWorks.ProjectConstant.DeleteCore">
 <summary>
 Performs the work of deleting the constant.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectConstant.SetValue(System.Object,System.Boolean)">
 <summary>
 Sets the value of the constant.
 </summary>
 <param name="value">The value to set.</param>
 <param name="forceUpdate">True if all dependent objects should be re-evaluated even if the value is different from the previous value.</param>
</member>
<member name="T:DriveWorks.ProjectConstants">
 <summary>
 Provides access to a project's constants.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectConstants.ConstantNameChanged">
 <summary>
 Raised when a constant's name changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectConstants.ConstantValueChanged">
 <summary>
 Raised when a constant's value changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectConstants.ConstantCategoryChanged">
 <summary>
 Raised when a constant's category changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectConstants.ConstantCreated">
 <summary>
 Raised when a constant is created.
 </summary>
</member>
<member name="E:DriveWorks.ProjectConstants.ConstantDeleted">
 <summary>
 Raised when a constant is deleted.
 </summary>
</member>
<member name="P:DriveWorks.ProjectConstants.Project">
 <summary>
 Gets the project to which the constant manager belongs.
 </summary>
</member>
<member name="M:DriveWorks.ProjectConstants.GetConstants">
 <summary>
 Gets all the constants which exist in the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectConstants.GetConstant(System.String)">
 <summary>
 Gets the constant with the specified display name.
 </summary>
 <param name="displayName">The display name of the constant to retrieve.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown when no constant with the specified display name exists.</exception>
</member>
<member name="M:DriveWorks.ProjectConstants.TryGetConstant(System.String,DriveWorks.ProjectConstant@)">
 <summary>
 Gets the constant with the specified display name.
 </summary>
 <param name="displayName">The display name of the constant to retrieve.</param>
 <param name="constant">A reference to a constant which will receive the constant.</param>
 <returns>True if the constant is found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.ProjectConstants.CreateConstant(System.String)">
 <summary>
 Creates a  new constant with the specified name.
 </summary>
 <param name="displayName">The display name to assign to the constant.</param>
 <returns>The newly created constant.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectConstants.ConstantNotifyValueChanged(DriveWorks.ProjectConstant)">
 <summary>
 For use by the <see cref="T:DriveWorks.ProjectConstant" /> type to raise the <see cref="E:DriveWorks.ProjectConstants.ConstantValueChanged" /> event.
 </summary>
 <param name="constant">The constant that was changed.</param>
</member>
<member name="M:DriveWorks.ProjectConstants.ConstantNotifyCategoryChanged(DriveWorks.ProjectConstant)">
 <summary>
 For use by the <see cref="T:DriveWorks.ProjectConstant" /> type to raise the <see cref="E:DriveWorks.ProjectConstants.ConstantCategoryChanged" /> event.
 </summary>
 <param name="constant">The constant that was changed.</param>
</member>
<member name="M:DriveWorks.ProjectConstants.ConstantNotifyDeleted(DriveWorks.ProjectConstant)">
 <summary>
 For use by the <see cref="T:DriveWorks.ProjectConstant" /> type to raise the <see cref="E:DriveWorks.ProjectConstants.ConstantDeleted" /> event.
 </summary>
 <param name="constant">The constant that was deleted.</param>
</member>
<member name="M:DriveWorks.ProjectConstants.ConstantNotifyNameChanged(DriveWorks.ProjectConstant)">
 <summary>
 For use by the <see cref="T:DriveWorks.ProjectConstant" /> type to raise the <see cref="E:DriveWorks.ProjectConstants.ConstantNameChanged" /> event.
 </summary>
 <param name="constant">The constant that was changed.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectComponentSetEventHandler">
 <summary>
 Represents the method that will handle the event raised when a component set is changed.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectComponentSetEventArgs">
 <summary>
 Provides the data for the event raised when a component set is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSetEventArgs.#ctor(DriveWorks.ProjectComponentSet)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectComponentSetEventArgs" /> type.
 </summary>
 <param name="componentSet">The component set that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectComponentSetEventArgs.ComponentSet">
 <summary>
 Gets the component set that was changed.
 </summary>
</member>
<member name="T:DriveWorks.ProjectComponentSetNameChangedEventArgs">
 <summary>
 Provides the data for the event raised when a component set's name is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSetNameChangedEventArgs.#ctor(DriveWorks.ProjectComponentSet,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectComponentSetEventArgs" /> type.
 </summary>
 <param name="componentSet">The component set that was changed.</param>
 <param name="oldName">The original name of the component set, before the name was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectComponentSetNameChangedEventArgs.ComponentSet">
 <summary>
 Gets the component set that was changed.
 </summary>
</member>
<member name="P:DriveWorks.ProjectComponentSetNameChangedEventArgs.OldName">
 <summary>
 Gets the old name of the component set.
 </summary>
</member>
<member name="P:DriveWorks.ProjectComponentSetNameChangedEventArgs.NewName">
 <summary>
 Gets the new name of the component set.
 </summary>
</member>
<member name="T:DriveWorks.ConstantChangedEventHandler">
 <summary>
 Represents the method that will handle the event raised when a constant is changed.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ConstantEventArgs">
 <summary>
 Provides the data for the event raised when a constant is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ConstantEventArgs.#ctor(DriveWorks.ProjectConstant)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ConstantEventArgs" /> type.
 </summary>
 <param name="constant">The constant that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ConstantEventArgs.Constant">
 <summary>
 Gets the constant that was changed.
 </summary>
</member>
<member name="T:DriveWorks.DataTableEventHandler">
 <summary>
 Represents the method that will handle the event raised when a table is changed.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DataTableEventArgs">
 <summary>
 Provides the data for the event raised when a table is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.DataTableEventArgs.#ctor(DriveWorks.ProjectDataTable)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.DataTableEventArgs" /> type.
 </summary>
 <param name="table">The table that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.DataTableEventArgs.Table">
 <summary>
 Gets the table that was changed.
 </summary>
</member>
<member name="T:DriveWorks.ProjectDesignMaster">
 <summary>
 Provides the basis for the rules calculation and related data storage
 facilities for DriveWorks.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDesignMaster.SupportsDesignMasterEmbedding">
 <summary>
 Gets whether or not the design master will be or is being saved internally to the project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.SetNamedItemValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
 <summary>
 Sets the values of the specified named items.
 </summary>
 <param name="namesAndValues">The named items and values to set.</param>
 <returns>The names of any items that could not be driven.</returns>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.GetCallableFunctions">
 <summary>
 Returns a list of supported Functions for the project
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.GetMaximumRuleLength">
 <summary>
 Gets the maximum length of a rule supported by the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateDesignMaster(System.String)">
 <summary>
 Creates a design master at the given location.
 </summary>
 <param name="path"></param>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.LoadDesignMaster(System.String)">
 <summary>
 Opens a design master at the given location.
 </summary>
 <param name="path"></param>
</member>
<member name="P:DriveWorks.ProjectDesignMaster.RuleLocalizationHelper">
 <summary>
 Gets a rule localization helper to assist with building and parsing rules in the current language.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.GetRuleFromNamedItem(System.String)">
 <summary>
 Gets the rule for a named item within DriveWorks, for example a variable or constant.
 </summary>
 <param name="qualifiedName">The fully qualified name of the item to get, e.g. "DWVariable1".</param>
 <returns>The rule associated with the named item.</returns>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.GetNamedItem(System.String)">
 <summary>
 Attempts to find a matching named item in within DriveWorks, for example a calculation cell or variable.
 </summary>
 <param name="qualifiedName">The fully qualified name of the item to get, e.g. "DWCalcTableOne.ColumnOne2".</param>
 <returns>The associated named item or null if nothing is found.</returns>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CheckNamesDontExist(System.String[])">
 <summary>
 Checks the names to ensure they don't already exist in the design master.
 </summary>
 <param name="names">The names to check.</param>
 <returns>True if none of the names exist in the design master, false if one or more names do exist in the design master.</returns>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CalculateResults(System.String[])">
 <summary>
 Calculates the specified rules, and returns the results as an array of objects.
 </summary>
 <param name="rules">The rules to calculate.</param>
 <returns>
 An array containing one value for each rule.
 </returns>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CalculateResults(System.String[],System.String,System.Object)">
 <summary>
 Calculates the specified rules, and returns the results as an array of objects.
 </summary>
 <param name="name">The name of the target for which the rules are being evaluated, or a null reference if it doesn't matter.</param>
 <param name="rules">The rules to calculate.</param>
 <param name="context">The context to use with the rule calculation.</param>
 <returns>
 An array containing one value for each rule.
 </returns>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CalculateResults(DriveWorks.Abstractions.IHasRule[])">
 <summary>
 Calculates the specified rules, and returns the results in an instance of the 
 <see cref="T:DriveWorks.Specification.RuleResults" /> type.
 </summary>
 <param name="rules">The rules to calculate.</param>
 <returns>
 An instance of the <see cref="T:DriveWorks.Specification.RuleResults" /> type which provides the ability
 to retrieve a result for any of the rules that were calculated, as well as 
 saving/loading the results to/from XML.
 </returns>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.GetSuppressionContext">
 <summary>
 Suppresses calculation and returns a disposable suppression context which can be used
 to resume calculation.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.TryExecuteMacro(System.String,System.Object[])">
 <summary>
 Tries to execute the macro with the specified name.
 </summary>
 <param name="macroName">The name of the macro to execute.</param>
 <returns>true if the macro was successfully executed, otherwise false.</returns>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.Save">
 <summary>
 Saves the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.SaveAs(System.String)">
 <summary>
 Saves the design master to the specified location.
 </summary>
 <param name="newPath">The location to which to save the specification.</param>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.Close(System.Boolean)">
 <summary>
 Closes the design master.
 </summary>
 <param name="save">True to save the design master before closing.</param>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateSpecialVariablesProvider">
 <summary>
 Creates an object which provides access to the special variables stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateConstantsProvider">
 <summary>
 Creates an object which provides access to the constants stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateVariablesProvider">
 <summary>
 Creates an object which provides access to the variables stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateDisplayFilesProvider">
 <summary>
 Creates an object which provides access to the display files stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateMessagesProvider">
 <summary>
 Creates an object which provides access to the messages stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateFormsProvider">
 <summary>
 Creates an object which provides access to the form data stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateNavigationProvider">
 <summary>
 Creates an object which provides access to the navigation data stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateTableBackingStoreProvider">
 <summary>
 Creates an object which provides access to the table backing store data stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateChildSpecificationStoreProvider">
 <summary>
 Creates an object which provides access to the child specification backing store data stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.CreateItemListStoreProvider">
 <summary>
 Creates an object which provides access to the item list backing store data stored in the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.ParseRule(System.String)">
 <summary>
 Parses the specified rule into an instance of <see cref="T:DriveWorks.Rules.IRuleNode" />.
 </summary>
 <param name="ruleText">The rule to be parsed.</param>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.GetFunctions">
 <summary>
 Returns a collection of all functions loaded in this design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.UpdateNamesInRule(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Updates the names in the given rule.
 </summary>
 <param name="ruleText">The rule in which to update names.</param>
 <param name="nameMappings">An dictionary of mappings from old name to new name.</param>
 <returns>The updated rule.</returns>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.GetRuleTokens(System.String)">
 <summary>
 Gets all tokens that makes up the given rule.
 </summary>
 <param name="rule">The rule to retrieve the tokens from.</param>
 <returns>A collection of the rule tokens that makes up the given rule.</returns>
</member>
<member name="P:DriveWorks.ProjectDesignMaster.ProjectState">
 <summary>
 Gets the project state for the project which owns the design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.Close">
 <summary>
 Closes the design master without saving.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDesignMaster.GetValueWithRealType(System.String)">
 <summary>
 Returns a typed object from the string which can then be placed through the TrySetValue method to set
 the correct number format of the cell.
 </summary>
 <param name="value">The value as a string to be parsed.</param>
 <returns>The typed object.</returns>
 <remarks>This is used by the forms dynamic property and constants.</remarks>
</member>
<member name="T:DriveWorks.DocumentEventHandler">
 <summary>
 Represents the method that will handle the event raised when a document is changed.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DocumentEventArgs">
 <summary>
 Provides the data for the event raised when a document is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.DocumentEventArgs.#ctor(DriveWorks.ProjectDocument)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.DocumentEventArgs" /> type.
 </summary>
 <param name="document">The document that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.DocumentEventArgs.Document">
 <summary>
 Gets the document that was changed.
 </summary>
</member>
<member name="T:DriveWorks.ProjectFile">
 <summary>
 Provides low-level project file support.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFile.Load(System.String)">
 <summary>
 Loads the project file at the specified file path.
 </summary>
 <param name="filePath">The fully qualified path to the project file.</param>
 <returns>An instance of the <see cref="T:DriveWorks.ProjectFile" /> type which provides low-level access to the project file.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectFile.LoadFromSnapshot(System.String,System.String)">
 <summary>
 Loads the project file at the specified snapshot path but allows the project to
 behave as though it was loaded from the original file path.
 </summary>
 <param name="originalFilePath">The path to original project file that the autosave is derived from.</param>
 <param name="snapshotPath">The path to the snapshot project file of the original project file.</param>
 <returns>An instance of the <see cref="T:DriveWorks.ProjectFile" /> type which provides low-level access to the project file.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectFile.Create(System.String,System.Xml.Linq.XDocument)">
 <summary>
 Creates a new project file from the given document.
 </summary>
 <param name="filePath">The file path from which the document was opened.</param>
 <param name="document">The main project document.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectFile.LoadAsEmbeddedChild(System.Int32)">
 <summary>
 Returns an embedded project file with the specified identifier.
 </summary>
 <param name="id">The identifier of the desired project file.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectFile.LoadAsEmbeddedChild(System.String,System.Int32)">
 <summary>
 Returns a project file that is loaded from the specified file location. 
 The project file will be embedded into this project file when saved.
 </summary>
 <param name="originalProjectpath">The file path to the external project file to load.</param>
 <param name="id">The identifier to assign the project file.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectFile.Path">
 <summary>
 Gets the path to the project file.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFile.DesignMasterPath">
 <summary>
 Gets the path to the design master associated with the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFile.Version">
 <summary>
 Gets the version specified in the project file.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFile.OriginalVersion">
 <summary>
 Gets the version specified in the project file when it was originally loaded.
 </summary>
</member>
<member name="P:DriveWorks.ProjectFile.HasInternalDesignMaster">
 <summary>
 Gets whether or not there is a design master inside this project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFile.SetChildSpecificationId(System.Int32)">
 <summary>
 This is called during the copy process for specifications to change the storage location of this project file.
 </summary>
 <param name="newChildSpecificationId">The new specification Id that is being assigned to this project (specification).</param>
</member>
<member name="M:DriveWorks.ProjectFile.LoadComponentSet(System.String)">
 <summary>
 Loads an existing component set from the project file given its relationship identifier.
 </summary>
 <param name="rId">The relationship identifier.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectFile.SaveComponentSet(System.String,System.Xml.Linq.XDocument)">
 <summary>
 Saves changes to an existing component set.
 </summary>
 <param name="rId">The relationship identifier which identifies the component to be saved.</param>
 <param name="document">The document which contains the component set data.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectFile.CreateComponentSet(System.Xml.Linq.XDocument)">
 <summary>
 Creates a new component set and returns its relationship identifier.
 </summary>
 <param name="document">The document which contains the component set data.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectFile.GetDocumentPart">
 <summary>
 Gets the package part which contains the document, read the remarks before using this method.
 </summary>
 <returns></returns>
 <remarks>
 The result of this method should not under any circumstances be cached as the object will become invalid
 between saves.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectFile.GetDesignMasterStream">
 <summary>
 Gets a fresh read and write stream for the design master file.
 </summary>
 <returns>A read/write stream, or a null reference if the design master part has not been created yet.</returns>
 <remarks>Do no cache, as the target will change between project saves.</remarks>
</member>
<member name="M:DriveWorks.ProjectFile.GetDesignMasterStream(System.Boolean)">
 <summary>
 Gets a fresh read and write stream for the design master file.
 </summary>
 <returns>A read/write stream, or a null reference if the design master part has not been created, and the create parameter is specified as false.</returns>
 <remarks>Do no cache, as the target will change between project saves.</remarks>
</member>
<member name="M:DriveWorks.ProjectFile.GetComponentTaskStream(System.Boolean)">
 <summary>
 Gets a fresh read and write stream for the component tasks file.
 </summary>
 <returns>A read/write stream, or a null reference if the component tasks part has not been created, and the create parameter is specified as false.</returns>
 <remarks>Do no cache, as the target will change between project saves.</remarks>
</member>
<member name="M:DriveWorks.ProjectFile.UpdateProjectLocation(System.String)">
 <summary>
 Updates the file path of the original location of the project file.
 </summary>
 <param name="newLocation">The new location to save the project file to.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectFile.RemoveComponentTasksOfType(System.String)">
 <summary>
 Removes all component tasks of the given type from the project file.
 </summary>
 <param name="taskTypeName">The full name of the type of the task (in the format: NameSpace.Classname) to remove.</param>
</member>
<member name="M:DriveWorks.ProjectFile.RemoveComponentTaskConditionsOfType(System.String)">
 <summary>
 Removes all component task conditions of the given type from the project file.
 </summary>
 <param name="conditionTypeName">The full name of the type of the task condition (in the format: NameSpace.Classname) to remove.</param>
</member>
<member name="M:DriveWorks.ProjectFile.RemoveSpecificationFlowTasksOfType(System.String)">
 <summary>
 Removes all Specification Flow Tasks of the given type from the project file.
 </summary>
 <param name="typeFullName">The full name of the type (in the format: "NameSpace.ClassName, AssemblyName").</param>
</member>
<member name="M:DriveWorks.ProjectFile.RemoveSpecificationMacroTasksOfType(System.String)">
 <summary>
 Removes all specification macro tasks of the given type from the project file.
 </summary>
 <param name="typeFullName">The full name of the type (in the format: "NameSpace.ClassName, AssemblyName").</param>
</member>
<member name="M:DriveWorks.ProjectFile.RemoveDocumentsOfType(System.String)">
 <summary>
 Removes all Documents of the given type from the project file.
 </summary>
 <param name="typeFullName">The full name of the type (in the format: "NameSpace.ClassName, AssemblyName").</param>
</member>
<member name="M:DriveWorks.ProjectFile.RemoveDataTablesOfType(System.String)">
 <summary>
 Removes all DataTables of the given type from the project file.
 </summary>
 <param name="typeFullName">The full name of the type (in the format: "NameSpace.ClassName, AssemblyName").</param>
</member>
<member name="M:DriveWorks.ProjectFile.RemoveSpecificationFlowConditionsOfType(System.String)">
 <summary>
 Removes all specification flow conditions of the given type from the project file.
 </summary>
 <param name="typeFullName">The full name of the type (in the format: "NameSpace.ClassName, AssemblyName").</param>
</member>
<member name="M:DriveWorks.ProjectFile.RemoveSpecificationMacroConditionsOfType(System.String)">
 <summary>
 Removes all specification macro conditions of the given type from the project file.
 </summary>
 <param name="typeFullName">The full name of the type (in the format: "NameSpace.ClassName, AssemblyName").</param>
</member>
<member name="M:DriveWorks.ProjectFile.GetAllSpecificationFlowTaskTypes">
 <summary>
 Returns a list of the full type names of all Specification Flow Tasks in this project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFile.GetAllSpecificationMacroTaskTypes">
 <summary>
 Returns a list of the full type names of all specification macro tasks in this project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFile.GetAllSpecificationFlowConditionTypes">
 <summary>
 Returns a list of the full type names of all specification flow conditions in this project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFile.GetAllSpecificationMacroConditionTypes">
 <summary>
 Returns a list of the full type names of all specification macro conditions in this project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFile.GetAllComponentTaskTypes">
 <summary>
 Returns a collection of the full type names of all Component Tasks in the project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFile.GetAllComponentTaskConditionTypes">
 <summary>
 Returns a collection of the full type names of all Component Task Conditions in the project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFile.GetAllDocumentTypes">
 <summary>
 Returns a list of the full type names of all Document types in the project file.
 </summary>
</member>
<member name="M:DriveWorks.ProjectFile.GetDataTableTypes">
 <summary>
 Returns a list of the full type names of all DataTable types in the project file.
 </summary>
</member>
<member name="T:DriveWorks.GroupCaptureDataResolver">
 <summary>
 Implements a capture data resolver which resolves captured components from the group.
 </summary>
</member>
<member name="M:DriveWorks.GroupCaptureDataResolver.#ctor(DriveWorks.Group)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.GroupCaptureDataResolver" /> type for the specified group.
 </summary>
 <param name="group">The group to use to resolve components.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCaptureDataResolver.ResolveCapturedComponent(System.Guid)">
 <summary>
 Gets the captured component data for the specified component.
 </summary>
 <param name="componentId">The unique identifier of the captured component to retrieve.</param>
 <returns>The specified captured component, or a null reference (Nothing in Visual Basic) if the component is not located.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.GroupCapturedComponents">
 <summary>
 Provides accessors for a group's capture information.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.CreateImportManager">
 <summary>
 Creates and returns a new capture import manager which can be used to import
 components from another source.
 </summary>
 <returns>An instance of a capture import manager.</returns>
 <remarks>
 </remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.GetComponents">
 <summary>
 Gets information about all of the captured components in the group.
 </summary>
 <returns>An array containing one instance of the <see cref="T:DriveWorks.Components.CapturedComponentInfo" /> class for each captured component.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.GetComponents(System.Boolean)">
 <summary>
 Gets information about all of the captured components in the group.
 </summary>
 <param name="includeDeletedComponents">True to include components which have been deleted in the results.</param>
 <returns>An array containing one instance of the <see cref="T:DriveWorks.Components.CapturedComponentInfo" /> class for each captured component.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.GetComponent(System.Guid)">
 <summary>
 Gets the captured component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component.</param>
 <returns>The component with the specified identifier if it is registered, otherwise a null reference.</returns>
 <exception cref="T:System.NotSupportedException">The component type is not supported.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.GetComponent(System.String)">
 <summary>
 Gets the captured component with the specified file path.
 </summary>
 <param name="componentPath">The fully qualified file path to the component.</param>
 <returns>The component with the specified file path if it is registered, otherwise a null reference.</returns>
 <exception cref="T:System.NotSupportedException">The component type is not supported.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.IsCaptured(System.String)">
 <summary>
 Determines whether the specified file is registered as a captured component in the group.
 </summary>
 <param name="fileName">The fully-qualified path to the component file.</param>
 <returns>True if the component is captured, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.SaveComponent(DriveWorks.Components.CapturedComponent)">
 <summary>
 Saves a new or existing component to the group.
 </summary>
 <param name="component">The component to save to the group.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.DeleteComponent(System.Guid)">
 <summary>
 Uncaptures the specified component.
 </summary>
 <param name="componentId">The unique identifier of the component to delete.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.CreateComponent``1(System.String)">
 <summary>
 Creates and returns a new component of the specified type without registering it with the group.
 </summary>
 <typeparam name="T">The type of component to create.</typeparam>
 <param name="path">The path to the file represented by the component.</param>
 <returns>A new component of the specified type.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.CreateComponent(System.Type,System.String)">
 <summary>
 Creates and returns a new component of the specified type without registering it with the group.
 </summary>
 <param name="type">The type of component to create.</param>
 <param name="path">The path to the file represented by the component.</param>
 <returns>An instance of type derived from <see cref="T:DriveWorks.Components.CapturedComponent" /> which represents a component of the specified type</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.ChangeComponentPath(System.String,System.String)">
 <summary>
 Updates the path of the specified component.
 </summary>
 <param name="originalComponentPath">The original path to the component to update.</param>
 <param name="updatedComponentPath">The new path to the component.</param>
 <returns>True if the component was successfully rereferenced.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.ChangeComponentPath(System.Guid,System.String)">
 <summary>
 Updates the path of the specified component.
 </summary>
 <param name="originalComponentId">The unique identifier of the component to update.</param>
 <param name="updatedComponentPath">The new path to the component.</param>
 <returns>True if the component was successfully rereferenced.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.GetStatus(System.Guid)">
 <summary>
 Gets the status of a component in the group.
 </summary>
 <param name="componentId">The component identifier for which to get details.</param>
 <returns></returns>
 <remarks>
 <para>
 A valid captured component status instance is always returned, even if a component with the 
 specified identifier does not exist in the group.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.GetStatus(System.String)">
 <summary>
 Gets the status of a component in the group.
 </summary>
 <param name="componentPath">The component path for which to get details.</param>
 <returns></returns>
 <remarks>
 <para>
 A valid captured component status instance is always returned, even if a component with the 
 specified path does not exist in the group.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.RemapComponents(System.String,System.String)">
 <summary>
 Attempts to change all captured components and their references that match <paramref name="oldBasePath"/> to use the new base path in <paramref name="newBasePath"/>.
 </summary>
 <param name="oldBasePath">The base path from which all changes must match.</param>
 <param name="newBasePath">The new base path to give all matching components.</param>
 <returns>A mapping of all old paths to new paths.</returns>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.GetComponentData(System.Guid)">
 <summary>
 Gets the captured component data for the component with the specified identifier.
 </summary>
 <param name="componentId">The unique identifier of the component.</param>
 <returns>The component data for the component with the specified identifier if it is registered, otherwise a null reference.</returns>
 <exception cref="T:System.NotSupportedException">The component type is not supported.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.GetComponentData(System.String)">
 <summary>
 Gets the captured component data for the component with the specified file path.
 </summary>
 <param name="componentPath">The fully qualified file path to the component.</param>
 <returns>The component data for the component with the specified file path if it is registered, otherwise a null reference.</returns>
 <exception cref="T:System.NotSupportedException">The component type is not supported.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.CreateComponentData(System.String,System.String)">
 <summary>
 Creates and returns a new component data without registering it with the group.
 </summary>
 <param name="path">The path to the file represented by the component.</param>
 <param name="typeName">The type name of the component to create.</param>
 <returns>An instance of type derived from <see cref="T:DriveWorks.Components.CapturedComponent" /> which represents a component of the specified type</returns>
 <remarks>
 This method exists primarily to support the DriveWorksXpress migration process.
 </remarks>
</member>
<member name="M:DriveWorks.GroupCapturedComponents.SaveComponentData(DriveWorks.Components.Data.CapturedComponentData)">
 <summary>
 Saves a new component to the group, if the component already exists, it is saved as a new major revision.
 </summary>
 <param name="componentData">The component data to save to the group.</param>
 <remarks>
 This method exists primarily to support the DriveWorksXpress migration process.
 </remarks>
</member>
<member name="T:DriveWorks.GroupSecurity">
 <summary>
 Provides accessors for a group's security information.
 </summary>
</member>
<member name="E:DriveWorks.GroupSecurity.TeamCreated">
 <summary>
 Raised when a team is created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.GroupSecurity.TeamUpdated">
 <summary>
 Raised when a team is successfully updated.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.GroupSecurity.TeamDeleted">
 <summary>
 Raised when a team is successfully deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.GroupSecurity.UserCreated">
 <summary>
 Raised when a user is created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.GroupSecurity.UserUpdated">
 <summary>
 Raised when a user is successfully updated.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.GroupSecurity.UserDeleted">
 <summary>
 Raised when a user is successfully deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.CreateTeam(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a new team with the specified information.
 </summary>
 <param name="teamName">The name of the team.</param>
 <param name="displayName">The display name of the team.</param>
 <param name="canEditAllSpecificatons">Whether or not the team can edit all specifications.</param>
 <param name="editGroupSecurity">Whether or not the team can edit group security.</param>
 <param name="isAllowedCapture">Whether or not the team can capture components.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Security.TeamDetails" /> type representing the newly created team.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.CreateTeam(System.Guid,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a new team with the specified information.
 </summary>
 <param name="teamId">The Id to give the team.</param>
 <param name="teamName">The name of the team.</param>
 <param name="displayName">The display name of the team.</param>
 <param name="canEditAllSpecificatons">Whether or not the team can edit all specifications.</param>
 <param name="editGroupSecurity">Whether or not the team can edit group security.</param>
 <param name="isAllowedCapture">Whether or not the team can capture components.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Security.TeamDetails" /> type representing the newly created team.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.TryUpdateTeam(DriveWorks.Security.TeamDetails)">
 <summary>
 Updates the team with the specified details.
 </summary>
 <param name="teamDetails">The changed team details.</param>
 <returns>True if the team was successfully found and updated, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.TryGetTeam(System.Guid,DriveWorks.Security.TeamDetails@)">
 <summary>
 Gets the specified team.
 </summary>
 <param name="teamId">The unique identifier of the team to retrieve.</param>
 <param name="teamDetails">A reference to the variable which will receive the team details.</param>
 <returns>True if the team was located and returns, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.TryGetTeam(System.String,DriveWorks.Security.TeamDetails@)">
 <summary>
 Gets the named team.
 </summary>
 <param name="teamName">The name of the team to retrieve.</param>
 <param name="teamDetails">A reference to the variable which will receive the team details.</param>
 <returns>True if the team was located and returns, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.TryDeleteTeam(System.Guid)">
 <summary>
 Deletes the named team.
 </summary>
 <param name="teamId">The unique identifier of the team to delete.</param>
 <returns>True if the team was successfully found and deleted, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.GetTeams">
 <summary>
 Gets information about all registered teams.
 </summary>
 <returns>An array containing an instance of the <see cref="T:DriveWorks.Security.TeamDetails" /> type for each registered team.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.GetTeamsForUser(DriveWorks.Security.UserDetails)">
 <summary>
 Gets all the teams to which the given user belongs.
 </summary>
 <param name="user">The user to check.</param>
 <returns>An array of teams.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.GetTeamsForUser(System.Guid)">
 <summary>
 Gets all the teams to which the given user belongs.
 </summary>
 <param name="userId">The unique identifier of the user to check.</param>
 <returns>An array of teams.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.GetUsersInTeam(DriveWorks.Security.TeamDetails)">
 <summary>
 Gets all the users that belong to the specified team.
 </summary>
 <param name="team">The team to check.</param>
 <returns>An array of users.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.GetUsersInTeam(System.Guid)">
 <summary>
 Gets all the users that belong to the specified team.
 </summary>
 <param name="teamId">The unique identifier of the team to check.</param>
 <returns>An array of users.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.AddUserToTeam(System.String,System.String)">
 <summary>
 Adds the specified user to the given team.
 </summary>
 <param name="teamName">The name of the team to which to add the user.</param>
 <param name="loginName">The login name of the user to add to the team.</param>
 <returns>True if both the user and the team were found, and the user was added to the team.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.AddUserToTeam(System.Guid,System.Guid)">
 <summary>
 Adds the specified user to the given team.
 </summary>
 <param name="teamId">The unique identifier of the team to which to add the user.</param>
 <param name="userId">The unique identifier of the user to add to the team.</param>
 <returns>True if both the user and the team were found, and the user was added to the team.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.RemoveUserFromTeam(System.String,System.String)">
 <summary>
 Removes the specified user from the given team.
 </summary>
 <param name="teamName">The name of the team from which to remove the user.</param>
 <param name="loginName">The login name of the user to remove from the team.</param>
 <returns>True if both the user and the team were found, and the user was removed from the team.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.RemoveUserFromTeam(System.Guid,System.Guid)">
 <summary>
 Removes the specified user from the given team.
 </summary>
 <param name="teamId">The unique identifier of the team from which to remove the user.</param>
 <param name="userId">The unique identifier of the user to remove from the team.</param>
 <returns>True if both the user and the team were found, and the user was removed from the team.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.GetProjectPermissionsForTeam(System.String)">
 <summary>
 Gets the list of project permissions for the specified team.
 </summary>
 <param name="teamName">The name of the team.</param>
 <returns>An array of instances of the <see cref="T:DriveWorks.Security.TeamProjectPermission" /> type for the project permissions.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.GetProjectPermissionsForTeam(System.Guid)">
 <summary>
 Gets the list of project permissions for the specified team.
 </summary>
 <param name="teamId">The unique identifier of the team.</param>
 <returns>An array of instances of the <see cref="T:DriveWorks.Security.TeamProjectPermission" /> type for the project permissions.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.TryAddProjectPermissionToTeam(System.String,System.String,System.Guid)">
 <summary>
 Adds the specified project to the list of projects to which users in the given team have access.
 </summary>
 <param name="teamName">The name of the team to modify.</param>
 <param name="projectName">The name of the project to which to grant access.</param>
 <param name="permissionId">The unique identifier of the permission.</param>
 <returns>True if both the team and the project were found, and the project permission list was updated successfully, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.TryAddProjectPermissionToTeam(System.Guid,System.Guid,System.Guid)">
 <summary>
 Adds the specified project to the list of projects to which users in the given team have access.
 </summary>
 <param name="teamId">The unique identifier of the team to modify.</param>
 <param name="projectId">The unique identifier of the project to which to grant access.</param>
 <param name="permissionId">The unique identifier of the permission.</param>
 <returns>True if both the team and the project were found, and the project permission list was updated successfully, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.TryRemoveProjectPermissionFromTeam(System.Guid,System.Guid,System.Guid)">
 <summary>
 Removes the specified project from the list of projects to which users in the given team have access.
 </summary>
 <param name="teamId">The unique identifier of the team to modify.</param>
 <param name="projectId">The unique identifier of the project from which to remove access.</param>
 <param name="permissionId">The unique identifier of the permission.</param>
 <returns>True if both the team and the project were found, and the project permission list was updated successfully, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.TryRemoveProjectPermissionFromTeam(System.String,System.String,System.Guid)">
 <summary>
 Removes the specified project from the list of projects to which users in the given team have access.
 </summary>
 <param name="teamName">The name of the team to modify.</param>
 <param name="projectName">The name of the project from which to remove access.</param>
 <param name="permissionId">The unique identifier of the permission.</param>
 <returns>True if both the team and the project were found, and the project permission list was updated successfully, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.ClearProjectPermissionsForTeam(System.String)">
 <summary>
 Clears the list of allowed projects for the specified team.
 </summary>
 <param name="teamName">The name of the team to operate on.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.ClearProjectPermissionsForTeam(System.Guid)">
 <summary>
 Clears the list of allowed projects for the specified team.
 </summary>
 <param name="teamId">The unique identifier of the team to operate on.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSecurity.GetTeamGroupTablePermissionsForTeam(System.Guid)">
 <summary>
 Returns a collection permissions that the specified team has for group tables.
 </summary>
 <param name="teamId">The unique identifier of the team to get the permissions for.</param>
</member>
<member name="M:DriveWorks.GroupSecurity.GetTeamGroupTablePermissionsForGroupTable(System.Guid)">
 <summary>
 Returns a collection group data table permissions that the specified group data table has.
 </summary>
 <param name="groupTableId">The unique identifier of the group data table to get the permissions for.</param>
</member>
<member name="M:DriveWorks.GroupSecurity.GetTeamGroupTablePermissionForGroupTable(System.Guid,System.Guid)">
 <summary>
 Returns the effective permission that a user has for the specified group data table.
 </summary>
 <param name="groupTableId">The identifier of the group data table to get the permissions of.</param>
 <param name="userId">The identifier of the user to get the permissions of.</param>
</member>
<member name="M:DriveWorks.GroupSecurity.GetTeamGroupTablePermissionsForUser(System.Guid)">
 <summary>
 Returns a collection of group data table permissions that the specified user has.
 </summary>
 <param name="userId">The unique identifier of the user to fetch the permissions for.</param>
</member>
<member name="M:DriveWorks.GroupSecurity.SetGroupTablePermissionForTeam(System.Guid,System.Guid,DriveWorks.Security.GroupTablePermission)">
 <summary>
 Sets the specified permissions for the specified team and group.
 </summary>
 <param name="teamId">The unique identifier of the team to set the permissions for.</param>
 <param name="groupTableId">The unique identifier of the group table to set the permissions of.</param>
 <param name="permission">The permissions to set for the specified team and group data table.</param>
</member>
<member name="M:DriveWorks.GroupSecurity.TrySetUserPassword(System.String,System.String)">
 <summary>
 Updates an existing user with the specified information.
 </summary>
 <param name="loginName">The login name of the user.</param>
 <param name="newPassword">The new password to apply to the user.</param>
 <returns>True if the user is found and updated, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.CreateUser(System.String,System.Boolean,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Creates a new user with the specified information.
 </summary>
 <param name="loginName">The login name of the user.</param>
 <param name="emailAddress">The email address of the user.</param>
 <param name="password">The password to give to the user.</param>
 <param name="displayName">The display name for the user.</param>
 <param name="isTeamLeader">Specifies if the user is a team leader.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Security.UserDetails" /> structure containing information about the newly created user.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.CreateUser(System.Guid,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Creates a new user with the specified information.
 </summary>
 <param name="userId">The user id.</param>
 <param name="loginName">The login name of the user.</param>
 <param name="emailAddress">The email address of the user.</param>
 <param name="passwordHash">The hashed password to give to the user this value will be stored.</param>
 <param name="displayName">The display name for the user.</param>
 <param name="isTeamLeader">Specifies if the user is a team leader.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Security.UserDetails" /> structure containing information about the newly created user.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.TryUpdateUser(DriveWorks.Security.UserDetails)">
 <summary>
 Updates an existing user with the specified information.
 </summary>
 <param name="userDetails">The information which describes the user to be updated.</param>
 <returns>True if the user is found and updated, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.TryDeleteUser(System.String)">
 <summary>
 Deletes the user with the specified login name.
 </summary>
 <param name="loginName">The login name of the user to be deleted.</param>
 <returns>True if the user was found and deleted, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.TryGetUser(System.String,DriveWorks.Security.UserDetails@)">
 <summary>
 Gets information about the user with the specified login name.
 </summary>
 <param name="loginName">The login name of the user to retrieve.</param>
 <param name="userDetails">A variable which will receive a new instance of the <see cref="T:DriveWorks.Security.UserDetails" /> type if successful.</param>
 <returns>True if the user was found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.GetUserById(System.Guid)">
 <summary>
 Gets a users details from the given ID.
 </summary>
 <param name="userId">The unique identifier of the group to get.</param>
 <returns>The details for the specified user if it exists, otherwise a null reference.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.GetUsers">
 <summary>
 Gets information about all registered users.
 </summary>
 <returns>An array containing an instance of the <see cref="T:DriveWorks.Security.UserDetails" /> type for each registered user.</returns>
</member>
<member name="M:DriveWorks.GroupSecurity.GetUserToken(System.Guid)">
 <summary>
 Gets the matching user's login token.
 </summary>
 <param name="userId">The id of the user to get the token of.</param>
</member>
<member name="T:DriveWorks.GroupSpecifications">
 <summary>
 Provides access to the specifications in a DriveWorks group.
 </summary>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecification(System.Int32)">
 <summary>
 Gets details about a specification with the specified identifier.
 </summary>
 <param name="id">The unique numerical identifier associated with the specification to retrieve.</param>
 <returns>The specification details.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">No specification with the given identifier could be found.</exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecification(System.String)">
 <summary>
 Gets details about a specification with the specified name.
 </summary>
 <param name="name">The name associated with the specification to retrieve.</param>
 <returns>The specification details.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">No specification with the given name could be found.</exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationDocuments(System.Int32)">
 <summary>
 Gets a specification's documents.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get documents.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationReports(System.Int32)">
 <summary>
 Gets a specification's reports.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationComponents(System.Int32)">
 <summary>
 Gets released components on which the specification has a dependency.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationComponents(System.Int32,System.Boolean)">
 <summary>
 Gets released components on which the specification has a dependency.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
 <param name="includeChildSpecifications">True to include components generated by child specifications.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationsByModifiedDate(System.Boolean)">
 <summary>
 Gets specifications in chronological order.
 </summary>
 <param name="descending">True to retrieve specifications in reverse chronological order.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationsByModifiedDate(System.Boolean,System.Boolean)">
 <summary>
 Gets specifications in chronological order.
 </summary>
 <param name="descending">True to retrieve specifications in reverse chronological order.</param>
 <param name="includeArchived">True to also retrieve archived specifications.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationsInStateTypeByModifiedDate(DriveWorks.Specification.StateType,System.Boolean)">
 <summary>
 Gets an enumerator which can be used to retrieve specifications in a given type of state in chronological order.
 </summary>
 <param name="stateType">The type of state against which to filter the returned specifications.</param>
 <param name="descending">True to retrieve specifications in reverse chronological order.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationTask(System.Guid)">
 <summary>
 Gets the specification task with the specified id.
 </summary>
 <param name="taskId">The id of the specification task to retrieve.</param>
 <returns>The specification task for the specified id.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationTasks(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets all of the specification tasks of the given type matching the specified criteria.
 </summary>
 <param name="taskType">The type of task to retrieve.</param>
 <param name="descending">True to retrieve tasks in reverse chronological order of when their parent specifications were created.</param>
 <param name="includeComplete">True to include complete tasks, otherwise false.</param>
 <param name="includeIncomplete">True to include incomplete tasks, otherwise false.</param>
 <param name="includeFailed">True to include failed tasks, otherwise false.</param>
 <returns>Returns an enumerable of specification tasks that match the specified criteria.</returns>
 <remarks>This will return specification tasks that have no matching registered specification.</remarks>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetTasksForSpecification(System.Int32)">
 <summary>
 Gets all types of tasks for a specification.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
 <returns>An array of all tasks, for the specification.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetTasksForSpecification(System.Int32,System.String)">
 <summary>
 Gets all tasks for a specification.
 </summary>
 <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
 <param name="taskType">The type of task to retrieve.</param>
 <returns>An array of tasks, matching the specified type, for the specification.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.GetSpecificationTasks(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets all of the specification tasks of the given type matching the specified criteria.
 </summary>
 <param name="taskType">The type of task to retrieve/</param>
 <param name="descending">True to retrieve tasks in reverse chronological order of when their parent specifications were created.</param>
 <param name="includeComplete">True to include complete tasks, otherwise false.</param>
 <param name="includeInComplete">True to include incomplete tasks, otherwise false.</param>
 <param name="includeFailed">True to include failed tasks, otherwise false.</param>
 <param name="includeMissingSpecifications">True to include tasks that have no registered specification information.</param>
 <returns>Returns an enumerable of specification tasks that match the specified criteria.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryGetSpecificationProperties(DriveWorks.Specification.SpecificationDetails,System.Collections.Generic.IDictionary{System.String,System.String}@)">
 <summary>
 Tries to get all of the specification properties for the given specification.
 </summary>
 <param name="specificationDetails">The details of the specification to retrieve properties for.</param>
 <param name="specificationProperties">The properties for this specification.</param>
 <returns>An enum that represents whether the properties were retrieved successfully. If not,
 the enum will give the reason for the failure.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.DeleteSpecificationTask(System.Guid)">
 <summary>
 Deletes the specification task with the specified unique identifier.
 </summary>
 <param name="taskId">The unique identifier of the task to delete.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.MarkSpecificationTaskCompleted(System.Guid,System.Boolean)">
 <summary>
 Attempts to mark the specified specification task as being complete/incomplete.
 </summary>
 <param name="taskId">The unique identifier of the task to mark.</param>
 <param name="completed">True if the task is completed, otherwise false.</param>
 <returns></returns>
 <remarks>This will reset the fail count of the task.</remarks>
</member>
<member name="M:DriveWorks.GroupSpecifications.MarkSpecificationTaskFailed(System.Guid,System.Int32)">
 <summary>
 Attempts to mark the specified specification task as having failed.
 </summary>
 <param name="taskId">The unique identifier of the task to mark.</param>
 <param name="failedCount">The number of times the task has failed.</param>
 <returns></returns>
 <remarks>This will mark the task as not being completed.</remarks>
</member>
<member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationTask(DriveWorks.Specification.SpecificationTaskDetails)">
 <summary>
 Updates the data in the specified specification task.
 </summary>
 <param name="task">The task to update.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationTaskTags(System.Guid,System.String[])">
 <summary>
 Updates the tags for the specified specification task.
 </summary>
 <param name="taskId">The unique identifier of the task to update.</param>
 <param name="newTags">The new tags to associate with the task.</param>
 <returns>True if the tags were successfully updated, otherwise False.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.RegisterSpecificationTask(System.Int32,System.String,System.Byte[])">
 <summary>
 Registers a deferred specification task of the specified type.
 </summary>
 <param name="specificationId">The unique identifier of the specification for which to register the task.</param>
 <param name="type">The name of the provider which understands the task.</param>
 <param name="data">The task's serialized data.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.RegisterSpecificationTask(System.Int32,System.String,System.Byte[],System.String[])">
 <summary>
 Registers a deferred specification task of the specified type.
 </summary>
 <param name="specificationId">The unique identifier of the specification for which to register the task.</param>
 <param name="type">The name of the provider which understands the task.</param>
 <param name="data">The task's serialized data.</param>
 <param name="tags">The tags to associate with the task.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.Exists(System.String)">
 <summary>
 Determines whether a specification with the specified name already exists.
 </summary>
 <param name="specificationName">The name of the specification to seach for.</param>
 <returns>True if the given specification name is already registered, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.CreateReportWriter(System.Int32,System.String,DriveWorks.Reporting.ReportingLevel)">
 <summary>
 Creates a new report writer which will write a report for the given specification.
 </summary>
 <param name="specificationId">The identifier of the specification for which to write the report.</param>
 <param name="title">The title of the report.</param>
 <param name="level">The maximum entry level to write to the report.</param>
 <returns>A report writer.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.DeleteSpecificationDocument(System.Guid)">
 <summary>
 Deletes the specification document with the specified identifier.
 </summary>
 <param name="documentId">The document to delete.</param>
</member>
<member name="M:DriveWorks.GroupSpecifications.DeleteSpecificationReport(System.Guid)">
 <summary>
 Deletes the specification report with the specified identifier.
 </summary>
 <param name="reportId">The report to delete.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">The report does not exist.</exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.DeleteSpecification(System.Int32)">
 <summary>
 Deletes the specification with the specified identifier.
 </summary>
 <param name="specificationId">The specification to delete.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">The specification does not exist.</exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.DeleteSpecification(DriveWorks.Specification.SpecificationDetails)">
 <summary>
 Deletes the specification with the specified identifier.
 </summary>
 <param name="specificationDetails">The specification to delete.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">The specification does not exist.</exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryGetSpecification(System.Int32)">
 <summary>
 Tries to get details about a specification with the specified identifier.
 </summary>
 <param name="id">The unique numerical identifier associated with the specification to retrieve.</param>
 <returns>The specification details or a null reference if the specification doesn't exist.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryGetSpecification(System.String)">
 <summary>
 Tries to get details about a specification with the specified name.
 </summary>
 <param name="name">The name associated with the specification to retrieve.</param>
 <returns>The specification details or a null reference if the specification doesn't exist.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryDeleteSpecificationReport(System.Guid)">
 <summary>
 Tries to delete a specification report.
 </summary>
 <param name="reportId">The report to delete.</param>
 <returns>True if the report was found and deleted, false if it didn't exist.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryDeleteSpecification(DriveWorks.Specification.SpecificationDetails)">
 <summary>
 Removes the given specification from the group.
 </summary>
 <param name="specificationDetails">The details of the specification to delete.</param>
 <returns>True if the specification existed and was removed, false if it doesn't exist.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryDeleteSpecification(System.Int32)">
 <summary>
 Removes the given specification from the group.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification to delete.</param>
 <returns>True if the specification existed and was removed, false if it doesn't exist.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryDeleteEmbeddedSpecificationDependencies(System.Int32)">
 <summary>
 Removes the component dependencies from the group, for the given embedded specification.
 </summary>
 <param name="specificationId">The unique numerical identifier of the specification to remove dependencies for.</param>
 <returns>True if the specification had dependencies and they were removed, false if there were no dependencies to remove.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryUpdateSpecificationDirectory(System.Int32,System.String)">
 <summary>
 Attempts to update the specifications location.
 </summary>
 <param name="specificationId">The identification of the specification to update.</param>
 <param name="newPath">The new specification directory.</param>
 <returns>True if the specification directory was successfully updated.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryUpdateSpecificationDocumentDirectory(System.Int32,System.Guid,System.String)">
 <summary>
 Attempts to update a specification document location.
 </summary>
 <param name="specificationId">The identification of the specification containing the document.</param>
 <param name="documentId">The identification of the specification document to update.</param>
 <param name="newPath">The new specification directory.</param>
 <returns>True if the specification directory was successfully updated.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.ImportSpecifications(DriveWorks.Group)">
 <summary>
 Imports all the specifications from the source group.
 </summary>
 <param name="sourceGroup">The group to export specifications from.</param>
 <exception cref="T:System.InvalidOperationException">
 Thrown when the current group contains specifications.
 </exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.ImportSpecifications(DriveWorks.Group,System.Boolean,System.Boolean,System.Boolean,System.Func{System.String,System.String},System.Action{System.String})">
 <summary>
 Imports all the specifications from the source group.
 </summary>
 <param name="sourceGroup">The group to export specifications from.</param>
 <param name="copyReports">True to copy all reports for all specifications.</param>
 <param name="matchTeamsBasedOnName">True to match teams based on name rather than id.</param>
 <param name="copyTasks">True to copy all specification tasks (like emails).</param>
 <param name="pathTranslator">Function that will take a path and convert it to the new location. This will be used to change the location of specifications and their documents.</param>
 <param name="reporter">Method that can be called to during the import to tell a human what is happening currently.</param>
 <exception cref="T:System.InvalidOperationException">
 Thrown when the current group contains specifications.
 </exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.ResetSpecificationIdPool">
 <summary>
 Clears the specification Id pool for this group.
 </summary>
 <exception cref="T:System.UnauthorizedAccessException">Thrown when the current user is working in global specification id pool and does not have the edit all specifications permission.</exception>
 <exception cref="T:System.InvalidOperationException">Thrown when there are current specifications in the group.</exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationArchivedStatus(System.String,System.Boolean)">
 <summary>
 Archives or unarchives a specification. The specification must exist, and must not be running.
 </summary>
 <param name="specificationName">The name of the specification to update.</param>
 <param name="isArchived">The new value of the archived flag.</param>
 <remarks></remarks>
 <exception cref="T:System.InvalidOperationException">The specification is running, the <see cref="M:DriveWorks.Specification.SpecificationContext.TryUpdateSpecificationArchivedStatus(System.Boolean)" /> method should be used for running specifications.</exception>
 <exception cref="T:DriveWorks.ItemNotFoundException">The given specification identifier is for a specification which doesn't exist.</exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationArchivedStatus(System.Int32,System.Boolean)">
 <summary>
 Archives or unarchives a specification. The specification must exist, and must not be running.
 </summary>
 <param name="specificationId">The unique identifier of the specification to update.</param>
 <param name="isArchived">The new value of the archived flag.</param>
 <remarks></remarks>
 <exception cref="T:System.InvalidOperationException">The specification is running, the <see cref="M:DriveWorks.Specification.SpecificationContext.TryUpdateSpecificationArchivedStatus(System.Boolean)" /> method should be used for running specifications.</exception>
 <exception cref="T:DriveWorks.ItemNotFoundException">The given specification identifier is for a specification which doesn't exist.</exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationTags(System.Int32,System.String[])">
 <summary>
 Updates the tags for the specified specification.
 </summary>
 <param name="specificationId">The Id of the specification to update.</param>
 <param name="newTags">The new tags to associate with the specification.</param>
 <returns>True if the tags were successfully updated, otherwise False.</returns>
</member>
<member name="M:DriveWorks.GroupSpecifications.ReserveSpecificationId">
 <summary>
 Reserves a identifier for a new specification.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSpecifications.RegisterSpecification(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.Guid,System.String,System.String,System.Guid,System.String,DriveWorks.Specification.StateType,System.Boolean,System.Boolean,System.Boolean,System.String,System.String[])">
 <summary>
 Registers a specification with the group.
 </summary>
 <param name="id">The unique identifier of the specification.</param>
 <param name="parentId">The optional unique identifier of the parent specification, or a null reference (Nothing in Visual Basic) if the specification is not a child specification.</param>
 <param name="name">The name of the specification.</param>
 <param name="directory">The path to the specification directory.</param>
 <param name="metadataDirectory">The path to the specification metadata directory, relative to the specification directory.</param>    
 <param name="projectId">The unique identifier of the project from which the specification was created.</param>
 <param name="originalProjectName">The name of the project from which the specification was created.</param>
 <param name="originalProjectExtension">The file extension of the project from which the specification was created.</param>
 <param name="stateId">The unique identifier of the specification-flow state of the specification.</param>
 <param name="stateName">The display name of the specification-flow state of the specification.</param>
 <param name="isCreatorPermitted">Whether the creator is permitted to view the specification.</param>
 <param name="isOwnerPermitted">Whether the owner is permitted to view the specification.</param>
 <param name="isUniversal">Whether everyone is permitted to view the specification.</param>
 <param name="specificationProjectExtension">The file extension of the specification project.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Specification.SpecificationDetails" /> which contains the registration details for the specification.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSpecifications.RegisterSpecificationDocument(System.Int32,System.String,System.Boolean)">
 <summary>
 Registers a new specification document with an existing specification.
 </summary>
 <param name="specificationId">The id of the specification against which to register the document.</param>
 <param name="documentPath">The fully qualified path to the document.</param>
 <param name="isHidden">True if the document is filtered from the the normal end-user view.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Specification.SpecificationDocumentDetails" /> class containing information about the document.</returns>
 <exception cref="T:System.ArgumentException">The <paramref name="documentPath" /> is empty, or too long.</exception>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryUpdateSpecification(DriveWorks.Specification.SpecificationDetails,System.Nullable{System.Guid})">
 <summary>
 Updates a specification's registration details.
 </summary>
 <param name="specificationDetails">The updated registration details for the specification.</param>
 <param name="editorOverride">If specified, used in place of the current user id when setting the last editor of the specification.</param>
 <returns>True if the specification was successfully found and updated, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSpecifications.TryUpdateSpecificationTeams(System.Int32,System.Guid[])">
 <summary>
 Attempts to update the list of teams that have access to the given specification.
 </summary>
 <param name="specificationId">The unique identifier of the specification of which to change the teams.</param>
 <param name="teamIds">The unique identifiers of the teams that will be able to access the specifcation.</param>
 <returns>True if the update was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GroupSpecifications.SetPropertiesForSpecification(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Sets properties for a particular specification to the group.
 </summary>
 <param name="specificationId">The Id of the specification for which to store properties.</param>
 <param name="properties">The properties to store for the specification.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.MessageChangedEventHandler">
 <summary>
 Represents the method that will handle the event raised when a message is changed.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.MessageEventArgs">
 <summary>
 Provides the data for the event raised when a message is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.MessageEventArgs.#ctor(DriveWorks.ProjectMessage)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.MessageEventArgs" /> type.
 </summary>
 <param name="message">The message that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.MessageEventArgs.Message">
 <summary>
 Gets the message that was changed.
 </summary>
</member>
<member name="T:DriveWorks.ProjectMetadata">
 <summary>
 Provides access to the data stored in the project metadata file.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectMetadata.GetSection(System.String,System.Boolean)">
 <summary>
 Gets the specified section from the project metadata file.
 </summary>
 <param name="sectionName">The name of the section to get from the project metadata file.</param>
 <param name="create">Creates the metadata file if it doesn't already exist.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectMetadataSection">
 <summary>
 Provides access to the data in a section store in the project metadata file.
 </summary>
</member>
<member name="E:DriveWorks.ProjectMetadataSection.DataElementUpdated">
 <summary>
 Raised when <see cref="P:DriveWorks.ProjectMetadataSection.DataElement"/> has been set to a new <see cref="T:System.Xml.Linq.XElement"/>.
 </summary>
</member>
<member name="P:DriveWorks.ProjectMetadataSection.Name">
 <summary>
 Gets the name of the section.
 </summary>
</member>
<member name="P:DriveWorks.ProjectMetadataSection.DataElement">
 <summary>
 Gets/sets the data element contained by the section.
 </summary>
</member>
<member name="T:DriveWorks.ProjectSpecialVariables">
 <summary>
 Provides access to a project's special variables.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentStateId">
 <summary>
 Gets the unique identifier of the current state.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentStateName">
 <summary>
 Gets the name of the current state.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.ProjectName">
 <summary>
 Gets the name of the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationName">
 <summary>
 Gets the calculated name of the specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationNameRule">
 <summary>
 Gets/sets the rule used to determine the specification name.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationNameSpecialVariable">
 <summary>
 Gets the special varaible used to determine the specification name.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationPath">
 <summary>
 Gets the calculated path of the specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationPathRule">
 <summary>
 Gets/sets the rule used to determine the specification path.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationPathSpecialVariable">
 <summary>
 Gets the special varaible used to determine the specification Path.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentUserName">
 <summary>
 Gets the name of the user performing the specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentUserDisplayName">
 <summary>
 Gets the display name of the user performing the specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentUserEmailAddress">
 <summary>
 Gets the e-mail address of the user performing the specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentUserPassword">
 <summary>
 Gets the password the current user used to log on to DriveWorks.
 </summary>
 <remarks>
 </remarks>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationId">
 <summary>
 Gets the unique identifier of the active specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.InitialSpecificationId">
 <summary>
 Gets the unique identifier of the initial specification.
 </summary>
 <remarks>
 When specifications are edited and copied, the specification identifier
 changes, this property provides access to the very first specification
 identifier if this happens.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.RevisionNumber">
 <summary>
 Gets the revision number of the specification.
 </summary>
 <remarks>
 The revision number of a specification starts at 1 and is
 incremented each time the specification is edited.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.AdditionalFolders">
 <summary>
 Gets the calculated list of additional folders to create.
 </summary>
 <remarks>
 If absolute path information is not specified, additional folders are created
 relative to the specification directory.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.AdditionalFoldersRule">
 <summary>
 Gets/sets the rule used to determine the list of additional folders.
 </summary>
 <remarks>
 Each individual additional folder should be delimited by a pipe-bar character,
 e.g. the rule <code>="Folder 1|Folder 2|Folder 2\Folder 3"</code> would create 
 3 folders, Folder 1, Folder 2, and Folder 3 inside Folder 2.
 
 If absolute path information is not specified, additional folders are created
 relative to the default specification directory.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.AdditionalFoldersSpecialVariable">
 <summary>
 Gets the special variable used to determine the list of additional folders.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationTags">
 <summary>
 Gets the list of tags to associate with this specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationTagsRule">
 <summary>
 Gets/sets the rule used to determine the tags associated with a specification.
 </summary>
 <remarks>Each tag should be delimited by a pipe-bar character.</remarks>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationTagsSpecialVariable">
 <summary>
 Gets the special variable used to determine the tags associated with the current specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentMacroCaller">
 <summary>
 Gets the name of the caller of the current macro.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentMacroArgument">
 <summary>
 Gets the argument to the currently executing macro.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentMacroClickPosition">
 <summary>
 Gets the position that the current macro was clicked.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.TouchPointHitPosition">
 <summary>
 Gets the position that the TouchPoint ray hit.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationChildIndex">
 <summary>
 Gets the index of the specification in the parent specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationDefaultFolder">
 <summary>
 Gets the path to the default specification folder.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.SpecificationFullPath">
 <summary>
 Gets the calculated full path to the specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.FormContainerWidth">
 <summary>
 Gets the width of the form's container.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.FormContainerHeight">
 <summary>
 Gets the height of the form's container.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecialVariables.CurrentReleaseLoopIndex">
 <summary>
 Gets the current loop index.
 </summary>
 <remarks>This is only valid during the release process.</remarks>
</member>
<member name="T:DriveWorks.ProjectSpecificationProperties">
 <summary>
 Provides administration support for a project's specification properties.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperties.PropertyCreated">
 <summary>
 Raised when a new specification property is created.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperties.PropertyMoved">
 <summary>
 Raised when the index of a specification property is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperties.PropertyNameChanged">
 <summary>
 Raised when the name of a specification property is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperties.PropertyRuleChanged">
 <summary>
 Raised when a specification property's rule is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperties.PropertyCommentChanged">
 <summary>
 Raised when a specification property's comment is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperties.PropertyDeleted">
 <summary>
 Raised when a specification property is deleted.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperties.PropertyValueChanged">
 <summary>
 Raised when a specification property's value changes.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationProperties.Count">
 <summary>
 Gets the number of items in the collection.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationProperties.Item(System.Int32)">
 <summary>
 Gets the item at the given index.
 </summary>
 <param name="index">The index of the item to get.</param>
</member>
<member name="P:DriveWorks.ProjectSpecificationProperties.Item(System.String)">
 <summary>
 Gets the item with the given name.
 </summary>
 <param name="propertyName">The name of the item to get.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">An item with the given name does not exist.</exception>
</member>
<member name="M:DriveWorks.ProjectSpecificationProperties.TryGetProperty(System.String,DriveWorks.ProjectSpecificationProperty@)">
 <summary>
 Tries to get a specification property with the specified name.
 </summary>
 <param name="propertyName">The name of the property to get.</param>
 <param name="result">Receives the property with the given name.</param>
 <returns>True if the property is found and returned, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectSpecificationProperties.Create(System.String)">
 <summary>
 Creates a new specification property with the given name.
 </summary>
 <param name="propertyName">The name of the specification property.</param>
 <returns>The newly created specification property.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectSpecificationProperties.Move(System.Int32,System.Int32)">
 <summary>
 Moves the property at the given index to the specified new index.
 </summary>
 <param name="oldIndex">The index of the property to move.</param>
 <param name="newIndex">The new index of the property.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectSpecificationProperty">
 <summary>
 Provides administration support for a project's specification property.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperty.IndexChanged">
 <summary>
 Raised when the index property changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperty.NameChanged">
 <summary>
 Raised when the name of the property changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperty.RuleChanged">
 <summary>
 The rule changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperty.CommentChanged">
 <summary>
 The comment changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperty.Deleted">
 <summary>
 The property has been deleted.
 </summary>
</member>
<member name="E:DriveWorks.ProjectSpecificationProperty.ValueChanged">
 <summary>
 Raised when the value of the property changes.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationProperty.Index">
 <summary>
 Gets the index of the property.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationProperty.Name">
 <summary>
 Gets/sets the name of the property.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationProperty.Rule">
 <summary>
 Gets/sets the rule.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationProperty.Comment">
 <summary>
 Gets/sets the comment.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationProperty.IsDeleted">
 <summary>
 Determines whether the property has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationProperty.Value">
 <summary>
 Gets the calculated value of the rule.
 </summary>
</member>
<member name="M:DriveWorks.ProjectSpecificationProperty.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation.
 </summary>
 <param name="newRule"></param>
 <param name="newComment"></param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectSpecificationProperty.Delete">
 <summary>
 Deletes the specification property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectSpecificationProperty.UpdateIndex(System.Int32)">
 <devdoc>
 Called by the parent to update the index.
 </devdoc>
</member>
<member name="M:DriveWorks.ProjectSpecificationProperty.RaiseIndexChanged">
 <devdoc>
 Called by the parent to raise the <see cref="E:DriveWorks.ProjectSpecificationProperty.IndexChanged" /> event.
 </devdoc>
</member>
<member name="M:DriveWorks.ProjectSpecificationProperty.SaveRule">
 <summary>
 Saves the rule and comment to XML
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectSpecificationPropertyEventHandler">
 <summary>
 Represents a method which will handle an event which affects a specification property.
 </summary>
 <param name="sender">The sender of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectSpecificationPropertyEventArgs">
 <summary>
 Provides the event data for events which affect a specification property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectSpecificationPropertyEventArgs.#ctor(DriveWorks.ProjectSpecificationProperty)">
 <summary>
 Initializes an instance of the <see cref="T:DriveWorks.ProjectSpecificationPropertyEventArgs" /> class.
 </summary>
 <param name="prop">The property affected by the event.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectSpecificationPropertyEventArgs.SpecificationProperty">
 <summary>
 Gets the property that was affected by the event.
 </summary>
</member>
<member name="T:DriveWorks.ProjectSpecificationSettings">
 <summary>
 Provides access to specification settings which are set at a project level
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectSpecificationSettings.DescriptionFilePath">
 <summary>
 Gets/sets the path to a file to be shown in the new specification UI when the
 project is selected.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationSettings.ReportingLevel">
 <summary>
 Gets/sets the reporting level for specifications created from the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationSettings.MetadataDirectoryName">
 <summary>
 Gets/sets the name of a directory which will act as a container
 for artifacts used to manage a specification, or a null reference 
 to put them in the specification folder.
 </summary>
 <remarks>
 <para>
 DriveWorks supports the notion of a metadata directory which is a directory inside the specification directory
 in which the design master, project file, and related metadata are stored. If used, this feature prevents
 the specification directory from becoming cluttered with information which DriveWorks uses to manage
 the specification.
 </para>
 <para>
 If the metadirectory name is zero-length or a null reference (Nothing in Visual Basic), then
 DriveWorks will place metadata files in the specification directory.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.ProjectSpecificationSettings.HideMetadataDirectory">
 <summary>
 Gets/sets whether the metadata directory is hidden if used.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationSettings.DocumentsRelativeToSpecificationFolder">
 <summary>
 Gets/sets whether documents' paths are calculated relative to the 
 specification's folder, if false, they are calculated relative to the
 default specification folder instead.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationSettings.AdditionalFoldersRelativeToSpecificationFolder">
 <summary>
 Gets/sets whether additional folders' paths are calculated relative to the 
 specification's folder, if false, they are calculated relative to the
 default specification folder instead.
 </summary>
</member>
<member name="P:DriveWorks.ProjectSpecificationSettings.EmbedChildSpecifications">
 <summary>
 Gets/sets whether child specifications should be saved within this project, 
 rather than being saved to their own directory and being registered as it's own specification.
 </summary>
 <remarks>This setting only applies if this is the root project and can only be set on .driveprojx projects.</remarks>
</member>
<member name="P:DriveWorks.ProjectSpecificationSettings.SupportsEmbedChildSpecifications">
 <summary>
 Gets whether this project supports embedded child specifications or not.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 This is based off of the project type. 
 E.g. Excel based projects do not support embedded child specifications.
 </remarks>
</member>
<member name="T:DriveWorks.ProjectUtility">
 <summary>
 Provides utility methods applicable to working with projects.
 </summary>
</member>
<member name="M:DriveWorks.ProjectUtility.RuleResultToDisplayString(System.Object,System.Globalization.CultureInfo)">
 <summary>
 Converts the specified rule result to a string suitable for display.
 </summary>
 <param name="value">The value to convert.</param>
 <param name="ci">The culture info to use, if null is specified, the current UI culture is used.</param>
</member>
<member name="M:DriveWorks.ProjectUtility.GenerateRuleStringFromValue(System.Object)">
 <summary>
 Converts the value of a static property into a dynamic rule string.
 </summary>
 <param name="value">The value of the static property to be converted.</param>
</member>
<member name="M:DriveWorks.ProjectUtility.TableCellValueToDisplayString(System.Object,System.Globalization.CultureInfo)">
 <summary>
 Converts the specified table cell's value to a string suitable for display.
 </summary>
 <param name="value">The table cell's value to convert.</param>
 <param name="culture">The culture info to use, if null is specified the current UI culture is used.</param>
 <returns>The display string for the table cell's value.</returns>
</member>
<member name="M:DriveWorks.ProjectUtility.EvaluateDistanceMeasurement(System.String,DriveWorks.DistanceMeasurementUnitOptions)">
 <summary>
 Evaluates the given measurement string and returns the result
 in the specified units.
 </summary>
 <param name="measurement">A measurement string, for example "(4 + 5)ft 3' 7mm"</param>
 <param name="desiredUnits">The units to convert the result into.</param>
 <returns>The value of the measurement in the specified units.</returns>
</member>
<member name="M:DriveWorks.ProjectUtility.ValidateFormula(System.String)">
 <summary>
 Determines if the given formula is valid or not.
 </summary>
 <param name="formula">The formula to validate</param>
 <returns>True if the formula is valid.</returns>
</member>
<member name="M:DriveWorks.ProjectUtility.ParseRule(System.String)">
 <summary>
 Parses the specified rule into an instance of <see cref="T:DriveWorks.Rules.IRuleNode" />.
 </summary>
 <param name="ruleText">The rule to be parsed.</param>
 <returns>The parse result.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectUtility.GetTokens(System.String)">
 <summary>
 Gets all tokens in the given formula.
 </summary>
 <param name="ruleText">The formula to retrieve the tokens from.</param>
 <returns>A list of the tokens that make up the given formula.</returns>
</member>
<member name="M:DriveWorks.ProjectUtility.EnsureValidRuleSnippet(System.String,System.Int32@,System.Int32@)">
 <summary>
 Ensures the given indices marks a valid subsection in the given formula.
 </summary>
 <param name="formula">The formula to sample from.</param>
 <param name="startIndex">The start index of the subsection.</param>
 <param name="endIndex">The end index of the subsection.</param>
 <returns>Whether or not the given indices have been changed.</returns>
</member>
<member name="M:DriveWorks.ProjectUtility.ReplaceSequenceInRule(System.String,System.String,System.String)">
 <summary>
 Replaces all occurrences of a sequence within the given formula.
 </summary>
 <param name="formula">The formula to replace all occurrences in.</param>
 <param name="oldSequence">The sequence to locate and replace.</param>
 <param name="newSequence">The replacement text.</param>
 <returns>The new formula.</returns>
</member>
<member name="M:DriveWorks.ProjectUtility.MatchTokens(System.Collections.Generic.IEnumerable{DriveWorks.Utility.RuleToken},System.Collections.Generic.IEnumerable{DriveWorks.Utility.RuleToken})">
 <summary>
 Finds a sequence of RuleTokens within another sequence.
 </summary>
 <param name="collection">The collection to search in.</param>
 <param name="sequence">The sequence to find.</param>
 <returns>A list of all start and end indices of the given sequence.</returns>
</member>
<member name="M:DriveWorks.ProjectUtility.GetFunctions">
 <summary>
 Returns a collection of all functions loaded in this design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectUtility.GetAllFunctions">
 <summary>
 Returns a collection of all functions loaded in this design master.
 </summary>
</member>
<member name="M:DriveWorks.ProjectUtility.GetFunctionNames">
 <summary>
 Returns a list of supported callable functions for this project
 </summary>
</member>
<member name="M:DriveWorks.ProjectUtility.CreateNameSearchProcess(System.String)">
 <summary>
 Creates a new process capable of searching for named items in all rules in the project.
 </summary>
 <param name="referenceName">The name to search for.</param>
</member>
<member name="M:DriveWorks.ProjectUtility.CreateRuleSearchProcess(System.String[])">
 <summary>
 Creates a new process capable of searching for parts of a rule in all rules in the project.
 </summary>
 <param name="searchStrings">The parts of a rule to locate.</param>
</member>
<member name="M:DriveWorks.ProjectUtility.CreateRuleSearchProcess(System.String)">
 <summary>
 Creates a new process capable of searching for parts of a rule in all rules in the project.
 </summary>
 <param name="searchString">The part of a rule to locate.</param>
</member>
<member name="M:DriveWorks.ProjectUtility.UpdateNamesInRule(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Updates the names in the given rule.
 </summary>
 <param name="ruleText">The rule in which to update names.</param>
 <param name="nameMappings">An dictionary of mappings from old name to new name.</param>
 <returns>The updated rule.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectUtility.ResolvePath(System.String,DriveWorks.RelativeToDirectory)">
 <summary>
 Resolves a prefixed file path. See remarks for details.
 </summary>
 <param name="filePath">The file path to resolve, e.g. &quot;&lt;Project&gt;\SomeFile.txt&quot;</param>
 <param name="relativePathBehavior">The behavior of the resolution if the file path specified is relative rather than qualified with a standard prefix.</param>
 <returns>The resolved file path.</returns>
 <remarks>
 <para>The following prefixes are understood by this method:</para>
 <list>
 <item>&lt;Project&gt;</item>
 <item>&lt;Specification&gt;</item>
 <item>&lt;SpecificationMetadata&gt;</item>
 <item>&lt;GroupContent&gt;</item>
 </list>
 </remarks>
</member>
<member name="M:DriveWorks.ProjectUtility.SerialStringToRuleResult(System.String)">
 <summary>
 Converts the specified serialized string to a value.
 </summary>
 <param name="value">The value to convert.</param>
 <returns>The converted value.</returns>
</member>
<member name="M:DriveWorks.ProjectUtility.GenericRuleResultToDisplayString(System.Object,System.Globalization.CultureInfo)">
 <summary>
 Converts the result of a rule calcuation to a human readable string.
 </summary>
 <param name="value">The value to convert.</param>
 <param name="ci">The culture to use when converting.</param>
</member>
<member name="T:DriveWorks.ProjectVariable">
 <summary>
 Provides access to a variable.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariable.NameChanged">
 <summary>
 Raised when the name of the variable is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariable.ValueChanged">
 <summary>
 Raised when the value of the variable changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariable.RuleChanged">
 <summary>
 Raised when the rule which defines the variable value changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariable.Deleted">
 <summary>
 Raised when the variable is deleted.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariable.CommentChanged">
 <summary>
 Raised when the variable's comment is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariable.CategoryChanged">
 <summary>
 Raised when the variable's category is changed.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariable.Project">
 <summary>
 Gets the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariable.DisplayName">
 <summary>
 Gets/sets the display name of the variable.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariable.Value">
 <summary>
 Gets the current value of the variable.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariable.Text">
 <summary>
 Gets a textual representation of the variable's current value.
 </summary>    
</member>
<member name="P:DriveWorks.ProjectVariable.Rule">
 <summary>
 Gets/sets the rule which governs the variable's value.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariable.Comment">
 <summary>
 Gets/sets the comment for the variable.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariable.Name">
 <summary>
 Gets the name of the variable in a form which can be used in rules.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariable.Category">
 <summary>
 Gets/sets the category to which the variable belongs.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariable.IsDeleted">
 <summary>
 Gets whether the variable has been deleted.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariable.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariable.Delete">
 <summary>
 Deletes the variable
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariable.DeleteCore">
 <summary>
 Performs the work of deleting the variable from the backing store.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectVariable.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariable.SaveVersion">
 <summary>
 Adds an entry to the variable's history.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariable.EnumerateVersionHistory">
 <summary>
 Gets the version history for the variable.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariable.GetVersionHistory">
 <summary>
 Gets the version history for the variable.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.VariableChangedEventHandler">
 <summary>
 Represents the method that will handle the event raised when a variable is changed.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.VariableEventArgs">
 <summary>
 Provides the data for the event raised when a variable is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.VariableEventArgs.#ctor(DriveWorks.ProjectVariable)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.VariableEventArgs" /> type.
 </summary>
 <param name="variable">The variable that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.VariableEventArgs.Variable">
 <summary>
 Gets the constant that was changed.
 </summary>
</member>
<member name="T:DriveWorks.VariableCategoryChangedEventHandler">
 <summary>
 Represents the method that will handle the event raised when a variable category is changed.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The event data.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.VariableCategoryEventArgs">
 <summary>
 Provides the data for the event raised when a variable category is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.VariableCategoryEventArgs.#ctor(DriveWorks.ProjectVariableCategory)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.VariableCategoryEventArgs" /> type.
 </summary>
 <param name="category">The variable category that was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.VariableCategoryEventArgs.Category">
 <summary>
 Gets the variable category that was changed.
 </summary>
</member>
<member name="T:DriveWorks.ProjectVariables">
 <summary>
 Provides access to a project's variables.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariables.VariableNameChanged">
 <summary>
 Raised when a variable's name changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariables.VariableValueChanged">
 <summary>
 Raised when a variable's value changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariables.VariableRuleChanged">
 <summary>
 Raised when a variable's rule changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariables.VariableCommentChanged">
 <summary>
 Raised when a variable's comment changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariables.VariableCategoryChanged">
 <summary>
 Raised when a variable's category changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariables.VariableCreated">
 <summary>
 Raised when a variable is created.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariables.VariableDeleted">
 <summary>
 Raised when a variable is deleted.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariables.Project">
 <summary>
 Gets the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariables.GetVariables">
 <summary>
 Gets all the variables which exist in the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariables.GetVariable(System.String)">
 <summary>
 Gets the variable with the specified display name.
 </summary>
 <param name="displayName">The display name of the variable to retrieve.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown when no variable with the specified display name exists.</exception>
</member>
<member name="M:DriveWorks.ProjectVariables.TryGetVariable(System.String,DriveWorks.ProjectVariable@)">
 <summary>
 Gets the variable with the specified display name.
 </summary>
 <param name="displayName">The display name of the variable to retrieve.</param>
 <param name="variable">A reference to a variable which will receive the variable.</param>
 <returns>True if the variable is found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.ProjectVariables.CreateVariable(System.String,DriveWorks.ProjectVariableCategory,System.String,System.String)">
 <summary>
 Creates a new variable with the specified name in the given category.
 </summary>
 <param name="displayName">The name of the new variable.</param>
 <param name="category">The parent category, or a null reference (Nothing in Visual Basic) to leave the variable without a parent category.</param>
 <param name="rule">The initial rule to assign to the variable.</param>
 <param name="comment">The initial comment to assign to the variable.</param>
 <returns>The newly created variable.</returns>
</member>
<member name="M:DriveWorks.ProjectVariables.CreateVariable(System.String,DriveWorks.ProjectVariableCategory,System.String)">
 <summary>
 Creates a new variable with the specified name in the given category.
 </summary>
 <param name="displayName">The name of the new variable.</param>
 <param name="category">The parent category, or a null reference (Nothing in Visual Basic) to leave the variable without a parent category.</param>
 <param name="rule">The initial rule to assign to the variable.</param>
 <returns>The newly created variable.</returns>
</member>
<member name="M:DriveWorks.ProjectVariables.EnsureInitialized">
 <summary>
 Used by the variable categories classes to make sure the variables are initialized.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariables.VariableNotifyCategoryChanged(DriveWorks.ProjectVariable)">
 <summary>
 Used by the project variable to tell the variables collection to raise the category changed event.
 </summary>
 <param name="variable">The variable which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariables.VariableNotifyDeleted(DriveWorks.ProjectVariable)">
 <summary>
 Used by the project variable to tell the variables collection to raise the deleted event.
 </summary>
 <param name="variable">The variable which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariables.VariableNotifyNameChanged(DriveWorks.ProjectVariable)">
 <summary>
 Used by the project variable to tell the variables collection to raise the name changed event.
 </summary>
 <param name="variable">The variable which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariables.VariableNotifyRuleChanged(DriveWorks.ProjectVariable)">
 <summary>
 Used by the project variable to tell the variables collection to raise the rule changed event.
 </summary>
 <param name="variable">The variable which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariables.VariableNotifyValueChanged(DriveWorks.ProjectVariable)">
 <summary>
 Used by the project variable to tell the variables collection to raise the value changed event.
 </summary>
 <param name="variable">The variable which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariables.VariableNotifyCommentChanged(DriveWorks.ProjectVariable)">
 <summary>
 Used by the project variable to tell the variables collection to raise the comment changed event.
 </summary>
 <param name="variable">The variable which has changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.IReportProcessItem.IReportProcessItem">
 <summary>
 A list of sub-processes for this process.
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.ReportEntries">
 <summary>
 A list of all child report entries.
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.ProcessClass">
 <summary>
 Gets or sets the Process Class used in the report.
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.StartDate">
 <summary>
 Gets or sets the start date of the process
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.EndDate">
 <summary>
 Gets or sets the end date of the process
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.ProcessTime">
 <summary>
 Gets the time span of the process
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.ProcessDescription">
 <summary>
 The full description of the process, including the clone name and timing information.
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.Description">
 <summary>
 The description of the process, excluding the clone name and timing information (use Title for full description including these).
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.ProcessTarget">
 <summary>
 Optionally sets the process target name used to help users track entries in the report.
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.ProcessID">
 <summary>
 Unique ID for this process
 </summary>
</member>
<member name="P:DriveWorks.IReportProcessItem.ParentProcessID">
 <summary>
 Unique ID of the parent process
 </summary>
</member>
<member name="M:DriveWorks.IReportProcessItem.StartProcess">
 <summary>
 Starts timing the process.
 </summary>
</member>
<member name="M:DriveWorks.IReportProcessItem.EndProcess">
 <summary>
 Stops timing the process
 </summary>
</member>
<member name="T:DriveWorks.GroupSchemaHelper">
 <summary>
 Provides methods for working with the DriveWorks Group schema.
 </summary>
</member>
<member name="P:DriveWorks.GroupSchemaHelper.Instance">
 <summary>
 Gets the singleton instance of the group schema helper.
 </summary>
</member>
<member name="M:DriveWorks.GroupSchemaHelper.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.GroupSchemaHelper" /> type.
 </summary>
</member>
<member name="P:DriveWorks.GroupSchemaHelper.CurrentMajorVersion">
 <summary>
 Gets the schema's current major version number.
 </summary>
</member>
<member name="P:DriveWorks.GroupSchemaHelper.CurrentMinorVersion">
 <summary>
 Gets the schema's current minor version number.
 </summary>
</member>
<member name="P:DriveWorks.GroupSchemaHelper.CurrentRevisionVersion">
 <summary>
 Gets the schema's current revision number.
 </summary>
</member>
<member name="P:DriveWorks.GroupSchemaHelper.FileNameMaxCharacters">
 <summary>
 Gets the max amount of characters that can be used in a FileName column, as specified in the group schema file.
 </summary>
</member>
<member name="M:DriveWorks.GroupSchemaHelper.ToSqlCeScript(System.IO.TextWriter)">
 <summary>
 Transforms the schema into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <param name="writer">The text writer to which to write the script, e.g. a <see cref="T:System.IO.StringWriter" />.</param>
</member>
<member name="M:DriveWorks.GroupSchemaHelper.ToSqlCeScriptWithVersionData(System.IO.TextWriter)">
 <summary>
 Transforms the schema into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <param name="writer">The text writer to which to write the script, e.g. a <see cref="T:System.IO.StringWriter" />.</param>
</member>
<member name="M:DriveWorks.GroupSchemaHelper.GetTableNames">
 <summary>
 Retrieves a list of all Table names within the Schema.
 </summary>
</member>
<member name="M:DriveWorks.GroupSchemaHelper.GetTableFieldNames(System.String)">
 <summary>
 Retrieves a list of all Field names for a given table within the Schema.
 </summary>
 <param name="tableName"></param>
</member>
<member name="T:DriveWorks.ProjectDetails">
 <summary>
 Provides information about a registered DriveWorks project.
 </summary>
 <remarks>
 Modifications made to an instance of ProjectDetails are 
 not immediately reflected in the group from which the instance was obtained.
 
 To apply any modifications, call the <see cref="M:DriveWorks.GroupProjects.TryUpdateProject(DriveWorks.ProjectDetails)" /> method.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDetails.#ctor(System.Guid,System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectDetails" /> type (should only be called by Group related classes).
 </summary>
 <param name="id">The unique identifier of the project.</param>
 <param name="name">The name of the project.</param>
 <param name="directory">The path to the project directory.</param>
 <param name="extension">The file extension of the project, e.g. '.driveprojx'.</param>
 <param name="hidden">True if the project is hidden from lists.</param>
 <param name="deployed">True if the project is deployed and available for access.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDetails.Id">
 <summary>
 Gets the unique identifier of the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDetails.Name">
 <summary>
 Gets/sets the name of of the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDetails.Directory">
 <summary>
 Gets/sets the path to the project directory.
 </summary>
 <remarks>
 </remarks>
</member>
<member name="P:DriveWorks.ProjectDetails.Extension">
 <summary>
 Gets/sets the file extension of the project.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDetails.Hidden">
 <summary>
 Gets/sets whether the project is hidden from the list of projects that can be specified.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 If a project is hidden, it is not displayed in the list of projects that can be specified, but will still be
 shown in the list of projects that can be specified for a child specification if explicitly chosen.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectDetails.Deployed">
 <summary>
 Gets/sets whether the project is deployed so that it can be used by ordinary
 users.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 If a project is not deployed, only administrative users can see and specify the project.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDetails.GetProjectFilePath">
 <summary>
 Gets the fully-qualified path to the project file.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ChildSpecificationServiceProvider">
 <summary>
 Provides a safe way for specificaiton service providers to overload specific services.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.SpecificationContextLocalizedResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ChildSpecificationConstantNotFound">
<summary>
  Looks up a localized string similar to Could not find constant in child specification: {0}.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ChildSpecificationErrorClass">
<summary>
  Looks up a localized string similar to Child Specification Configuration Problem.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ErrorSpecificationTransitionNoTarget">
<summary>
  Looks up a localized string similar to Invalid Specficiation Flow. Transition &quot;{0}&quot; does not have target state..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ErrorSpecificationTranstionToRunning">
<summary>
  Looks up a localized string similar to Invalid Specification Flow. Transition &quot;{0}&quot; connects one running state to another..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ExCannotMoveExecutedTask">
<summary>
  Looks up a localized string similar to Cannot move a task after its macro has executed..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ExCannotRenameExecutedTask">
<summary>
  Looks up a localized string similar to Cannot rename a task in a macro that has executed..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ExCannotSetStateToInputsMissing">
<summary>
  Looks up a localized string similar to The state cannot be manually set to InputsMissing as this is a calculated state..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ExCannotSetStateToNotStarted">
<summary>
  Looks up a localized string similar to The state cannot be manually set to NotStarted as this is a calculated state..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ExCloseDialogOnNotActiveDialog">
<summary>
  Looks up a localized string similar to Can not close dialog, this is not the current active dialog..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ExConditionNameTaken">
<summary>
  Looks up a localized string similar to A condition with the name &apos;{0}&apos; already exists..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ExEmbeddedChildSpecificationInvalidProjectType">
<summary>
  Looks up a localized string similar to Can not create child specification as child has an invalid project type. Child projects should support embedding..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ExInputFulfilledAfterExecuting">
<summary>
  Looks up a localized string similar to Input to node was fulfilled after the node had already executed.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.NavigateBackwardProblemOccured">
<summary>
  Looks up a localized string similar to A problem occurred trying to navigate to the previous form. {0}.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.NavigateForwardProblemOccured">
<summary>
  Looks up a localized string similar to A problem occurred trying to navigate to the next form. {0}.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.NodePositionBelowMinimum">
<summary>
  Looks up a localized string similar to {0} can not be lower than {1}.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.PositionAxisLeft">
<summary>
  Looks up a localized string similar to Left.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.PositionAxisTop">
<summary>
  Looks up a localized string similar to Top.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ProfileEventDrivingChildSpecificationValues">
<summary>
  Looks up a localized string similar to Driving Child Specification Values.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ProfileEventExecutingSpecificationFlowEvent">
<summary>
  Looks up a localized string similar to Executing Specification Flow Event &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ProfileEventExecutingSpecificationTask">
<summary>
  Looks up a localized string similar to Executing Specification Task &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.ProfileEventInitializingProject">
<summary>
  Looks up a localized string similar to Initializing Project.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptBooleanType">
<summary>
  Looks up a localized string similar to Boolean.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptChangedStateSuccessfully">
<summary>
  Looks up a localized string similar to State has been changed successfully.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptChangedStateSuccessfullyDetail">
<summary>
  Looks up a localized string similar to State changed from &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptChangeSpecificationStateDetail">
<summary>
  Looks up a localized string similar to Invoking transition &apos;{0}&apos; with name &apos;{1}&apos; on state &apos;{2}&apos; with identifier &apos;{3}&apos; to move in to target state &apos;{4}&apos; with identifier &apos;{5}&apos;..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptChangeStateDetail">
<summary>
  Looks up a localized string similar to Error was encountered when trying to directly change the state of the specification..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptChangeStateEntryTitle">
<summary>
  Looks up a localized string similar to Change state.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptChangeStateNotFound">
<summary>
  Looks up a localized string similar to Could not find target state, &apos;{0}&apos;. State not changed..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptClassNavigateBackward">
<summary>
  Looks up a localized string similar to Navigate Backward.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptClassNavigateForward">
<summary>
  Looks up a localized string similar to Navigate Forward.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptClassSettingValue">
<summary>
  Looks up a localized string similar to Setting Value.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptClassSpecificationAction">
<summary>
  Looks up a localized string similar to Specification Action.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptConditionEvaluationClass">
<summary>
  Looks up a localized string similar to Condition Evaluation.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptCopySpec">
<summary>
  Looks up a localized string similar to Copying Specification &apos;{0}&apos; based on Project &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptDriveValuesRunningSpec">
<summary>
  Looks up a localized string similar to Can not drive values in a running specification..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptEnterInitialState">
<summary>
  Looks up a localized string similar to Entering initial state &apos;{0}&apos; with identifier &apos;{1}&apos;.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptFailedConditionEvaluationSpecNotRunning">
<summary>
  Looks up a localized string similar to Failed to evaluate a child specification&apos;s condition, as it required the specification to be running..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptFailedConditionEvaluationSpecNotRunningDetail">
<summary>
  Looks up a localized string similar to Child Specification Name: &apos;{0}&apos;. Condition Title: &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptFlowPropertyParseFailed">
<summary>
  Looks up a localized string similar to The property {0} expects a {1} value, but &apos;{2}&apos; was provided..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptInvokingOperation">
<summary>
  Looks up a localized string similar to Invoking operation with &apos;{0}&apos; with name &apos;{1}&apos; on state &apos;{2}&apos; with id &apos;{3}&apos;..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptJumpingStateDescription">
<summary>
  Looks up a localized string similar to Jumping state from &apos;{0}&apos; to &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptMsgFailedCompleteCopiedSpecClosed">
<summary>
  Looks up a localized string similar to There was a problem saving the copied child specification to the list. The project may not be available in the child specification list anymore..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptNameDocGen">
<summary>
  Looks up a localized string similar to Documents Generated.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptNameIgnoreTasklist">
<summary>
  Looks up a localized string similar to Task List Bypass Enabled?.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptNameReleaseToAutpilot">
<summary>
  Looks up a localized string similar to Release Delegated to DriveWorks Autopilot?.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptNameSpecBasePath">
<summary>
  Looks up a localized string similar to Specification Parent Directory.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptNameTempDir">
<summary>
  Looks up a localized string similar to Temporary Files Directory.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptNumericType">
<summary>
  Looks up a localized string similar to Numeric.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptOpeningSpecificationCondition">
<summary>
  Looks up a localized string similar to The specification design master is being opened because the condition &apos;{0}&apos;  requires it..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptOpeningSpecificationTask">
<summary>
  Looks up a localized string similar to The specification design master is being opened because the task &apos;{0}&apos; with type &apos;{1}&apos; requires it..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptProperty">
<summary>
  Looks up a localized string similar to Property.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptSetting">
<summary>
  Looks up a localized string similar to {0}: {1}.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptStartSpec">
<summary>
  Looks up a localized string similar to Starting Specification based on Project &apos;{0}&apos;.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptTableType">
<summary>
  Looks up a localized string similar to Table.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptTargetSpecification">
<summary>
  Looks up a localized string similar to Specification.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptTask">
<summary>
  Looks up a localized string similar to Task.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptTaskExecutionClass">
<summary>
  Looks up a localized string similar to Task Execution.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptTaskRequiresClosedStateError">
<summary>
  Looks up a localized string similar to Unable to execute task as it must be run while specification is in a closed state..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptTaskRequiresClosedStateErrorDetail">
<summary>
  Looks up a localized string similar to Deferred tasks can be ran from an operation on a closed state, or a transition that targets a closed state..
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptValueDocGen_Both">
<summary>
  Looks up a localized string similar to On both Finish and Release.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptValueDocGen_Finish">
<summary>
  Looks up a localized string similar to Only on Finish.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptValueDocGen_Release">
<summary>
  Looks up a localized string similar to Only on Release.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptValueFalse">
<summary>
  Looks up a localized string similar to No.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptValueNull">
<summary>
  Looks up a localized string similar to Not Specified.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.RptValueTrue">
<summary>
  Looks up a localized string similar to Yes.
</summary>
</member>
<member name="P:DriveWorks.SpecificationContextLocalizedResources.SettingSpecificationValuesEventName">
<summary>
  Looks up a localized string similar to Setting Specification Values.
</summary>
</member>
<member name="T:DriveWorks.UserDefinedFunctionInfo">
 <summary>
 Provides information about a user-defined function which is available for use in a project.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.UserDefinedFunctionInfo.FunctionName">
 <summary>
 Gets the name of the function which can be called.
 </summary>
</member>
<member name="P:DriveWorks.UserDefinedFunctionInfo.ModuleName">
 <summary>
 Gets the name of the module in which the function is defined.
 </summary>
</member>
<member name="P:DriveWorks.UserDefinedFunctionInfo.ProjectName">
 <summary>
 Gets the name of the code project in which the function is defined.
 </summary>
</member>
<member name="P:DriveWorks.UserDefinedFunctionInfo.ContainerFileName">
 <summary>
 Gets the name of the container in which the function is defined.
 </summary>
</member>
<member name="P:DriveWorks.UserDefinedFunctionInfo.DeclarationLine">
 <summary>
 Gets the full line of text which opens the method.
 </summary>
</member>
<member name="M:DriveWorks.UserDefinedFunctionInfo.GetFullName">
 <summary>
 Gets the full name of the macro.
 </summary>
</member>
<member name="T:DriveWorks.ProjectState">
 <summary>
 Used to store state data for the project
 </summary>
 <remarks>
 Separating the state of the project class from the project
 class itself makes it easier to ensure that the state of the
 project class remains correct at all times.
 
 The ProjectData class not only stores state, but provides
 methods and properties which ensure the state remains sane.
 </remarks>
 <devdoc>
 All of the code currently in the Engine assumes the project file XML schema allows only the specification-flow 
 as an optional element, if this is changed, the code will have to be modified in most places to allow for dynamic
 element detection and creation, and to preserve the correct element order as defined in the schema.
 </devdoc>
</member>
<member name="M:DriveWorks.ProjectState.#ctor(DriveWorks.Project,DriveWorks.Group,DriveWorks.Hosting.EngineHost)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectState" /> type to manage state for the specified project.
 </summary>
 <param name="project">The project whose state is to be managed.</param>
 <param name="group">The group which contains the project.</param>
 <param name="engineHost">The engine host which is hosting the project.</param>
</member>
<member name="P:DriveWorks.ProjectState.ComponentTasks">
 <summary>
 Gets the component tasks in the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Group">
 <summary>
 Gets the group which contains the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Project">
 <summary>
 Gets the project whose state is being managed.
 </summary>    
</member>
<member name="P:DriveWorks.ProjectState.ProjectId">
 <summary>
 Gets the project id.
 </summary>    
</member>
<member name="P:DriveWorks.ProjectState.ProjectName">
 <summary>
 Gets the project name.
 </summary>    
</member>
<member name="P:DriveWorks.ProjectState.LocalizationHelper">
 <summary>
 Gets the object which is required to create and parse rules in a global environment.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.DataTables">
 <summary>
 Gets the object responsible for managing the project's data tables.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Documents">
 <summary>
 Gets the object responsible for managing the project's documents.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.ProjectFile">
 <summary>
 Gets the project file wrapper.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.DesignMaster">
 <summary>
 Gets the design master associated with the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Variables">
 <summary>
 Gets the variable manager for the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.VariableCategories">
 <summary>
 Gets the variable categories for the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Constants">
 <summary>
 Gets the object responsible for managing the project's constants.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.FormsDataManager">
 <summary>
 Gets the object responsible for managing the project's forms.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.SpecialVariables">
 <summary>
 Gets the object responsible for managing the project's special variables.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Navigation">
 <summary>
 Gets the object responsible for managing the project's form navigation information.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.CalculationTables">
 <summary>
 Gets the object responsible for managing the project's calculation tables.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Messages">
 <summary>
 Gets the object responsible for managing the project's messages which are used
 in form controls to give interactive feedback to users.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.DisplayFileManager">
 <summary>
 Gets the object responsible for managing the project's display files.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.ChildSpecifications">
 <summary>
 Gets the object responsible for managing the project's child specifications.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.ItemLists">
 <summary>
 Gets the object responsible for managing the project's item lists.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.ComponentSets">
 <summary>
 Gets the object responsible for managing the project's component sets.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.SpecificationMacros">
 <summary>
 Gets the specification macros defined in the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.SpecificationMacroCategories">
 <summary>
 Gets the specification macro categories for the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.SpecificationFlow">
 <summary>
 Gets the specification-flow which defines the process which is followed
 for a specification created from this project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.SpecificationContext">
 <summary>
 Gets the active specification context if the project has been opened as part of a specification.
 </summary>
 <returns>
 The active specification context, or a null reference (Nothing in Visual Basic) if the project
 has not been opened as part of a specification.
 </returns>
</member>
<member name="P:DriveWorks.ProjectState.CaptureDataResolver">
 <summary>
 Gets the capture data resolver to be used for resolving underlying capture data
 for project component data.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Host">
 <summary>
 Gets the engine host which is hosting the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.BaseDirectory">
 <summary>
 Gets the base directory which is the project directory for a project, and the specification metadata directory
 for a specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.IsSpecification">
 <summary>
 Determines whether the project has been opened as a specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.SpecificationSettings">
 <summary>
 Gets access to settings which affect specifications based on the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Metadata">
 <summary>
 Gets access to the sections in the project metadata file.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Utility">
 <summary>
 Gets access to utility methods for the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.Properties">
 <summary>
 Gets access to specification properties for the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.ConnectionManager">
 <summary>
 Gets the connection manager for the project (and all other projects created by the same engine host).
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectState.ExtenderManager">
 <summary>
 Gets the extender manager if an extender was found.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectState.SharedExtenders">
 <summary>
 Gets any shared project extenders.
 </summary>
</member>
<member name="P:DriveWorks.ProjectState.OptionGroupManager">
 <summary>
 Gets the option button group manager.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectState.EmbeddedSpecificationsManager">
 <summary>
 Gets the embedded specifications manager.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectState.RuleHistory">
 <summary>
 Gets the rule history manager for this project.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectState.HighRecursionThresholdCount">
 <summary>
 Gets and sets the current global high recursion allowance for this project.
 </summary>
 <remarks>
 This is used in control property recursion.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectState.LowRecursionThresholdCount">
 <summary>
 Gets and sets the current global low recursion allowance for this project.
 </summary>
 <remarks>
 This is used in control property recursion for expensive operations.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectState.TasksManager">
 <summary>
 Gets the Task Manager for this project that is responsible for providing
 the interaction between the project XML and the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectState.Initialize_1_Specification(DriveWorks.Specification.SpecificationContext)">
 <summary>
 Initializes the project data with the specification context if the project has been opened
 as part of a specification.
 </summary>
 <param name="context">The specification context for the specification.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectState.Initialize_3_DesignMaster(System.String,System.Boolean)">
 <summary>
 Initializes the project data with the design master.
 </summary>
 <param name="designMasterPath">The fully qualified path to the design master.</param>
 <param name="updateUserDetails">True to update the user information special variables.</param>
 <remarks>The <see cref="M:DriveWorks.ProjectState.Initialize_2_ProjectFile(DriveWorks.ProjectFile)" /> method should have been called prior to this.</remarks>
</member>
<member name="M:DriveWorks.ProjectState.Initialize_3_DesignMaster(DriveWorks.Internal.DesignMasters.TitanDM.TitanDesignMaster,System.Boolean)">
 <summary>
 Initializes the project data with the design master.
 </summary>
 <param name="designMaster">The design master.</param>
 <param name="updateUserDetails">True to update the user information special variables.</param>
 <remarks>The <see cref="M:DriveWorks.ProjectState.Initialize_2_ProjectFile(DriveWorks.ProjectFile)" /> method should have been called prior to this.</remarks>
</member>
<member name="M:DriveWorks.ProjectState.Initialize_2_ProjectFile(DriveWorks.ProjectFile)">
 <summary>
 Initializes the project data with the information from the specified project file.
 </summary>
 <param name="projectFile">The project file.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectState.Initialize_1_State(System.Guid,System.String,System.String)">
 <summary>
 Initializes basic state for the project.
 </summary>
 <param name="projectName">The name of the project being opened.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectState.Initialize_0_LoadProjectExtender(System.String,System.String)">
 <summary>
 Initializes the project with its extender if one exists.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.StandardRuleTypes">
 <summary>
 Provides constants for standard types of rules and values exposed by the Engine.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.StandardRuleTypes.FormMessage">
 <summary>
 The rule or value defines a form message.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ComponentFileName">
 <summary>
 The rule or value defines the filename of a component.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ComponentFileNames">
 <summary>
 The rule or value defines filenames of components.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.DocumentFileName">
 <summary>
 The rule or value defines the filename of a document.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ComponentRelativePath">
 <summary>
 The rule or value defines the relative path of a component.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.DocumentRelativePath">
 <summary>
 The rule or value defines the relative path of a document.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.DocumentNames">
 <summary>
 The rule or value defines the names of documents.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.DocumentName">
 <summary>
 The rule or value defines the name of a document.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.DocumentGenerationBehavior">
 <summary>
 The rule or value defines document generation behaviour.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.MacroName">
 <summary>
 The rule or value defines the name of a macro.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ImageFilePath">
 <summary>
 The rule or value defines the path of an image file.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.DataTableControlItemFields">
 <summary>
 The rule or value defines a list of field names for a data table control.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ColumnWidths">
 <summary>
 The rule or value defines a list of column widths for the data table control.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.FormName">
 <summary>
 The rule or value defines the name of a form.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ConstantName">
 <summary>
 The rule or value defines the name of a constant.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.VariableName">
 <summary>
 The rule or value defines the name of a variable.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ControlName">
 <summary>
 The rule or value defines the name of a control.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.PreviewControlName">
 <summary>
 The rule or value defines the name of a 3D Preview control.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.PreviewDocumentName">
 <summary>
 The rule or value defines the name of a 3D Preview control.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.EmailNames">
 <summary>
 The rule or value defines the names of email documents.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.FilePath">
 <summary>
 The rule or value defines the path of a file.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.DirectoryPath">
 <summary>
 The rule or value defines the path of a folder.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ChildSpecificationList">
 <summary>
 The rule or value defines the name of a child specification list.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ProjectName">
 <summary>
 The rule or value defines the name of a DriveWorks Project.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.TransitionName">
 <summary>
 The rule or value defines the name of a specification transition.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.OperationName">
 <summary>
 The rule or value defines the name of a specification operation.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.TableName">
 <summary>
 The rule or value defines the name of a table.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.TextHorizontalAlignment">
 <summary>
 The rule or value defines text's horizontal alignment. This can be either Left, Center or Right.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.TextVerticalAlignment">
 <summary>
 The rule or value defines text's vertical alignment. This can be either Top, Center or Bottom.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.TimeSpanSeconds">
 <summary>
 The rule or value defines a time span in seconds.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.TeamName">
 <summary>
 The rule or value defines the name of a Team
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.UserName">
 <summary>
 The rule or value defines the name of a user.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.OwnerName">
 <summary>
 The rule or value defines the name of a possible specification owner.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.GroupTableName">
 <summary>
 The rule or value defines the name of a group table.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.SimpleTableName">
 <summary>
 The rule or value defines the name of a simple table.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.CalculationTableName">
 <summary>
 The rule or value defines the name of a calculation table.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ScrollVisibility">
 <summary>
 The rule or value defines the visibility of a scroll bar.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.FileSize">
 <summary>
 The rule or value defines the size of a file.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.FileFilter">
 <summary>
 The rule or value defines a filter for acceptable file types.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ItemListColumns">
 <summary>
 The rule or value defines a list of item value column names for an item list control.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ChildSpecificationColumns">
 <summary>
 The rule or value defines a list of result column names for a child specification list control.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.DateTime">
 <summary>
 The rule or value defines a date and or time.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.DateFormat">
 <summary>
 The rule or value defines a date format string.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.UseLocalValueFormat">
 <summary>
 The rule or value dictates whether a value should be converted to the current culture.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.SpecificationFlowStateName">
 <summary>
 The rule or value for a name of a specification flow state.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.LightingPresetName">
 <summary>
 The rule or value for a name of a lighting preset name - used with 3D preview.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.SpecificationHostName">
 <summary>
 The rule or value for a name of a Specification Host.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.ExternalProjectMacroName">
 <summary>
 The rule or value for the name of a Macro that is in a different project.
 </summary>
</member>
<member name="F:DriveWorks.StandardRuleTypes.FileExportType">
 <summary>
 The rule or value defines a list of file types to export to.
 </summary>
</member>
<member name="T:DriveWorks.Support.Data.SchemaHelper">
 <summary>
 Provides support for transforming an XML schema into SQL script.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.Data.SchemaHelper.ToSqlCeScript">
 <summary>
 Transforms the schema into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.Data.SchemaHelper.ToSqlCeScript(System.IO.TextWriter)">
 <summary>
 Transforms the schema into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <param name="writer">The text writer to which to write the script, e.g. a <see cref="T:System.IO.StringWriter" />.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.Data.SchemaHelper.ToSqlCeScriptTable(System.String)">
 <summary>
 Transforms the schema for the specified table into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.Data.SchemaHelper.ToSqlCeScriptTable(System.String,System.IO.TextWriter)">
 <summary>
 Transforms the schema for the specified table into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <param name="writer">The text writer to which to write the script, e.g. a <see cref="T:System.IO.StringWriter" />.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.Data.SchemaHelper.ToSqlCeScriptIndex(System.String)">
 <summary>
 Transforms the schema for the specified table into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.Data.SchemaHelper.ToSqlCeScriptIndex(System.String,System.IO.TextWriter)">
 <summary>
 Transforms the schema for the specified index into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <param name="writer">The text writer to which to write the script, e.g. a <see cref="T:System.IO.StringWriter" />.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Support.Data.SchemaHelper.RootElement">
 <summary>
 Gets the root element of the schema's XML.
 </summary>
</member>
<member name="M:DriveWorks.Support.Data.SchemaHelper.ToSqlCeScriptIndex(System.Xml.Linq.XElement,System.IO.TextWriter)">
 <summary>
 Transforms the index in the given XML element into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <param name="indexElement">The index element.</param>
 <param name="writer">The text writer to which to write the script, e.g. a <see cref="T:System.IO.StringWriter" />.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.Data.SchemaHelper.ToSqlCeScriptTable(System.Xml.Linq.XElement,System.IO.TextWriter)">
 <summary>
 Transforms the table in the given XML element into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <param name="tableElement">The table element.</param>
 <param name="writer">The text writer to which to write the script, e.g. a <see cref="T:System.IO.StringWriter" />.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.Data.SchemaHelper.ToSqlCeScriptField(System.Xml.Linq.XElement,System.IO.TextWriter)">
 <summary>
 Transforms the field in the given XML element into SQL for use with
 Microsoft SQL Server Compact Edition.
 </summary>
 <param name="fieldElement">The field element.</param>
 <param name="writer">The text writer to which to write the script, e.g. a <see cref="T:System.IO.StringWriter" />.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.ValueHelper.GetValueWithRealType(System.String)">
 <summary>
 Returns a typed object from a string.
 </summary>
 <param name="value">The value as a string to be parsed</param>
 <returns>The typed object</returns>
</member>
<member name="M:DriveWorks.Support.ValueHelper.RuleResultToDisplayString(System.Object,System.Globalization.CultureInfo)">
 <summary>
 Converts the specified rule result to a string suitable for display.
 </summary>
 <param name="value">The value to convert.</param>
 <param name="ci">The culture info to use, if null is specified, the current UI culture is used.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.ValueHelper.RuleResultToSerialString(System.Object)">
 <summary>
 Converts the specified rule result to a string suitable for serialization.
 </summary>
 <param name="value">The value to convert.</param>
 <returns></returns>
 <remarks>
 The serialization methodology is far from perfect - for example, an integer
 which is serialized stands to be deserialized as a double. But this shouldn't be an issue
 and we need to maintain compatibility for values that have already been serialized before this
 was introduced
 </remarks>
</member>
<member name="M:DriveWorks.Support.ValueHelper.SerialStringToRuleResult(System.String)">
 <summary>
 Converts the specified serialized string to a value.
 </summary>
 <param name="value">The value to convert.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Support.ValueHelper.TableCellValueToDisplayString(System.Object,System.Globalization.CultureInfo)">
 <summary>
 Takes the value from a table cell and gets a string suitable for display.
 </summary>
 <param name="value">The table cell's value.</param>
 <param name="culture">The culture info to use, if null is specified, the current UI culture is used.</param>
 <returns>The table cell's value as a string suitable for display.</returns>
</member>
<member name="M:DriveWorks.Transactions.TxChangeComponentTaskLocation.#ctor(DriveWorks.Project,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,DriveWorks.Components.ProjectComponent,System.String)">
 <summary>
 Used by the TransactionFactory.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxChangeComponentTaskLocation.#ctor(DriveWorks.Project,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,System.Object[],System.String)">
 <summary>
 Used by the reverser transaction
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxCreateComponentSpecificComponentTask.#ctor(DriveWorks.Project,System.Type,System.String,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,System.Object[],System.Int32,DriveWorks.ComponentTaskTransactionInfo)">
 <summary>
 Only called to create reverse transactions.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxCreateComponentSpecificComponentTask.#ctor(DriveWorks.Project,System.Type,System.String,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,DriveWorks.Components.ProjectComponent)">
 <summary>
 Called by the Transaction Factory.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxCreateScopedComponentTask.#ctor(DriveWorks.Project,System.String,System.Type,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,System.String)">
 <summary>
 Called by the Transaction Factory.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxCreateScopedComponentTask.#ctor(DriveWorks.Project,System.String,System.Type,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,System.String,System.Int32,System.Collections.Generic.IEnumerable{DriveWorks.ComponentTaskRuleTransactionInfo})">
 <summary>
 Called when we're created as a reverse transaction of Delete.
 </summary>
</member>
<member name="T:DriveWorks.Transactions.TxChangeProjectComponentRule">
 <remarks>
 The following class uses an addressing system that looks like the following:
 Generates an address that looks like the following:
 
 * Integer that is the ComponentSet's Index
 * N number of Guids that are captured component Ids 
 * String part that describes the type of rule or else a flag to switch to reading child elements

 If file or path flag was specified then
 
 * Address ends
 
 If Params flag was specified then

 * Guid captured component Id of the param we are to find
 * Address ends

 Else we switch to navigating child elements (rather than components)

 * N number of Guids that are captured component Ids (for straight elements)
 * String part that can only be the params flag, signifying the next part is the final address part
 * Guid that is a capture id of a param on the current element
 * Address ends
 </remarks>
</member>
<member name="T:DriveWorks.Transactions.EventFlowTransactionHelper">
 <summary>
 Internal use only - Provides helpers for event flow nodes and transactions.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.EventFlowTransactionHelper.GetAllConnectionReferences(DriveWorks.EventFlow.FlowNodeCollection,DriveWorks.Transactions.NodeCollectionRef,DriveWorks.EventFlow.ExecutableNodeBase)">
 <summary>
 Goes through all connections that have been made to the given node and creates
 references to the input and output for all connections.
 </summary>
 <param name="nodeCollection">The collection the node belongs to.</param>
 <param name="collectionRef">A reference to the collection the nodes belongs to.</param>
 <param name="node">The node whose connections to traverse.</param>
 <returns>A collection of input+output tuples that represents all existing connections to the outputs of the given node.</returns>
</member>
<member name="T:DriveWorks.Transactions.OutputEndpointRef">
 <summary>
 Represents a reference to a <see cref="T:DriveWorks.EventFlow.NodeOutput"/>.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.OutputEndpointRef.GetEndpoint(DriveWorks.Project)">
 <summary>
 Retrieves the endpoint this reference refers to.
 </summary>
 <param name="project">The project to retrieve the endpoint from.</param>
 <returns>The endpoint this reference refers to.</returns>
</member>
<member name="T:DriveWorks.Transactions.InputEndpointRef">
 <summary>
 Represents a reference to a <see cref="T:DriveWorks.EventFlow.InputConnectionEndpoint"/>.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.InputEndpointRef.GetEndpoint(DriveWorks.Project)">
 <summary>
 Gets the endpoint this refers to.
 </summary>
 <param name="project">The project to retrieve the endpoint from.</param>
 <returns>The endpoint this reference refers to.</returns>
</member>
<member name="T:DriveWorks.Transactions.NodeCollectionRef">
 <summary>
 Represents a reference to a <see cref="T:DriveWorks.EventFlow.FlowNodeCollection"/>.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.NodeCollectionRef.GetCollection(DriveWorks.Project)">
 <summary>
 Gets the collection from the specified project.
 </summary>
 <param name="project">The project to retrieve the collection from.</param>
 <returns>The collection this reference refers to.</returns>
</member>
<member name="M:DriveWorks.Transactions.NodeCollectionRef.GetNodeRef(System.Int32)">
 <summary>
 Gets a reference to the node at the given index.
 </summary>
 <param name="index">The index of the node to reference.</param>
 <returns>A reference to the node.</returns>
</member>
<member name="M:DriveWorks.Transactions.NodeCollectionRef.FromMacro(DriveWorks.Specification.SpecificationMacro)">
 <summary>
 Gets a node collection ref from a macro.
 </summary>
 <param name="specificationMacro">The macro for which to get a reference.</param>
 <returns>A reference to the node collection represented by the given macro.</returns>
</member>
<member name="T:DriveWorks.Transactions.NodeRef">
 <summary>
 Represents a reference to a <see cref="T:DriveWorks.EventFlow.IFlowNode"/>.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.NodeRef.CollectionRef">
 <summary>
 The collection this node belongs to.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.NodeRef.NodeIndex">
 <summary>
 The ordered index of the node this reference represents.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.NodeRef.GetNode(DriveWorks.Project)">
 <summary>
 Gets the node from the specified project.
 </summary>
 <param name="project">The project from which to retrieve the node.</param>
 <returns>The node in the project.</returns>
</member>
<member name="M:DriveWorks.Transactions.NodeRef.GetOutputEndpointRef(System.String,System.Boolean)">
 <summary>
 Get a reference to one of the node's output endpoints.
 </summary>
 <param name="name">The name of the output endpoint.</param>
 <param name="isNavigation">True if the output endpoint is a navigation endpoint.</param>
</member>
<member name="M:DriveWorks.Transactions.NodeRef.GetOutputEndpointRef(System.String,System.Boolean,System.Boolean)">
 <summary>
 Get a reference to one of the node's output endpoints.
 </summary>
 <param name="name">The name of the output endpoint.</param>
 <param name="isNavigation">True if the output endpoint is a navigation endpoint.</param>
 <param name="isStatus">True if the endpoint is a status endpoint.</param>
</member>
<member name="T:DriveWorks.Transactions.ExecutableNodeRef">
 <summary>
 Represents a reference to an executable node.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.ExecutableNodeRef.GetInputEndpointRef(System.String,System.Boolean)">
 <summary>
 Get a reference to one of the node's input endpoints.
 </summary>
 <param name="name">The name of the input endpoint.</param>
 <param name="isNavigation">True if the input endpoint is a navigation endpoint.</param>
 <returns>A reference to an input on this node with the desired name.</returns>
</member>
<member name="M:DriveWorks.Transactions.ExecutableNodeRef.GetOutputEndpointRef(System.String,System.Boolean,System.Boolean)">
 <summary>
 Get a reference to one of the node's output endpoints.
 </summary>
 <param name="name">The name of the endpoint.</param>
 <param name="isNavigation">True if the desired endpoint is a navigation endpoint.</param>
 <param name="isStatus">True if the desired endpoint is a status endpoint.</param>
</member>
<member name="T:DriveWorks.Transactions.ConditionRef">
 <summary>
 Represents a reference to a condition on a task.
 </summary>
 <remarks></remarks>
 <devdoc>
 This is public because callers may need an abstract way to refer to conditions.
 </devdoc>
</member>
<member name="P:DriveWorks.Transactions.ConditionRef.ConditionSequenceRef">
 <summary>
 Gets the condition sequence reference.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.ConditionRef.ConditionIndex">
 <summary>
 Gets the condition index.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.ConditionRef.GetCondition(DriveWorks.Project)">
 <summary>
 Gets the condition from the specified project.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.ConditionSequenceRef">
 <summary>
 Represents a reference to a condition sequence.
 </summary>
 <remarks></remarks>
 <devdoc>
 This is public because callers may need an abstract way to refer to condition sequences.
 </devdoc>
</member>
<member name="M:DriveWorks.Transactions.ConditionSequenceRef.GetConditionSequence(DriveWorks.Project)">
 <summary>
 Gets the condition sequence from the specified project.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.ConditionSequenceRef.GetConditionRef(System.Int32)">
 <summary>
 Gets a reference to the specified condition.
 </summary>
 <param name="conditionIndex">The index of the condition in the sequence.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.ConditionSequenceRef.FromTransition(DriveWorks.Specification.Transition)">
 <summary>
 Constructs a condition sequence reference for the given transition.
 </summary>
 <param name="transition">The transition for which to construct the reference.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.ConditionSequenceRef.FromOperation(DriveWorks.Specification.Operation)">
 <summary>
 Constructs a condition sequence reference for the given operation.
 </summary>
 <param name="operation">The operation for which to construct the reference.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.ConditionSequenceRef.FromTask(DriveWorks.Transactions.TaskRef)">
 <summary>
 Constructs a task sequence reference for the given event on the given state.
 </summary>
 <param name="taskRef">The reference to the task.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.ConditionSequenceRef.FromMacro(DriveWorks.Specification.SpecificationMacro)">
 <summary>
 Constructs a condition sequence reference for the given specification macro.
 </summary>
 <param name="macro">The macro for which to construct the reference.</param>
</member>
<member name="T:DriveWorks.Transactions.ConditionSequenceRef.TransitionConditionSequenceRef">
 <summary>
 Provides a persistent reference for a transition's condition sequence.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.ConditionSequenceRef.OperationConditionSequenceRef">
 <summary>
 Provides a persistent reference for an operation's condition sequence.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.ConditionSequenceRef.TaskConditionSequenceRef">
 <summary>
 Provides a persistent reference for a task's condition sequence.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxConditionSequenceBase">
 <summary>
 Provides a base class for condition sequence transactions.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxConditionSequenceBase.#ctor(DriveWorks.Project,DriveWorks.Transactions.ConditionSequenceRef)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxConditionSequenceBase" /> class.
 </summary>
 <param name="project">The project to which the condition belongs.</param>
 <param name="ref">The reference to the condition sequence.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Transactions.TxConditionSequenceBase.Project">
 <summary>
 Gets the project.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.TxConditionSequenceBase.ConditionSequenceRef">
 <summary>
 Gets a reference to the condition sequence.
 </summary>
</member>
<member name="T:DriveWorks.Transactions.TxConditionBase">
 <summary>
 Provides a base class for condition transactions.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxConditionBase.#ctor(DriveWorks.Project,DriveWorks.Transactions.ConditionRef)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxConditionBase" /> class.
 </summary>
 <param name="project">The project to which the condition belongs.</param>
 <param name="ref">The reference to the condition.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Transactions.TxConditionBase.Project">
 <summary>
 Gets the project.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.TxConditionBase.ConditionRef">
 <summary>
 Gets a reference to the condition.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxConditionsChangeCondition.#ctor(DriveWorks.Project,DriveWorks.Transactions.ConditionRef,System.String,DriveWorks.Specification.ConditionFailBehavior,DriveWorks.Transactions.FlowPropertyData[],System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxConditionsChangeCondition" /> class.
 </summary>
 <param name="project">The project to which the condition belongs.</param>
 <param name="ref">The reference to the condition.</param>
 <param name="newFailBehavior">The new failure behavior.</param>
 <param name="newProperties">The new properties to apply to the condition.</param>
 <param name="newConditionTitle">The new title of the condition.</param>
 <param name="allowEmptyRules">True to allow toggling to dynamic even if the rule is empty.</param>
</member>
<member name="T:DriveWorks.Transactions.FlowPropertyData">
 <summary>
 Represents data about a flow property to be changed.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.FlowPropertyData.#ctor(System.String,System.Boolean,System.Object,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.FlowPropertyData" /> class.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="isBound">True if the property is bound to a rule, otherwise false.</param>
 <param name="value">The value or rule.</param>
 <param name="comment">The comment if the property is bound to a rule.</param>
</member>
<member name="M:DriveWorks.Transactions.FlowPropertyData.#ctor(System.String,System.Boolean,System.Object,System.String,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.FlowPropertyData" /> class.
 </summary>
 <param name="name">The name of the property.</param>
 <param name="isBound">True if the property is bound to a rule, otherwise false.</param>
 <param name="value">The value or rule.</param>
 <param name="comment">The comment if the property is bound to a rule.</param>
 <param name="isConnected">True if the property has a connection to another node and it's value shouldn't be modified.</param>
</member>
<member name="M:DriveWorks.Transactions.FlowPropertyData.FromProperty(DriveWorks.Specification.FlowProperty)">
 <summary>
 Gets a <see cref="T:DriveWorks.Transactions.FlowPropertyData" /> instance from the given flow property.
 </summary>
 <param name="prop">The flow property containing the data to duplicate.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.FlowPropertyData.FromTask(DriveWorks.Specification.Task)">
 <summary>
 Gets an array of <see cref="T:DriveWorks.Transactions.FlowPropertyData" /> instances for the given task's properties.
 </summary>
 <param name="task">The task containing the properties to copy.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.FlowPropertyData.FromCondition(DriveWorks.Specification.Condition)">
 <summary>
 Gets an array of <see cref="T:DriveWorks.Transactions.FlowPropertyData" /> instances for the given condition's properties.
 </summary>
 <param name="condition">The condition containing the properties to copy.</param>
 <returns></returns>
</member>
<member name="P:DriveWorks.Transactions.FlowPropertyData.Name">
 <summary>
 Gets the name of the property.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.FlowPropertyData.IsBound">
 <summary>
 Gets whether the property is bound to a rule.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.FlowPropertyData.Value">
 <summary>
 Gets the value of the property, or the rule if it is bound.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.FlowPropertyData.Comment">
 <summary>
 Gets the comment for the rule attached to the property if it is bound.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.FlowPropertyData.IsConnected">
 <summary>
 Gets whether a connection has been made to this property and no value should be modified.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.FlowPropertyData.Apply(DriveWorks.Specification.FlowProperty)">
 <summary>
 Applies the property data to the given property.
 </summary>
 <param name="prop">The property to which to apply.</param>
</member>
<member name="M:DriveWorks.Transactions.FlowPropertyData.Apply(DriveWorks.Specification.FlowProperty,System.Boolean)">
 <summary>
 Applies the property data to the given property.
 </summary>
 <param name="prop">The property to which to apply.</param>
 <param name="allowEmptyRule">True to allow the rule to be toggled to dynamic even if the rule is empty.</param>
</member>
<member name="T:DriveWorks.Transactions.TaskRef">
 <summary>
 Represents a reference to a task in a task sequence.
 </summary>
 <remarks></remarks>
 <devdoc>
 This is public because callers may need an abstract way to refer to tasks.
 </devdoc>
</member>
<member name="P:DriveWorks.Transactions.TaskRef.TaskSequenceRef">
 <summary>
 Gets the task sequence reference.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.TaskRef.TaskIndex">
 <summary>
 Gets the task index.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TaskRef.GetConditionSequenceRef">
 <summary>
 Gets a reference to the task's condition sequence.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TaskRef.GetTask(DriveWorks.Project)">
 <summary>
 Gets the task from the specified project.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TaskSequenceRef">
 <summary>
 Represents a reference to a task sequence.
 </summary>
 <remarks></remarks>
 <devdoc>
 This is public because callers may need an abstract way to refer to task sequences.
 </devdoc>
</member>
<member name="M:DriveWorks.Transactions.TaskSequenceRef.GetTaskSequence(DriveWorks.Project)">
 <summary>
 Gets the task sequence from the specified project.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TaskSequenceRef.GetTaskRef(System.Int32)">
 <summary>
 Gets a reference to the specified task.
 </summary>
 <param name="taskIndex">The index of the task in the sequence.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TaskSequenceRef.FromStateChildObject(DriveWorks.Specification.State,System.Object)">
 <summary>
 Gets a task sequence ref from a transition, operation, or event on the given state.
 </summary>
 <param name="state">The state to which the transition, operation, or event belongs.</param>
 <param name="obj">The transition, operation, or event for which to get a reference.</param>
 <returns></returns>
 <remarks></remarks>
 <devdoc>
 This method is purely included for backward compatibility with the older transaction framework.
 </devdoc>
</member>
<member name="M:DriveWorks.Transactions.TaskSequenceRef.FromTransition(DriveWorks.Specification.Transition)">
 <summary>
 Constructs a task sequence reference for the given transition.
 </summary>
 <param name="transition">The transition for which to construct the reference.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TaskSequenceRef.FromOperation(DriveWorks.Specification.Operation)">
 <summary>
 Constructs a task sequence reference for the given operation.
 </summary>
 <param name="operation">The operation for which to construct the reference.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TaskSequenceRef.FromStateEvent(DriveWorks.Specification.State,DriveWorks.Specification.FlowEvent)">
 <summary>
 Constructs a task sequence reference for the given event on the given state.
 </summary>
 <param name="state">The state to which the event belongs.</param>
 <param name="flowEvent">The event.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TaskSequenceRef.FromMacro(DriveWorks.Specification.SpecificationMacro)">
 <summary>
 Constructs a task sequence reference for the given macro.
 </summary>
 <param name="macro">The macro for which to construct the reference.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TransitionTaskSequenceRef">
 <summary>
 Provides a persistent reference for a transition's task sequence.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.OperationTaskSequenceRef">
 <summary>
 Provides a persistent reference for an operation's task sequence.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.StateEventTaskSequenceRef">
 <summary>
 Provides a persistent reference for a state event's task sequence.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.MacroTaskSequenceRef">
 <summary>
 Provides a persistent reference for a macro's task sequence.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxTaskSequenceBase">
 <summary>
 Provides a base class for task sequence 
 transactions.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxTaskSequenceBase.#ctor(DriveWorks.Project,DriveWorks.Transactions.TaskSequenceRef)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxTaskSequenceBase" /> class.
 </summary>
 <param name="project">The project to which the task sequence belongs.</param>
 <param name="ref">The reference to the task sequence.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Transactions.TxTaskSequenceBase.Project">
 <summary>
 Gets the project.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.TxTaskSequenceBase.TaskSequenceRef">
 <summary>
 Gets a reference to the task sequence.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxTaskSequenceChangeTask.#ctor(DriveWorks.Project,DriveWorks.Transactions.TaskRef,System.String,DriveWorks.Transactions.FlowPropertyData[],System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxTaskSequenceChangeTask" /> class.
 </summary>
 <param name="project">The project to which the task belongs.</param>
 <param name="ref">The reference to the task.</param>
 <param name="newProperties">The new properties to apply to the task.</param>
 <param name="newTaskTitle">The new title of the task.</param>
 <param name="allowEmptyRules">True to allow properties to be toggled to dynamic without a rule.</param>
</member>
<member name="T:DriveWorks.Transactions.TxTaskSequenceTaskBase">
 <summary>
 Provides a base class for task transactions.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxTaskSequenceTaskBase.#ctor(DriveWorks.Project,DriveWorks.Transactions.TaskRef)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxTaskSequenceTaskBase" /> class.
 </summary>
 <param name="project">The project to which the task belongs.</param>
 <param name="ref">The reference to the task.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Transactions.TxTaskSequenceTaskBase.Project">
 <summary>
 Gets the project.
 </summary>
</member>
<member name="P:DriveWorks.Transactions.TxTaskSequenceTaskBase.TaskRef">
 <summary>
 Gets a reference to the task.
 </summary>
</member>
<member name="T:DriveWorks.Transactions.TxChangeMacroMacroCategory">
 <summary>
 Provides support for changing a macro's parent category.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxChangeMacroMacroCategory.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeMacroMacroCategory" /> transaction class.
 </summary>
 <param name="project">The project which contains the macro whose category is being changed.</param>
 <param name="macroName">The name of the macro being moved.</param>
 <param name="newCategoryPath">The full path to the category to which to move the macro.</param>
</member>
<member name="T:DriveWorks.Transactions.TxChangeOperationName">
 <summary>
 Provides support for updating an operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeOperationName.#ctor(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeOperationName" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="sourceStateTitle">The title of the source state.</param>
 <param name="name">The Name of the operation.</param>
 <param name="newName">The new name to give the operation.</param>
</member>
<member name="T:DriveWorks.Transactions.TxChangeSpecificationMacroCategoryName">
 <summary>
 Provides support for changing the name of a macro category.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxChangeSpecificationMacroCategoryName.#ctor(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeSpecificationMacroCategoryName" /> class.
 </summary>
 <param name="project">The project.</param>
 <param name="macroCategoryName">The name of the macro category to change.</param>
 <param name="newName">The new name to apply to the macro category.</param>
</member>
<member name="T:DriveWorks.Transactions.TxChangeSpecificationMacroName">
 <summary>
 Provides support for updating a specification macro name.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeSpecificationMacroName.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeSpecificationMacroName" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the specification macro.</param>
 <param name="newName">The new name to give the specification macro.</param>
</member>
<member name="T:DriveWorks.Transactions.TxChangeTransitionName">
 <summary>
 Provides support for updaing a trasnitions properties.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeTransitionName.#ctor(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeTransitionName" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="sourceStateTitle">The title of the source state.</param>
 <param name="name">The name of the transition.</param>
 <param name="newName">The new name for the transition.</param>
</member>
<member name="T:DriveWorks.Transactions.TxCreateSpecificationMacro">
 <summary>
 Provides support for creating a specification macro.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateSpecificationMacro.#ctor(DriveWorks.Project,System.String,DriveWorks.SpecificationMacroCategory)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateSpecificationMacro" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the new specification macro.</param>
 <param name="category">The category that the specification macro belongs to.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxCreateSpecificationMacroCategory">
 <summary>
 Provides support for creating a specification macro category.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxCreateSpecificationMacroCategory.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateSpecificationMacroCategory" /> transaction class.
 </summary>
 <param name="project">The project in which the new specification macro category will be created.</param>
 <param name="parentCategoryPath">Optionally, the path to the parent category of the new category, if none is specified the new category will be a root-level category..</param>
 <param name="newCategoryName">The name of the new category.</param>
</member>
<member name="T:DriveWorks.Transactions.TxCreateSpecificationMacroFromXml">
 <summary>
 Provides support for creating a specification macro from xml.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateSpecificationMacroFromXml.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateSpecificationMacroFromXml" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="macroXml">The XElement which contains the macro we are creating.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeMacroCategoryCategory">
 <summary>
 Provides support for changing a specification macro category's parent category.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxChangeMacroCategoryCategory.#ctor(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeMacroCategoryCategory" /> transaction class.
 </summary>
 <param name="project">The owning project.</param>
 <param name="categoryName">The name of the category being moved.</param>
 <param name="oldParentPath">The full path of the current parent category of the category being moved.</param>
 <param name="newParentPath">The full path of the new parent category of the category being moved.</param>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteSpecificationMacro">
 <summary>
 Provides support for deleting a specification macro.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteSpecificationMacro.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteSpecificationMacro" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the specification macro to delete.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteSpecificationMacroCategory">
 <summary>
 Provides support for deleting a specification macro category.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteSpecificationMacroCategory.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteSpecificationMacroCategory" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="categoryPath">The full path to the category to be deleted.</param>
</member>
<member name="T:DriveWorks.Transactions.TxUndoDeleteSpecificationMacro">
 <summary>
 Provides support for re-creating a specification macro.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeleteSpecificationMacro.#ctor(DriveWorks.Project,System.String,DriveWorks.Specification.TaskSequence,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxUndoDeleteSpecificationMacro" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="macroName">The name of the specification macro to re-create.</param>
 <param name="taskSequence">The tasks of the specification macro.</param>
 <param name="categoryPath">The path of the category that the specification macro belongs to.</param>
</member>
<member name="T:DriveWorks.Transactions.TxUndoDeleteSpecificationMacroCategory">
 <summary>
 Provides support for undoing the deletion of a specification macro category.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeleteSpecificationMacroCategory.#ctor(DriveWorks.Project,System.String,System.Xml.Linq.XElement)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxUndoDeleteSpecificationMacroCategory" /> transaction class.
 </summary>
 <param name="project">The project from which the specification macro category was deleted.</param>
 <param name="parentCategoryPath">The full path to the parent category.</param>
 <param name="categoryData">A clone of the backing XML data for the specification macro category.</param>
</member>
<member name="T:DriveWorks.Transactions.TxChangeChildSpecificationInputDefinitionRule">
 <summary>
 Provides support for changing the rule
 of a child specification input definition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeChildSpecificationInputDefinitionRule.#ctor(DriveWorks.Project,System.String,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeChildSpecificationInputDefinitionRule" /> transaction class.
 </summary>
 <param name="project">The project containing the child specification list.</param>
 <param name="childSpecificationListName">The name of the child specification list containing the input definition.</param>
 <param name="inputDefName">The name of the input definition whose rule to change.</param>
 <param name="projectName">The project name of the definition containing the rule.</param>
 <param name="newRule">The new rule to apply.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeFormControlPropertyExtendedValue">
 <summary>
 Provides support for changing whether a property is extended or unextended.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeItemListRule">
 <summary>
 Provides support for changing the item name rule
 of a item list type definition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeItemListRule.#ctor(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeItemListRule" /> transaction class.
 </summary>
 <param name="project">The project containing the item list.</param>
 <param name="itemListName">The name of the item list containing the type definition.</param>
 <param name="typeDef">The name of the type definition whose rule to change.</param>
 <param name="newRule">The new rule to apply.</param>
</member>
<member name="T:DriveWorks.Transactions.TxChangeDocumentRuleFormula">
 <summary>
 Provides support for changing the formula of a rule within a document.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.TxChangeDocumentRuleFormula.#ctor(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeDocumentRuleFormula" /> transaction class.
 </summary>
 <param name="project">The project containing the document.</param>
 <param name="ruleId">The Id of the rule to change.</param>
 <param name="newFormula">The new formula to apply.</param>
</member>
<member name="T:DriveWorks.Transactions.TxChangeControlIndex">
 <summary>
 Provides support for changing one or more controls' property value.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeControlPropertyRuleAndValue">
 <summary>
 Provides support for changing one or more controls' property value and rule.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeInitialState">
 <summary>
 Provides support for creating a state.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeInitialState.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Changes the starting state for the specification flow.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="stateTitle">The title of the new state.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeOperationTeams">
 <summary>
 Provides support for changing an operation's teams.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeOperationTeams.#ctor(DriveWorks.Project,System.String,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeOperationTeams" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="stateTitle">The title of the source state.</param>
 <param name="name">The Name of the operation.</param>
 <param name="newTeams">The list of teams to assign.</param>
 <param name="isCreatorPermitted">If the creator of the specification is permitted.</param>
 <param name="isOwnerPermitted">If the owner of the specification is permitted.</param>
 <param name="isUniversal">If all teams are allowed by the instance.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeSpecificationProperty">
 <summary>
 Provides support for creating a specification property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeSpecificationProperty.#ctor(DriveWorks.Project,System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeSpecificationProperty" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The title of the property to change.</param>
 <param name="comment">The new comment for the property.</param>
 <param name="rule">The new formula for the property.</param>
 <param name="index">The index to move the property to. -1 can be used to append the property.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeStateTeams">
 <summary>
 Provides support for changing a state's teams.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeStateTeams.#ctor(DriveWorks.Project,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeStateTeams" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="title">The title of the state to change.</param>
 <param name="newTeams">The list of teams to assign.</param>
 <param name="isCreatorPermitted">If the creator of the specification is permitted.</param>
 <param name="isOwnerPermitted">If the owner of the specification is permitted.</param>
 <param name="isUniversal">If all teams are allowed by the instance.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeTransitionTeams">
 <summary>
 Provides support for changing a transition's teams.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeTransitionTeams.#ctor(DriveWorks.Project,System.String,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeTransitionTeams" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="stateTitle">The title of the source state.</param>
 <param name="name">The Name of the transition.</param>
 <param name="newTeams">The list of teams to assign.</param>
 <param name="isCreatorPermitted">If the creator of the specification is permitted.</param>
 <param name="isOwnerPermitted">If the owner of the specification is permitted.</param>
 <param name="isUniversal">If all teams are allowed by the instance.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxCreateSpecificationProperty">
 <summary>
 Provides support for creating a specification property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateSpecificationProperty.#ctor(DriveWorks.Project,System.String,System.String,System.String,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateSpecificationProperty" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The title of the new property.</param>
 <param name="comment">The comment for the new property.</param>
 <param name="rule">The formula for the new property.</param>
 <param name="index">The index to insert the new property. -1 can be used to append the property.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteSpecificationProperty">
 <summary>
 Provides support for creating a specification property.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteSpecificationProperty.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteSpecificationProperty" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The title of the property to delete.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeControlPropertyRule">
 <summary>
 Provides support for changing one or more controls' property value.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxCreateDecision">
 <summary>
 Provides support for creating a decision.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateDecision.#ctor(DriveWorks.Project,System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String,System.Object[],System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateDecision" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the new decision.</param>
 <param name="conditionExpression">The condition expression of the decision.</param>
 <param name="nextStepFalse">The next step, should the condition expression return false.</param>
 <param name="nextStepTrue">The next step, should the condition expression return true.</param>
 <param name="left">The horrizontal position of the decision.</param>
 <param name="top">The vertical position of the decision.</param>
 <param name="oldParents">
 An array of parents that are to be connected to this decision. 
 The array should be in the format of Object() {step, connectNumber}.
 Step is the form or decision step to be connected and connectNumber as an integer to 
 indicate if the connection was a true(2), false(1) or default(0) next step in the case of decision steps.
 </param>
 <param name="comment">The comment for the rule.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateDecision.#ctor(DriveWorks.Project,System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String,System.Object[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateDecision" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the new decision.</param>
 <param name="conditionExpression">The condition expression of the decision.</param>
 <param name="nextStepFalse">The next step, should the condition expression return false.</param>
 <param name="nextStepTrue">The next step, should the condition expression return true.</param>
 <param name="left">The horrizontal position of the decision.</param>
 <param name="top">The vertical position of the decision.</param>
 <param name="oldParents">
 An array of parents that are to be connected to this decision. 
 The array should be in the format of Object() {step, connectNumber}.
 Step is the form or decision step to be connected and connectNumber as an integer to 
 indicate if the connection was a true(2), false(1) or default(0) next step in the case of decision steps.
 </param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxCreateForm">
 <summary>
 Provides support for creating a form.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateForm.#ctor(DriveWorks.Project,System.String,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.Object[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateForm" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the new form.</param>
 <param name="nextStep">The next step, from this form.</param>
 <param name="left">The horizontal position of the form.</param>
 <param name="top">The vertical position of the form.</param>
 <param name="oldParents">
 An array of parents that are to be connected to this form. 
 The array should be in the format of Object() {step, connectNumber}.
 Step is the form or decision step to be connected and connectNumber as an integer to 
 indicate if the connection was a true(2), false(1) or default(0) next step in the case of decision steps.
 </param>
</member>
<member name="M:DriveWorks.Transactions.TxCreateForm.#ctor(DriveWorks.Project,System.String,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.Object[],DriveWorks.Forms.SimpleColor,DriveWorks.Forms.SimpleFont,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateForm" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the new form.</param>
 <param name="nextStep">The next step, from this form.</param>
 <param name="left">The horizontal position of the form.</param>
 <param name="top">The vertical position of the form.</param>
 <param name="oldParents">
 An array of parents that are to be connected to this form. 
 The array should be in the format of Object() {step, connectNumber}.
 Step is the form or decision step to be connected and connectNumber as an integer to 
 indicate if the connection was a true(2), false(1) or default(0) next step in the case of decision steps.
 </param>
 <param name="backgroundColor">The background color to apply to the form.</param>
 <param name="defaultFont">The default font to apply to the form.</param>
 <param name="showStandardNavigation">Specifies whether the form should show standard navigation.</param>
 <param name="showTaskList">Specifies whether the form should show the task list.</param>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteDecision">
 <summary>
 Provides support for creating a decision.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteDecision.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteDecision" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="decisionName">The name of the decision to be deleted.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteForm">
 <summary>
 Provides support for deleting a form.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteForm.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteForm" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the form to delete.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeDecision">
 <summary>
 Provides support for updating a decision.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeDecision.#ctor(DriveWorks.Project,System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeDecision" /> transaction class.
 </summary>
 <param name="project">The project in which the form will be update.</param>
 <param name="name">The name of the decision to update.</param>
 <param name="conditionExpression">The condition expression of the decision.</param>
 <param name="nextStepFalse">The next step, should the condition expression return false.</param>
 <param name="nextStepTrue">The next step, should the condition expression return true.</param>
 <param name="left">The horrizontal position of the decision.</param>
 <param name="top">The vertical position of the decision.</param>
 <param name="comment">The comment for the rule</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeDecision.#ctor(DriveWorks.Project,System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeDecision" /> transaction class.
 </summary>
 <param name="project">The project in which the form will be update.</param>
 <param name="name">The name of the decision to update.</param>
 <param name="conditionExpression">The condition expression of the decision.</param>
 <param name="nextStepFalse">The next step, should the condition expression return false.</param>
 <param name="nextStepTrue">The next step, should the condition expression return true.</param>
 <param name="left">The horrizontal position of the decision.</param>
 <param name="top">The vertical position of the decision.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeForm">
 <summary>
 Provides support for updating a form.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeForm.#ctor(DriveWorks.Project,System.String,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeForm" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the form to update.</param>
 <param name="nextStep">The next step, from this form.</param>
 <param name="left">The horrizontal position of the form.</param>
 <param name="top">The vertical position of the form.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxRenameStep">
 <summary>
 Provides support for deleting a form.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxRenameStep.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxRenameStep" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="oldName">The name of the step to rename.</param>
 <param name="newName">The new name to give the step.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeControlPropertyValue">
 <summary>
 Provides support for changing one or more controls' property value.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeDataTableName">
 <summary>
 Provides support for changing the name of a data table.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeDataTableName.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeDataTableName" /> class.
 </summary>
 <param name="project">The project.</param>
 <param name="dataTableName">The name of the data table to change.</param>
 <param name="newName">The new name to apply to the data table.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeDocumentName.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeDocumentName" /> class.
 </summary>
 <param name="project">The project.</param>
 <param name="oldName">The name of the document to change.</param>
 <param name="newName">The new name to apply to the document.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeFormMessageComment">
 <summary>
 Provides support for changing a form message.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeFormMessageComment.#ctor(DriveWorks.Project,System.Int32,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeFormMessageComment" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="code">The code of the form message to change.</param>
 <param name="newComment">The new comment to give the form message.</param>
 <remarks>Arguments can be set to nothing if no change is needed.</remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeFormMessageRule">
 <summary>
  Provides support for changing a form message rule.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeFormMessageRule.#ctor(DriveWorks.Project,System.Int32,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeFormMessageRule" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="code">The code of the form message to change.</param>
 <param name="newRule">The new rule to give the form message.</param>
 <remarks>Arguments can be set to nothing if no change is needed.</remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeFormMessageRuleAndComment">
 <summary>
 Provides support for changing a form message.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeFormMessageRuleAndComment.#ctor(DriveWorks.Project,System.Int32,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeFormMessageRuleAndComment" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="code">The code of the form message to change.</param>
 <param name="newComment">The new comment to give the form message.</param>
 <param name="newRule">The new rule to give the form message.</param>
 <remarks>Arguments can be set to nothing if no change is needed.</remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeVariableCategoryImagePath">
 <summary>
 Provides support for changing the name of a variable category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeVariableCategoryImagePath.#ctor(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeVariableCategoryImagePath" /> class.
 </summary>
 <param name="project">The project.</param>
 <param name="variableCategoryName">The name of the variable category to change.</param>
 <param name="newImagePath">The new image path to apply to the variable category.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeVariableCategoryName">
 <summary>
 Provides support for changing the name of a variable category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeVariableCategoryName.#ctor(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeVariableCategoryName" /> class.
 </summary>
 <param name="project">The project.</param>
 <param name="variableCategoryName">The name of the variable category to change.</param>
 <param name="newName">The new name to apply to the variable category.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeVariableComment">
 <summary>
 Provides support for changing a variable's comment.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeVariableComment.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeVariableComment" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="variableName">The name of the variable whose comment to change.</param>
 <param name="newComment">The new comment to apply.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeVariableRule">
 <summary>
 Provides support for changing a variable's rule.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeVariableRule.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeVariableRule" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="variableName">The name of the variable whose rule to change.</param>
 <param name="newRule">The new rule to apply.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeVariableVariableCategory">
 <summary>
 Provides support for changing a variable's parent category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeVariableVariableCategory.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeVariableVariableCategory" /> transaction class.
 </summary>
 <param name="project">The project which contains the variable whose category is being changed.</param>
 <param name="variableDisplayName">The display name of the variable being moved.</param>
 <param name="newCategoryPath">The full path to the category to which to move the variable.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeVariableVariableCategory.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxChangeVariableCategoryCategory">
 <summary>
 Provides support for changing a variable-category's parent category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeVariableCategoryCategory.#ctor(DriveWorks.Project,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeVariableCategoryCategory" /> transaction class.
 </summary>
 <param name="project">The owning project.</param>
 <param name="categoryName">The name of the category being moved.</param>
 <param name="oldParentPath">The full path of the current parent category of the category being moved.</param>
 <param name="newParentPath">The full path of the new parent category of the category being moved.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeVariableCategoryCategory.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxConvertFormControl">
 <summary>
 Provides support for converting form controls.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxCreateFormMessage">
 <summary>
 Provides support for creating a form message.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateFormMessage.#ctor(DriveWorks.Project,System.Int32,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateFormMessage" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="code">The code of the form message to create.</param>
 <param name="comment">Comment to give the form message.</param>
 <param name="rule">Rule to give the form message.</param>
 <remarks>Arguments can be set to nothing if no change is needed.</remarks>
</member>
<member name="T:DriveWorks.Transactions.TxCreateVariable">
 <summary>
 Provides support for creating a variable.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateVariable.#ctor(DriveWorks.Project,System.String,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateVariable" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="displayName">The display name of the variable to create.</param>
 <param name="rule">The rule to apply, or a null reference to not apply a comment..</param>
 <param name="comment">The comment to apply, or a null reference to not apply a comment.</param>
 <param name="category">The category to apply by its path, or a null reference to not apply a category.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteDataTable">
 <summary>
 Provides support for deleting a data table.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteDataTable.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteDataTable" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="dataTableName">The name of the data table to be deleted.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteDataTable.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxDeleteFormControls">
 <summary>
 Provides support for deleting form controls.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteFormMessage">
 <summary>
 Provides support for deleting a form message.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteFormMessage.#ctor(DriveWorks.Project,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteFormMessage" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="code">The code of the form message to delete.</param>
 <remarks>Arguments can be set to nothing if no change is needed.</remarks>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteVariable">
 <summary>
 Provides support for deleting a variable.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteVariable.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteVariable" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="displayName">The display name of the variable to delete.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxRecreateFormControls">
 <summary>
 Provides support for recreating form controls after they have been deleted from a form.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxRecreateFormControls.GetControlData(DriveWorks.Forms.ContainerControlBase)">
 <summary>
 Gets deserialized data that will be used to recreate controls.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxUndoDeletedDataTable">
 <summary>
 Provides support for undeleting a data table.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeletedDataTable.#ctor(DriveWorks.Project,System.Xml.Linq.XElement,System.Object[0:,0:])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxUndoDeletedDataTable" /> class.
 </summary>
 <param name="project">The project the data table was deleted from.</param>
 <param name="documentData">A clone of the original data table data element.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeletedDataTable.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxUndoDeletedVariableCategory">
 <summary>
 Provides support for undoing the deletion of a variable category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeletedVariableCategory.#ctor(DriveWorks.Project,System.String,System.Xml.Linq.XElement)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxUndoDeletedVariableCategory" /> transaction class.
 </summary>
 <param name="project">The project from which the variable category was deleted.</param>
 <param name="parentCategoryPath">The full path to the parent category.</param>
 <param name="categoryData">A clone of the backing XML data for the variable category.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeletedVariableCategory.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxChangeConstantCategory">
 <summary>
 Provides support for changing a constant's category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeConstantCategory.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeConstantCategory" /> transaction class.
 </summary>        
 <param name="constantDisplayName">The display name of the constant whose category is to be changed.</param>
 <param name="newCategoryName">The name of the new category.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeConstantCategory.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxChangeConstantValue">
 <summary>
 Provides support for changing a constant's value.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeConstantValue.#ctor(DriveWorks.Project,System.String,System.Object)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeConstantCategory" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="constantDisplayName">The display name of the constant whose category is to be changed.</param>
 <param name="newValue">The new value of the constant.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeConstantValue.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxCreateConstant">
 <summary>
 Provides support for creating a constant.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateConstant.#ctor(DriveWorks.Project,System.String,System.Object,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateConstant" /> transaction class.
 </summary>
 <param name="project">The project in which the new constant will be created.</param>
 <param name="displayName">The display name of the new constant.</param>
 <param name="value">The value to assign to the new constant.</param>
 <param name="category">The category to which to assign the new constant.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateConstant.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxCreateDocument">
 <summary>
 Provides support for creating a document.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateDocument.#ctor(DriveWorks.Project,System.Type,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateDocument" /> class.
 </summary>
 <param name="project">The project the document is to be created in.</param>
 <param name="documentType">The type of the document to create.</param>
 <param name="documentName">The name of the document to create.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateDocument.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxCreateVariableCategory">
 <summary>
 Provides support for creating a variable category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateVariableCategory.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateVariableCategory" /> transaction class.
 </summary>
 <param name="project">The project in which the new variable category will be created.</param>
 <param name="parentCategoryPath">Optionally, the path to the parent category of the new variable category, if none is specified the new category will be a root-level variable category..</param>
 <param name="newCategoryName">The name of the new variable category.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateVariableCategory.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxDeleteConstant">
 <summary>
 Provides support for deleting a constant.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteConstant.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteConstant" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="constantDisplayName">The display name of the constant to delete.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteConstant.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxDeleteDocument">
 <summary>
 Provides support for deleting a document.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteDocument.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteDocument" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="documentName">The name of the document to be deleted.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteDocument.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.ITransaction">
 <summary>
 Provides a contract for objects which provide undo/redo capabilities to an operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.ITransaction.Execute">
 <summary>
 Commits the transaction.
 </summary>
 <returns>
 A transaction which can undo the result of the executed transaction.
 </returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.ProjectTransactionFactory">
 <summary>
 Provides support for performing operations against a project
 in a transacted way.
 </summary>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeChildSpecificationInputDefinitionRule(DriveWorks.Forms.ChildSpecificationList,DriveWorks.ProjectChildSpecificationProjectDef,DriveWorks.ProjectChildSpecificationInputDef,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 change the item rule of the specified ProjectChildSpecificationInputDef
 </summary>
 <param name="childSpecificationList">The ChildSpecificationList the input definition resides in.</param>
 <param name="projectDef">The ChildSpecificationProjectDef containing the ChildSpecificationInputDef.</param>
 <param name="inputDef">The ChildSpecificationInputDef who's rule to change.</param>
 <param name="newFormula">The new formula to apply.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeItemListRule(DriveWorks.Forms.ItemList,DriveWorks.ProjectItemListTypeDef,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 change the item rule of the specified ProjectItemListTypeDef
 </summary>
 <param name="itemList">The ItemList the Type definition resides in.</param>
 <param name="typeDefinition">The name of the type definition whose rule to change.</param>
 <param name="newFormula">The new formula to apply.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDocumentRuleFormula(DriveWorks.ProjectDocument,DriveWorks.ProjectDocumentRule,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 change the rule of the specified ProjectDocumentRule
 </summary>
 <param name="document">The document in which the rule exists.</param>
 <param name="rule">The name of the rule whose formula to change.</param>
 <param name="newFormula">The new formula to apply.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteDocument(DriveWorks.ProjectDocument)">
 <summary>
 Creates a transaction which, when committed, will 
 delete the specified document.
 </summary>
 <param name="document">The document to be deleted.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateDocument(System.Type,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 create a document of the specified type, with the given name.
 </summary>
 <param name="documentType">The type of the document to create, must be a subclass of <see cref="T:DriveWorks.ProjectDocument" />.</param>
 <param name="documentName">The name of the document to create.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDocumentName(DriveWorks.ProjectDocument,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 change the name of the specified document.
 </summary>
 <param name="document">The document to change the name of.</param>
 <param name="newName">The new name to give the document.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDataTableName(DriveWorks.ProjectDataTable,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 rename a transaction with the given name.
 </summary>
 <param name="dataTable">The data table that will have its name changed.</param>
 <param name="newName">The new name to give the data table.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteDataTable(DriveWorks.ProjectDataTable)">
 <summary>
 Creates a transaction which, when committed, will 
 delete the specified data table.
 </summary>
 <param name="dataTable">The data table to be deleted.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateConstant(System.String,System.Object,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 create a constant with the given display name, and optionally, value and category name.
 </summary>
 <param name="displayName">The display name of the new constant.</param>
 <param name="value">Optionally, the value to apply to the constant.</param>
 <param name="categoryName">Optionally, the name of a category to apply to the constant.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteConstant(DriveWorks.ProjectConstant)">
 <summary>
 Creates a transaction which, when committed, will
 delete the specified constant.
 </summary>
 <param name="constant">The constant to be deleted.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeConstantCategory(DriveWorks.ProjectConstant,System.String)">
 <summary>
 Creates a transaction which, when committed, will change the category of the
 specified constant.
 </summary>
 <param name="constant">The constant to modify.</param>
 <param name="newCategoryName">The new category name to assign to the constant.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeConstantValue(DriveWorks.ProjectConstant,System.Object)">
 <summary>
 Creates a transaction which, when committed, will change the value of the
 specified constant.
 </summary>
 <param name="constant">The constant to modify.</param>
 <param name="newValue">The new value to assign to the constant.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeParentVariableCategory(DriveWorks.ProjectVariable,DriveWorks.ProjectVariableCategory)">
 <summary>
 Creates a transaction which, when committed, will 
 change the parent category of the specified variable.
 </summary>
 <param name="variable">The variable to modify.</param>
 <param name="newCategory">The new parent category, or a null reference (Nothing in Visual Basic) to remove the parent.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeParentVariableCategory(DriveWorks.ProjectVariableCategory,DriveWorks.ProjectVariableCategory)">
 <summary>
 Creates a transaction which, when committed, will 
 change the parent category of the specified variable category.
 </summary>
 <param name="variableCategory">The variable category to modify.</param>
 <param name="newParentCategory">The new parent category, or a null reference (Nothing in Visual Basic) to remove the parent.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteVariable(DriveWorks.ProjectVariable)">
 <summary>
 Creates a transaction which, when committed, will 
 delete the specified variable
 </summary>
 <param name="variable">The varaible to delete.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteVariable(System.String,System.String,System.String,DriveWorks.ProjectVariableCategory)">
 <summary>
 Creates a transaction which, when committed, will 
 create a new variable.
 </summary>
 <param name="displayName">The display name of the variable to create.</param>
 <param name="rule">The rule to apply, or a null reference to not apply a comment..</param>
 <param name="comment">The comment to apply, or a null reference to not apply a comment.</param>
 <param name="category">The category to apply, or a null reference to not apply a category.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableRule(DriveWorks.ProjectVariable,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 change the specified variable's rule.
 </summary>
 <param name="variable">The variable to change.</param>
 <param name="newRule">The new rule.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableComment(DriveWorks.ProjectVariable,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 change the specified variable's comment.
 </summary>
 <param name="variable">The variable to change.</param>
 <param name="newComment">The new comment.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableRuleAndComment(DriveWorks.ProjectVariable,System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 </summary>
 <param name="variable">The variable to change.</param>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
 <remarks>
 This transaction should be used when changing rules and comments 
 to make sure that rule history is not duplicated.
 </remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableCategoryName(DriveWorks.ProjectVariableCategory,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 change the specified variable category's name.
 </summary>
 <param name="variableCategory">The variable category to change.</param>
 <param name="newName">The new name.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableCategoryImagePath(DriveWorks.ProjectVariableCategory,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 change the specified variable category's image path.
 </summary>
 <param name="variableCategory">The variable category to change.</param>
 <param name="newImagePath">The new image path.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateVariableCategory(System.String,DriveWorks.ProjectVariableCategory)">
 <summary>
 Creates a transaction which, when committed, will 
 create a new variable category.
 </summary>
 <param name="displayName">The display name of the new category.</param>
 <param name="parentCategory">Optionally, the parent category, or a null reference to leave the category rooted.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateVariableCategory(System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 create a new variable category.
 </summary>
 <param name="displayName">The display name of the new category.</param>
 <param name="parentCategoryPath">Optionally, the parent category path, or a null reference to leave the category rooted.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateVariable(System.String,System.String,System.String,DriveWorks.ProjectVariableCategory)">
 <summary>
 Creates a transaction which, when committed, will 
 create a new variable.
 </summary>
 <param name="displayName">The display name of the variable to create.</param>
 <param name="rule">The rule to apply, or a null reference to not apply a comment..</param>
 <param name="comment">The comment to apply, or a null reference to not apply a comment.</param>
 <param name="category">The category to apply, or a null reference to not apply a category.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateVariable(System.String,System.String,System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 create a new variable.
 </summary>
 <param name="displayName">The display name of the variable to create.</param>
 <param name="rule">The rule to apply, or a null reference to not apply a comment..</param>
 <param name="comment">The comment to apply, or a null reference to not apply a comment.</param>
 <param name="category">The category by its path to apply, or a null reference to not apply a category.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteVariableCategory(DriveWorks.ProjectVariableCategory,DriveWorks.DeleteVariableCategoryBehavior)">
 <summary>
 Creates a transaction which, when committed, will 
 delete a variable category.
 </summary>
 <param name="variableCategory">The variable category to delete.</param>
 <param name="deleteBehavior">The behavior to apply when deleting children.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSimpleTable(System.String,System.String[0:,0:])">
 <summary>
 Creates a transaction which, when committed, will 
 create and populate a simple table.
 </summary>
 <param name="tableName">The name of the table to be created.</param>
 <param name="data">The data to populate the table with.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationName(System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 update the specification name's special variable with the given values.
 </summary>
 <param name="newRule">The new rule to set.</param>
 <param name="newComment">The new comment.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationPath(System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 update the specification path's special variable with the given values.
 </summary>
 <param name="newRule">The new rule to set.</param>
 <param name="newComment">The new comment.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationAdditionalFolders(System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 update the specification addtion folder's special variable with the given values.
 </summary>
 <param name="newRule">The new rule to set.</param>
 <param name="newComment">The new comment.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationTags(System.String,System.String)">
 <summary>
 Creates a transaction, which when committed, will
 update the specification tags special variable with the given values.
 </summary>
 <param name="newRule">The new rule to set.</param>
 <param name="newComment">The new comment.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationProperty(System.String,System.String,System.String,System.Int32)">
 <summary>
 Creates a transaction which, when commited, will
 create a new specification property with the given values.
 </summary>
 <param name="name">The name to give the new property.</param>
 <param name="rule">The rule to apply to the new property.</param>
 <param name="comment">The comment to apply to the new property.</param>
 <param name="index">
 The index to insert the property at, any invalid index will result in the property being appended on the list.
 </param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteSpecificationProperty(DriveWorks.ProjectSpecificationProperty)">
 <summary>
 Creates a transaction which, when commited, will
 delete the given specification property.
 </summary>
 <param name="specificationProperty">The specification property to delete.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationProperty(DriveWorks.ProjectSpecificationProperty,System.String,System.String,System.String,System.Int32)">
 <summary>
 Creates a transaction which, when commited, will
 Change the values of the given specification property.
 </summary>
 <param name="specificationProperty">The specifiation property to change.</param>
 <param name="newName">New name to apply to the property.</param>
 <param name="rule">New rule to apply to the property.</param>
 <param name="comment">Comment to apply to the property.</param>
 <param name="index">New index to move the property to.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxResetSpecificationFlow">
 <summary>
 Creates a transaction which, when commited, will
 Reset the current specification to default status.
 </summary>
 <returns></returns>
 <remarks>The inverse transaction of this is to customize the specification definition and delete all states, ready for returning back to a previous flow.</remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationFlowCustomization(System.Boolean)">
 <summary>
 Creates a transaction which, when commited, will
 Change the specification flow's customization to either customized or defualt.
 </summary>
 <param name="customize">False to restore the default specification flow, true to allow changes.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationFlow(System.Xml.Linq.XElement)">
 <summary>
 Creates a transaction which, when commited, will
 change the specification flow to the given data.
 This will wipe the current flow.
 </summary>
 <param name="newSpecificationFlow">Specification flow as XML.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeInitialState(DriveWorks.Specification.State)">
 <summary>
 Creates a transaction which, when committed, will
 Change the intitial state of the specification flow.
 </summary>
 <param name="state">The new state to set as the intitial state.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateState(System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 create a state with given title and position.
 </summary>
 <param name="title">The title of the new state.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateOperation(System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 create an operation with given name on the given state.
 </summary>
 <param name="stateTitle">The state to create this operation in.</param>
 <param name="name">The name and title of the new operation</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateTransition(System.String,System.Guid,System.Guid)">
 <summary>
 Creates a transaction which, when committed, will 
 create an transition with a given name from given source state to target state.
 </summary>
 <param name="name">The name of the transition.</param>
 <param name="sourceStateId">The Id of the source state.</param>
 <param name="targetStateId">The Id of the target state.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteOperation(DriveWorks.Specification.Operation)">
 <summary>
 Creates a transaction which, when committed, will 
 delete an operation by name on a state.
 </summary>
 <param name="operation">The operation to delete.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteState(DriveWorks.Specification.State)">
 <summary>
 Creates a transaction which, when committed, will 
 delete a state by the given name.
 </summary>
 <param name="state">The state to delete.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteTransition(DriveWorks.Specification.Transition)">
 <summary>
 Creates a transaction which, when committed, will 
 delete the transition by name from given state.
 </summary>
 <param name="transition">The transition to delete.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxUndoDeleteOperation(System.String,System.String,System.String,DriveWorks.Specification.Conditions,DriveWorks.Specification.Teams,DriveWorks.Specification.TaskSequence)">
 <summary>
 Creates a transaction which, when committed, will 
 undo a deletion of a operation with all its specified parameters.
 </summary>
 <param name="sourceStateTitle">The title of the source state.</param>
 <param name="name">The name of the operation to re-create.</param>
 <param name="title">The title of the operation.</param>
 <param name="conditions">The conditions of the operation.</param>
 <param name="teams">The teams of the operation.</param>
 <param name="taskSequence">The tasks of the operation.</param>
 <remarks>Parameters can be set to nothing for no prefernce.</remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxUndoDeleteTransition(System.Guid,System.Guid,System.String,System.String,DriveWorks.Specification.Conditions,DriveWorks.Specification.Teams,DriveWorks.Specification.FlowEvent)">
 <summary>
 Creates a transaction which, when committed, will 
 undo the deletion of a transition with all its given parameters.
 </summary>
 <param name="sourceStateId">The Id of the source state.</param>
 <param name="targetStateId">The Id of the target state.</param>
 <param name="name">The name of the transition to re-create.</param>
 <param name="title">The title of the transition to re-create.</param>
 <param name="conditions">The conditions of the transition.</param>
 <param name="teams">The teams of the transition.</param>
 <param name="invokeEvent">The invoke event of the transition.</param>
 <remarks>Parameters can be set to nothing for no prefernce.</remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeOperation(DriveWorks.Specification.Operation,System.String,DriveWorks.Specification.Condition[],DriveWorks.Specification.Task[])">
 <summary>
 Creates a transaction which, when committed, will 
 update an operation with given parameters.
 </summary>
 <param name="operation">The operation to update.</param>
 <param name="newTitle">The new title of the operation.</param>
 <param name="newConditons">The new conditions for the operation.</param>
 <param name="newTaskSequence">The new tasks for the operation.</param>
 <remarks>Arguments can be set to nothing if no change is needed.</remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeOperationName(DriveWorks.Specification.Operation,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 rename an operation with the given name.
 </summary>
 <param name="operation">The operation to rename.</param>
 <param name="newName">The new name to give the operation.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeStateProperties(DriveWorks.Specification.State,System.String,DriveWorks.Specification.StateType,DriveWorks.Specification.Task[],DriveWorks.Specification.Task[])">
 <summary>
 Creates a transaction which, when committed, will 
 update a states properties, old title is the current title of the state - before update.
 </summary>
 <param name="state">The state to update.</param>
 <param name="newTitle">The new title of the state.</param>
 <param name="newSpecFlowStateType">The new type for the state.</param>
 <param name="newOnStateEnterEvent">The new enter event for the state.</param>
 <param name="newOnStateLeaveEvent">The new leave event for the state.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeStateTeams(DriveWorks.Specification.State,System.String[],System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a transaction which, when committed, will 
 update a state's teams list and properties
 </summary>
 <param name="state">The state to update.</param>
 <param name="newTeams">The list of teams to assign.</param>
 <param name="isCreatorPermitted">If the creator of the specification is permitted.</param>
 <param name="isOwnerPermitted">If the owner of the specification is permitted.</param>
 <param name="isUniversal">If all teams are allowed by the instance.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeOperationTeams(DriveWorks.Specification.Operation,System.String[],System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a transaction which, when committed, will 
 update an operation's teams list and properties
 </summary>
 <param name="operation">The operation to update.</param>
 <param name="newTeams">The list of teams to assign.</param>
 <param name="isCreatorPermitted">If the creator of the specification is permitted.</param>
 <param name="isOwnerPermitted">If the owner of the specification is permitted.</param>
 <param name="isUniversal">If all teams are allowed by the instance.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTransitionTeams(DriveWorks.Specification.Transition,System.String[],System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a transaction which, when committed, will 
 update a transition's teams list and properties
 </summary>
 <param name="transition">The transition to update.</param>
 <param name="newTeams">The list of teams to assign.</param>
 <param name="isCreatorPermitted">If the creator of the specification is permitted.</param>
 <param name="isOwnerPermitted">If the owner of the specification is permitted.</param>
 <param name="isUniversal">If all teams are allowed by the instance.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTransitionProperties(DriveWorks.Specification.Transition,System.String,System.String,DriveWorks.Specification.Condition[],DriveWorks.Specification.Task[])">
 <summary>
 Creates a transaction which, when committed, will 
 update a transition with the given properties.
 </summary>
 <param name="transition">The the transition to update.</param>
 <param name="targetStateTitle">The title of the target state.</param>
 <param name="newTitle">The new title for the transition.</param>
 <param name="newConditons">The new conditions for the transition.</param>
 <param name="newInvokeTaskSequence">The new invoke task sequence for the transition</param>
 <remarks>Arguments can be set to nothing if no change is needed.</remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTransitionName(DriveWorks.Specification.Transition,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 rename an transition with the given name.
 </summary>
 <param name="transition">The transition to rename.</param>
 <param name="newName">The new name to give the transition.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveOperation(DriveWorks.Specification.State,System.Int32,System.Int32)">
 <summary>
 Creates a transaction which, when committed, will 
 move an operation from one index to another.
 </summary>
 <param name="state">The parent state of the operation to move.</param>
 <param name="oldIndex">The Current index of the operation on the operations list.</param>
 <param name="newIndex">The new index for the operation.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveTransition(DriveWorks.Specification.State,System.Int32,System.Int32)">
 <summary>
 Creates a transaction which, when committed, will 
 move a transition from one index to another.
 </summary>
 <param name="state">The parent state of the transition to move.</param>
 <param name="oldIndex">The Current index of the transition on the transitions list.</param>
 <param name="newIndex">The new index for the transition.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTaskSequenceOrder(DriveWorks.Transactions.TaskSequenceRef,System.Int32,System.Int32)">
 <summary>
 Creates a transaction which, when committed, will 
 update the task sqeuence for the parent object by moving the object at the old index to the new index
 </summary>
 <param name="taskSequenceRef">The reference to the task sequence to modify.</param>
 <param name="oldIndex">The index of the object to move.</param>
 <param name="newIndex">The index of the where to move the object.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateTask(DriveWorks.Transactions.TaskSequenceRef,System.Type,System.String)">
 <summary>
 Creates a transaction which, when committed, will create a new task.
 </summary>
 <param name="taskSequenceRef">The reference to the task sequence to modify.</param>
 <param name="taskTitle">The title to give the new task.</param>
 <param name="taskType">The type of task to create.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateTask(DriveWorks.Transactions.TaskSequenceRef,System.Type,System.String,System.Double,System.Double,System.Boolean)">
 <summary>
 Creates a transaction which, when committed, will create a new task.
 </summary>
 <param name="taskSequenceRef">The reference to the task sequence to modify.</param>
 <param name="taskTitle">The title to give the new task.</param>
 <param name="taskType">The type of task to create.</param>
 <param name="left">The left position of the task.</param>
 <param name="top">The top position of the task.</param>
 <param name="createConnection">True to create a connection to the previously added task (or Start if no other tasks have been added).</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteTask(DriveWorks.Transactions.TaskRef)">
 <summary>
 Creates a transaction which, when committed, will
 delete a task from the given parent object's task sequence.
 </summary>
 <param name="taskRef">The reference to the task to delete.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateTaskFromExisting(DriveWorks.Transactions.TaskSequenceRef,System.Type,System.Xml.Linq.XElement,System.Int32)">
 <summary>
 Creates a transaction which, when committed, will create a new task
 from existing task data.
 </summary>
 <param name="taskSequenceRef">The reference to the task sequence to modify.</param>
 <param name="taskType">The type of task to create.</param>
 <param name="taskData">The XElement containing the data for the task.</param>
 <param name="index">The index at which the task will be placed.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTask(DriveWorks.Transactions.TaskRef,System.String,DriveWorks.Transactions.FlowPropertyData[])">
 <summary>
 Creates a transaction which, when committed, will
 change the properties of the specified task.
 </summary>
 <param name="taskRef">The reference to the task to modify.</param>
 <param name="newTitle">The new title of the task.</param>
 <param name="newProperties">A specific object array of the new properties for the task.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTask(DriveWorks.Transactions.TaskRef,System.String,DriveWorks.Transactions.FlowPropertyData[],System.Boolean)">
 <summary>
 Creates a transaction which, when committed, will
 change the properties of the specified task.
 </summary>
 <param name="taskRef">The reference to the task to modify.</param>
 <param name="newTitle">The new title of the task.</param>
 <param name="newProperties">A specific object array of the new properties for the task.</param>
 <param name="allowEmptyRules">True to allow toggling properties to dynamic without a rule.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCondition(DriveWorks.Transactions.ConditionRef,System.String,DriveWorks.Specification.ConditionFailBehavior,DriveWorks.Transactions.FlowPropertyData[])">
 <summary>
 Creates a transaction which, when committed, will
 change the properties of the specified condition.
 </summary>
 <param name="conditionRef">The reference to the condition to modify.</param>
 <param name="newFailBehavior">The new failure behavior of the condition.</param>
 <param name="newProperties">The new properties to assign the condition.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCondition(DriveWorks.Transactions.ConditionRef,System.String,DriveWorks.Specification.ConditionFailBehavior,DriveWorks.Transactions.FlowPropertyData[],System.Boolean)">
 <summary>
 Creates a transaction which, when committed, will
 change the properties of the specified condition.
 </summary>
 <param name="conditionRef">The reference to the condition to modify.</param>
 <param name="newFailBehavior">The new failure behavior of the condition.</param>
 <param name="newProperties">The new properties to assign the condition.</param>
 <param name="allowEmptyRules">True to allow rules to be made dynamic with empty rules.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateConditionFromExisting(DriveWorks.Transactions.ConditionSequenceRef,System.Type,System.Xml.Linq.XElement,System.Int32)">
 <summary>
 Creates a transaction which, when committed, will create a new condition
 from existing condition data.
 </summary>
 <param name="conditionSequnceRef">The reference to the condition sequence to modify.</param>
 <param name="conditionType">The type of condition to create.</param>
 <param name="conditionData">The XElement containing the data for the condition.</param>
 <param name="index">The index at which the condition will be placed.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateCondition(DriveWorks.Transactions.ConditionSequenceRef,System.Type,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 create a new condition.
 </summary>
 <param name="conditionSequenceRef">The reference to the condition sequence.</param>
 <param name="conditionType">The type of the condition to create.</param>
 <param name="conditionTitle">The title to give the condition.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateCondition(DriveWorks.Transactions.ConditionSequenceRef,System.Type,System.String,System.Double,System.Double)">
 <summary>
 Creates a transaction which, when committed, will
 create a new condition.
 </summary>
 <param name="conditionSequenceRef">The reference to the condition sequence.</param>
 <param name="conditionType">The type of the condition to create.</param>
 <param name="conditionTitle">The title to give the condition.</param>
 <param name="left">The left position to give the condition.</param>
 <param name="top">The top position to give the condition.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteCondition(DriveWorks.Transactions.ConditionRef)">
 <summary>
 Creates a transaction which, when committed, will
 delete the specified condition.
 </summary>
 <param name="conditionRef">The reference to the condition to delete.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveCondition(DriveWorks.Transactions.ConditionSequenceRef,System.Int32,System.Int32)">
 <summary>
 Creates a transaction which, when committed, will
 move the given condition.
 </summary>
 <param name="conditionSequenceRef">The reference to the condition sequence.</param>
 <param name="oldIndex">The index of the condition to move.</param>
 <param name="newIndex">The index of where to move the condition.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveCondition(DriveWorks.Transactions.ConditionSequenceRef,System.String,System.Int32)">
 <summary>
 Creates a transaction which, when committed, will
 move the given condition.
 </summary>
 <param name="conditionSequenceRef">The reference to the condition sequence.</param>
 <param name="title">The title of the condition to move.</param>
 <param name="newIndex">The index to which to move the condition.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateEventFlowConnection(DriveWorks.Transactions.InputEndpointRef,DriveWorks.Transactions.OutputEndpointRef)">
 <summary>
 Creates a new transaction that when executed will create a connection between the given endpoints.
 </summary>
 <param name="input">The input to connect to the output.</param>
 <param name="output">The output to connect to the input.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteEventFlowConnection(DriveWorks.Transactions.InputEndpointRef,DriveWorks.Transactions.OutputEndpointRef)">
 <summary>
 Creates a new transaction that when executed will delete the given connection.
 </summary>
 <param name="input">The input the connection is made to.</param>
 <param name="output">The output part of the connection.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacro(System.String)">
 <summary>
 Creates a transaction which when committed will create a specification macro with the given name.
 </summary>
 <param name="name">The name of the new specification macro.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacro(System.String,DriveWorks.SpecificationMacroCategory)">
 <summary>
 Creates a transaction which when committed will create a specification macro with the given name.
 </summary>
 <param name="name">The name of the new specification macro.</param>
 <param name="category">The category of the new specification macro.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacroCategory(System.String,DriveWorks.SpecificationMacroCategory)">
 <summary>
 Creates a transaction which when committed will create a new specification macro category.
 </summary>
 <param name="displayName">The display name of the new category.</param>
 <param name="parentCategory">Optionally, the parent category, or a null reference to leave the category rooted.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacroCategory(System.String,System.String)">
 <summary>
 Creates a transaction which when committed will create a new specification macro category.
 </summary>
 <param name="displayName">The display name of the new category.</param>
 <param name="parentCategoryPath">Optionally, the parent category path, or a null reference to leave the category rooted.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteSpecificationMacro(DriveWorks.Specification.SpecificationMacro)">
 <summary>
 Creates a transaction which when committed will delete a specification macro by name.
 </summary>
 <param name="macro">The specification macro to delete.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeParentMacroCategory(DriveWorks.Specification.SpecificationMacro,DriveWorks.SpecificationMacroCategory)">
 <summary>
 Creates a transaction which when committed will change the parent category of the specified specification macro.
 </summary>
 <param name="macro">The specification macro to modify.</param>
 <param name="newCategory">The new parent category, or a null reference to remove the parent.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeParentMacroCategory(DriveWorks.SpecificationMacroCategory,DriveWorks.SpecificationMacroCategory)">
 <summary>
 Creates a transaction which when committed will change the parent category of the specified specification macro category.
 </summary>
 <param name="macroCategory">The macro category to modify.</param>
 <param name="newParentCategory">The new parent category, or a null reference to remove the parent.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteSpecificationMacroCategory(DriveWorks.SpecificationMacroCategory,DriveWorks.DeleteMacroCategoryBehavior)">
 <summary>
 Creates a transaction which when committed will delete a macro category.
 </summary>
 <param name="macroCategory">The macro category to delete.</param>
 <param name="deleteBehavior">The behavior to apply when deleting children.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationMacroName(DriveWorks.Specification.SpecificationMacro,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 rename a specification macro with the given name.
 </summary>
 <param name="macro">The specification macro to rename.</param>
 <param name="newName">The new name to give the specification macro.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationMacroCategoryName(DriveWorks.SpecificationMacroCategory,System.String)">
 <summary>
 Creates a transaction which when committed will change the specified macro category's name.
 </summary>
 <param name="macroCategory">The macro category to change.</param>
 <param name="newName">The new name.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacroFromXml(System.String)">
 <summary>
 Creates a transaction which, when comitted, will
 create a specification macro from data already
 retrieved from the clipboard.
 </summary>
 <param name="macroXml">The Xml string containing the specification macro.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificatioMacroFromTemplate(System.String,System.String,System.String)">
 <summary>
 Creates a transaction which, when comitted, will
 create a specification macro from an XML template.
 </summary>
 <param name="name">The name of the specification macro to be created.</param>
 <param name="macroXml">The XML containing the specification macro.</param>
 <param name="category">The category that the specification macro will belong to.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateDecision(System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 create a decision with the given properties, name is the only needed property.
 </summary>
 <param name="name">The name of the new decision.</param>
 <param name="conditionExpression">The condition expression of the decision.</param>
 <param name="nextStepFalse">The next step, should the condition expression return false.</param>
 <param name="nextStepTrue">The next step, should the condition expression return true.</param>
 <param name="left">The horrizontal position of the decision.</param>
 <param name="top">The vertical position of the decision.</param>
 <param name="comment">The comment for the rule.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateDecision(System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 create a decision with the given properties, name is the only needed property.
 </summary>
 <param name="name">The name of the new decision.</param>
 <param name="conditionExpression">The condition expression of the decision.</param>
 <param name="nextStepFalse">The next step, should the condition expression return false.</param>
 <param name="nextStepTrue">The next step, should the condition expression return true.</param>
 <param name="left">The horrizontal position of the decision.</param>
 <param name="top">The vertical position of the decision.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateForm(System.String,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32)">
 <summary>
 Creates a transaction which, when committed, will 
 create a form with the given properties, only name is needed.
 </summary>
 <param name="name">The name of the new form.</param>
 <param name="nextStep">The next step, from this form.</param>
 <param name="left">The horrizontal position of the form.</param>
 <param name="top">The vertical position of the form.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateForm(System.String,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,DriveWorks.Forms.SimpleColor,DriveWorks.Forms.SimpleFont,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
 <summary>
 Creates a transaction which, when committed, will 
 create a form with the given properties, only name is needed.
 </summary>
 <param name="name">The name of the new form.</param>
 <param name="nextStep">The next step, from this form.</param>
 <param name="left">The horrizontal position of the form.</param>
 <param name="top">The vertical position of the form.</param>
 <param name="backgroundColor">The background color to apply to the form.</param>
 <param name="defaultFont">The default font to apply to the form.</param>
 <param name="showStandardNavigation">Specifies whether the form should show standard navigation.</param>
 <param name="showTaskList">Specifies whether the form should show the task list.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteDecision(DriveWorks.Navigation.DecisionNavigationStep)">
 <summary>
 Creates a transaction which, when committed, will 
 delete a decision by the given name.
 </summary>
 <param name="decision">The decision to be deleted.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteForm(DriveWorks.Navigation.FormNavigationStep)">
 <summary>
 Creates a transaction which, when committed, will 
 delete a form by the given name.
 </summary>
 <param name="form">The form to delete.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDecision(DriveWorks.Navigation.DecisionNavigationStep,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 update a decision with the given name to the given properties, only project and name are needed
 </summary>
 <param name="decision">The decision to update.</param>
 <param name="conditionExpression">The condition expression of the decision.</param>
 <param name="nextStepFalse">The next step, should the condition expression return false.</param>
 <param name="nextStepTrue">The next step, should the condition expression return true.</param>
 <param name="left">The horrizontal position of the decision.</param>
 <param name="top">The vertical position of the decision.</param>
 <param name="comment">The comment for the rule</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDecision(DriveWorks.Navigation.DecisionNavigationStep,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 update a decision with the given name to the given properties, only project and name are needed
 </summary>
 <param name="decision">The decision to update.</param>
 <param name="conditionExpression">The condition expression of the decision.</param>
 <param name="nextStepFalse">The next step, should the condition expression return false.</param>
 <param name="nextStepTrue">The next step, should the condition expression return true.</param>
 <param name="left">The horrizontal position of the decision.</param>
 <param name="top">The vertical position of the decision.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeForm(DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32)">
 <summary>
 Creates a transaction which, when committed, will 
 update a form with the given name to the given properties, only project and name are needed
 </summary>
 <param name="form">The form to update.</param>
 <param name="nextStep">The next step, from this form.</param>
 <param name="left">The horrizontal position of the form.</param>
 <param name="top">The vertical position of the form.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameStep(DriveWorks.Navigation.NavigationStep,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 delete a form by the given name.
 </summary>
 <param name="navStep">The form to delete.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateFormMessage(System.Int32,System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will 
 creates a form message with the given code number.
 </summary>
 <param name="code">The code to assign the new form message</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteFormMessage(DriveWorks.ProjectMessage)">
 <summary>
 Creates a transaction which, when committed, will 
 delete a form message.
 </summary>
 <param name="formMessage">The for message to be deleted.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormMessageRule(DriveWorks.ProjectMessage,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 change a form message's rule property.
 </summary>
 <param name="formMessage">The form message to change.</param>
 <param name="newRule">The new rule to assign to the form message.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormMessageComment(DriveWorks.ProjectMessage,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 change a form message's comment property.
 </summary>
 <param name="formMessage">The form message to change.</param>
 <param name="newComment">The new comment to assign to the form message.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormMessageRuleAndComment(DriveWorks.ProjectMessage,System.String,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 change a form message's rule and comment properties.
 </summary>
 <param name="formMessage">The form message to change.</param>
 <param name="newComment">The new comment to assign to the form message.</param>
 <param name="newRule">The new rule to assign to the form message.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateFormControl(DriveWorks.Forms.Form,DriveWorks.Forms.ContainerControlBase,System.Type,System.String)">
 <summary>
 Creates a transaction which, when committed, will
 create a new form control.
 </summary>
 <param name="parentForm">The parent form for the new control.</param>
 <param name="parentControl">The parent control of the new control, if it is to have one.</param>
 <param name="controlType">The type of control to create.</param>
 <param name="controlName">The name to give the control.</param>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxUpdateFormControlRectangles(System.String,System.String[],System.Windows.Rect[],System.Windows.Rect[])">
 <summary>
 Creates a transaction which, when committed, will update the rectangles of the specified controls.
 </summary>
 <param name="formName">The name of the form containing the controls.</param>
 <param name="controlNames">The names of the form controls to modify.</param>
 <param name="oldRectangles">The rectangles of the form controls before the change.</param>
 <param name="newRectangles">The desired rectangles of the form controls after the change.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxUpdateFormControlRectangles(System.String[],System.Windows.Rect[],System.Windows.Rect[])">
 <summary>
 Creates a transaction which, when committed, will update the rectangles of the specified controls.
 </summary>
 <param name="controlNames">The names of the form controls to modify.</param>
 <param name="oldRectangles">The rectangles of the form controls before the change.</param>
 <param name="newRectangles">The desired rectangles of the form controls after the change.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyValues(DriveWorks.Forms.ControlBase[],DriveWorks.Forms.DataModel.DynamicProperty,System.Object)">
 <summary>
 Changes the given property on the specified controls to the provided value.
 </summary>
 <param name="controls">The controls to change.</param>
 <param name="prop">The dynamic property to change on the named controls.</param>
 <param name="newValue">The new value to apply to the property.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyRules(DriveWorks.Forms.ControlBase[],DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String)">
 <summary>
 Changes the given property on the specified controls to the provided value.
 </summary>
 <param name="controls">The controls to change.</param>
 <param name="prop">The dynamic property to change on the named controls.</param>
 <param name="newRule">The new rule to apply to the property.</param>
 <param name="newComment">The new comment to apply to the property.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyRulesAndValues(DriveWorks.Forms.ControlBase[],DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String,System.Object)">
 <summary>
 Changes the given property on the specified controls to the provided value.
 </summary>
 <param name="controls">The controls to change.</param>
 <param name="prop">The dynamic property to change on the named controls.</param>
 <param name="newRule">The new rule to apply to the property.</param>
 <param name="newComment">The new comment to apply to the property.</param>
 <param name="newValue">The new value to apply to the property.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormPropertyValue(DriveWorks.Forms.Form,DriveWorks.Forms.DataModel.DynamicProperty,System.Object)">
 <summary>
 Changes the given property on the specified form to the provided value.
 </summary>
 <param name="form">The form that we want to change properties on.</param>
 <param name="prop">The property to change on the form.</param>
 <param name="newValue">The new value to apply to the property.</param>
 <returns>A transaction</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyExtendedValue(DriveWorks.Forms.ControlBase,DriveWorks.Forms.DataModel.DynamicProperty,System.Boolean)">
 <summary>
 Creates a transaction to either extend or unextend a <see cref="T:DriveWorks.Forms.DataModel.DynamicProperty" />.
 </summary>
 <param name="control">Control the property belongs to.</param>
 <param name="dynamicProperty">Property to change.</param>
 <param name="isExtended">Determines whether the property will be extended or unextended.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteFormControls(DriveWorks.Forms.ControlBase[])">
 <summary>
 Creates a transaction to delete the given form controls.
 </summary>
 <param name="controls">The form controls to delete.</param>
 <returns>A transaction.</returns>
 <remarks>
 <para>
 The form controls must all belong to the same parent control.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeControlIndex(DriveWorks.Forms.ControlBase,System.Int32)">
 <summary>
 Creates a transaction to change the index of the given form control.
 </summary>
 <param name="control">The form control to move.</param>
 <param name="newIndex">The new index for the form control.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRecreateFormControl(DriveWorks.Forms.Form,DriveWorks.Forms.ContainerControlBase,System.String)">
 <summary>
 Creates a transaction Create new controls from the given serialized text.
 </summary>
 <param name="form">The form to create the controls on.</param>
 <param name="parent">The parent control to create the controls in.</param>
 <param name="controlSerializationData">The pasted serialized text for the controls.</param>
 <returns>A transaction</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRecreateFormControl(System.String,System.String,System.String)">
 <summary>
 Creates a transaction that creates new controls from the given serialized text.
 </summary>
 <param name="formName">The name of the form to create the controls on.</param>
 <param name="parentName">The name of the parent control to create the controls in.</param>
 <param name="controlSerializationData">The pasted serialized text for the controls.</param>
 <returns>A transaction</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRecreateFormControl(System.String,System.String,System.String,System.Int32)">
 <summary>
 Creates a transaction that create new controls from the given serialized text.
 </summary>
 <param name="formName">The name of the form to create the controls on.</param>
 <param name="parentName">The name of the parent control to create the controls in.</param>
 <param name="controlSerializationData">The pasted serialized text for the controls.</param>
 <param name="insertIndex">The control index of which to insert the controls at.</param>
 <returns>A transaction</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxConvertFormControl(DriveWorks.Forms.Form,DriveWorks.Forms.ControlBase,System.Type)">
 <summary>
 Creates a transaction that will convert the given control into the target control type specified.
 </summary>
 <param name="form">The form that parents the source control.</param>
 <param name="sourceControl">The control to convert.</param>
 <param name="targetType">The type of control to convert the source control to.</param>
 <returns>A transaction</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRestoreItemList(DriveWorks.ProjectItemListDef)">
 <summary>
 Creates a new transaction that when executed will
 restore the state of the item list to when this transaction was created.
 </summary>
 <param name="itemListDefinition">The item list to create the backup transaction for.</param>
 <returns></returns>
 <remarks>This is a backup transaction.</remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRestoreChildSpecificationList(DriveWorks.ProjectChildSpecificationDef)">
 <summary>
 Creates a new transaction that when executed will
 restore the state of the given child specification list to when this transaction was created.
 </summary>
 <param name="childSpecDefinition">The child specification list to create the backup transaction for.</param>
 <returns></returns>
 <remarks>This is a backup transaction.</remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeControlParent(DriveWorks.Forms.ControlBase,DriveWorks.Forms.ContainerControlBase)">
 <summary>
 Creates a new transaction that when executed will
 change the parent of the specified control.
 </summary>
 <param name="controlToMove">The control to change the parent of.</param>
 <param name="newParent">The new parent for the specified control.</param>
 <returns>A transaction that will perform the specified action.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxSetProjectMetadataSection(System.String,System.Xml.Linq.XElement)">
 <summary>
 Creates a transaction that will set the data element for a project metadata section.
 </summary>
 <param name="sectionName">The name of the section to update.</param>
 <param name="newSectionsData">The new data to place in the section.</param>
 <remarks>
 Will create the section if it does not already exist.
 Old data is overwritten.
 </remarks>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxAddProjectComponentSet(System.String,System.Guid)">
 <summary>
 Creates a transaction that will add a component to the current project.
 </summary>
 <param name="name">The name to give the component. This may be null to have one generated from captured component's name.</param>
 <param name="capturedComponentId">The unique identifier of the captured component that you wish to add to the current project.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxInsertProjectComponentSet(System.String,System.Guid,System.Int32)">
 <summary>
 Creates a transaction that will insert a component at the specified position in the current collection in the current project.
 </summary>
 <param name="name">The name to give the component. This may be null to have one generated from captured component's name.</param>
 <param name="capturedComponentId">The unique identifier of the captured component that you wish to add to the current project.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameProjetComponentSet(System.String,System.String)">
 <summary>
 Creates a transaction that will rename a component set.
 </summary>
 <param name="oldName">The current name of the component set to rename.</param>
 <param name="newName">The new name to apply to the component set.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveProjectComponentSet(System.Int32,System.Int32)">
 <summary>
 Creates a transaction that will change a component set's index.
 </summary>
 <param name="oldIndex">The original index of the component set to move.</param>
 <param name="newIndex">The new index that the component set is to be moved to.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteProjectComponentSet(DriveWorks.ProjectComponentSet)">
 <summary>
 Creates a transaction that will delete the specified component set.
 </summary>
 <param name="componentSet">The component set to delete.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeProjectComponentRule(DriveWorks.Components.ProjectComponentRule,System.String,System.String)">
 <summary>
 Creates a transaction that will change the rule of the specified component rule.
 </summary>
 <param name="rule">The rule to update.</param>
 <param name="formula">The new formula to set on the rule.</param>
 <param name="comment">The new comment to set on the rule.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCalculationTableColumnCommonRule(System.String,System.String,System.String,System.String)">
 <summary>
 Creates a transaction that will change a calculation table column's common rule.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="columnName">The name of the column to use.</param>
 <param name="rule">The rule to apply to the column.</param>
 <param name="comment">The comment to apply to the common rule.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCalculationTableColumnType(System.String,System.String,DriveWorks.ProjectCalculationTableColumnType)">
 <summary>
 Creates a transaction that will change a calculation table column's type.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="columnName">The name of the column to use.</param>
 <param name="newType">The new type to set on the column.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCalculationTableRowCount(System.String,System.Int32)">
 <summary>
 Creates a transaction that will change a calculation table's row count (number of data rows).
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="rowCount">The new number of data rows to have the on table.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxClearCalculationTableColumnRule(System.String,System.String,System.Int32)">
 <summary>
 Creates a transaction that will clear a calculation table column's cell rule (allowing it to use the column common rule).
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="columnName">The name of the column to use.</param>
 <param name="rowIndex">The row index of the cell to clear.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateCalculationTable(System.String)">
 <summary>
 Creates a transaction that will create a calculation table.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateCalculationTableColumn(System.String,System.String,DriveWorks.ProjectCalculationTableColumnType)">
 <summary>
 Creates a transaction that will create a calculation table column.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="columnName">The name of the column to use.</param>
 <param name="columnType">The column type to create.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteCalculationTable(System.String)">
 <summary>
 Creates a transaction that will delete a calculation table.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteCalculationTableColumn(System.String,System.String)">
 <summary>
 Creates a transaction that will delete a calculation table column.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="columnName">The name of the column to use.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveCalculationTableColumn(System.String,System.String,System.Int32)">
 <summary>
 Creates a transaction that will move a calculation table column.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="columnName">The name of the column to use.</param>
 <param name="newIndex">The new location to place the column.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameCalculationTable(System.String,System.String)">
 <summary>
 Creates a transaction that will  rename a calculation table.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="newTableName"></param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameCalculationTableColumn(System.String,System.String,System.String)">
 <summary>
 Creates a transaction that will rename a calculation table column.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="columnName">The name of the column to use.</param>
 <param name="newColumnName">The new name of the column.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxSetCalculationTableColumnRowRule(System.String,System.String,System.Int32,System.String,System.String)">
 <summary>
 Creates a transaction that will set the rule of a calculation table's cell.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <param name="columnName">The name of the column to use.</param>
 <param name="rowIndex">The row index of the cell to set.</param>
 <param name="rule">The rule to set in the cell.</param>
 <param name="comment">The comment to set on the cell.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxSetCalculationTableOutputControlRules(System.String)">
 <summary>
 Creates a transaction that will find all controls that can be driven from the specified table
 and set their rules to point to the table.
 </summary>
 <param name="tableName">The name of the table to use.</param>
 <returns>A transaction that will perform the operation.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateComponentTask(System.Type,System.String,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,DriveWorks.Components.ProjectComponent)">
 <summary>
 Creates a new transaction that when executed will create a <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/> that is specific to the given <see cref="T:DriveWorks.Components.ProjectComponent"/>.
 </summary>
 <param name="type">The type of the task to create.</param>
 <param name="name">The name to give the newly created task.</param>
 <param name="component">The component to associate the task with.</param>
 <returns>A transaction that when executed will create the task using the given parameters.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateComponentTask(System.Type,System.String,DriveWorks.Components.Tasks.ComponentTaskCollection)">
 <summary>
 Creates a new transaction that when executed will create a <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/> that is scoped to the given scope.
 </summary>
 <param name="type">The type of the task to create.</param>
 <param name="name">The name to give the newly created task.</param>
 <param name="collection">The collection to add the task to.</param>
 <returns>A transaction that when executed will create the task using the given parameters.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteScopedComponentTask(System.String,System.String)">
 <summary>
 Creates a new transaction that when executed will delete the given scoped <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>.
 </summary>
 <param name="scope">The scope of the task to delete.</param>
 <param name="taskName">The name of the task to delete.</param>
 <returns>A transaction that when executed will delete the task with the given name.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteComponentSpecificTask(DriveWorks.Components.ProjectComponent,System.String)">
 <summary>
 Creates a new transaction that when executed will delete the specified component specific <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>.
 </summary>
 <param name="component">The <see cref="T:DriveWorks.Components.ProjectComponent"/> the task is associated with.</param>
 <param name="taskName">The name of the task to delete.</param>
 <returns>A transaction that when executed will delete the specified task.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameScopedComponentTask(DriveWorks.Components.Tasks.ComponentTask,System.String)">
 <summary>
 Creates a new transaction that when executed will change the name of the given task.
 </summary>
 <param name="task">The task to rename.</param>
 <param name="newName">The new name to give the task.</param>
 <returns>A transaction that when executed will change the name of the given task.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameComponentTask(DriveWorks.Components.Tasks.ComponentTask,System.String,DriveWorks.Components.ProjectComponent)">
 <summary>
 Creates a new transaction that when executed will change the name of the given task.
 </summary>
 <param name="task">The task to rename.</param>
 <param name="newName">The new name to give the task.</param>
 <param name="component">The component the task is associated with.</param>
 <returns>A transaction that when executed will change the name of the given task.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskIndex(DriveWorks.Components.Tasks.ComponentTask,System.Int32)">
 <summary>
 Creates a new transaction that when executed will change the index of the given task.
 </summary>
 <param name="task">The task to rename.</param>
 <param name="index">The new index of the task.</param>
 <returns>A transaction that when executed will change the index of the given task.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskIndex(DriveWorks.Components.Tasks.ComponentTask,System.Int32,DriveWorks.Components.ProjectComponent)">
 <summary>
 Creates a new transaction that when executed will change the index of the given task.
 </summary>
 <param name="task">The task to rename.</param>
 <param name="index">The new index of the task.</param>
 <param name="component">The component the task is associated with.</param>
 <returns>A transaction that when executed will change the index of the given task.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskLocation(DriveWorks.Components.Tasks.ComponentTask,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
 <summary>
 Creates a new transaction that when executed will change the location of the given task.
 </summary>
 <param name="task">The task to rename.</param>
 <param name="location">The new location of the task.</param>
 <returns>A transaction that when executed will change the location of the given task.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskPropertyExtendedValue(DriveWorks.Components.ProjectComponent,DriveWorks.Components.Tasks.ComponentTask,System.String,System.Boolean)">
 <summary>
 Creates a new transaction that when executed will change the extended value of the given task property.
 </summary>
 <param name="component">The component the task belongs to.</param>
 <param name="task">The task the property belongs to.</param>
 <param name="propertyName">The name of the property to change the extended value of.</param>
 <param name="isExtended">True to make the property extended.</param>
 <returns>A new transaction that when executed will change the extended property of a component task property.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskPropertyExtendedValue(DriveWorks.Components.Tasks.ComponentTask,System.String,System.Boolean)">
 <summary>
 Creates a new transaction that when executed will change the extended value of the given task property.
 </summary>
 <param name="task">The task the property belongs to.</param>
 <param name="propertyName">The name of the property to change the extended value of.</param>
 <param name="isExtended">True to make the property extended.</param>
 <returns>A new transaction that when executed will change the extended property of a component task property.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskLocation(DriveWorks.Components.Tasks.ComponentTask,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,DriveWorks.Components.ProjectComponent)">
 <summary>
 Creates a new transaction that when executed will change the location of the given task.
 </summary>
 <param name="task">The task to rename.</param>
 <param name="location">The new location of the task.</param>
 <param name="component">The component the task is associated with.</param>
 <returns>A transaction that when executed will change the location of the given task.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskRule(DriveWorks.Components.Tasks.ComponentTask,DriveWorks.Components.Tasks.ComponentTaskRule,System.String,System.String)">
 <summary>
 Creates a new transaction that when executed will change the formula and comment of the given <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/> rule.
 </summary>
 <param name="task">The task whose rule will be changed.</param>
 <param name="rule">The rule to change.</param>
 <param name="formula">The new formula to give the rule.</param>
 <param name="comment">The new comment to give the rule.</param>
 <returns>A transaction that when executed will change the formula and comment of the given rule.</returns>
 <devnote>This is the old transaction API used for DW 14, for 15+ please use <see cref="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskProperty(DriveWorks.Components.ProjectComponent,System.String,System.String,System.Boolean,System.String,System.Object,System.String)" /> instead.</devnote>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskProperty(DriveWorks.Components.Tasks.ComponentTask,DriveWorks.Components.Tasks.ComponentTaskRule,System.Boolean,System.String,System.Object,System.String)">
 <summary>
 Creates a new transaction that when executed will change the formula and comment of the given <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/> rule.
 </summary>
 <param name="task">The task whose rule will be changed.</param>
 <param name="rule">The rule to change.</param>
 <param name="formula">The new formula to give the rule.</param>
 <param name="comment">The new comment to give the rule.</param>
 <returns>A transaction that when executed will change the formula and comment of the given rule.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskProperty(DriveWorks.Components.ProjectComponent,System.String,System.String,System.Boolean,System.String,System.Object,System.String)">
 <summary>
 Creates a new transaction that when executed will change a property on the given <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>.
 </summary>
 <param name="component">The component that owns the task to change.</param>
 <param name="taskName">The name of the task that owns the property to change.</param>
 <param name="propertyName">The name of the property to change.</param>
 <param name="isBound">True to make the property rule bound, False to make the property static.</param>
 <param name="formula">The formula to apply to the property (if the property is bound).</param>
 <param name="value">The value to apply to the property (if the property is not bound).</param>
 <param name="comment">The comment to apply to the task property.</param>
 <returns>A transaction that when executed will change the property of the <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskProperty(System.String,System.String,System.String,System.Boolean,System.String,System.Object,System.String)">
 <summary>
 Creates a new transaction that when executed will change a property on the given <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>.
 </summary>
 <param name="scope">The scope that owns the task to change.</param>
 <param name="taskName">The name of the task that owns the property to change.</param>
 <param name="propertyName">The name of the property to change.</param>
 <param name="isBound">True to make the property rule bound, False to make the property static.</param>
 <param name="formula">The formula to apply to the property (if the property is bound).</param>
 <param name="value">The value to apply to the property (if the property is not bound).</param>
 <param name="comment">The comment to apply to the task property.</param>
 <returns>A transaction that when executed will change the property of the <see cref="T:DriveWorks.Components.Tasks.ComponentTask"/>.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentEnableLoop(DriveWorks.Components.ProjectComponent)">
 <summary>
 Creates a new transaction that when executed will enable the release loop for the given component.
 </summary>
 <param name="component">The component to change.</param>
 <returns>A new transaction that when executed will enable the release loop for the given component.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentDisableLoop(DriveWorks.Components.ProjectComponent)">
 <summary>
 Creates a new transaction that when executed will disable the release loop for the given component.
 </summary>
 <param name="component">The component to change.</param>
 <returns>A new transaction that when executed will disable the release loop for the given component.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentIncludeFileFormatsInLoop(DriveWorks.Components.ProjectComponent,System.Boolean)">
 <summary>
 Creates a new transaction that when executed will enable generation of additional file formats within the release loop.
 </summary>
 <param name="component">The component whose additional file formats will be released in the loop.</param>
 <param name="include">True to include file formats in the release loop.</param>
 <returns>A new transaction that when executed will ensure file formats are generated inside of the release loop.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentLoopCount(DriveWorks.Components.ProjectComponent,System.String,System.String)">
 <summary>
 Creates a transaction that when executed will modify the loop count rule's formula of the given component.
 </summary>
 <param name="component">The component whose loop count to modify.</param>
 <param name="newFormula">The new formula to apply.</param>
 <param name="newComment">The new comment to apply.</param>
 <returns>A new transaction that when executed will restore the formula and comment to the previous values.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateComponentTaskCondition(DriveWorks.Components.ProjectComponent,System.String,System.Type,System.String)">
 <summary>
 Creates a new transaction that when executes will create a new component task condition.
 </summary>
 <param name="component">The component of the task on which to create the condition.</param>
 <param name="taskName">The name of the task to create the condition for.</param>
 <param name="type">The type of the condition to create.</param>
 <param name="title">The title to give the newly created condition.</param>
 <returns>A transaction that when executed will create the condition.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="component"/>, <paramref name="taskName"/>, or <paramref name="type"/> is null.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteComponentTaskCondition(DriveWorks.Components.ProjectComponent,System.String,System.String)">
 <summary>
 Creates a new transaction that when executed will delete the given condition.
 </summary>
 <param name="component">The component to which the task owning the condition belongs to.</param>
 <param name="taskName">The task that owns the condition to delete.</param>
 <param name="conditionName">The condition to delete.</param>
 <returns>A transaction that when executed will delete the given condition.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="component"/>, <paramref name="taskName" />, or <paramref name="conditionName"/> is null.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskCondition(DriveWorks.Components.ProjectComponent,System.String,System.String,System.String,DriveWorks.RuleChangeData[])">
 <summary>
 Creates a new transaction that when executed will change the given component task condition.
 </summary>
 <param name="component">The component to which the task owning the condition belongs to.</param>
 <param name="conditionTitle">The name of the condition to update.</param>
 <param name="taskTitle">The name of the task the condition is associated with.</param>
 <param name="newTitle">The new title to give the condition (or the old title if no change is desired).</param>
 <param name="ruleChanges">The changes to the condition's rules to apply.</param>
 <returns>A transaction that when executed will update the title of the given condition.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="component"/>, <paramref name="taskTitle"/>, <paramref name="conditionTitle"/>, or <paramref name="newTitle"/> is null.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateScopedComponentTaskCondition(System.String,System.String,System.Type,System.String)">
 <summary>
 Creates a new transaction that when executed will create a new component task condition for a scoped component task.
 </summary>
 <param name="scope">The scope of the task that the condition should be associated with.</param>
 <param name="taskName">The name of the task to associate the new condition with.</param>
 <param name="conditionType">The type of the condition to create.</param>
 <param name="name">The name to give the newly created condition.</param>
 <returns>A transaction that when executed will create the specified condition.</returns>
 <exception cref="T:System.ArgumentNullException">Any of the arguments are null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="name"/> is an empty string.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteScopedComponentTaskCondition(System.String,System.String,System.String)">
 <summary>
 Creates a new transaction that when executed will delete the given condition.
 </summary>
 <param name="scope">The scope the task that owns the condition belongs to.</param>
 <param name="taskName">The name of the task that owns the condition to delete.</param>
 <param name="conditionName">The name of the condition to delete.</param>
 <returns>A transaction that when executed will delete the given condition.</returns>
 <exception cref="T:System.ArgumentNullException">Any of the arguments are null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="scope"/> is an empty string.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskCondition(System.String,System.String,System.String,System.String,DriveWorks.RuleChangeData[])">
 <summary>
 Creates a new transaction that when executed will change the title of the given condition.
 </summary>
 <param name="scope">The scope to which the task that owns the condition belongs to.</param>
 <param name="taskName">The name of the task that owns the condition to change.</param>
 <param name="conditionName">The name of the condition to change.</param>
 <param name="newName">The new name of the condition (or the old name if no change is desired).</param>
 <param name="ruleChanges">The changes to the condition's rules to apply.</param>
 <returns>A transaction that when executed will change the given condition.</returns>
 <exception cref="T:System.ArgumentNullException">Any of the arguments are null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="newName"/> is an empty string.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateComponentTaskReleaseCondition(DriveWorks.Components.ProjectComponent,System.String,System.Type,System.String)">
 <summary>
 Creates a new transaction that when executes will create a new component task release ondition.
 </summary>
 <param name="component">The component of the task on which to create the condition.</param>
 <param name="taskName">The name of the task to create the condition for.</param>
 <param name="type">The type of the condition to create.</param>
 <param name="name">The name to give the newly created condition.</param>
 <returns>A transaction that when executed will create the condition.</returns>
 <exception cref="T:System.ArgumentNullException">Any of the arguments are null.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteComponentTaskReleaseCondition(DriveWorks.Components.ProjectComponent,System.String,System.String)">
 <summary>
 Creates a new transaction that when executed will delete the given release condition.
 </summary>
 <param name="component">The component to which the task owning the condition belongs to.</param>
 <param name="taskName">The name of the task that owns the condition to delete.</param>
 <param name="conditionName">The name of the condition to delete.</param>
 <returns>A transaction that when executed will delete the given condition.</returns>
 <exception cref="T:System.ArgumentNullException">Any of the arguments are null.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskReleaseConditionTitle(DriveWorks.Components.ProjectComponent,System.String,System.String,System.String,DriveWorks.Transactions.FlowPropertyData[])">
 <summary>
 Creates a new transaction that when executed will change the title of the given component task release condition.
 </summary>
 <param name="component">The component to which the task owning the condition belongs to.</param>
 <param name="conditionName">The title of the condition to update.</param>
 <param name="taskName">The name of the task that owns the condition.</param>
 <param name="newName">The new title to give the condition (or the old title if no change is desired).</param>
 <param name="ruleChanges">The changes to the condition's rules to apply.</param>
 <returns>A transaction that when executed will update the title of the given condition.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="component"/>, <paramref name="conditionName"/>, <paramref name="conditionName"/>, or <paramref name="newName"/> is null.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateScopedComponentTaskReleaseCondition(System.String,System.String,System.Type,System.String)">
 <summary>
 Creates a new transaction that when executed will create a new component task release condition for a scoped component task.
 </summary>
 <param name="taskName">The task to associate the new condition with.</param>
 <param name="conditionType">The type of the condition to create.</param>
 <param name="name">The title to give the newly created condition.</param>
 <returns>A transaction that when executed will create the specified condition.</returns>
 <exception cref="T:System.ArgumentNullException">Any of the arguments are null.</exception>
 <exception cref="T:System.ArgumentException">The parameter <paramref name="name" /> is an empty string.</exception>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteScopedComponentTaskReleaseCondition(System.String,System.String,System.String)">
 <summary>
 Creates a new transaction that when executed will delete the given release condition.
 </summary>
 <param name="scope">The scope of the task that owns the condition.</param>
 <param name="taskName">The name of the task that owns the condition to delete.</param>
 <param name="conditionName">The name of the condition to delete.</param>
 <returns>A transaction that when executed will delete the given condition.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskReleaseCondition(System.String,System.String,System.String,System.String,DriveWorks.Transactions.FlowPropertyData[])">
 <summary>
 Creates a new transaction that when executed will change the title of the given release condition.
 </summary>
 <param name="scope">The scope of the task that owns the condition to change.</param>
 <param name="taskName">The name of the task that owns the condition.</param>
 <param name="conditionName">The name of the condition to change.</param>
 <param name="title">The new title of the condition (or the old title if no change is desired).</param>
 <param name="ruleChanges">The changes to the condition's rules to apply.</param>
 <returns>A transaction that when executed will change the title of the given task.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyValues(System.String,System.String[],DriveWorks.Forms.DataModel.DynamicProperty,System.Object)">
 <summary>
 Changes the given property on the specified controls to the provided value.
 </summary>
 <param name="formName">The name of the form containing the specified controls.</param>
 <param name="controlNames">The names of the controls to change.</param>
 <param name="prop">The dynamic property to change on the named controls.</param>
 <param name="newValue">The new value to apply to the property.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyValues(System.String[],DriveWorks.Forms.DataModel.DynamicProperty,System.Object)">
 <summary>
 Changes the given property on the specified controls to the provided value.
 </summary>
 <param name="controlNames">The names of the controls to change.</param>
 <param name="prop">The dynamic property to change on the named controls.</param>
 <param name="newValue">The new value to apply to the property.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyRules(System.String,System.String[],DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String)">
 <summary>
 Changes the given property on the specified controls to the provided value.
 </summary>
 <param name="formName">The name of the form containing the specified controls.</param>
 <param name="controlNames">The names of the controls to change.</param>
 <param name="prop">The dynamic property to change on the named controls.</param>
 <param name="newRule">The new rule to apply to the property.</param>
 <param name="newComment">The new comment to apply to the property.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyRules(System.String[],DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String)">
 <summary>
 Changes the given property on the specified controls to the provided value.
 </summary>
 <param name="controlNames">The names of the controls to change.</param>
 <param name="prop">The dynamic property to change on the named controls.</param>
 <param name="newRule">The new rule to apply to the property.</param>
 <param name="newComment">The new comment to apply to the property.</param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyRulesAndValues(System.String,System.String[],DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String,System.Object)">
 <summary>
 Changes the given property on the specified controls to the provided value.
 </summary>
 <param name="formName">The name of the form containing the specified controls.</param>
 <param name="controlNames">The names of the controls to change.</param>
 <param name="prop">The dynamic property to change on the named controls.</param>
 <param name="newRule">The new rule to apply to the property.</param>
 <param name="newComment">The new comment to apply to the property.</param>
 <param name="newValue">The new value to apply </param>
 <returns>A transaction.</returns>
</member>
<member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyRulesAndValues(System.String[],DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String,System.Object)">
 <summary>
 Changes the given property on the specified controls to the provided value.
 </summary>
 <param name="controlNames">The names of the controls to change.</param>
 <param name="prop">The dynamic property to change on the named controls.</param>
 <param name="newRule">The new rule to apply to the property.</param>
 <param name="newComment">The new comment to apply to the property.</param>
 <param name="newValue">The new value to apply </param>
 <returns>A transaction.</returns>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteVariableCategory">
 <summary>
 Provides support for deleting a variable category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteVariableCategory.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteVariableCategory" /> transaction class.
 </summary>
 <param name="project">The project.</param>
 <param name="categoryPath">The full path to the variable category to be deleted.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteVariableCategory.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxCreateOperation">
 <summary>
 Provides support for creating an operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateOperation.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateOperation" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="stateTitle">The state to create this operation in.</param>
 <param name="name">The name and title of the new operation</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxCreateState">
 <summary>
 Provides support for creating a state.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateState.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateState" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="title">The title of the new state.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxCreateTransition">
 <summary>
 Provides support for creating a transition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxCreateTransition.#ctor(DriveWorks.Project,System.String,System.Guid,System.Guid)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxCreateTransition" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the transition.</param>
 <param name="sourceStateId">The Id of the source state.</param>
 <param name="targetStateId">The Id of the target state.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteOperation">
 <summary>
 Provides support for creating an operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteOperation.#ctor(DriveWorks.Project,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteOperation" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="stateTitle">The state to create this operation in.</param>
 <param name="name">The name and title of the new operation</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteState">
 <summary>
 Provides support for deleting a state.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteState.#ctor(DriveWorks.Project,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteState" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="title">The title of the state.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxDeleteTransition">
 <summary>
 Provides support for deleting a transition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxDeleteTransition.#ctor(DriveWorks.Project,System.String,System.Guid)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxDeleteTransition" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="name">The name of the transition to delete.</param>
 <param name="sourceStateId">The Id of the source state for the transition.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxUndoDeleteOperation">
 <summary>
 Provides support for re-creating an operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeleteOperation.#ctor(DriveWorks.Project,System.String,System.String,System.String,DriveWorks.Specification.Conditions,DriveWorks.Specification.Teams,DriveWorks.Specification.TaskSequence)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxUndoDeleteOperation" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="sourceStateTitle">The title of the source state.</param>
 <param name="name">The name of the operation to re-create.</param>
 <param name="title">The title of the operation.</param>
 <param name="conditions">The conditions of the operation.</param>
 <param name="teams">The teams of the operation.</param>
 <param name="taskSequence">The tasks of the operation.</param>
 <remarks>Parameters can be set to nothing for no prefernce.</remarks>
</member>
<member name="T:DriveWorks.Transactions.TxUndoDeleteState">
 <summary>
 Provides support for creating a state.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeleteState.#ctor(DriveWorks.Project,System.Guid,System.String,DriveWorks.Specification.Transitions,DriveWorks.Specification.Operations,DriveWorks.Specification.StateType,DriveWorks.Specification.FlowEvent,DriveWorks.Specification.FlowEvent,DriveWorks.Specification.Transition[],System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxUndoDeleteState" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="title">The title of the new state.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxUndoDeleteTransition">
 <summary>
 Provides support for re-creating a transition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeleteTransition.#ctor(DriveWorks.Project,System.Guid,System.Guid,System.String,System.String,DriveWorks.Specification.Conditions,DriveWorks.Specification.Teams,DriveWorks.Specification.FlowEvent)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxUndoDeleteTransition" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="sourceStateId">The Id of the source state.</param>
 <param name="targetStateId">The Id of the target state.</param>
 <param name="name">The name of the transition to re-create.</param>
 <param name="title">The title of the transition to re-create.</param>
 <param name="conditions">The conditions of the transition.</param>
 <param name="teams">The teams of the transition.</param>
 <param name="invokeEvent">The invoke event of the transition.</param>
 <remarks>Parameters can be set to nothing for no prefernce.</remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeOperation">
 <summary>
 Provides support for updating an operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeOperation.#ctor(DriveWorks.Project,System.String,System.String,System.String,DriveWorks.Specification.Condition[],DriveWorks.Specification.Task[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeOperation" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="sourceStateTitle">The title of the source state.</param>
 <param name="name">The Name of the operation.</param>
 <param name="newTitle">The new title of the operation.</param>
 <param name="newConditons">The new conditions for the operation.</param>
 <param name="newTaskSequence">The new tasks for the operation.</param>
 <remarks>Arguments can be set to nothing if no change is needed.</remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeStateProperties">
 <summary>
 Provides support for updating a state's properties.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeStateProperties.#ctor(DriveWorks.Project,System.String,System.String,DriveWorks.Specification.StateType,DriveWorks.Specification.Task[],DriveWorks.Specification.Task[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeStateProperties" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="oldTitle">The old title of the state.</param>
 <param name="newTitle">The new title of the state.</param>
 <param name="newSpecFlowStateType">The new type for the state.</param>
 <param name="newOnStateEnterEvent">The new enter event for the state.</param>
 <param name="newOnStateLeaveEvent">The new leave event for the state.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TxChangeTransitionProperties">
 <summary>
 Provides support for updaing a trasnitions properties.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxChangeTransitionProperties.#ctor(DriveWorks.Project,System.String,System.String,System.String,System.String,DriveWorks.Specification.Condition[],DriveWorks.Specification.Task[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxChangeTransitionProperties" /> transaction class.
 </summary>
 <param name="project">The project in which this transaction is to run.</param>
 <param name="sourceStateTitle">The title of the source state.</param>
 <param name="targetStateTitle">The title of the target state.</param>
 <param name="name">The name of the transition.</param>
 <param name="newTitle">The new title for the transition.</param>
 <param name="newConditons">The new conditions for the transition.</param>
 <param name="newInvokeTaskSequence">The new invoke task sequence for the transition</param>
 <remarks>Arguments can be set to nothing if no change is needed.</remarks>
</member>
<member name="T:DriveWorks.Transactions.TxUpdateFormControlRectangles">
 <summary>
 Provides a transaction which will change the rectangles of the specified controls.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Transactions.TransactionResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.ControlNotFound">
<summary>
  Looks up a localized string similar to Could not find form &apos;{0}&apos;. It may have been deleted..
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.ExComponentNotFoundWithName">
<summary>
  Looks up a localized string similar to Could not find project component with the name &apos;{0}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.ExComponentNotFoundWithNameToDelete">
<summary>
  Looks up a localized string similar to Could not find component with the name &apos;{0}&apos;, to remove it from this project..
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.ExMissingPropertyOnTask">
<summary>
  Looks up a localized string similar to The task &apos;{0}&apos; does not contain a property with the name &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.ExScopeDoesNotContainTask">
<summary>
  Looks up a localized string similar to The scope &apos;{0}&apos; does not contain a task with the name &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.ExTaskNotFoundInComponent">
<summary>
  Looks up a localized string similar to The component &apos;{0}&apos; does not contain a task with the name &apos;{1}&apos;..
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.FormNotFound">
<summary>
  Looks up a localized string similar to Could not find form &apos;{0}&apos;. It may have been deleted..
</summary>
</member>
<member name="P:DriveWorks.Transactions.TransactionResources.VariableCategoryCanNotMoveUp">
<summary>
  Looks up a localized string similar to Could not Delete &quot;{0}&quot;. Sub category name already taken &quot;{1}&quot;. .
</summary>
</member>
<member name="T:DriveWorks.Transactions.TxUndoDeletedDocument">
 <summary>
 Provides support for undeleting a document.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeletedDocument.#ctor(DriveWorks.Project,System.Xml.Linq.XElement)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxUndoDeletedDocument" /> class.
 </summary>
 <param name="project">The project the document was deleted from.</param>
 <param name="documentData">A clone of the original document data element.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxUndoDeletedDocument.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxAggregateTransaction">
 <summary>
 Provides support for aggregating multiple transactions into a single 
 transaction which will succeed or fail atomically.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxAggregateTransaction.#ctor(DriveWorks.Transactions.ITransaction[])">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxAggregateTransaction" /> transaction class.
 </summary>
 <param name="transactions">The transactions to aggregate into a single transaction.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxAggregateTransaction.#ctor(DriveWorks.Transactions.ITransaction[],System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxAggregateTransaction" /> transaction class.
 </summary>
 <param name="transactions">The transactions to aggregate into a single transaction.</param>
 <param name="preserveOrder">Determines if the order of the reverse transaction should be kept the same as the forward.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxAggregateTransaction.#ctor(DriveWorks.Transactions.ITransaction[],System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Transactions.TxAggregateTransaction" /> transaction class.
 </summary>
 <param name="transactions">The transactions to aggregate into a single transaction.</param>
 <param name="cloneArray">True to the clone the incoming array, otherwise false.</param>
 <param name="preserveOrder">Determines if the order of the reverse transaction should be kept the same as the forward.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxAggregateTransaction.Execute">
 <inheritdoc />
</member>
<member name="T:DriveWorks.Transactions.TxBase">
 <summary>
 Provides a helper base class for transactions to automatically
 implement double-commit prevention.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxBase.ExecuteCore">
 <summary>
 When overridden by a derived class, commits the transaction.
 </summary>
 <returns>A transaction which can undo the result of the executed transaction.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Transactions.TxBase.Execute">
 <summary>
 Commits the transaction.
 </summary>
 <returns>
 A transaction which can undo the result of the executed transaction.
 </returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ComponentTransactionsHelper.GetComponent(DriveWorks.Project,System.Object[])">
 <summary>
 Retrieves a <see cref="T:DriveWorks.Components.ProjectComponent"/> from an address created by <see cref="M:DriveWorks.ComponentTransactionsHelper.GetAddress(DriveWorks.Components.ProjectComponent)"/>(ProjectComponent).
 </summary>
</member>
<member name="M:DriveWorks.ComponentTransactionsHelper.GetAddress(DriveWorks.Components.ProjectComponent)">
 <summary>
 Creates an address to the component so that it may be located at a later point in time
 without holding on to references that might go stale.
 </summary>
 <remarks>
 The address will look like this:
 [0] = Component Set name (String)
 [1] = Root comp Id (Guid)
 [2] = Parent comp Id (Guid)
 [3] = Component Id (Guid)
 </remarks>
</member>
<member name="T:DriveWorks.RuleChangeData">
 <summary>
 Represents data about a <see cref="T:DriveWorks.Abstractions.IHasRule"/> to be changed. 
 </summary>
 <devdoc>This is used for passing information about rule changes in transactions.</devdoc>
</member>
<member name="P:DriveWorks.RuleChangeData.IsDynamic">
 <summary>
 Whether the rule should be dynamic.
 </summary>
</member>
<member name="P:DriveWorks.RuleChangeData.RuleName">
 <summary>
 The name of the rule that will change.
 </summary>
</member>
<member name="P:DriveWorks.RuleChangeData.Formula">
 <summary>
 The new rule formula to apply to the rule.
 </summary>
</member>
<member name="P:DriveWorks.RuleChangeData.Comment">
 <summary>
 The new comment to apply to the rule.
 </summary>
</member>
<member name="P:DriveWorks.RuleChangeData.Value">
 <summary>
 The new value of the rule.
 </summary>
</member>
<member name="M:DriveWorks.RuleChangeData.#ctor(System.String,System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.RuleChangeData"/> class. 
 </summary>
 <param name="ruleName">The name of the rule.</param>
 <param name="formula">The formula to apply to the rule.</param>
 <param name="comment">The comment to apply to the rule.</param>
</member>
<member name="M:DriveWorks.RuleChangeData.#ctor(System.String,System.String,System.String,System.Object)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.RuleChangeData"/> class. 
 </summary>
 <param name="ruleName">The name of the rule.</param>
 <param name="formula">The formula to apply to the rule.</param>
 <param name="comment">The comment to apply to the rule.</param>
 <param name="value">The value to apply to the rule.</param>
</member>
<member name="M:DriveWorks.RuleChangeData.#ctor(System.String,System.String,System.String,System.Object,System.Nullable{System.Boolean})">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.RuleChangeData"/> class. 
 </summary>
 <param name="ruleName">The name of the rule.</param>
 <param name="formula">The formula to apply to the rule.</param>
 <param name="comment">The comment to apply to the rule.</param>
 <param name="value">The value to apply to the rule.</param>
 <param name="isDynamic">Whether the property should be dynamic.</param>
</member>
<member name="T:DriveWorks.DesignMasterReadOnlyException">
 <summary>
 Thrown when an attempt is made to open a project whose design master is read-only.
 </summary>
</member>
<member name="M:DriveWorks.DesignMasterReadOnlyException.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.DesignMasterReadOnlyException" /> class.
 </summary>
</member>
<member name="M:DriveWorks.DesignMasterReadOnlyException.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.DesignMasterReadOnlyException" /> class with a specified error message.
 </summary>
 <param name="message">The message which describes the error.</param>
</member>
<member name="M:DriveWorks.DesignMasterReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemNotFoundException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
</member>
<member name="T:DriveWorks.ItemNotFoundException">
 <summary>
 Thrown when an attempt is made to retrieve an item which could not be found.
 </summary>
</member>
<member name="M:DriveWorks.ItemNotFoundException.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemNotFoundException" /> class.
 </summary>
</member>
<member name="M:DriveWorks.ItemNotFoundException.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemNotFoundException" /> class with a specified error message.
 </summary>
 <param name="message">The message which describes the error.</param>
</member>
<member name="M:DriveWorks.ItemNotFoundException.#ctor(System.String,System.Exception)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemNotFoundException" /> class with a specified error message.
 </summary>
 <param name="message">The message which describes the error.</param>
 <param name="innerException">The inner exception.</param>
</member>
<member name="M:DriveWorks.ItemNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemNotFoundException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
</member>
<member name="T:DriveWorks.ItemExistsException">
 <summary>
 Thrown when an attempt is made to create or add an item which already exists.
 </summary>
</member>
<member name="M:DriveWorks.ItemExistsException.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemExistsException" /> class.
 </summary>
</member>
<member name="M:DriveWorks.ItemExistsException.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemExistsException" /> class with a specified error message.
 </summary>
 <param name="message">The message which describes the error.</param>
</member>
<member name="M:DriveWorks.ItemExistsException.#ctor(System.String,System.Exception)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemExistsException" /> class with a specified error message.
 </summary>
 <param name="message">The message which describes the error.</param>
 <param name="innerException">The inner exception.</param>
</member>
<member name="M:DriveWorks.ItemExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemExistsException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
</member>
<member name="T:DriveWorks.ItemDeletedException">
 <summary>
 Thrown when a modification is attempted against an item which has been deleted.
 </summary>
</member>
<member name="M:DriveWorks.ItemDeletedException.#ctor">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.ItemDeletedException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.ItemDeletedException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.ItemDeletedException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.ItemDeletedException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.ItemDeletedException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="P:DriveWorks.ItemDeletedException.Message">
 <summary>
 Gets a message that describes the error.
 </summary>
</member>
<member name="M:DriveWorks.ItemDeletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ItemDeletedException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
</member>
<member name="T:DriveWorks.AlreadyInitializedException">
 <summary>
 Thrown when an attempt is made to initalize an object
 which has already been initialized.
 </summary>
</member>
<member name="M:DriveWorks.AlreadyInitializedException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.AlreadyInitializedException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.AlreadyInitializedException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.AlreadyInitializedException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.AlreadyInitializedException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.AlreadyInitializedException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="M:DriveWorks.AlreadyInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.AlreadyInitializedException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
</member>
<member name="T:DriveWorks.NotInitializedException">
 <summary>
 Thrown when an attempt is made to access a member of an object
 which requires that the object is initialized first.
 </summary>
</member>
<member name="M:DriveWorks.NotInitializedException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.NotInitializedException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.NotInitializedException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.NotInitializedException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.NotInitializedException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.NotInitializedException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="M:DriveWorks.NotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.NotInitializedException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
</member>
<member name="T:DriveWorks.GroupException">
 <summary>
 Thrown when an attempt is made to connect to a group and fails.
 </summary>
</member>
<member name="M:DriveWorks.GroupException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.GroupException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.GroupException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="T:DriveWorks.GroupNotFoundException">
 <summary>
 Thrown when an attempt is made to open a group and it is not found.
 </summary>
</member>
<member name="M:DriveWorks.GroupNotFoundException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupNotFoundException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.GroupNotFoundException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupNotFoundException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.GroupNotFoundException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupNotFoundException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="T:DriveWorks.GroupSharingViolationException">
 <summary>
 Thrown when an attempt is made to open a group and it is already in use.
 </summary>
</member>
<member name="M:DriveWorks.GroupSharingViolationException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupSharingViolationException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.GroupSharingViolationException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupSharingViolationException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.GroupSharingViolationException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupSharingViolationException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="T:DriveWorks.GroupExistsException">
 <summary>
 Thrown when an attempt is made to open a group and it is already in use.
 </summary>
</member>
<member name="M:DriveWorks.GroupExistsException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupExistsException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.GroupExistsException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupExistsException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.GroupExistsException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupExistsException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="T:DriveWorks.GroupConnectionException">
 <summary>
 Thrown when an attempt is made to open a group with a bad connection string.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectionException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupConnectionException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.GroupConnectionException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupConnectionException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.GroupConnectionException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupConnectionException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="T:DriveWorks.GroupVersionException">
 <summary>
 Thrown when a group version is higher than what is currently supported.
 </summary>
</member>
<member name="M:DriveWorks.GroupVersionException.#ctor(System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupVersionException"/> class.
 </summary>
 <param name="innerException">The inner exception.</param>
</member>
<member name="M:DriveWorks.GroupVersionException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupVersionException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.GroupVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.GroupVersionException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
</member>
<member name="T:DriveWorks.GroupUpgradeAbortedException">
 <summary>
 Thrown when a group upgrade has been stopped by the user.
 </summary>
</member>
<member name="M:DriveWorks.GroupUpgradeAbortedException.#ctor(System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupUpgradeAbortedException"/> class.
 </summary>
 <param name="innerException">The inner exception.</param>
</member>
<member name="M:DriveWorks.GroupUpgradeAbortedException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupUpgradeAbortedException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.GroupUpgradeAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.GroupUpgradeAbortedException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
</member>
<member name="T:DriveWorks.GroupEditionException">
 <summary>
 Thrown when an attempt is made to open a group which is from an unsupported edition of DriveWorks.
 </summary>
</member>
<member name="M:DriveWorks.GroupEditionException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupEditionException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.GroupEditionException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupEditionException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.GroupEditionException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.GroupEditionException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="T:DriveWorks.MissingPrerequisiteException">
 <summary>
 Thrown when an attempt is made to use a prerequisite component that is not available.
 </summary>
</member>
<member name="M:DriveWorks.MissingPrerequisiteException.#ctor">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.MissingPrerequisiteException"/> class.
 </summary>
</member>
<member name="M:DriveWorks.MissingPrerequisiteException.#ctor(System.String)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.MissingPrerequisiteException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
</member>
<member name="M:DriveWorks.MissingPrerequisiteException.#ctor(System.String,System.Exception)">
 <summary>
 Creates an instance of the <see cref="T:DriveWorks.MissingPrerequisiteException"/> class.
 </summary>
 <param name="message">A message that describes the error.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="T:DriveWorks.MacroFailedException">
 <summary>
 Thrown when a macro has failed to execute.
 </summary>
</member>
<member name="M:DriveWorks.MacroFailedException.#ctor">
 <summary>
 Creates a new <see cref="T:DriveWorks.MacroFailedException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.MacroFailedException.#ctor(System.String)">
 <summary>
 Creates a new <see cref="T:DriveWorks.MacroFailedException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.MacroFailedException.#ctor(System.String,System.Exception)">
 <summary>
 Creates a new <see cref="T:DriveWorks.MacroFailedException"/> object.
 </summary>
</member>
<member name="T:DriveWorks.InvalidRuleException">
 <summary>
 Thrown when a formula can not be set because the given rule has errors within it.
 </summary>
</member>
<member name="M:DriveWorks.InvalidRuleException.#ctor">
 <summary>
 Creates a new <see cref="T:DriveWorks.InvalidRuleException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.InvalidRuleException.#ctor(System.String)">
 <summary>
 Creates a new <see cref="T:DriveWorks.InvalidRuleException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.InvalidRuleException.#ctor(System.String,System.Exception)">
 <summary>
 Creates a new <see cref="T:DriveWorks.InvalidRuleException"/> object.
 </summary>
</member>
<member name="T:DriveWorks.EnumerationInterruptedException">
 <summary>
 Thrown when an enumeration operation is interrupted, for example, by a lack of network connectivity.
 </summary>
</member>
<member name="M:DriveWorks.EnumerationInterruptedException.#ctor">
 <summary>
 Creates a new <see cref="T:DriveWorks.EnumerationInterruptedException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.EnumerationInterruptedException.#ctor(System.String)">
 <summary>
 Creates a new <see cref="T:DriveWorks.EnumerationInterruptedException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.EnumerationInterruptedException.#ctor(System.String,System.Exception)">
 <summary>
 Creates a new <see cref="T:DriveWorks.EnumerationInterruptedException"/> object.
 </summary>
</member>
<member name="T:DriveWorks.InvalidCharactersException">
 <summary>
 Thrown when a file path contains invalid characters
 </summary>
</member>
<member name="M:DriveWorks.InvalidCharactersException.#ctor">
 <summary>
 Creates a new <see cref="T:DriveWorks.InvalidCharactersException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.InvalidCharactersException.#ctor(System.String)">
 <summary>
 Creates a new <see cref="T:DriveWorks.InvalidCharactersException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.InvalidCharactersException.#ctor(System.String,System.Exception)">
 <summary>
 Creates a new <see cref="T:DriveWorks.InvalidCharactersException"/> object.
 </summary>
</member>
<member name="T:DriveWorks.ClipboardException">
 <summary>
 Thrown when an exception occurs in the ClipboardHelper class.
 </summary>
</member>
<member name="M:DriveWorks.ClipboardException.#ctor">
 <summary>
 Creates a new <see cref="T:DriveWorks.ClipboardException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.ClipboardException.#ctor(System.String)">
 <summary>
 Creates a new <see cref="T:DriveWorks.ClipboardException"/> object.
 </summary>
</member>
<member name="M:DriveWorks.ClipboardException.#ctor(System.String,System.Exception)">
 <summary>
 Creates a new <see cref="T:DriveWorks.ClipboardException"/> object.
 </summary>
</member>
<member name="T:DriveWorks.UploadFileException">
 <summary>
 Thrown when an exception occurs in the <see cref="T:DriveWorks.Forms.UploadControl"/> class.
 </summary>
</member>
<member name="T:DriveWorks.MissingApplicationException">
 <summary>
 Thrown when an attempt is made to use an application that is not installed or is corrupt etc.
 </summary>
</member>
<member name="M:DriveWorks.MissingApplicationException.#ctor(System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.MissingApplicationException"/> class.
 </summary>
 <param name="applicationName">The name the of application is that is missing.</param>
</member>
<member name="M:DriveWorks.MissingApplicationException.#ctor(System.String,System.Exception)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.MissingApplicationException"/> class.
 </summary>
 <param name="applicationName">The name the of application is that is missing.</param>
 <param name="innerException">The source exception.</param>
</member>
<member name="P:DriveWorks.MissingApplicationException.ApplicationName">
 <summary>
 Gets the name of the application that is missing.
 </summary>
</member>
<member name="T:DriveWorks.InvalidAttachmentsException">
 <summary>
 Thrown when attachments are not valid.
 </summary>
</member>
<member name="M:DriveWorks.InvalidAttachmentsException.#ctor(System.String[])">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.InvalidAttachmentsException"/> class.
 </summary>
 <param name="attachments">The invalid attachments.</param>
</member>
<member name="M:DriveWorks.InvalidAttachmentsException.#ctor(System.String[],System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.InvalidAttachmentsException"/> class.
 </summary>
 <param name="attachments">The invalid attachments.</param>
 <param name="message">The exception message.</param>
</member>
<member name="P:DriveWorks.InvalidAttachmentsException.Attachments">
 <summary>
 Gets a collection of the invalid attachments
 </summary>
</member>
<member name="T:DriveWorks.PreviewControlException">
 <summary>
 Thrown when there is a problem with the 3D preview control.
 </summary>
</member>
<member name="M:DriveWorks.PreviewControlException.#ctor(System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.PreviewControlException"/>.
 </summary>
 <param name="message">The message for this exception.</param>
</member>
<member name="M:DriveWorks.PreviewControlException.#ctor(System.String,System.Exception)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.PreviewControlException"/>.
 </summary>
 <param name="message">The message for this exception.</param>
 <param name="innerException">The inner error.</param>
</member>
<member name="M:DriveWorks.PreviewControlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Creates new instance of the <see cref="T:DriveWorks.PreviewControlException"/> via deserialization.
 </summary>
</member>
<member name="T:DriveWorks.GroupProjects">
 <summary>
 Provides accessors for a group's project information.
 </summary>
</member>
<member name="M:DriveWorks.GroupProjects.GetProjects">
 <summary>
 Gets all registered projects whether or not the logged-on user has access.
 </summary>
 <returns></returns>
 <remarks>
 <para>This method will return a project even if the current user doesn't have access to the project.</para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupProjects.GetProjects(System.Guid)">
 <summary>
 Gets all registered projects on which the logged-on user holds the specified permission.
 </summary>
 <param name="permissionId">The permission to check for, generally one of the values from <see cref="T:DriveWorks.Security.StandardProjectPermissions" />.</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:DriveWorks.GroupProjects.TryGetProject(System.String,DriveWorks.ProjectDetails@)">
 <summary>
 Gets the specified project's details.
 </summary>
 <param name="projectName">The name of the project to retrieve.</param>
 <param name="projectDetails">A reference to a variable which will receive the project details.</param>
 <returns>True if the project was found and returned, otherwise false.</returns>
 <remarks>
 <para>This method will return a project even if the current user doesn't have access to the project.</para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupProjects.TryGetProject(System.Guid,DriveWorks.ProjectDetails@)">
 <summary>
 Gets the specified project's details.
 </summary>
 <param name="projectId">The unique identifier of the project to retrieve.</param>
 <param name="projectDetails">A reference to a variable which will receive the project details.</param>
 <returns>True if the project was found and returned, otherwise false.</returns>
 <remarks>
 <para>This method will return a project even if the current user doesn't have access to the project.</para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupProjects.GetProject(System.String)">
 <summary>
 Gets the specified project's details.
 </summary>
 <param name="projectName">The name of the project to retrieve.</param>
 <returns>The project details.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified project could not be found.</exception>
 <remarks>
 <para>This method will return a project even if the current user doesn't have access to the project.</para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupProjects.GetProject(System.Guid)">
 <summary>
 Gets the specified project's details.
 </summary>
 <param name="projectId">The unique identifier of the project to retrieve.</param>
 <returns>The project details.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified project could not be found.</exception>
 <remarks>
 <para>This method will return a project even if the current user doesn't have access to the project.</para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupProjects.RegisterProject(System.String,System.Boolean,System.Boolean)">
 <summary>
 Registers a new project.
 </summary>
 <param name="projectPath">The path to the project file.</param>
 <param name="hidden">True if the project is hidden, see <see cref="P:DriveWorks.ProjectDetails.Hidden" /> for more information.</param>
 <param name="deployed">True if the project is deployed, see <see cref="P:DriveWorks.ProjectDetails.Deployed" /> for more information.</param>
 <returns>An instance of the <see cref="T:DriveWorks.ProjectDetails" /> type representing the newly registered project.</returns>
</member>
<member name="M:DriveWorks.GroupProjects.RegisterProject(System.Guid,System.String,System.Boolean,System.Boolean)">
 <summary>
 Registers a new project.
 </summary>
 <param name="projectId">The id to give the project.</param>
 <param name="projectPath">The path to the project file.</param>
 <param name="hidden">True if the project is hidden, see <see cref="P:DriveWorks.ProjectDetails.Hidden" /> for more information.</param>
 <param name="deployed">True if the project is deployed, see <see cref="P:DriveWorks.ProjectDetails.Deployed" /> for more information.</param>
 <returns>An instance of the <see cref="T:DriveWorks.ProjectDetails" /> type representing the newly registered project.</returns>
</member>
<member name="M:DriveWorks.GroupProjects.DeleteProjectById(System.Guid)">
 <summary>
 Deletes an existing project using it's Id.
 </summary>
 <param name="projectId">The identifier which uniquely identifies the project to delete.</param>
 <returns>True if the project was found and deleted, otherwise false.</returns>
</member>
<member name="M:DriveWorks.GroupProjects.DeleteProjectByName(System.String)">
 <summary>
 Deletes an existing project using it's name.
 </summary>
 <param name="name">Name of the project to delete.</param>
 <returns>True if successfully deleted.</returns>
</member>
<member name="M:DriveWorks.GroupProjects.TryUpdateProject(DriveWorks.ProjectDetails)">
 <summary>
 Updates a project's registration details.
 </summary>
 <param name="projectDetails">The updated registration details for the project.</param>
 <returns>True if the project was successfully found and updated, otherwise false.</returns>
 <remarks>
 <para>This method requires that the current user have edit permissions for the project.</para>
 </remarks>
</member>
<member name="M:DriveWorks.GroupProjects.UpdateProject(DriveWorks.ProjectDetails)">
 <summary>
 Updates a project's registration details.
 </summary>
 <param name="projectDetails">The updated registration details for the project.</param>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified project could not be found.</exception>
 <remarks>
 <para>This method requires that the current user have edit permissions for the project.</para>
 </remarks>
</member>
<member name="T:DriveWorks.ProjectComponentSet">
 <summary>
 Provides access to a component set which contains the rules for a complete hierarchy of components.
 </summary>
</member>
<member name="E:DriveWorks.ProjectComponentSet.IsLoadedChanged">
 <summary>
 Raised when the value of the <see cref="P:DriveWorks.ProjectComponentSet.IsLoaded" /> property changes.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectComponentSet.Removed">
 <summary>
 Raised when the component set is removed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectComponentSet.NameChanged">
 <summary>
 Raised when the component set's name changes.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectComponentSet.Index">
 <summary>
 Gets the index of the component set.
 </summary>
</member>
<member name="P:DriveWorks.ProjectComponentSet.Type">
 <summary>
 Gets the type of component which is contained by the component set.
 </summary>
</member>
<member name="P:DriveWorks.ProjectComponentSet.Name">
 <summary>
 Gets/sets the name of the component set.
 </summary>
</member>
<member name="P:DriveWorks.ProjectComponentSet.Rule">
 <summary>
 Gets the component rule.
 </summary>
</member>
<member name="P:DriveWorks.ProjectComponentSet.Component">
 <summary>
 Gets the root component in the component set.
 </summary>
 <remarks>
 If the component hasn't been loaded by a call to the <see cref="M:DriveWorks.ProjectComponentSet.LoadComponent" /> method, this property will return a null
 reference (Nothing in Visual Basic).
 </remarks>
</member>
<member name="P:DriveWorks.ProjectComponentSet.IsLoaded">
 <summary>
 Determines whether the component has been loaded.
 </summary>
</member>
<member name="P:DriveWorks.ProjectComponentSet.Tags">
 <summary>
 Provides access to the component tags rule information.
 </summary>
 <remarks>If the component hasn't been loaded by a call to the <see cref="M:DriveWorks.ProjectComponentSet.LoadComponent" /> method, this property will return a null
 reference (Nothing in Visual Basic).</remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSet.LoadComponent">
 <summary>
 Loads the component from the component file.
 </summary>
 <returns>
 False if the component could not be loaded because the underlying capture
 data has been removed, i.e. the component has been uncaptured.
 </returns>
 <exception cref="T:System.NotSupportedException">No implementation of the component type was registered.</exception>
</member>
<member name="M:DriveWorks.ProjectComponentSet.UnloadComponent">
 <summary>
 Unloads the component if one is loaded, any unsaved changes are lost.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSet.Save">
 <summary>
 Saves the component set.
 </summary>
</member>
<member name="M:DriveWorks.ProjectComponentSet.UpdateIndex(System.Int32)">
 <devdoc>
 Called by the parent to update the index.
 </devdoc>
</member>
<member name="M:DriveWorks.ProjectComponentSet.RaiseRemoved">
 <devdoc>
 Called by the parent to raise the <see cref="E:DriveWorks.ProjectComponentSet.Removed" /> event.
 </devdoc>
</member>
<member name="T:DriveWorks.ProjectComponentSets">
 <summary>
 Provides access to a project's component sets.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectComponentSets.ComponentSetAdded">
 <summary>
 Raised when a new component set is added.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectComponentSets.ComponentSetRemoved">
 <summary>
 Raised when a component set is removed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectComponentSets.ComponentSetIsLoadedChanged">
 <summary>
 Raised when a component set is loaded or unloaded.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectComponentSets.ComponentSetMoved">
 <summary>
 Raised when a component set is moved.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectComponentSets.ComponentSetNameChanged">
 <summary>
 Raised when a component set's name changes.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectComponentSets.Count">
 <summary>
 Gets the number of component sets in the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectComponentSets.Item(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="index">The index of the item to retrieve.</param>
 <value></value>
 <returns>The specified item.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSets.Add(System.String,System.Guid)">
 <summary>
 Adds a new project component set.
 </summary>
 <param name="name">The name to give to the component set, if a null reference is specified, the file name of the base component (with an optional numeric suffix if required) will be used.</param>
 <param name="capturedComponentId">The identifier of the captured component on which to base the component set.</param>
 <returns>The new project component set.</returns>
</member>
<member name="M:DriveWorks.ProjectComponentSets.Insert(System.String,System.Guid,System.Int32)">
 <summary>
 Inserts a new project component set at the specified index.
 </summary>
 <param name="name">The name to give to the component set, if a null reference is specified, the file name of the base component (with an optional numeric suffix if required) will be used.</param>
 <param name="capturedComponentId">The identifier of the captured component on which to base the component set.</param>
 <param name="index">The index at which to insert the new component set.</param>
 <returns>The new project component set.</returns>
 <remarks>ArgumentOutOfRangeException will be thrown if the supplied index is less than 0 or greater than the collection's size.</remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSets.Find(System.String)">
 <summary>
 Finds a component set with the given name.
 </summary>
 <param name="componentSetName">The name of the component set to find.</param>
 <returns>A component set, or a null reference if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSets.RemoveAt(System.Int32)">
 <summary>
 Removes the component set at the given index.
 </summary>
 <param name="index">The index of component set to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSets.Remove(DriveWorks.ProjectComponentSet)">
 <summary>
 Removes the given component set.
 </summary>
 <param name="componentSet">The component set to remove.</param>
 <returns>True if the component set was found and removed.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSets.Move(System.Int32,System.Int32)">
 <summary>
 Moves the component set at the given index to the specified new index.
 </summary>
 <param name="oldIndex">The index of the component set to move.</param>
 <param name="newIndex">The new index of the component set.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectComponentSets.GetEnumerator">
 <summary>
 Gets an enumerator which can enumerate over the collection.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.GlobalCacheManager">
 <summary>
 Provides centralized cache management functionality.
 </summary>
 <remarks>
 A number of classes related to the project class maintain caches of rules and values, for example,
 the variables class, ultimately with the goal of improving overall performance when specifying and
 administering.
 
 The cache manager allows one class to notify others when it makes a change
 which requires all the caches to be reloaded.
 </remarks>
</member>
<member name="E:DriveWorks.GlobalCacheManager.ValueChanged">
 <summary>
 Raised when a value in the design master has been changed
 and all rules-driven objects should update their value caches.
 </summary>
</member>
<member name="E:DriveWorks.GlobalCacheManager.NameChanged">
 <summary>
 Raised when one or more names have been changed, requiring 
 rules-driven objects to update their rule caches.
 </summary>
</member>
<member name="E:DriveWorks.GlobalCacheManager.NameChangedRaised">
 <summary>
 Raised after the NameChanged event has been raised.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.GlobalCacheManager.ValueChangedRaised">
 <summary>
 Raised after the ValueChanged event has been raised.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.GlobalCacheManager.RaiseValueChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.GlobalCacheManager.ValueChanged" /> event
 to trigger a value cache update.
 </summary>
</member>
<member name="M:DriveWorks.GlobalCacheManager.RaiseValueChanged(DriveWorks.LocalCacheManager)">
 <summary>
 Raises the <see cref="E:DriveWorks.GlobalCacheManager.ValueChanged" /> event
 to trigger a value cache update.
 </summary>
</member>
<member name="M:DriveWorks.GlobalCacheManager.RaiseNameChanged">
 <summary>
 Raises the <see cref="E:DriveWorks.GlobalCacheManager.NameChanged" /> event
 to trigger a rule cache update.
 </summary>
</member>
<member name="T:DriveWorks.CacheUpdateBehavior">
 <summary>
 Indicates the update semantics of a local cache manager.
 </summary>
</member>
<member name="F:DriveWorks.CacheUpdateBehavior.Immediate">
 <summary>
 Update immediately when the GCM triggers a cache update.
 </summary>
</member>
<member name="F:DriveWorks.CacheUpdateBehavior.Deferred">
 <summary>
 Update the next time a value is requested after the GCM triggers a 
 cache update.
 </summary>
</member>
<member name="T:DriveWorks.CacheInitializeEventArgs">
 <summary>
 Provides the event data for a cache initialization event.
 </summary>
</member>
<member name="P:DriveWorks.CacheInitializeEventArgs.ValueData">
 <summary>
 Gets a 1-based 2-dimensional array containing the raw value cache
 data to use to initialize the value cache.
 </summary>
</member>
<member name="P:DriveWorks.CacheInitializeEventArgs.RuleData">
 <summary>
 Gets a 1-based 2-dimensional array containing the raw rule cache
 data to use to initialize the rule cache.
 </summary>
</member>
<member name="T:DriveWorks.CacheUpdateEventArgs">
 <summary>
 Provides the event data for a cache update event.
 </summary>
</member>
<member name="P:DriveWorks.CacheUpdateEventArgs.Data">
 <summary>
 Gets a 1-based 2-dimensional array containing the updated raw cache
 data to use to update the cache.
 </summary>
</member>
<member name="T:DriveWorks.LocalCacheManager">
 <summary>
 Helps manage the local cache state for an object
 by automatically handling the events raised by the 
 global cache manager to handle common behavior.
 </summary>
</member>
<member name="E:DriveWorks.LocalCacheManager.CacheInitializing">
 <summary>
 Raised when the LCM needs to load the cache for the first time.
 </summary>
</member>
<member name="E:DriveWorks.LocalCacheManager.ValuesUpdating">
 <summary>
 Raised when the LCM has determined that the values being managed by
 the LCM need updating.
 </summary>
</member>
<member name="E:DriveWorks.LocalCacheManager.RulesUpdating">
 <summary>
 Raised when the LCM has determined that the rules being managed by
 the LCM need updating.
 </summary>
</member>
<member name="P:DriveWorks.LocalCacheManager.CacheUpdateBehavior">
 <summary>
 Gets/sets the cache update behavior of the local cache manager.
 </summary>
</member>
<member name="P:DriveWorks.LocalCacheManager.UpdateIndex">
 <summary>
 Gets the current update index.
 </summary>
</member>
<member name="M:DriveWorks.LocalCacheManager.EnsureInitialized">
 <summary>
 Makes sure the cache has been at least initialized (but it might not necessarily be up to date).
 </summary>
</member>
<member name="M:DriveWorks.LocalCacheManager.EnsureCache">
 <summary>
 Makes sure the cache is up to date with regard to the backing store.
 </summary>
</member>
<member name="T:DriveWorks.Column">
 <summary>
 Represents a column definition for a tabular data.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Column.Name">
 <summary>
 Gets the name of the column.
 </summary>
 <returns>A string containing the name of the column.</returns>
</member>
<member name="P:DriveWorks.Column.Index">
 <summary>
 Gets an index which indicates the position of the column.
 </summary>
 <returns>The index of the column in the column set.</returns>
</member>
<member name="M:DriveWorks.Column.MoveUp">
 <summary>
 Moves the column to a position before its preceding sibling.
 </summary>
 <remarks>
 If this column is the first column in the column set, this method
 does nothing.
 </remarks>
</member>
<member name="M:DriveWorks.Column.MoveDown">
 <summary>
 Moves the column to a position after its following sibling.
 </summary>
 <remarks>
 If this column is the last column in the column set, this method
 does nothing.
 </remarks>
</member>
<member name="T:DriveWorks.Columns">
 <summary>
 Provides access to a list of column definitions for a table of data.
 </summary>
</member>
<member name="E:DriveWorks.Columns.Changed">
 <summary>
 Raised when a column has changed it's index or name.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Columns.ToArray">
 <summary>
 Gets an array of all the columns which have been defined.
 </summary>
</member>
<member name="M:DriveWorks.Columns.MoveColumnUp(DriveWorks.Column)">
 <summary>
 Moves the column to a position before its preceding sibling.
 </summary>
 <param name="columnToMove">The Column to move.</param>
 <remarks>
 If this column is the first column in the column set, this method
 does nothing.
 </remarks>
</member>
<member name="M:DriveWorks.Columns.MoveColumnDown(DriveWorks.Column)">
 <summary>
 Moves the column to a position after its following sibling.
 </summary>
 <param name="columnToMove">The Column to move.</param>
 <remarks>
 If this column is the last column in the column set, this method
 does nothing.
 </remarks>
</member>
<member name="M:DriveWorks.Columns.Add(System.String)">
 <summary>
 Adds a new column to the column collection.
 </summary>
 <param name="name">Name of the new column.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Columns.Remove(DriveWorks.Column)">
 <summary>
 Removes a column from the column collection.
 </summary>
 <param name="column">Column to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Columns.Clear">
 <summary>
 Removes all columns from the collection.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Columns.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through the <see cref="T:DriveWorks.Columns" />.
 </summary>
 <returns>An enumerator that iterates through the <see cref="T:DriveWorks.Columns" />.</returns>
</member>
<member name="T:DriveWorks.ProjectLoadException">
 <summary>
 Thrown when a project cannot be loaded for an unknown reason.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectSaveException">
 <summary>
 Thrown when a project cannot be saved for an unknown reason.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectCreationException">
 <summary>
 Thrown when a project cannot be created for an unknown reason.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectInUseException">
 <summary>
 Thrown when a project is already opened
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectFileExistsException">
 <summary>
 Thrown when a project cannot be created because one or more of the
 project files already exist.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectVersionException">
 <summary>
 Thrown when a project version is higher than what is currently supported.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DesignMasterExistsException">
 <summary>
 Thrown when a project cannot be created because the design master
 file already exists.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.DesignMasterFormatException">
 <summary>
 Thrown when a project cannot be loaded because the design master
 format is not understood.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.UnknownDataTableProviderException">
 <summary>
 Thrown when a project cannot be loaded because one or more of its documents
 specify unsupported providers.
 </summary>
</member>
<member name="M:DriveWorks.UnknownDataTableProviderException.#ctor(System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.UnknownDataTableProviderException" /> class.
 </summary>
 <param name="dataTableName">The name of the table.</param>
</member>
<member name="M:DriveWorks.UnknownDataTableProviderException.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.UnknownDataTableProviderException" /> class.
 </summary>
 <param name="dataTableName">The name of the table.</param>
 <param name="typeName">The full name of the unknown type.</param>
</member>
<member name="P:DriveWorks.UnknownDataTableProviderException.DocumentName">
 <summary>
 Gets the name of the table.
 </summary>
</member>
<member name="P:DriveWorks.UnknownDataTableProviderException.TableType">
 <summary>
 Gets the type of the table.
 </summary>
</member>
<member name="T:DriveWorks.UnknownDocumentProviderException">
 <summary>
 Thrown when a project is in the process of being opened but one or more of its documents
 specify unsupported providers.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.UnknownDocumentProviderException.#ctor(System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.UnknownDocumentProviderException" /> class.
 </summary>
 <param name="documentName">The name of the document.</param>
</member>
<member name="M:DriveWorks.UnknownDocumentProviderException.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.UnknownDocumentProviderException" /> class.
 </summary>
 <param name="documentName">The name of the document.</param>
 <param name="documentType">The type of the document.</param>
</member>
<member name="P:DriveWorks.UnknownDocumentProviderException.DocumentName">
 <summary>
 The name of the document.
 </summary>
</member>
<member name="P:DriveWorks.UnknownDocumentProviderException.DocumentType">
 <summary>
 The type of the document.
 </summary>
</member>
<member name="T:DriveWorks.CorruptDocumentDataException">
 <summary>
 Thrown when a project is in the process of being opened but one or more of its documents
 has corrupt data.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ConstantDataCorruptException">
 <summary>
 Thrown when constant information cannot be loaded because the underlying data store is 
 in the wrong format.
 </summary>
</member>
<member name="T:DriveWorks.VariableDataCorruptException">
 <summary>
 Thrown when variable information cannot be loaded because the underlying data store is 
 in the wrong format.
 </summary>
</member>
<member name="T:DriveWorks.MessageDataCorruptException">
 <summary>
 Thrown when message information cannot be loaded because the underlying data store is 
 in the wrong format.
 </summary>
</member>
<member name="T:DriveWorks.DisplayFileDataCorruptException">
 <summary>
 Thrown when display file information cannot be loaded because the underlying data store is 
 in the wrong format.
 </summary>
</member>
<member name="T:DriveWorks.FormDataCorruptException">
 <summary>
 Thrown when form information cannot be loaded because the underlying data store is 
 in the wrong format.
 </summary>
</member>
<member name="T:DriveWorks.TableDataCorruptException">
 <summary>
 Thrown when table information cannot be loaded because the underlying data store is 
 in the wrong format.
 </summary>
</member>
<member name="T:DriveWorks.ProjectNotFoundException">
 <summary>
 Thrown when an attempt is made to work with a specification for which the project could not be found.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectNotFoundException.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectNotFoundException" /> class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectNotFoundException" /> class with serialized data.
 </summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
 <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectPermissionException">
 <summary>
 Thrown when a user does not have edit permission for a project they are trying to load.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectChildSpecificationProjectDef">
 <summary>
 Provides access to the input and output mappings that have been defined for a given
 type of project in a child specification definition.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationProjectDef.ProjectName">
 <summary>
 Gets the name of the project represented by the project definition.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationProjectDef.Inputs">
 <summary>
 Gets the input mappings that have been defined for the project represented
 by the project definitione.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationProjectDef.Outputs">
 <summary>
 Gets the output mappings that have been defined for the project represented
 by the project definition.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddInput(System.String)">
 <summary>
 Adds a new input binging to this project definition.
 </summary>
 <param name="constantName">The constant name to bind.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationProjectDef.RemoveInput(DriveWorks.ProjectChildSpecificationInputDef)">
 <summary>
 Removes an input from this collection of inputs.
 </summary>
 <param name="input">The input to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationProjectDef.TryGetInput(System.String,DriveWorks.ProjectChildSpecificationInputDef@)">
 <summary>
 Attempts to get a specified input from the given constant name.
 </summary>
 <param name="constantName">Name of the constant to get the input for.</param>
 <param name="input">The input to be set.</param>
 <returns>True if the input was found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddOutput(System.String,System.String)">
 <summary>
 Adds a new output binging to this project definition.
 </summary>
 <param name="localColumnName">The local column name to bind.</param>
 <param name="remoteVariableName">The Name of the variable to bind the column to.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddOutput(System.String,System.String,DriveWorks.ProjectChildSpecificationOutputType)">
 <summary>
 Adds a new output binding to this project definition.
 </summary>
 <param name="localColumnName">The local column name to bind.</param>
 <param name="outputDisplayName">The display name of the output to which the column will be bound.</param>
 <param name="outputType">The type of output.</param>
 <returns>The child specification output.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddOutput(System.String,System.String,DriveWorks.ProjectChildSpecificationOutputType,System.Boolean)">
 <summary>
 Adds a new output binding to this project definition.
 </summary>
 <param name="localColumnName">The local column name to bind.</param>
 <param name="outputDisplayName">
 The display name of the output to which the column will be bound. 
 This could be an empty string if it is to be auto mapped based on the column name.
 </param>
 <param name="outputType">The type of output.</param>
 <param name="autoMap">Whether this column should be mapped automatically to a specification property with the same name.</param>
 <returns>The child specification output.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddAutoMappedOutput(System.String)">
 <summary>
 Adds a new output binding to this project definition. The binding will attempt to auto map to a 
 specification property with the same name as the column to bind.
 </summary>
 <param name="columnName">The name of the column to bind.</param>
 <returns>The child specification output.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationProjectDef.RemoveOutput(DriveWorks.ProjectChildSpecificationOutputDef)">
 <summary>
 Removes an output from this list of outputs.
 </summary>
 <param name="output">The output binding to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationProjectDef.TryGetOutput(System.String,DriveWorks.ProjectChildSpecificationOutputDef@)">
 <summary>
 Attempts to get a specified output from the given column name.
 </summary>
 <param name="columnName">Name of the item column to get the output for.</param>
 <param name="output">The output to be set.</param>
 <returns>True if the output was found.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectChildSpecificationInputDef">
 <summary>
 Provides access to an input mapping for a given project in a child specification
 definition.
 </summary>
 <remarks>
 When a child specification is created by the specifier, DriveWorks
 drives values from the parent specification into constants in the
 child specification.
 
 Each value to be driven into a constant is described by an instance of the
 <see cref="T:DriveWorks.ProjectChildSpecificationInputDef" /> type.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationInputDef.TargetConstantName">
 <summary>
 Gets the name of the constant which will be driven in the
 child specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationInputDef.Rule">
 <summary>
 Gets/sets the rule which defines the value which
 will be driven in to the target constant.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationInputDef.Comment">
 <summary>
 Gets/sets the rule comment.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationInputDef.CreateElement(System.String)">
 <summary>
 Returns a new element that can be used to create a new instance of <see cref="T:DriveWorks.ProjectChildSpecificationInputDef"/>.
 </summary>
 <param name="remoteConstantName">The constant to bind this input too.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationInputDef.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="T:DriveWorks.ProjectChildSpecificationOutputDef">
 <summary>
 Provides access to an output mapping for a given project in a child specification
 definition.
 </summary>
 <remarks>
 When a child specification is completed by the specifier, DriveWorks
 retrieves values from specification properties or variables in the child specification and places
 them in columns in a subproject control in a DriveWorks form.
 
 Each value to be retrieved from a variable or specification property is described by an instance of the
 <see cref="T:DriveWorks.ProjectChildSpecificationOutputDef" /> type.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationOutputDef.RemoteVariableName">
 <summary>
 Gets the display name of the variable to retrieve from the child specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationOutputDef.OutputDisplayName">
 <summary>
 Gets the display name of the output to retrieve from the child specification.
 </summary>
 <remarks>The output could be from one of the types specified in <see cref="T:DriveWorks.ProjectChildSpecificationOutputType"/>.</remarks>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationOutputDef.OutputName">
 <summary>
 Gets/sets the name of the output to retrieve from the child specification.
 </summary>
 <remarks>
 The output could be from one of the types specified in <see cref="T:DriveWorks.ProjectChildSpecificationOutputType"/>.
 This value will contain its type prefix.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationOutputDef.OutputType">
 <summary>
 Gets the type of output to retrieve from the child specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationOutputDef.IsAutoMapped">
 <summary>
 Gets/sets whether we should auto map this output to a specification property.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationOutputDef.LocalColumnName">
 <summary>
 Gets the name of the column in the subproject control
 which will receive the value from the child specification.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationOutputDef.CreateElement(System.String,System.String,System.Boolean)">
 <summary>
 Returns a new element that can be used to create a new instance of <see cref="T:DriveWorks.ProjectChildSpecificationOutputDef"/>.
 </summary>
 <param name="localColumnName">The local column name to have this binding represent.</param>
 <param name="outputName">The name of the Variable or Specification Property to bind this output to.</param>
 <param name="autoMap">Whether the column should be automatically mapped to a specification property of the same name.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectDataTable">
 <summary>
 Provides a means to work with a data table in a project.
 </summary>
</member>
<member name="E:DriveWorks.ProjectDataTable.NameChanged">
 <summary>
 Raised when the document's name changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectDataTable.Deleted">
 <summary>
 Raised when the document is deleted.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTable.#ctor">
 <summary>
 Initializes a derived instance of the <see cref="T:DriveWorks.ProjectDataTable" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Implementors should consider marking their constructors as private or protected to prevent
 accidental direct instantiation by end-users.
 </note>
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.InitializeNewCore">
 <summary>
 When overridden in a derived class, performs initialization tasks relevant
 to a newly created document.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.InitializeExistingCore">
 <summary>
 When overridden in a derived class, performs initialization tasks relevant
 to an existing document, i.e. during project load.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDataTable.DisplayName">
 <summary>
 Gets/sets the name of the data source.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDataTable.InvariantName">
 <summary>
 Gets the invariant name of the table.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDataTable.IsDeleted">
 <summary>
 Gets whether the table has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDataTable.IsInitialized">
 <summary>
 Gets whether the table has been initialized.
 </summary>
 <remarks>
 When a table is first created, it is not attached to a project and some
 functionality of the table may not available.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectDataTable.RefreshOnLoad">
 <summary>
 Gets whether the data table should be refreshed from it's source when the project is loaded.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTable.Refresh">
 <summary>
 Refreshes the data table by asking the provider to re-retrieve the data.
 </summary>
 <returns>
 True if the data was successfully retrieved, otherwise false.
 </returns>
 <remarks>
 If a seriously problem occurs when retrieving the data, a provider-specific
 exception may be thrown.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.Delete">
 <summary>
 Deletes the table from the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTable.DeleteCore">
 <summary>
 When overridden in a derived class, performs any 
 clean-up necessary to delete the document from the project.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.GetCachedTableData">
 <summary>
 Gets the cached table data from the design master.
 </summary>
 <returns>A zero-based two dimensional array of values.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDataTable.Data">
 <summary>
 Gets/sets the custom data for the document.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDataTable.InternalName">
 <summary>
 Gets the internal name of the data table.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTable.IsNameValid(System.String)">
 <summary>
 Checks if the specified name is valid, first by checking
 whether it meets standard whitespace requirements - i.e. no 
 leading and/or terminating whitespace, and then by delegating further
 checks to the derived class
 </summary>
 <returns>True if the name is valid, otherwise false.</returns>
</member>
<member name="M:DriveWorks.ProjectDataTable.IsNameValidCore(System.String)">
 <summary>
 When overridden in a derived class, checks to see if the specified
 new name is a valid name for the given type of document.
 </summary>
 <param name="newName">The proposed name of the document.</param>
 <returns>True if the name is valid, otherwise false.</returns>
</member>
<member name="P:DriveWorks.ProjectDataTable.StoreIsSerialized">
 <summary>
 Gets whether the table's backing store should be serialized or not.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTable.GetTableData(System.Object[0:,0:]@)">
 <summary>
 Gets the raw table data as a zero-based two-dimensional array of values.
 </summary>
 <param name="result">
 A reference to a variable which will receive a zero-based two dimension object array of values
 representing the raw table data.
 </param>
 <returns>
 True if the operation succeeded, otherwise false.
 </returns>
 <remarks>
 If a serious problem occurs an exception should be
 thrown but under no circumstances may any user-interface elements be shown.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.RefreshOnProjectLoad">
 <summary>
 Determines if the data table is to be refreshed each time the project is loaded.
 </summary>
 <returns>True if the data table is to be refreshed on project load.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.NotifyStoreRead">
 <summary>
 When overridden in a derived class, handles the store being read for the first time.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.Dispose">
 <summary>
 Disposes the table.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDataTable.Element">
 <summary>
 Gets the document element.
 </summary>
 <remarks>
 This method is for use by the <see cref="T:DriveWorks.ProjectDocuments" /> class
 so that it can add the document element for a new document to the project file
 when the document is added to the project.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectDataTable.ProjectState">
 <summary>
 Gets the current project state for the table.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTable.ConnectDataElement">
 <summary>
 Connects the data element to the container element before a save operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.DisconnectDataElement">
 <summary>
 Disconnects the data element from the container element after a save operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.AssertNotDeleted">
 <summary>
 Throws an exception if the document has been deleted.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTable.AssertInitialized">
 <summary>
 Throws an exception if the document hasn't been initialized.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTable.GetName(System.String)">
 <summary>
 Gets the invariant name of the table from a display name.
 </summary>
 <param name="displayName">The display name to convert.</param>
 <returns>The converted name.</returns>
 <remarks>This just removes whitespace.</remarks>
</member>
<member name="M:DriveWorks.ProjectDataTable.GetTableReferenceName(System.String)">
 <summary>
 Converts a table display name to a reference name (how it would be used in rules).
 </summary>
 <param name="displayName">The name to convert.</param>
 <returns>The converted name.</returns>
 <remarks>
 E.g. "Hello There" would return "DWLookupHelloThere"
 </remarks>
</member>
<member name="T:DriveWorks.ProjectDataTables">
 <summary>
 Provides access to a project's data tables.
 </summary>
</member>
<member name="E:DriveWorks.ProjectDataTables.DataTableCreated">
 <summary>
 Raised when a data table is created.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectDataTables.DataTableDeleted">
 <summary>
 Raised when a data table is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectDataTables.DataTableNameChanged">
 <summary>
 Raised when the name of a data table is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTables.CreateDataTable``1(System.String)">
 <summary>
 Creates and adds a new document to the project.
 </summary>
 <typeparam name="TTable">The type of the table to add.</typeparam>
 <param name="name">The name of the table to add.</param>
 <exception cref="T:DriveWorks.ItemExistsException">A table with the given name already exists.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The specified type does not inherit from <see cref="T:DriveWorks.ProjectDataTable" />.</exception>
 <returns>The newly created table.</returns>
</member>
<member name="M:DriveWorks.ProjectDataTables.CreateDataTable(System.Type,System.String)">
 <summary>
 Creates and adds a new table to the project.
 </summary>
 <param name="tableType">The type of the table to add.</param>
 <param name="name">The name of the table to add.</param>
 <exception cref="T:DriveWorks.ItemExistsException">A table with the given name already exists.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in <paramref name="tableType" /> does not inherit from <see cref="T:DriveWorks.ProjectDataTable" /> or isn't defined in a extension library.</exception>
 <returns>The newly created table.</returns>
</member>
<member name="M:DriveWorks.ProjectDataTables.RefreshAll">
 <summary>
 Refreshes all data sources in the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTables.GetTable(System.String)">
 <summary>
 Gets the table with the specified name.
 </summary>
 <param name="name">The name of the table to get.</param>
 <returns>The data table with the specified name.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if a data table with the specified name does not exist.</exception>
 <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="name" /> argument is a null reference.</exception>
</member>
<member name="M:DriveWorks.ProjectDataTables.TryGetTable(System.String,DriveWorks.ProjectDataTable@)">
 <summary>
 Tries to get a table with the specified name.
 </summary>
 <param name="name">The name of the table to retrieve.</param>
 <param name="table">A reference to a variable which will receive the table.</param>
 <returns>True if the table was found and returned, otherwise false.</returns>
 <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="name" /> argument is a null reference.</exception>
</member>
<member name="M:DriveWorks.ProjectDataTables.ToArray">
 <summary>
 Copies the data tables to a new array and returns it.
 </summary>
 <returns>An array of data tables.</returns>
</member>
<member name="P:DriveWorks.ProjectDataTables.Manager">
 <summary>
 Gets the backing store manager for tables in the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTables.LoadExisting(System.Xml.Linq.XElement)">
 <summary>
 Loads an existing data table, this is for use by transactions
 and the data table constructor.
 </summary>
 <param name="dataTableElement">The XML element that contains the data table data.</param>
 <returns>The new loaded data table.</returns>
 <remarks>
 <para>
 This method is atomic, if anything goes wrong, the state of the manager
 remains unaffected.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDataTables.RefreshAll(System.Boolean)">
 <summary>
 Refreshes all data tables in the project.
 </summary>
 <param name="projectLoad">
 If True then only data tables that specify they should be refreshed on project load get refreshed.
 </param>
</member>
<member name="M:DriveWorks.ProjectDataTables.NotifyDeleted(DriveWorks.ProjectDataTable)">
 <summary>
 Raises the <see cref="E:DriveWorks.ProjectDataTables.DataTableDeleted" /> event.
 </summary>
 <param name="table">The table that was deleted.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTables.Delete(DriveWorks.ProjectDataTable)">
 <summary>
 Removes any information held about the table from the project.
 </summary>
 <param name="table">The table to delete.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTables.NotifyNameChanged(DriveWorks.ProjectDataTable)">
 <summary>
 Raises the <see cref="E:DriveWorks.ProjectDataTables.DataTableNameChanged" /> event.
 </summary>
 <param name="table">The table that was changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDataTables.RenameTable(DriveWorks.ProjectDataTable,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Updates the name->table dictionary with the new name of the specified 
 table.
 </summary>
 <param name="table">The table to rename.</param>
 <param name="newName">The new name of the table.</param>
 <remarks>The <see cref="P:DriveWorks.ProjectDataTable.DisplayName" /> property must reflect the old name of the table prior to calling this method.</remarks>
 <exception cref="T:DriveWorks.ItemExistsException">Thrown when a table with the specified name already exists.</exception>
</member>
<member name="M:DriveWorks.ProjectDataTables.ConnectDataElements">
 <summary>
 Connects data elements prior to a save operation.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTables.DisconnectDataElements">
 <summary>
 Disconnects data elements after a save operation.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDataTables.GetEnumerator">
 <summary>
 Gets an enumerator which enumerates the data tables in the collection.
 </summary>
</member>
<member name="T:DriveWorks.ProjectDocument">
 <summary>
 Provides the base class for a project output document definition.
 </summary>
</member>
<member name="E:DriveWorks.ProjectDocument.NameChanged">
 <summary>
 Raised when the document's name changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectDocument.Deleted">
 <summary>
 Raised when the document is deleted.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocument.#ctor">
 <summary>
 Initializes a derived instance of the <see cref="T:DriveWorks.ProjectDocument" /> type.
 </summary>
 <remarks>
 <note type="implementnotes">
 Implementors should consider marking their constructors as private or protected to prevent
 accidental direct instantiation by end-users.
 </note>
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDocument.#ctor(System.Boolean)">
 <summary>
 Initializes a derived instance of the <see cref="T:DriveWorks.ProjectDocument" /> type.
 </summary>
 <param name="supportsPreview">True if the derived document provider supports preview generation, otherwise false.</param>
 <remarks>    
 <note type="implementnotes">
 Implementors should consider marking their constructors as private or protected to prevent
 accidental direct instantiation by end-users.
 </note>
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDocument.InitializeNewCore">
 <summary>
 When overridden in a derived class, performs initialization tasks relevant
 to a newly created document.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocument.InitializeExistingCore">
 <summary>
 When overridden in a derived class, performs initialization tasks relevant
 to an existing document, i.e. during project load.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocument.Project">
 <summary>
 Gets the project to which the document belongs.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocument.Name">
 <summary>
 Gets/sets the name of the document.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocument.IsDeleted">
 <summary>
 Gets whether the document has been deleted.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocument.IsInitialized">
 <summary>
 Gets whether the document has been initialized.
 </summary>
 <remarks>
 When a document is first created, it is not attached to a project and some
 functionality of the document may not available.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectDocument.SupportsPreview">
 <summary>
 Gets whether the document supports generating a preview.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocument.HasDisplayFileRule">
 <summary>
 Gets whether the document has a display file rule.
 </summary>
 <remarks>Used to determine if the document is a Referenced File.</remarks>
</member>
<member name="M:DriveWorks.ProjectDocument.GeneratePreview(System.String)">
 <summary>
 Creates a preview of the document in the specified directory.
 </summary>
 <param name="previewDirectory">A fully-qualified path to a directory in which the preview file should be created.</param>
 <returns>The full path to the preview file.</returns>
 <exception cref="T:System.NotSupportedException">Thrown if the document does not support previewing, as indicated by the <see cref="P:DriveWorks.ProjectDocument.SupportsPreview" /> property.</exception>
 <exception cref="T:System.NotImplementedException">Thrown if the document has specified support for previewing, but has not overridden the <see cref="M:DriveWorks.ProjectDocument.GeneratePreviewCore(System.String,DriveWorks.Specification.RuleResults)" /> method.</exception>
</member>
<member name="M:DriveWorks.ProjectDocument.GeneratePreview(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Creates a preview of the document in the specified directory.
 </summary>
 <param name="previewDirectory">A fully-qualified path to a directory in which the preview file should be created.</param>
 <param name="overriddenRules">A dictionary containing overriden rules, where the key is the unique identifier of the rule being overridden, and the value is the new formula.</param>
 <returns>The full path to the preview file.</returns>
 <exception cref="T:System.NotSupportedException">Thrown if the document does not support previewing, as indicated by the <see cref="P:DriveWorks.ProjectDocument.SupportsPreview" /> property.</exception>
 <exception cref="T:System.NotImplementedException">Thrown if the document has specified support for previewing, but has not overridden the <see cref="M:DriveWorks.ProjectDocument.GeneratePreviewCore(System.String,DriveWorks.Specification.RuleResults)" /> method.</exception>
</member>
<member name="M:DriveWorks.ProjectDocument.GeneratePreviewCore(System.String,DriveWorks.Specification.RuleResults)">
 <summary>
 When overridden in a derived class, generates a preview of the document in the specified directory using the given calculated rule results.
 </summary>
 <param name="previewDirectory">A fully-qualified path to a directory in which the preview file should be created.</param>
 <param name="results">The calculated rule results for the document.</param>
 <returns>The full path to the preview file.</returns>
</member>
<member name="M:DriveWorks.ProjectDocument.Generate(System.String)">
 <summary>
 Generates the document within the context of the active specification.
 </summary>
 <param name="generateDirectory">The full path to the directory which generated files' paths should be created relative to.</param>
 <exception cref="T:System.InvalidOperationException">Thrown if the project is not part of a running specification.</exception>
</member>
<member name="M:DriveWorks.ProjectDocument.ShouldGeneratePreview">
 <summary>
 Determines whether the document should be generated during preview.
 </summary>
 <returns>Returns True if the document should be generated during preview.</returns>
 <remarks>
 Uses rules result from current project state.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDocument.ShouldGeneratePreview(DriveWorks.Specification.RuleResults)">
 <summary>
 Determines whether the document should be generated during preview.
 </summary>
 <param name="results">The calculated rule results for the document.</param>
 <returns>Returns True if the document should be generated during preview.</returns>
</member>
<member name="M:DriveWorks.ProjectDocument.ShouldGeneratePreview(System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Determines whether the document should be generated during preview.
 </summary>
 <param name="overriddenRules">A dictionary containing overridden rules, where the key is the unique identifier of the rule being overridden, and the value is the new formula.</param>
 <returns>Returns True if the document should be generated during preview.</returns>
</member>
<member name="M:DriveWorks.ProjectDocument.ShouldGenerate">
 <summary>
 Determines whether the document should be generated.
 </summary>
 <returns>Returns True if the document should be generated during preview.</returns>
 <remarks>
 Uses rules result from current project state.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDocument.ShouldGenerate(DriveWorks.Specification.RuleResults)">
 <summary>
 Determines whether the document should be generated.
 </summary>
 <param name="results">The calculated rule results for the document.</param>
 <returns>Returns True if the document should be generated.</returns>
</member>
<member name="M:DriveWorks.ProjectDocument.GenerateCore(System.String,DriveWorks.Specification.RuleResults)">
 <summary>
 When overridden in a derived class, generates the document.
 </summary>
 <param name="generateDirectory">The full path to the directory which generated files' paths should be created relative to.</param>
 <param name="results">The calculated rule results for the document.</param>
</member>
<member name="M:DriveWorks.ProjectDocument.Delete">
 <summary>
 Deletes the document from the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocument.DeleteCore">
 <summary>
 When overridden in a derived class, performs any 
 clean-up necessary to delete the document from the project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocument.Rules">
 <summary>
 Provides access to the document's rules.
 </summary>
 <devdoc>
 This is internal so that the rename process can get to it.
 </devdoc>
</member>
<member name="P:DriveWorks.ProjectDocument.Data">
 <summary>
 Gets/sets the custom data for the document.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocument.CalculateRules">
 <summary>
 Calculates the results of the rules that have been defined for the document.
 </summary>
 <returns>An instance of the <see cref="T:DriveWorks.Specification.RuleResults" /> type which has been populated with the rule results.</returns>
</member>
<member name="M:DriveWorks.ProjectDocument.CalculateRulesCore">
 <summary>
 Calculates the results of the rules that have been defined for the document.
 </summary>
 <returns>An instance of the <see cref="T:DriveWorks.Specification.RuleResults" /> type which has been populated with the rule results.</returns>
 <remarks>Use this to override how your rules are calculated or pre-process them etc</remarks>
</member>
<member name="M:DriveWorks.ProjectDocument.CalculateRules(System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Calculates the results of the rules that have been defined for the document.
 </summary>
 <param name="overriddenRules">A dictionary containing overridden rules, where the key is the unique identifier of the rule being overridden, and the value is the new formula.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Specification.RuleResults" /> type which has been populated with the rule results.</returns>
</member>
<member name="M:DriveWorks.ProjectDocument.RegisterSpecificationDocument(System.String,System.Boolean)">
 <summary>
 Registers a new specification document with the active specification.
 </summary>
 <param name="documentPath">The fully qualified path to the document.</param>
 <param name="isHidden">True if the document is filtered from the the normal end-user view.</param>
 <exception cref="T:System.InvalidOperationException">Thrown if the project is not part of a running specification.</exception>
</member>
<member name="M:DriveWorks.ProjectDocument.ThrowCorruptDocumentDataException">
 <summary>
 Throws the <see cref="T:DriveWorks.CorruptDocumentDataException" /> exception.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocument.GetResultForRuleAsDisplayString(DriveWorks.Specification.RuleResults,DriveWorks.ProjectDocumentRule)">
 <summary>
 Gets the specified rule as a string from the calculated results.
 </summary>
 <param name="results">The results from which to retrieve the rule.</param>
 <param name="rule">The rule for which to retrieve the calculated result.</param>
 <returns>The result of the rule, converted to a string suitable for display.</returns>
</member>
<member name="M:DriveWorks.ProjectDocument.SetRuleContext(DriveWorks.ProjectDocumentRule,System.Object)">
 <summary>
 Sets a rule context that will be use by the Titan rule engine when evaluating the rule.
 </summary>
 <param name="rule">The rule to set the context of.</param>
 <param name="context">The context to give the rule.</param>
 <remarks>
 This is typically used to provide custom MyName() values, or relative rule resolvers.
 </remarks>
</member>
<member name="P:DriveWorks.ProjectDocument.Element">
 <summary>
 Gets the document element.
 </summary>
 <remarks>
 This method is for use by the <see cref="T:DriveWorks.ProjectDocuments" /> class
 so that it can add the document element for a new document to the project file
 when the document is added to the project.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDocument.ConnectDataElement">
 <summary>
 Connects the data element to the container element before a save operation.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocument.DisconnectDataElement">
 <summary>
 Disconnects the data element from the container element after a save operation.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocument.AssertNotDeleted">
 <summary>
 Throws an exception if the document has been deleted.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocument.AssertInitialized">
 <summary>
 Throws an exception if the document hasn't been initialized.
 </summary>
</member>
<member name="T:DriveWorks.ProjectDocument.OverriddenRule">
 <summary>
 Used by the preview support when a rule is overridden.
 </summary>
</member>
<member name="T:DriveWorks.ProjectDocumentRule">
 <summary>
 Provides a document provider with access to a document rule.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocumentRule.Id">
 <summary>
 Gets the rule's unique identifier.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocumentRule.DisplayName">
 <summary>
 Gets the rules display name.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocumentRule.SetDisplayName(System.String)">
 <summary>
 Sets the display name, see remarks for details.
 </summary>
 <param name="newDisplayName">The new display name to apply.</param>
 <remarks>
 <para>
 If the new display name is empty or a null reference, then the display name returned by 
 the <see cref="P:DriveWorks.ProjectDocumentRule.DisplayName" /> property will be the same as the <see cref="P:DriveWorks.ProjectDocumentRule.Id" /> property.
 </para>
 </remarks>
</member>
<member name="P:DriveWorks.ProjectDocumentRule.Formula">
 <summary>
 Gets/sets the formula which defines the rule.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocumentRule.Comment">
 <summary>
 Gets/sets a comment which describes the rule.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocumentRule.SetRuleAndComment(System.String,System.String)">
 <summary>
 Sets the rule and comment in a single operation.
 </summary>
 <param name="newRule">The new rule.</param>
 <param name="newComment">The new comment.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDocumentRule.IsDisplayFileRule">
 <summary>
 Gets/sets whether the rule is used as the rule for a display file associated with the document.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDocumentRule.SupportsRuleRevisionHistory">
 <summary>
 Gets/Sets whether the rule supports a Rule Revision History.
 </summary>
 <Remarks>This property should not be used and will be removed in a future version of DriveWorks.</Remarks>
</member>
<member name="M:DriveWorks.ProjectDocumentRule.GetVersionHistory">
 <summary>
 Gets the version history for the document rule.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocumentRule.RuleContext">
 <summary>
 Gets the context for the rule when it is evaluated.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocumentRule.Parent">
 <summary>
 Gets the <see cref="T:DriveWorks.ProjectDocumentRules" /> collection this rule belongs to.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocumentRule.Element">
 <summary>
 Gets the element which backs the rule.
 </summary>
</member>
<member name="T:DriveWorks.ProjectDocumentRules">
 <summary>
 Provides a document provider with access to the rules which have been defined
 for the project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocumentRules.Clear">
 <summary>
 Removes all rules from the document.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocumentRules.Remove(System.String)">
 <summary>
 Removes the rule with the specified identifier.
 </summary>
 <param name="ruleId">The unique identifier of the rule to remove.</param>
 <returns>True if a rule with the specified identifier was found and removed, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocumentRules.GetRule(System.String)">
 <summary>
 Gets the rule with the specified identifier.
 </summary>
 <param name="ruleId">The identifier which uniquely identifies the rule to retrieve.</param>
 <returns>The rule with the specified unique identifier.</returns>
 <remarks></remarks>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified rule does not exist.</exception>
</member>
<member name="M:DriveWorks.ProjectDocumentRules.TryGetRule(System.String,DriveWorks.ProjectDocumentRule@)">
 <summary>
 Gets the rule with the specified identifier.
 </summary>
 <param name="ruleId">The identifier which uniquely identifies the rule to retrieve.</param>
 <param name="rule">A reference to a variable which will receive the rule.</param>
 <returns>True if the rule is found and returned, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocumentRules.Add">
 <summary>
 Creates and returns a new rule.
 </summary>
 <returns>
 An instance of the <see cref="T:DriveWorks.ProjectDocumentRule" /> type which provides access to the 
 newly created rule.
 </returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocumentRules.Add(System.String)">
 <summary>
 Creates and returns a new rule with a given name.
 </summary>
 <param name="ruleId">The identifier to give to the rule.</param>
 <returns>
 An instance of the <see cref="T:DriveWorks.ProjectDocumentRule" /> type which provides access to the
 newly created rule.
 </returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocumentRules.ToArray">
 <summary>
 Creates an array containing each rule created for the document.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocumentRules.ToDictionary">
 <summary>
 Creates a dictionary containing each rule created for the document.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocumentRules.Item(System.Int32)">
 <summary>
 Gets the document rule at the specified index.
 </summary>
 <param name="index">The index of the document rule to retrieve.</param>
 <returns>The document rule at the specified index.</returns>
</member>
<member name="P:DriveWorks.ProjectDocumentRules.Count">
 <summary>
 Gets a count of the number of document rules in the collection.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocumentRules.Document">
 <summary>
 Gets the document to which the rules belong.
 </summary>
</member>
<member name="P:DriveWorks.ProjectDocumentRules.DisplayFileRule">
 <summary>
 Gets the rule which is being used as the rule for a display file
 associated with the document, or a null reference if no associated
 display file exists.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectDocumentRules.DisplayFile">
 <summary>
 Gets the display file created when a display file rule is assigned, may be 
 a null reference if the project doesn't support display file update notifications.
 </summary>
</member>
<member name="M:DriveWorks.ProjectDocumentRules.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through the document rules.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectDocuments">
 <summary>
 Provides access to a project's output documents.
 </summary>
</member>
<member name="E:DriveWorks.ProjectDocuments.DocumentCreated">
 <summary>
 Raised when a document is created.
 </summary>
</member>
<member name="E:DriveWorks.ProjectDocuments.DocumentDeleted">
 <summary>
 Raised when a document is deleted.
 </summary>
</member>
<member name="E:DriveWorks.ProjectDocuments.DocumentNameChanged">
 <summary>
 Raised when a document's name changes.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocuments.CreateDocument``1(System.String)">
 <summary>
 Creates and adds a new document to the project.
 </summary>
 <typeparam name="TDocument">The type of the document to add.</typeparam>
 <param name="name">The name of the document to add.</param>
 <exception cref="T:DriveWorks.ItemExistsException">A document with the given name already exists.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The specified type does not inherit from <see cref="T:DriveWorks.ProjectDocument" />.</exception>
 <returns>The newly created document.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocuments.CreateDocument(System.Type,System.String)">
 <summary>
 Creates and adds a new document to the project.
 </summary>
 <param name="documentType">The type of the document to add.</param>
 <param name="name">The name of the document to add.</param>
 <exception cref="T:DriveWorks.ItemExistsException">A document with the given name already exists.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The type specified in <paramref name="documentType" /> does not inherit from <see cref="T:DriveWorks.ProjectDocument" /> or isn't defined in a extension library.</exception>
 <returns>The newly created document.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocuments.GetDocument(System.String)">
 <summary>
 Gets the document with the specified name.
 </summary>
 <param name="name">The name of the document to get.</param>
 <returns>The document with the specified name.</returns>
 <remarks></remarks>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if a document with the specified name does not exist.</exception>
</member>
<member name="M:DriveWorks.ProjectDocuments.TryGetDocument(System.String,DriveWorks.ProjectDocument@)">
 <summary>
 Tries to get a document with the specified name.
 </summary>
 <param name="name">The name of the document to retrieve.</param>
 <param name="document">A reference to a variable which will receive the document.</param>
 <returns>True if the document was found and returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.ProjectDocuments.ToArray">
 <summary>
 Copies the documents to a new array and returns it.
 </summary>
 <returns>An array of documents.</returns>
</member>
<member name="M:DriveWorks.ProjectDocuments.LoadExisting(System.Xml.Linq.XElement,System.Boolean)">
 <summary>
 Loads an existing document, this is for use by transactions
 and the document manager constructor.
 </summary>
 <param name="documentElement">The XML element that contains the document data.</param>
 <param name="raiseCreated">True to raise the <see cref="E:DriveWorks.ProjectDocuments.DocumentCreated" /> event, otherwise false.</param>
 <returns>The newly loaded document.</returns>
 <remarks>
 <para>
 This method is atomic, if anything goes wrong, the state of the manager
 remains unaffected.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.ProjectDocuments.DeleteDocument(DriveWorks.ProjectDocument)">
 <summary>
 Removes any information held about the document from the project.
 </summary>
 <param name="document">The document to delete.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocuments.RenameDocument(DriveWorks.ProjectDocument,System.String)">
 <summary>
 Updates the name->document dictionary with the new name of the specified 
 document.
 </summary>
 <param name="document">The document to rename.</param>
 <param name="newName">The new name of the document.</param>
 <remarks>The <see cref="P:DriveWorks.ProjectDocument.Name" /> property must reflect the old name of the document prior to calling this method.</remarks>
 <exception cref="T:DriveWorks.ItemExistsException">Thrown when a document with the specified name already exists.</exception>
</member>
<member name="M:DriveWorks.ProjectDocuments.NotifyNameChanged(DriveWorks.ProjectDocument)">
 <summary>
 Used by documents to raise the name changed event.
 </summary>
 <param name="document">The document which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocuments.NotifyDeleted(DriveWorks.ProjectDocument)">
 <summary>
 Used by documents to raise the deleted event.
 </summary>
 <param name="document">The document which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocuments.ConnectDataElements">
 <summary>
 Connects data elements prior to a save operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocuments.DisconnectDataElements">
 <summary>
 Disconnects data elements after a a save operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectDocuments.GetEnumerator">
 <summary>
 Gets an enumerator which enumerates the documents in the collection.
 </summary>
</member>
<member name="T:DriveWorks.ProjectItemListDef">
 <summary>
 Provides access to an item list definition.
 </summary>
</member>
<member name="E:DriveWorks.ProjectItemListDef.Renamed">
 <summary>
 Raised when <see cref="P:DriveWorks.ProjectItemListDef.Name"/> has changed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.ProjectItemListDef.ItemsChanged">
 <summary>
 Raised when any items have been added/deleted/edited/moved.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectItemListDef.Name">
 <summary>
 Gets the name of the item list definition.
 </summary>
</member>
<member name="P:DriveWorks.ProjectItemListDef.Columns">
 <summary>
 Gets the columns for the item list definition.
 </summary>
 <returns>
 An instance of the <see cref="P:DriveWorks.ProjectItemListDef.Columns" /> type which can
 be used to query, add, remove, and re-order columns.
 </returns>
</member>
<member name="P:DriveWorks.ProjectItemListDef.TypeDefinitions">
 <summary>
 Gets the definition of each item type which can provide the basis
 of an item in the item list.
 </summary>
</member>
<member name="M:DriveWorks.ProjectItemListDef.TryGetTypeDefinition(System.String,DriveWorks.ProjectItemListTypeDef@)">
 <summary>
 Gets the type definition for a specific dialog.
 </summary>
</member>
<member name="M:DriveWorks.ProjectItemListDef.GetData">
 <summary>
 Gets information about the item that have been
 added to the current project or specification.
 </summary>
 <returns>
 An instance of the <see cref="T:System.Data.DataTable" /> type which has been populated
 with information about the item.
 
 The data table consists of one row for each item, and is populated with the data 
 for each column in the <see cref="P:DriveWorks.ProjectItemListDef.Columns" />
 property, as well as two additional columns called Name and Type which identify the item name,
 and the dialog from which the item was created.
 </returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListDef.GetItems">
 <summary>
 Gets an collection of all items in this item list.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListDef.AddTypeDefinition(System.String)">
 <summary>
 Creates a new <see cref="T:DriveWorks.ProjectItemListTypeDef"/> instance and adds it to this <see cref="T:DriveWorks.ProjectItemListDef"/>.
 </summary>
 <param name="dialogName">The name of the dialog that this definition will represent.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListDef.RemoveTypeDefinition(DriveWorks.ProjectItemListTypeDef)">
 <summary>
 Removes a type definition from the item list.
 </summary>
 <param name="typeDefinition">The type definition to remove from the item list.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListDef.AddItem(DriveWorks.ProjectItemListTypeDef,System.Object[])">
 <summary>
 Adds a new item to this item list.
 </summary>
 <param name="typeDef">The type of item to create.</param>
 <param name="values">The values to set for this item.</param>
</member>
<member name="M:DriveWorks.ProjectItemListDef.EditItem(System.Int32,DriveWorks.ProjectItemListTypeDef,System.Object[])">
 <summary>
 Edits an existing item in this item list.
 </summary>
 <param name="itemIndex">The row index of the item to edit.</param>
 <param name="values">New values for the item.</param>
</member>
<member name="M:DriveWorks.ProjectItemListDef.DeleteItem(System.Int32)">
 <summary>
 Removes a item from the item list.
 </summary>
 <param name="itemIndex">Index of the row to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListDef.MoveItemUp(System.Int32)">
 <summary>
 Moves an item up in the list of items.
 </summary>
 <param name="itemIndex">The Index of the item to move.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListDef.MoveItemDown(System.Int32)">
 <summary>
 Moves an item down in the list of items.
 </summary>
 <param name="itemIndex">The index of the item to move.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListDef.CreateElement(System.String)">
 <summary>
 Creates a new element that will represent a new <see cref="T:DriveWorks.ProjectItemListDef"/>
 </summary>
 <param name="name">The name to give the new Item list.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectItemLists">
 <summary>
 Provides access to a project's item lists and their definitions.
 </summary>
</member>
<member name="M:DriveWorks.ProjectItemLists.#ctor(DriveWorks.ProjectDesignMaster,System.Xml.Linq.XElement,DriveWorks.ProjectItemListBackingStoreManager)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectItemLists" /> type.
 </summary>
 <param name="dm">The design master for the project.</param>
 <param name="itemListDefinitionsElement">The XML element containing the definitions.</param>
</member>
<member name="P:DriveWorks.ProjectItemLists.Manager">
 <summary>
 Gets the backing store manager.
 </summary>
</member>
<member name="P:DriveWorks.ProjectItemLists.ActiveProject">
 <summary>
 Gets the active project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectItemLists.Definitions">
 <summary>
 Gets the item list definitions.
 </summary>
</member>
<member name="M:DriveWorks.ProjectItemLists.TryGetDefinition(System.String,DriveWorks.ProjectItemListDef@)">
 <summary>
 Gets the item list definitions.
 </summary>
</member>
<member name="M:DriveWorks.ProjectItemLists.Add(System.String)">
 <summary>
 Adds a new item list definition to collection.
 </summary>
 <param name="name">Name of the new item list to create.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemLists.Add(System.Xml.Linq.XElement)">
 <summary>
 Adds a new item list definition to collection.
 </summary>
 <param name="definition">Name of the new item list to create.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemLists.Remove(DriveWorks.ProjectItemListDef)">
 <summary>
 Removes a registered item list definition from this collection.
 </summary>
 <param name="definition">The <see cref="T:DriveWorks.ProjectItemListDef"/> to remove from this collection.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectItemListTypeDef">
 <summary>
 Provides access to the information which defines a valid item type in
 an item list.
 </summary>
</member>
<member name="P:DriveWorks.ProjectItemListTypeDef.DialogName">
 <summary>
 Gets the name of the dialog form used by the type definition.
 </summary>
</member>
<member name="P:DriveWorks.ProjectItemListTypeDef.ItemNameRule">
 <summary>
 Gets/sets the rule which defines the name assigned to an item
 derived from the item type.
 </summary>
</member>
<member name="P:DriveWorks.ProjectItemListTypeDef.ItemNameRuleComment">
 <summary>
 Gets/sets a comment for the rule which defines the name assigned to an item
 derived from the item type.
 </summary>
</member>
<member name="P:DriveWorks.ProjectItemListTypeDef.Outputs">
 <summary>
 Gets the mappings from dialog controls to item list columns that have been defined
 for the item list type.
 </summary>
</member>
<member name="M:DriveWorks.ProjectItemListTypeDef.AddOutput(System.String,System.String)">
 <summary>
 Adds a new output binging to this type definition.
 </summary>
 <param name="localColumnName">The local column name to bind.</param>
 <param name="remoteControlName">The Name of the control to bind the column to.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListTypeDef.RemoveOutput(DriveWorks.ProjectItemListTypeOutputDef)">
 <summary>
 Removes an output from this list of outputs.
 </summary>
 <param name="output">The output binding to remove.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListTypeDef.TryGetOutput(System.String,DriveWorks.ProjectItemListTypeOutputDef@)">
 <summary>
 Attempts to get a specified output from the given item type column name.
 </summary>
 <param name="columnName">Name of the item column to get the output for.</param>
 <param name="output">The output to be set.</param>
 <returns>True if the output was found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListTypeDef.FormNavigationStep_UpdateDialogName(System.String)">
 <summary>
 Updates the dialog name when a form name is changed - for use by the form navigation step ONLY.
 </summary>
 <param name="newName">The new name of the dialog.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectItemListTypeDef.CreateElement(System.String,System.String)">
 <summary>
 Returns an element that can be used to load a new <see cref="T:DriveWorks.ProjectItemListTypeDef"/>.
 </summary>
 <param name="dialogName">The name of the dialog that this type will be representing.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectItemListTypeDef.Id">
 <summary>
 Gets the invariant identifier of the rule.
 </summary>
</member>
<member name="T:DriveWorks.ProjectItemListTypeOutputDef">
 <summary>
 Provides access to a mapping between a dialog control name and an item
 list column name.
 </summary>
</member>
<member name="P:DriveWorks.ProjectItemListTypeOutputDef.RemoteControlName">
 <summary>
 Gets/sets the name of the control to retrieve from the item type dialog form.
 </summary>
</member>
<member name="P:DriveWorks.ProjectItemListTypeOutputDef.LocalColumnName">
 <summary>
 Gets the name of the column in the item list control
 which will receive the value from the dialog form control.
 </summary>
</member>
<member name="M:DriveWorks.ProjectItemListTypeOutputDef.CreateElement(System.String,System.String)">
 <summary>
 Returns a new element that can be used to create a new instance of <see cref="T:DriveWorks.ProjectItemListTypeOutputDef"/>.
 </summary>
 <param name="localColumnName">The local column name to have this binding represent.</param>
 <param name="remoteControlName">The control to bind this column too.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectChildSpecificationDef">
 <summary>
 Provides access to a child specification definition.
 </summary>
</member>
<member name="E:DriveWorks.ProjectChildSpecificationDef.Renamed">
 <summary>
 Raised when <see cref="P:DriveWorks.ProjectChildSpecificationDef.Name"/> has changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectChildSpecificationDef.ItemsChanged">
 <summary>
 Raised when any items have been added/deleted/edited/moved.
 </summary>
</member>
<member name="E:DriveWorks.ProjectChildSpecificationDef.ItemIndexChanged">
 <summary>
 Raised when any item is moved up or down.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationDef.Name">
 <summary>
 Gets the name of the child specification definition.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationDef.SynchronizeEmbeddedSpecifications">
 <summary>
 Returns whether or not embedded specifications will be continuously updated 
 as values change in both the child and parent specification.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationDef.VariableColumns">
 <summary>
 Gets the variable columns for the child specification definition.
 </summary>
 <returns>
 An instance of the <see cref="T:DriveWorks.Columns" /> type which can
 be used to query, add, remove, and re-order columns.
 </returns>
</member>
<member name="P:DriveWorks.ProjectChildSpecificationDef.ProjectDefinitions">
 <summary>
 Gets the definition of each project which can provide the basis
 of a child specification for the child specification definition.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.TryGetProjectDefinition(System.String,DriveWorks.ProjectChildSpecificationProjectDef@)">
 <summary>
 Gets the project definition for a specific child specification project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.GetData">
 <summary>
 Gets information about the child specifications that have been
 added to the current project or specification.
 </summary>
 <returns>
 An instance of the <see cref="T:System.Data.DataTable" /> type which has been populated
 with information about the child specifications.
 
 The data table consists of one row for each specification, and is populated with the data 
 for each column in the <see cref="P:DriveWorks.ProjectChildSpecificationDef.VariableColumns" />
 property, as well as two additional columns called Name and Type which identify the child specification name,
 and the project from which the specification was created.
 </returns>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.GetItems">
 <summary>
 Gets an collection of all items in this child specification list.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.GetItem(System.Int32)">
 <summary>
 Gets the item at the specified index.
 </summary>
 <param name="itemIndex">The index of the item to retrieve.</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.GetItemCount">
 <summary>
 Gets the number of items that have been added to the child specification list.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.AddProjectDefinition(System.String)">
 <summary>
 Creates a new <see cref="T:DriveWorks.ProjectChildSpecificationProjectDef"/> instance and adds it to this <see cref="T:DriveWorks.ProjectChildSpecificationDef"/>.
 </summary>
 <param name="projectName">The name of the project that this definition will represent.</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.RemoveProjectDefinition(DriveWorks.ProjectChildSpecificationProjectDef)">
 <summary>
 Removes a project definition from the item list.
 </summary>
 <param name="ChildSpecProjectDefinition">The project definition to remove from the child specification list.</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.OpenProjectForQuery(DriveWorks.ProjectDetails)">
 <summary>
 Opens the specified project so that it's constants and variable information can be queried, and returns it as an 
 <see cref="T:System.IDisposable" /> object.
 </summary>
 <param name="projectDetails">The details which indicate the project to open.</param>
 <returns>An instance of the <see cref="T:DriveWorks.DisposableProject" /> class.</returns>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.GetChildSpecificationDetails(System.String)">
 <summary>
 Gets the specification details for the specification name provided.
 </summary>
 <param name="specificationName">The name of the specification to get the details of.</param>
 <returns>The found specification Details or a null if not found.</returns>
 <remarks>
 This is the only way to get specification details for embedded specifications.
 </remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.AddItem(System.String,DriveWorks.ProjectChildSpecificationProjectDef,System.Object[])">
 <summary>
 Adds a new item to this item list.
 </summary>
 <param name="specificationName">The name of the specification to add.</param>
 <param name="projectDef">The type of item to create.</param>
 <param name="values">The values to set for this item.</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.EditItem(System.Int32,System.String,System.Object[])">
 <summary>
 Edits an existing item in this item list.
 </summary>
 <param name="specificationName">The new name of the specification that was edited.</param>
 <param name="itemIndex">The row index of the item to edit.</param>
 <param name="values">New values for the item.</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.DeleteItem(System.Int32)">
 <summary>
 Removes a item from the item list.
 </summary>
 <param name="itemIndex">Index of the row to remove.</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.MoveItemUp(System.Int32)">
 <summary>
 Moves an item up in the list of items.
 </summary>
 <param name="itemIndex">The Index of the item to move.</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.MoveItemDown(System.Int32)">
 <summary>
 Moves an item down in the list of items.
 </summary>
 <param name="itemIndex">The index of the item to move.</param>
</member>
<member name="M:DriveWorks.ProjectChildSpecificationDef.CreateElement(System.String)">
 <summary>
 Creates a new element that will represent a new <see cref="T:DriveWorks.ProjectChildSpecificationDef"/>
 </summary>
 <param name="name">The name to give the new child specification list definition.</param>
</member>
<member name="T:DriveWorks.ProjectChildSpecifications">
 <summary>
 Provides access to a project's child specifications and their definitions.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecifications.#ctor(DriveWorks.ProjectDesignMaster,System.Xml.Linq.XElement,DriveWorks.ProjectChildSpecificationBackingStoreManager)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectChildSpecifications" /> type.
 </summary>
 <param name="dm">The design master for the project.</param>
 <param name="specificationDefinitionsElement">The XML element containing the definitions.</param>
 <param name="manager">The design master specific backing store manager.</param>
</member>
<member name="P:DriveWorks.ProjectChildSpecifications.Manager">
 <summary>
 Gets the backing store manager.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecifications.Project">
 <summary>
 Gets the active project.
 </summary>
</member>
<member name="P:DriveWorks.ProjectChildSpecifications.Definitions">
 <summary>
 Gets the child-specification definitions.
 </summary>
</member>
<member name="M:DriveWorks.ProjectChildSpecifications.TryGetDefinition(System.String,DriveWorks.ProjectChildSpecificationDef@)">
 <summary>
 Gets the named definition if it exists.
 </summary>
 <param name="name">The name of the definition to retrieve.</param>
 <param name="definition">A reference to a variable which will receive the definition.</param>
 <returns>True if the definition exists and is successfully returned, otherwise false.</returns>
</member>
<member name="M:DriveWorks.ProjectChildSpecifications.GetDefinition(System.String)">
 <summary>
 Gets the named definition.
 </summary>
 <param name="name">The name of the definition to retrieve.</param>
 <returns>The named definition.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified child specification definition does not exist.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecifications.Add(System.String)">
 <summary>
 Adds a new child specification definition to collection.
 </summary>
 <param name="name">Name of the new child specification to create.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecifications.Add(System.Xml.Linq.XElement)">
 <summary>
 Adds a new child specification definition to collection.
 </summary>
 <param name="definition">Name of the new child specification to create.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectChildSpecifications.Remove(DriveWorks.ProjectChildSpecificationDef)">
 <summary>
 Removes a registered child specification definition from this collection.
 </summary>
 <param name="definition">The <see cref="T:DriveWorks.ProjectChildSpecificationProjectDef"/> to remove from this collection.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectVariableCategories">
 <summary>
 Provides access to a project's variable categories.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariableCategories.CategoryCreated">
 <summary>
 Raised when a new variable category is created.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariableCategories.CategoryNameChanged">
 <summary>
 Raised when a variable category's name changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariableCategories.CategoryParentChanged">
 <summary>
 Raised when a variable category's parent changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariableCategories.CategoryDeleted">
 <summary>
 Raised when a variable category is deleted.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.#ctor(DriveWorks.ProjectState,System.Xml.Linq.XElement)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.ProjectVariableCategories" /> type.
 </summary>
 <param name="projectState">The state for the project whose categories are to be managed.</param>
 <param name="categoriesElement">The XML element in the project file which contains the category information.</param>
</member>
<member name="P:DriveWorks.ProjectVariableCategories.Project">
 <summary>
 Gets the project to which the variable category manager belongs.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.GetVariables">
 <summary>
 Gets all the variables which haven't been registered with a specific category.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.GetCategories">
 <summary>
 Gets an array of the root-level variable categories.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.GetCategoryByPath(System.String)">
 <summary>
 Gets the variable category with the specified path.
 </summary>
 <param name="path">The full path to the variable category, delimited with the backslash character.</param>
 <returns>The found variable category or nothing if it could not be found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.GetCategory(System.String)">
 <summary>
 Gets the named variable category.
 </summary>
 <param name="name">The name of the variable category to retrieve.</param>
 <returns></returns>
 <remarks></remarks>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified category is not found.</exception>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.TryGetCategory(System.String,DriveWorks.ProjectVariableCategory@)">
 <summary>
 Gets the named variable category.
 </summary>
 <param name="name">The name of the variable category to retrieve.</param>
 <param name="variableCategory">A reference to a variable which will received the variable category.</param>
 <returns>True if the specified variable category was found, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.CreateCategory(System.String)">
 <summary>
 Creates a new variable category with the specified name.
 </summary>
 <param name="name">The name of the new category which must be unique in the current scope.</param>
 <returns>The newly created variable category.</returns>
 <exception cref="T:DriveWorks.ItemExistsException">Thrown if a category with the specified name already exists in the current scope.</exception>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.NotifyCategoryCreated(DriveWorks.ProjectVariableCategory)">
 <summary>
 Raises the <see cref="E:DriveWorks.ProjectVariableCategories.CategoryCreated" /> event when a project variable category is created.
 </summary>
 <param name="vc">The variable category that was created.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.CreateVariableCategoryCore(DriveWorks.ProjectVariableCategory,System.String)">
 <summary>
 Used by both the manager and variable category classes to create a variable category and register it in the AllById dictionary.
 This method does not raise any events as the variable category element still needs binding to its parent, and the variable
 category object needs registering in the parent's by-name dictionary. 
 </summary>
 <param name="parentCategory">The parent variable category passed to the new variable category's constructor.</param>
 <param name="name">The name of the variable category.</param>
 <returns>The new variable category.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectVariableCategories.Element">
 <summary>
 For use by the <see cref="T:DriveWorks.ProjectVariable" /> type during reparenting.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.UpdateChildName(System.String,System.String,DriveWorks.ProjectVariableCategory)">
 <summary>
 For use by the <see cref="T:DriveWorks.ProjectVariableCategory" /> type to update the by-name child dictionary.
 </summary>
 <param name="oldName">The old name of the child category.</param>
 <param name="newName">The new name of the child category.</param>
 <param name="child">The child category whose name has changed.</param>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.RegisterCategory(System.String,DriveWorks.ProjectVariableCategory)">
 <summary>
 For use by the <see cref="T:DriveWorks.ProjectVariableCategory" /> type to update the by-id all-children dictionary.
 </summary>
 <param name="child">The child that was added.</param>
 <param name="childId">The id of the child.</param>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.NotifyNameChanged(DriveWorks.ProjectVariableCategory)">
 <summary>
 Used by categories to raise the category name changed event on the category manager.
 </summary>
 <param name="category">The category which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.NotifyParentChanged(DriveWorks.ProjectVariableCategory)">
 <summary>
 Used by categories to raise the category parent changed event on the category manager.
 </summary>
 <param name="category">The category which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.NotifyDeleted(DriveWorks.ProjectVariableCategory)">
 <summary>
 Used by categories to raise the category deleted event on the category manager.
 </summary>
 <param name="category">The category which has changed.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.LoadCategory(System.Xml.Linq.XElement)">
 <summary>
 Loads and adds a category element from its XML, for use by transactions and the constructor.
 </summary>
 <param name="categoryElement">The element to load and add, if it has no parent, it will automatically be parented to the categories root element.</param>
 <returns>The loaded category.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.TryGetCategoryForId(System.String,DriveWorks.ProjectVariableCategory@)">
 <summary>
 For use by the <see cref="T:DriveWorks.ProjectVariable" /> type to resolve its parent category.
 </summary>
 <param name="categoryId">The id of the category to try to resolve.</param>
 <param name="category">A reference to the variable which will receive the category.</param>
 <returns>True if the specified category is located, otherwise false.</returns>
 <remarks>This method is for internal use only - do not expose outside of the Engine.</remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.RegisterCategory(DriveWorks.ProjectVariableCategory)">
 <summary>
 Used by the <see cref="T:DriveWorks.ProjectVariableCategory"/> class to register a category with its parent category.
 </summary>
 <param name="category">The category to register.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.UnregisterCategory(DriveWorks.ProjectVariableCategory)">
 <summary>
 Used by the <see cref="T:DriveWorks.ProjectVariableCategory"/> class to unregister a category from its former parent category.
 </summary>
 <param name="category">The category to register.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.RegisterVariable(DriveWorks.ProjectVariable)">
 <summary>
 Used by the <see cref="T:DriveWorks.ProjectVariable" /> class to register a variable with its parent category.
 </summary>
 <param name="variable">The variable to register.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.UnregisterVariable(DriveWorks.ProjectVariable)">
 <summary>
 Used by the <see cref="T:DriveWorks.ProjectVariable" /> class to unregister a variable from its former parent category.
 </summary>
 <param name="variable">The variable to unregister.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategories.EnsureVariablesInitialized">
 <summary>
 Ensures that variables have been initialized.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectVariableCategory">
 <summary>
 Provides access to a variable category.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariableCategory.NameChanged">
 <summary>
 Raised when the name of the variable category changes.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariableCategory.ParentChanged">
 <summary>
 Raised when the parent is changed.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariableCategory.Deleted">
 <summary>
 Raised when the variable category is deleted.
 </summary>
</member>
<member name="E:DriveWorks.ProjectVariableCategory.ImagePathChanged">
 <summary>
 Raised when the variable image path is changed.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.#ctor(DriveWorks.ProjectVariableCategories,DriveWorks.ProjectVariableCategory,System.Xml.Linq.XElement)">
 <summary>
 Initializes an instance of the <see cref="T:DriveWorks.ProjectVariableCategory" /> type.
 </summary>
 <param name="categories">The variable category manager.</param>
 <param name="parent">The parent of the variable category.</param>
 <param name="element">The element backing the variable category.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectVariableCategory.Project">
 <summary>
 Gets the project to which the variable category belongs.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariableCategory.Name">
 <summary>
 Gets/sets the name of the variable category.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariableCategory.ImagePath">
 <summary>
 Gets/sets the image path for the variable category image
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariableCategory.Id">
 <summary>
 Gets the unique string which identifies the variable category.
 </summary>
</member>
<member name="P:DriveWorks.ProjectVariableCategory.Parent">
 <summary>
 Gets/sets the parent of the category.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectVariableCategory.IsDeleted">
 <summary>
 Determines whether the variable category has been deleted.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.GetFullPath">
 <summary>
 Gets the fully qualified path to the variable category.
 </summary>
 <returns>A string of the form "RootCategoryName\ChildCategory0\ChildCategory1\ChildCategory...\ThisCategory".</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.Delete">
 <summary>
 Deletes an empty variable category.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown if the variable category contains any child categories or variables.</exception>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.GetVariables">
 <summary>
 Gets all the variables in the category.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.GetCategories">
 <summary>
 Gets all the category's child categories.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.GetCategory(System.String)">
 <summary>
 Gets the child variable category with the specified name.
 </summary>
 <param name="name">The name of the category to get.</param>
 <returns>The named category.</returns>
 <exception cref="T:DriveWorks.ItemNotFoundException">Thrown when the specified category is not found.</exception>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.TryGetCategory(System.String,DriveWorks.ProjectVariableCategory@)">
 <summary>
 Tries to get a category with the specified name.
 </summary>
 <param name="name">The name of the category to get.</param>
 <param name="variableCategory">Receives the named category if it was found, otherwise receives a null reference (Nothing in Visual Basic).</param>
 <returns>True if the named catgory was found, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.CreateCategory(System.String)">
 <summary>
 Creates a new variable category with the specified name.
 </summary>
 <param name="name">The name of the new category which must be unique in the current scope.</param>
 <returns>The newly created variable category.</returns>
 <exception cref="T:DriveWorks.ItemExistsException">Thrown if a category with the specified name already exists in the current scope.</exception>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.UpdateChildName(System.String,System.String,DriveWorks.ProjectVariableCategory)">
 <summary>
 Called by a child variable when its name changes to update the parent category's by-name dictionary.
 </summary>
 <param name="oldName">The old name of the child variable.</param>
 <param name="newName">The new name of the child variable.</param>
 <param name="child">The variable whose name was changed.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.ProjectVariableCategory.Element">
 <summary>
 Gets the XML element which backs the project variable category, this is for use
 by the transaction subsystem and the variable category manager.
 </summary>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.LoadCategory(System.Xml.Linq.XElement)">
 <summary>
 Loads and adds a category element from its XML, for use by transactions and the constructor.
 </summary>
 <param name="categoryElement">The element to load and add, if it has no parent, it will automatically be parented to the category's element.</param>
 <returns>The loaded category.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.RegisterCategory(DriveWorks.ProjectVariableCategory)">
 <summary>
 Used by the <see cref="T:DriveWorks.ProjectVariableCategory"/> class to register a category with its parent category.
 </summary>
 <param name="category">The category to register.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.UnregisterCategory(DriveWorks.ProjectVariableCategory)">
 <summary>
 Used by the <see cref="T:DriveWorks.ProjectVariableCategory"/> class to unregister a category from its former parent category.
 </summary>
 <param name="category">The category to register.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.RegisterVariable(DriveWorks.ProjectVariable)">
 <summary>
 Used by the <see cref="T:DriveWorks.ProjectVariable" /> class to register a variable with its parent category.
 </summary>
 <param name="variable">The variable to register.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.ProjectVariableCategory.UnregisterVariable(DriveWorks.ProjectVariable)">
 <summary>
 Used by the <see cref="T:DriveWorks.ProjectVariable" /> class to unregister a variable from its former parent category.
 </summary>
 <param name="variable">The variable to unregister.</param>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.TableHelper">
 <summary>
 Provides support routines to help the item list and child specification control
 code work with tables stored in the designmaster.
 </summary>
</member>
<member name="T:DriveWorks.StandardSchemas">
 <summary>
 Provides access to core DriveWorks Engine XML namespaces.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.StandardSchemas.ProjectNamespace">
 <summary>
 Gets the XML namespace which denotes a project.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.ProjectResourceName">
 <summary>
 Gets the fully qualified resource name of the project schema which
 is embedded in the Engine assembly.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.TypesNamespace">
 <summary>
 Gets the XML namespace which denotes the common types schema.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.TypesResourceName">
 <summary>
 Gets the fully qualified resource name of the common type schema which
 is embedded in the Engine assembly.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.SpecificationNamespace">
 <summary>
 Gets the XML namespace which denotes a specification.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.SpecificationResourceName">
 <summary>
 Gets the fully qualified resource name of the specification schema which
 is embedded in the Engine assembly.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.SpecificationFlowNamespace">
 <summary>
 Gets the XML namespace used for specification flow.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.SpecificationFlowResourceName">
 <summary>
 Gets the fully qualified resource name of the specification flow schema which
 is embedded in the Engine assembly.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.CapturedComponentNamespace">
 <summary>
 Gets the XML namespace for captured components.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.CapturedComponentResourceName">
 <summary>
 Gets the fully qualified resource name of the captured component schema which
 is embedded in the Engine assembly.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.ComponentSetNamespace">
 <summary>
 Gets the XML namespace for component sets.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.ComponentSetResourceName">
 <summary>
 Gets the fully qualified resource name of the component set schema which
 is embedded in the Engine assembly.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.ComponentTaskNamespace">
 <summary>
 Gets the XML namespace for component tasks.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.ComponentTaskResourceName">
 <summary>
 Gets the fulle qualified resource name of the component task schema which
 is embedded in the Engine assembly.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.DriveComponentNamespace">
 <summary>
 Gets the XML namespace for drive components.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.DriveComponentResourceName">
 <summary>
 Gets the fully qualified resource name of the drive component schema which
 is embedded in the Engine assembly.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.FormNamespace">
 <summary>
 Gets the XML namespace which denotes a form.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.EventFlowResourceName">
 <summary>
 Gets the fully qualified resource name of the event flow schema which
 is embedded in the Engine assembly.
 </summary>
</member>
<member name="F:DriveWorks.StandardSchemas.EventFlowNamespace">
 <summary>
 Gets the XML namespace for event flows.
 </summary>
</member>
<member name="M:DriveWorks.StandardSchemas.GetProjectSchema">
 <summary>
 Gets the embedded schema from the Engine.
 </summary>
</member>
<member name="M:DriveWorks.StandardSchemas.GetTypesSchema">
 <summary>
 Gets the embedded schema from the Engine.
 </summary>
</member>
<member name="M:DriveWorks.StandardSchemas.GetEventFlowSchema">
 <summary>
 Gets the embedded schema from the Engine.
 </summary>
</member>
<member name="M:DriveWorks.StandardSchemas.GetSpecificationSchema">
 <summary>
 Gets the embedded schema from the Engine.
 </summary>
</member>
<member name="M:DriveWorks.StandardSchemas.GetSpecificationFlowSchema">
 <summary>
 Gets the embedded schema from the Engine.
 </summary>
</member>
<member name="M:DriveWorks.StandardSchemas.GetCapturedComponentSchema">
 <summary>
 Gets the embedded schema from the Engine.
 </summary>
</member>
<member name="M:DriveWorks.StandardSchemas.GetComponentSetSchema">
 <summary>
 Gets the embedded schema from the Engine.
 </summary>
</member>
<member name="M:DriveWorks.StandardSchemas.GetComponentTaskSchema">
 <summary>
 Gets the embedded schema from the engine.
 </summary>
</member>
<member name="M:DriveWorks.StandardSchemas.GetDriveComponentSchema">
 <summary>
 Gets the embedded schema from the Engine.
 </summary>
</member>
<member name="T:DriveWorks.Utility.EffectiveFontUtility">
 <summary>
 Provides utility functions for effective fonts.
 </summary>
</member>
<member name="M:DriveWorks.Utility.EffectiveFontUtility.ApplyEffectiveFont(DriveWorks.Forms.SimpleFont,DriveWorks.Forms.SimpleFont,DriveWorks.Forms.DataModel.DynamicProperty,DriveWorks.Forms.ControlBase)">
 <summary>
 Checks which font to use and applies it to the given property on the specified control.
 </summary>
 <param name="font">The property's font.</param>
 <param name="fallbackFont">The font to fall back to.</param>
 <param name="targetFontProperty">The property to apply the font to.</param>
 <param name="control">The control to which the font property belongs.</param>
</member>
<member name="T:DriveWorks.Utility.RuleSearchProcess">
 <summary>
 Provides support for searching for a part of a rule throughout the project.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Utility.RuleSearchProcess.Started">
 <summary>
 Occurs when the search process is started.
 </summary>
</member>
<member name="E:DriveWorks.Utility.RuleSearchProcess.UsageFound">
 <summary>
 Occurs when a match has been found.
 </summary>
</member>
<member name="E:DriveWorks.Utility.RuleSearchProcess.Finished">
 <summary>
 Occurs when the search process has finished searching.
 </summary>
</member>
<member name="E:DriveWorks.Utility.RuleSearchProcess.SearchedItem">
 <summary>
 Occurs for every item that is searched by the search process.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleSearchProcess.FoundItems">
 <summary>
 Current search results.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleSearchProcess.SearchStrings">
 <summary>
 Gets the search strings for this process.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleSearchProcess.IsRunning">
 <summary>
 Whether the search process is running or not.
 </summary>
</member>
<member name="M:DriveWorks.Utility.RuleSearchProcess.Search(DriveWorks.RuleSection)">
 <summary>
 Starts the search process.
 <paramref name="section">(Optional): In which section of DriveWorks to search.</paramref>
 </summary>
</member>
<member name="M:DriveWorks.Utility.RuleSearchProcess.StopSearch">
 <summary>
 Stops the search process.
 </summary>
</member>
<member name="T:DriveWorks.Utility.RuleSearchResultEventArgs">
 <summary>
 Provides event data for when a rule search item has been found.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Utility.RuleSearchResultEventArgs.Item">
 <summary>
 The found item from the search.
 </summary>
</member>
<member name="T:DriveWorks.Utility.RuleToken">
 <summary>
 Provides a representation of a part of a rule.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleToken.StartIndex">
 <summary>
 Gets the start index of this token.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleToken.EndIndex">
 <summary>
 Gets the end index of this token.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleToken.Rule">
 <summary>
 Gets the full rule this token is a part of.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleToken.Type">
 <summary>
 Gets the type of this token.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleToken.Text">
 <summary>
 Gets the text of this token.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleToken.IsUnaryOperator">
 <summary>
 Gets whether this token is a Unary operator.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleToken.IsOperator">
 <summary>
 Gets whether this token is an operator.
 </summary>
</member>
<member name="M:DriveWorks.Utility.RuleToken.#ctor(System.String,Titan.Rules.ObjectModel.ExpressionTokenType,System.Int32,System.Int32,System.Boolean)">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Utility.RuleToken" /> class.
 </summary>
 <param name="fullRule">The full rule this token is a part of.</param>
 <param name="type">The <see cref="T:Titan.Rules.ObjectModel.ExpressionTokenType" /> of this token.</param>
 <param name="startIndex">The start index of this token in the full rule.</param>
 <param name="endIndex">The end index of this token in the full rule.</param>
 <param name="isUnaryOperator">Whether or not the token is a unary operator.</param>
</member>
<member name="M:DriveWorks.Utility.RuleToken.IsValueEqual(System.Object)">
 <summary>
 Determines whether the specified token represents an identical 
 part of a rule as the current token.
 </summary>
</member>
<member name="T:DriveWorks.Utility.SearchEventArgs">
 <summary>
 Provides event data for when a search item has been found.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Utility.SearchEventArgs.Item">
 <summary>
 The found item from the search.
 </summary>
</member>
<member name="T:DriveWorks.Utility.SearchItem">
 <summary>
 Provides data on a found item from the <see cref="T:DriveWorks.Utility.NameSearchProcess">search process</see> class.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Utility.SearchItem.RuleId">
 <summary>
 The identifier for the rule.
 </summary>
</member>
<member name="P:DriveWorks.Utility.SearchItem.Rule">
 <summary>
 The location of the item.
 </summary>
</member>
<member name="P:DriveWorks.Utility.SearchItem.RuleType">
 <summary>
 The type of the rule.
 </summary>
</member>
<member name="P:DriveWorks.Utility.SearchItem.Location">
 <summary>
 The path to the rule. This could be categories or parent objects etc
 </summary>
</member>
<member name="P:DriveWorks.Utility.SearchItem.Name">
 <summary>
 Gets the name of this item, if it has name.
 </summary>
</member>
<member name="P:DriveWorks.Utility.SearchItem.RuleTypes">
 <summary>
 Gets the types for this item.
 </summary>
</member>
<member name="P:DriveWorks.Utility.SearchItem.Context">
 <summary>
 Gets the rule context for this item.
 </summary>
</member>
<member name="T:DriveWorks.Utility.NameSearchProcess">
 <summary>
 Provides support for searching for an identifier throughout the project.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Utility.NameSearchProcess.Started">
 <summary>
 Raised when the search process has started.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Utility.NameSearchProcess.UsageFound">
 <summary>
 Raised when an instance of use has been found.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Utility.NameSearchProcess.Finished">
 <summary>
 Raised when the search process has finished.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Utility.NameSearchProcess.SearchedItem">
 <summary>
 Raised when starting search of a specific item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Utility.NameSearchProcess.FoundItems">
 <summary>
 Current search results.
 </summary>
</member>
<member name="P:DriveWorks.Utility.NameSearchProcess.SearchItem">
 <summary>
 Gets search item for this process.
 </summary>
</member>
<member name="P:DriveWorks.Utility.NameSearchProcess.IsRunning">
 <summary>
 Whether the search process is running or not.
 </summary>
</member>
<member name="P:DriveWorks.Utility.NameSearchProcess.ScannedItemsCount">
 <summary>
 Gets the total number of scanned items.
 </summary>
</member>
<member name="P:DriveWorks.Utility.NameSearchProcess.RaiseEventsInMainThread">
 <summary>
 Gets/sets whether or not events raised from this search process should be marshalled to the main thread. 
 </summary>
</member>
<member name="M:DriveWorks.Utility.NameSearchProcess.Search">
 <summary>
 Starts the search process.
 </summary>
</member>
<member name="M:DriveWorks.Utility.NameSearchProcess.StopSearch">
 <summary>
 Stops the searching process if it is running.
 </summary>
 <exception cref="T:System.InvalidOperationException">Thrown when if this method is called when the process is not running.</exception>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Utility.RuleSearchResult">
 <summary>
  Provides a base class for data on an item found by 
 the <see cref="T:DriveWorks.Utility.RuleSearchProcess">rule search process</see> class.
 </summary>
</member>
<member name="M:DriveWorks.Utility.RuleSearchResult.#ctor(DriveWorks.RuleSection,System.String,System.Tuple{System.Int32,System.Int32}[])">
 <summary>
 Creates a new instance of the <see cref="T:DriveWorks.Utility.RuleSearchResult" /> class.
 </summary>
 <param name="section">The section the rule is in.</param>
 <param name="location">The location of the item.</param>
 <param name="indices">The indices of the item.</param>
</member>
<member name="P:DriveWorks.Utility.RuleSearchResult.Section">
 <summary>
 The section this item is in.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleSearchResult.Location">
 <summary>
 Gets the location.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleSearchResult.Indices">
 <summary>
 Gets the array of start and end indices.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleSearchResult.MinStartIndex">
 <summary>
 Gets the lowest start index of the item.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleSearchResult.MaxEndIndex">
 <summary>
 Gets the highest end index of the item.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleSearchResult.RealRule">
 <summary>
 Gets the underlying <see cref="T:DriveWorks.Abstractions.IHasRule" /> or a generic wrapper.
 </summary>
 <value></value>
 <returns>The <see cref="T:DriveWorks.Abstractions.IHasRule"/> for this item.</returns>
</member>
<member name="P:DriveWorks.Utility.RuleSearchResult.RuleId">
 <summary>
 Gets the display name of the rule this item represents.
 </summary>
</member>
<member name="P:DriveWorks.Utility.RuleSearchResult.Rule">
 <summary>
 Gets the rule this item represents.
 </summary>
</member>
<member name="M:DriveWorks.Utility.RuleSearchResult.CreateTransaction(DriveWorks.Project,DriveWorks.Transactions.ProjectTransactionFactory,System.String)">
 <summary>
 Creates a new transaction responsible for changing the rule of the item.
 </summary>
 <param name="factory">The <see cref="T:DriveWorks.Transactions.ProjectTransactionFactory"/> used to create the transaction.</param>
 <param name="rule">The new rule to apply.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="T:DriveWorks.Utility.TableUtility">
 <summary>
 Provides utility capabilities related to tables.
 </summary>
</member>
<member name="T:DriveWorks.Utility.TempUtility">
 <summary>
 Provides utility capabilities related to temporary files.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Utility.TempUtility.TempRootDirectory">
 <summary>
 Gets the root temporary directory used by DriveWorks.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Utility.TempUtility.TempSharedResourcesDirectory">
 <summary>
 Gets the directory used to store copies of resources that are on network locations.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Utility.ValidateNameResult">
 <summary>
 DriveWorks name validation results.
 </summary>
</member>
<member name="T:DriveWorks.Utility.ValidatePathResult">
 <summary>
 DriveWorks path validation results.
 </summary>
</member>
<member name="T:DriveWorks.Utility.ValidationUtility">
 <summary>
 Provides common validation routines.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateWin32FileNameWithPath(System.String)">
 <summary>
 Validates a full file path according to NTFS guidelines.
 </summary>
 <param name="fileNameWithPath">The name of the file with its path and extension to validate.</param>
 <returns>True if the path validates correctly, and false otherwise.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateWin32FileName(System.String)">
 <summary>
 Validates a file name
 </summary>
 <param name="fileName">The name of the file without extension or path to validate.</param>
 <returns>True if the path validates correctly, and false otherwise.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateWin32Path(System.String)">
 <summary>
 Validates a path according to NTFS guidelines
 </summary>
 <param name="path">The path to validate</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateProjectName(System.String)">
 <summary>
 Validates a DriveWorks Project name.
 </summary>
 <param name="projectName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateGroupName(System.String)">
 <summary>
 Validates a DriveWorks Group name.
 </summary>
 <param name="groupName">The name to validate</param>
 <returns>True is the path validates correctly, and false otherwise</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateConstantName(System.String)">
 <summary>
 Validates a DriveWorks Constant name
 </summary>
 <returns>True if value contains bad characters.</returns>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateTableName(System.String)">
 <summary>
 Validates a DriveWorks table name
 </summary>
 <param name="tableName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateGroupTableName(System.String)">
 <summary>
 Validates a DriveWorks group table name.
 </summary>
 <param name="tableName">The name to validate.</param>
 <returns>The result of the validation.</returns>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateVariableName(System.String)">
 <summary>
 Validates a DriveWorks Variable Name.
 </summary>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateCategoryName(System.String)">
 <summary> 
 Validates a DriveWorks Category Name.
 </summary>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateControlName(System.String)">
 <summary>
 Validates a DriveWorks control name.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateItemListControlName(System.String)">
 <summary>
 Validates a DriveWorks control name.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateChildSpecificationListControlName(System.String)">
 <summary>
 Validates a DriveWorks control name.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateDocumentName(System.String)">
 <summary>
 Validates a DriveWorks document name
 </summary>
 <param name="doc">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateComponentTaskName(System.String)">
 <summary>
 Validates a DriveWorks component task name.
 </summary>
 <param name="taskName">The name to validate.</param>
 <returns>The result of the validation.</returns>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateFormOrDecisionName(System.String)">
 <summary>
 Validates a DriveWorks form or decision name
 </summary>
 <param name="name">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateTeamName(System.String)">
 <summary>
 Validates a DriveWorks team name
 </summary>
 <param name="name">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateUserName(System.String)">
 <summary>
 Validates a DriveWorks username.
 </summary>
 <param name="name">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateUserFullname(System.String)">
 <summary>
 Validates a DriveWorks full name.
 </summary>
 <param name="name">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateUserEmail(System.String)">
 <summary>
 Validates a DriveWorks user email.
 </summary>
 <param name="email">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateState(System.String)">
 <summary>
 Validates a DriveWorks state name.
 </summary>
 <param name="state">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateOperation(System.String)">
 <summary>
 Validates a DriveWorks operation name.
 </summary>
 <param name="operation">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateTransition(System.String)">
 <summary>
 Validates a DriveWorks transition name.
 </summary>
 <param name="transition">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateSpecificationMacro(System.String)">
 <summary>
 Validates a DriveWorks specification macro name.
 </summary>
 <param name="macro">The name to validate.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateGroupConnectorName(System.String)">
 <summary>
 Validates the DriveWorks Connector name.
 </summary>
 <param name="name">The name to validate.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateCalculationTableName(System.String)">
 <summary>
 Validates a DriveWorks calculation table name.
 </summary>
 <param name="name">The name to validate</param>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.ValidateCalculationTableColumnName(System.String)">
 <summary>
 Validates a DriveWorks calculation table column name.
 </summary>
 <param name="name">The name to validate</param>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.Validate3DNodeName(System.String)">
 <summary>
 Validates a 3D document's node name.
 </summary>
 <param name="name">The name to validate</param>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.Validate3DAppearanceName(System.String)">
 <summary>
 Validates a 3D document's appearance name.
 </summary>
 <param name="name">The name to validate</param>
</member>
<member name="M:DriveWorks.Utility.ValidationUtility.Validate3DSuppressionStateName(System.String)">
 <summary>
 Validates a 3D document's suppression state name.
 </summary>
 <param name="name">The name to validate</param>
</member>
<member name="P:DriveWorks.ProjectRuleEnumerator.Running">
 <summary>
 Determines whether the enumerator has been started.
 </summary>
</member>
<member name="P:DriveWorks.ProjectRuleEnumerator.Finished">
 <summary>
 Gets whether the enumerator has finished enumerating all rules.
 </summary>
</member>
<member name="T:DriveWorks.RuleSection">
 <summary>
 Represents a part of DriveWorks containing rules.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.Variables">
 <summary>
 The Variables view.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.ComponentSets">
 <summary>
 The Model And Drawing rules view.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.Controls">
 <summary>
 The dynamic properties of Form Controls.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.Decisions">
 <summary>
 Decisions in the Specification Flow.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.Documents">
 <summary>
 The Documents view.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.Messages">
 <summary>
 The project messages view.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.SpecificationFlow">
 <summary>
 Specification Flow Tasks.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.SpecificationMacros">
 <summary>
 Specification Macros.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.SpecificationProperties">
 <summary>
 The project specification properties.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.SpecificationSetting">
 <summary>
 The Specification Settings view.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.CalculationTables">
 <summary>
 Calculation Table Cells.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.ComponentTasks">
 <summary>
 The component tasks.
 </summary>
</member>
<member name="F:DriveWorks.RuleSection.All">
 <summary>
 All areas of DriveWorks containing rules.
 </summary>
</member>
<member name="T:DriveWorks.RuleSectionUtility">
 <summary>
 Provides a set of helper functions for working with the RuleSection enum.
 </summary>
</member>
<member name="M:DriveWorks.RuleSectionUtility.GetLocalizedName(DriveWorks.RuleSection)">
 <summary>
 Gets the localized name of the specified enum.
 </summary>
 <param name="section">The value to get the localized string of.</param>
 <returns>The localized name of the value.</returns>
</member>
<member name="M:DriveWorks.RuleSnippetAdjuster.EnsureValidRuleSnippet(DriveWorks.ProjectUtility,System.String,System.Int32@,System.Int32@)">
 <summary>
 Ensures the given indices marks a valid subsection of the given rule.
 </summary>
 <param name="util">The project utility.</param>
 <param name="formula">The formula to sample from.</param>
 <param name="startIndex">The start index of the subsection.</param>
 <param name="endIndex">The end index of the sub section.</param>
 <returns>Whether or not the indices were altered.</returns>
</member>
<member name="T:DriveWorks.HasRuleRuleSearchResult">
 <summary>
 Provides data on a generic <see cref="T:DriveWorks.Abstractions.IHasRule" /> item found by
 the <see cref="T:DriveWorks.Utility.RuleSearchResult">search process</see> class.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.HasRuleRuleSearchResult.Rule">
 <summary>
 Gets/sets the rule.
 </summary>
</member>
<member name="P:DriveWorks.HasRuleRuleSearchResult.RuleId">
 <summary>
 Gets an identifier which uniquely identifies the rule.
 </summary>
</member>
<member name="P:DriveWorks.HasRuleRuleSearchResult.RealRule">
 <summary>
 Gets the underlying <see cref="T:DriveWorks.Abstractions.IHasRule" />.
 </summary>
</member>
<member name="T:DriveWorks.ItemListRuleSearchResult">
 <summary>
 Provides data on an item found in a ItemList by 
 the <see cref="T:DriveWorks.Utility.NameSearchProcess">search process</see> class.
 </summary>
</member>
<member name="P:DriveWorks.ItemListRuleSearchResult.Rule">
 <summary>
 Gets/sets the rule.
 </summary>
</member>
<member name="P:DriveWorks.ItemListRuleSearchResult.RuleId">
 <summary>
 Gets an identifier which uniquely identifies the rule.
 </summary>
</member>
<member name="M:DriveWorks.ItemListRuleSearchResult.CreateTransaction(DriveWorks.Project,DriveWorks.Transactions.ProjectTransactionFactory,System.String)">
 <summary>
 Creates a new transaction responsible for changing the rule of the item.
 </summary>
 <param name="factory">The <see cref="T:DriveWorks.Transactions.ProjectTransactionFactory"/> used to create the transaction.</param>
 <param name="rule">The new rule to apply.</param>
 <returns>A transaction which, when executed, will perform the operation.</returns>
</member>
<member name="T:DriveWorks.XmlRule">
 <summary>
 Provides access to a rule stored in an XML element.
 </summary>
</member>
<member name="T:DriveWorks.Group">
 <summary>
 Provides access to the information stored in a DriveWorks group such as project and specification registration information.
 </summary>
</member>
<member name="M:DriveWorks.Group.#ctor(DriveWorks.Hosting.EngineHost)">
 <summary>
 Initializes a new instance of the <see cref="P:DriveWorks.Group.EngineHost" /> type.
 </summary>
 <param name="host">The host which governs the runtime environment.</param>
 <devdoc>
 This method should only ever be called by the EngineHost class.
 </devdoc>
</member>
<member name="M:DriveWorks.Group.Open(System.String,DriveWorks.Security.IProviderCredentials)">
 <summary>
 Opens a connection to a DriveWorks group.
 </summary>
 <param name="connectionString">The connection string which identifies the group to open, see the remarks for more details.</param>
 <param name="credentials">The credentials used to connect to the group, see the remarks for more details.</param>
 <remarks>
 <para>DriveWorks supports two types of group, local files called Engineer groups, and a server-based system called Team/Enterprise groups.
 The <paramref name="connectionString" /> to use depends on which of these is being used.
 </para>
 <para>
 For an Engineer group, the format of the connection string is: <c>"Provider=LocalGroupProvider;Path=C:\Users\username\Documents\MyGroup.drivegroup"</c>, and 
 a new group can be created by using a connection string such as <c>"Provider=LocalGroupProvider;Path=C:\Users\username\Documents\MyGroup.drivegroup;Create=true"</c>.
 </para>
 </remarks>
</member>
<member name="M:DriveWorks.Group.Close">
 <summary>
 Closes the connection to the group.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Group.SettingChanged">
 <summary>
 Raised when a setting is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Group.AgentNotificationReceived">
 <summary>
 Raised when a notification is received from another session.
 </summary>
 <remarks></remarks>
</member>
<member name="E:DriveWorks.Group.AgentRequestReceived">
 <summary>
 Raised when a request is received from another session.
 </summary>
 <remarks>
 Replies are completed through the event args and can only be replied to once.
 Once a reply has been made no other listeners to this event will receive an invocation.
 </remarks>
</member>
<member name="P:DriveWorks.Group.IsOpen">
 <summary>
 Determines whether the group is open.
 </summary>
 <returns>True if the group is open, otherwise false.</returns>
</member>
<member name="P:DriveWorks.Group.IsClosed">
 <summary>
 Determines whether the group has been closed.
 </summary>
 <returns>True if the group is closed, otherwise false.</returns>
</member>
<member name="P:DriveWorks.Group.Name">
 <summary>
 Gets the name of the Group.
 </summary>
</member>
<member name="P:DriveWorks.Group.ConnectionString">
 <summary>
 Gets the connection string which was used to open the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.CurrentUser">
 <summary>
 Gets the logged-on user.
 </summary>
</member>
<member name="P:DriveWorks.Group.CurrentUserIsAllowedCapture">
 <summary>
 Gets whether the logged-on user belongs to at least one team with permission to capture.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Group.CurrentUserCredentials">
 <summary>
 Gets the credentials that were used to log on to the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.CurrentUserTeams">
 <summary>
 Gets the teams to which the logged-on user belongs.
 </summary>
</member>
<member name="P:DriveWorks.Group.Security">
 <summary>
 Gets an instance of the <see cref="T:DriveWorks.GroupSecurity" /> type which is responsible for managing the security information in the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.Projects">
 <summary>
 Gets an instance of the <see cref="T:DriveWorks.GroupProjects" /> type which is responsible for managing the project information in the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.CapturedComponents">
 <summary>
 Gets an instance of the <see cref="T:DriveWorks.GroupCapturedComponents" /> type which is responsible for managing the captured component information in the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.Specifications">
 <summary>
 Gets an instance of the <see cref="T:DriveWorks.GroupSpecifications" /> type which is responsible for managing the specifications in the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.RuleVersionHistory">
 <summary>
 Gets an instance of the <see cref="T:DriveWorks.GroupRuleVersionHistory" /> type which is responsible for managing the rule revisions in the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.Reports">
 <summary>
 Gets an instance of the <see cref="T:DriveWorks.GroupReports" /> type which is responsible for managing the reports in the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.ReleasedComponents">
 <summary>
 Gets an instance of the <see cref="T:DriveWorks.GroupReleasedComponents" /> which is responsible for managing the
 released component information in the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.DataTables">
 <summary>
 Gets an instance of <see cref="T:DriveWorks.GroupDataTables"/> for this group.
 </summary>
</member>
<member name="P:DriveWorks.Group.CanEditAllSpecifications">
 <summary>
 Gets if the current user has permission to view and edit all specifications.
 </summary>
</member>
<member name="P:DriveWorks.Group.CanEditGroupSecurity">
 <summary>
 Gets if the current user has permission to edit group security details.
 </summary>
</member>
<member name="P:DriveWorks.Group.Connectors">
 <summary>
 Gets an instance of <see cref="T:DriveWorks.GroupConnectors"/> for this group.
 </summary>
</member>
<member name="M:DriveWorks.Group.RefreshSecurity">
 <summary>
 Refreshes cached security information.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Group.RegisterGenerationAgent">
 <summary>
 Registers a new generation agent for the group.
 </summary>
 <returns>An object responsible for interacting with pending components to be generated.</returns>
</member>
<member name="M:DriveWorks.Group.RegisterGenerationAgent(DriveWorks.JobRequestTagInformation)">
 <summary>
 Registers a new generation agent for the group.
 </summary>
 <param name="tags">The tags associated with this generation agent.</param>
 <returns>An object responsible for interacting with pending components to be generated.</returns>
</member>
<member name="M:DriveWorks.Group.UnregisterGenerationAgent">
 <summary>
 Unregisters this connection from the group as being able to handle model generation.
 </summary>
</member>
<member name="M:DriveWorks.Group.GetAgents">
 <summary>
 Gets a list of generated agents in the group.
 </summary>
 <returns></returns>
</member>
<member name="M:DriveWorks.Group.GetAgentLog(System.String)">
 <summary>
 Gets the agent message log of an agent.
 </summary>
 <param name="agentName">The name of the agent whose message log is to be returned.</param>
 <returns></returns>
</member>
<member name="M:DriveWorks.Group.StartAgent(System.String)">
 <summary>
 Starts an agent.
 </summary>
 <param name="agentName">The name of the agent to be started.</param>
</member>
<member name="M:DriveWorks.Group.StopAgent(System.String)">
 <summary>
 Stops an agent.
 </summary>
 <param name="agentName">The name of the agent to be stopped.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Group.AddAgentLogEntry(System.String,System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Adds an agent log entry.
 </summary>
 <param name="agentName">The name of the agent who the log entry originates from.</param>
 <param name="dateAndTime">The date and time of the event.</param>
 <param name="sourceDisplayName">The display name of the source of the event.</param>
 <param name="targetDisplayName">The display name of the target of the event.</param>
 <param name="description">The description of the event.</param>
</member>
<member name="M:DriveWorks.Group.SendAgentNotification(System.String,System.Object)">
 <summary>
 Attempts to send a notification message to the specified agent.
 </summary>
 <param name="agentName">Name of the agent to send the message to</param>
 <param name="message">The notification to send to the agent. Object type MUST be marked with <see cref="T:System.SerializableAttribute"/>.</param>
</member>
<member name="M:DriveWorks.Group.SendAgentRequest(System.String,System.Object)">
 <summary>
 Attempts to send a request message to the specified agent. Then waits for a reply and returns that result.
 </summary>
 <param name="agentName">The name of the agent to send the request message to.</param>
 <param name="message">The request to send to the specified agent. Object type MUST be marked with <see cref="T:System.SerializableAttribute"/>.</param>
 <returns>The reply value from the agent.</returns>
</member>
<member name="M:DriveWorks.Group.RegisterJobQueue(System.String)">
 <summary>
 Registers a queue of jobs within DriveWorks that need to be processed.
 </summary>
 <param name="jobType">The type of job that the queue will process.</param>
</member>
<member name="M:DriveWorks.Group.GetAllJobs(System.String)">
 <summary>
 Gets all pending and currently in progress jobs that the current user has access to, for the specified job type.
 </summary>
 <param name="jobType">The type of jobs to retrieve.</param>
 <returns>All pending and currently in progress jobs for the specified job type.</returns>
 <remarks>This will take into account the connected user.</remarks>
</member>
<member name="M:DriveWorks.Group.SendHeartbeat">
 <summary>
 Lets the group connection know the connected client is still active.
 </summary>
</member>
<member name="P:DriveWorks.Group.EngineHost">
 <summary>
 Gets the hosting environment for the Group.
 </summary>
 <returns>
 An instance of a class derived from the <see cref="P:DriveWorks.Group.EngineHost" /> class
 which implements the hosting environment.
 </returns>
</member>
<member name="P:DriveWorks.Group.Connection">
 <summary>
 Gets the connection to the group.
 </summary>
</member>
<member name="P:DriveWorks.Group.DataService">
 <summary>
 Gets the group data service.
 </summary>
</member>
<member name="P:DriveWorks.Group.CanEditCompletedSpecifications">
 <summary>
 Gets/sets whether completed specifications in the standard specification
 flow can be edited.
 </summary>
</member>
<member name="P:DriveWorks.Group.OverwriteReleasedComponentData">
 <summary>
 Gets/sets whether released component data gets overwritten or used-as is.
 </summary>
</member>
<member name="P:DriveWorks.Group.DefaultSpecificationFolder">
 <summary>
 Gets/sets the default specification folder.
 </summary>
</member>
<member name="P:DriveWorks.Group.GroupContentFolder">
 <summary>
 Gets/sets the group content folder.
 </summary>
</member>
<member name="M:DriveWorks.Group.GetGroupSettingAsBoolean(System.String,System.Boolean)">
 <summary>
 Gets the named setting from the group.
 </summary>
 <param name="name">The name of the setting to retrieve.</param>
 <param name="defaultValue">The value to return if the setting isn't present.</param>
</member>
<member name="M:DriveWorks.Group.GetGroupSettingAsBoolean(System.String)">
 <summary>
 Gets the named setting from the group.
 </summary>
 <param name="name">The name of the setting to retrieve.</param>
 <returns>The boolean value of the setting that was retrieved, or a null reference (Nothing in Visual Basic) if the setting was not present.</returns>
</member>
<member name="M:DriveWorks.Group.GetGroupSetting(System.String)">
 <summary>
 Gets the named setting from the group.
 </summary>
 <param name="name">The name of the setting to retrieve.</param>
 <returns>The string value of the setting that was retrieved, or a null reference (Nothing in Visual Basic) if the setting was not present.</returns>
</member>
<member name="M:DriveWorks.Group.SetGroupSetting(System.String,System.String)">
 <summary>
 Saves the named setting to the group.
 </summary>
 <param name="name">The name of the setting.</param>
 <param name="value">The value of the setting.</param>
 <remarks>Using a null reference (Nothing in Visual Basic) as the value will delete the setting.</remarks>
</member>
<member name="M:DriveWorks.Group.SetGroupSetting(System.String,System.Boolean)">
 <summary>
 Saves the named setting to the group.
 </summary>
 <param name="name">The name of the setting.</param>
 <param name="value">The value of the setting.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Group.DeleteSetting(System.String)">
 <summary>
 Deletes the named setting from the group.
 </summary>
 <param name="name">The name of the setting to delete.</param>
</member>
<member name="M:DriveWorks.Group.RegisterOnDemandPreviewAgent(DriveWorks.JobRequestTagInformation)">
 <summary>
 Informs the group that this connection will handle on demand 3d preview requests.
 </summary>
 <param name="tags">The tags supported by the client.</param>
 <returns>An object that should be disposed when the agent is no longer required.</returns>
</member>
<member name="M:DriveWorks.Group.UnregisterOnDemandPreviewAgent">
 <summary>
 Informs the group that this connection will no longer handle on demand 3d preview requests.
 </summary>
</member>
<member name="T:DriveWorks.Localization.RuleUpdateResult">
 <summary>
 Indicates the result of a method which changes a rule.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Localization.RuleUpdateResult.Success">
 <summary>
 The rule was updated successfully.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Localization.RuleUpdateResult.NotRule">
 <summary>
 The specified value wasn't a rule.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Localization.RuleUpdateResult.Invalid">
 <summary>
 The rule couldn't be parsed successfully.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.Localization.RuleUpdateResult.NotApplicable">
 <summary>
 There were no changes to be made.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Localization.RuleLocalizationHelper">
 <summary>
 Provides routines which help when building up rules in localized environments.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.#ctor(System.Globalization.CultureInfo,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Localization.RuleLocalizationHelper" /> type for the given culture.
 </summary>
 <param name="localizationCulture">The culture for which to initialize the localization helper.</param>
 <param name="listSeparator">The list separator to use for formatting.</param>
 <param name="decimalSeparator">The decimal separator to use for formatting.</param>
 <param name="thousandsSeparator">The thousands separator to use for formatting.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Localization.RuleLocalizationHelper" /> type for the given culture.
 </summary>
 <param name="localizationCulture">The culture for which to initialize the localization helper.</param>
 <param name="formattingCulture">The culture to use for formatting, if a null reference is passed, the current thread culture is used.</param>
 <param name="listSeparator">The list separator to use for formatting.</param>
 <param name="decimalSeparator">The decimal separator to use for formatting.</param>
 <param name="thousandsSeparator">The thousands separator to use for formatting.</param>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.CreateFunction(System.String,System.String[])">
 <summary>
 Creates a localized function call.
 </summary>
 <param name="functionName">The English function name which will be localized.</param>
 <param name="arguments">The arguments to be passed to the function.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.CreateFunctionInvariant(System.String,System.String[])">
 <summary>
 Creates a function call without localizing the function name.
 </summary>
 <param name="functionName">The function name.</param>
 <param name="arguments">The arguments to be passed to the function.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Localization.RuleLocalizationHelper.ListSeparator">
 <summary>
 Gets the separator used to delimit lists of values, for example, function arguments.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Localization.RuleLocalizationHelper.DecimalSeparator">
 <summary>
 Gets the separator used to decimals.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Localization.RuleLocalizationHelper.ThousandsSeparator">
 <summary>
 Gets the separator used to delimit groups of numbers.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.GetLocalizedName(System.String)">
 <summary>
 Gets the localized version of the specified name.
 </summary>
 <param name="invariantName">The invariant name to localize.</param>
 <returns>The localized version of the name or the invariant version if no localized version could be found.</returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Localization.RuleLocalizationHelper.CultureInfo">
 <summary>
 Gets the culture for which the localization helper was constructed.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Localization.RuleLocalizationHelper.LocalTrue">
 <summary>
 Gets the localized version of the "TRUE" identifier.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Localization.RuleLocalizationHelper.LocalFalse">
 <summary>
 Gets the localized version of the "FALSE" identifier.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.TranslateRule(System.String,System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
 <summary>
 Translates the given rule from the provided language into the language represented by the instance.
 </summary>
 <param name="originalRuleText">The rule to translate.</param>
 <param name="sourceLanguage">The culture which defines the language the rule was written in.</param>
 <param name="sourceFormatting">The culture which defines the formatting used for the rule was written in.</param>
 <returns>The translated rule.</returns>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.TryTranslateRule(System.String,System.String@,System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
 <summary>
 Translates the given rule from the provided language into the language represented by the instance.
 </summary>
 <param name="originalRuleText">The rule to translate.</param>
 <param name="translatedRuleText">Receives the translated rule.</param>
 <param name="sourceLanguage">The culture which defines the language the rule was written in.</param>
 <param name="sourceFormatting">The culture which defines the formatting used for the rule was written in.</param>
 <returns>A value indicating whether the translation was successful.</returns>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.UpdateNames(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Updates the names in the given rule.
 </summary>
 <param name="originalRuleText">The rule in which to update names.</param>
 <param name="nameMappings">An dictionary of mappings from old name to new name.</param>
 <returns>The updated rule.</returns>
 <remarks>Replaced with <see cref="M:DriveWorks.ProjectUtility.UpdateNamesInRule(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/>.</remarks>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.TryUpdateNames(System.String,System.String@,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Updates the names in the given rule.
 </summary>
 <param name="originalRuleText">The rule in which to update names.</param>
 <param name="updatedRuleText">Receives the updated rule text.</param>
 <param name="nameMappings">An dictionary of mappings from old name to new name.</param>
 <returns>A value indicating whether the update was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.FixDecimals(System.String)">
 <summary>
 Fixes decimal values in the given rule (i.e. converts .785 to 0.785).
 </summary>
 <param name="originalRuleText">The rule in which to fix decimal values.</param>
 <returns>The updated rule.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Localization.RuleLocalizationHelper.TryFixDecimals(System.String,System.String@)">
 <summary>
 Fixes decimal values in the given rule (i.e. converts .785 to 0.785).
 </summary>
 <param name="originalRuleText">The rule in which to fix decimal values.</param>
 <param name="updatedRuleText">Receives the updated rule text.</param>
 <returns>A value indicating whether the update was successful.</returns>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.Project">
 <summary>
 Provides facilities for working with DriveWorks projects and specifications.
 </summary>
</member>
<member name="M:DriveWorks.Project.#ctor(DriveWorks.Hosting.EngineHost)">
 <summary>
 Initializes a new instance of the <see cref="T:DriveWorks.Project" /> type.
 </summary>
 <param name="host">The host which provides the environment in which the project runs.</param>
 <remarks></remarks>
</member>
<member name="P:DriveWorks.Project.SchemaVersion">
 <summary>
 Gets the schema version for projects.
 </summary>
</member>
<member name="E:DriveWorks.Project.Saved">
 <summary>
 Raised when the project saves successfully.
 </summary>
</member>
<member name="E:DriveWorks.Project.SnapshotCreated">
 <summary>
 Raised when a snapshot of the project is created successfully.
 </summary>
</member>
<member name="M:DriveWorks.Project.MgrSave(System.String)">
 <summary>
 Saves the project, and optionally saves the design master to a different location. THIS 
 IS ONLY FOR USE IN SPECIFICATIONS.
 </summary>
 <param name="newDesignMasterPath">The new design master path.</param>
</member>
<member name="M:DriveWorks.Project.MgrClose(System.Boolean)">
 <summary>
 Closes the project.
 </summary>
 <param name="save">True to save the project, false to discard changes.</param>
</member>
<member name="M:DriveWorks.Project.MgrOpen(DriveWorks.Group,DriveWorks.ProjectDetails)">
 <summary>
 Opens the project with the specified details.
 </summary>
 <param name="group">The group containing the project to open.</param>
 <param name="projectDetails">The <see cref="T:DriveWorks.ProjectDetails"  /> instance which describes the project to open.</param>
</member>
<member name="M:DriveWorks.Project.MgrOpenFromSnapshot(DriveWorks.Group,DriveWorks.ProjectDetails,System.String)">
 <summary>
 Opens the the project with the specified details from the given snapshot.
 </summary>
 <param name="group">The group containing the project to open.</param>
 <param name="projectDetails">The <see cref="T:DriveWorks.ProjectDetails"  /> instance which describes the project to open.</param>
 <param name="snapshotPath">The path to the snapshot project file to open.</param>
</member>
<member name="M:DriveWorks.Project.MgrOpenAsSpecification(DriveWorks.Group,DriveWorks.ProjectDetails,DriveWorks.ProjectFile,DriveWorks.Specification.SpecificationContext)">
 <summary>
 Opens a project for use as a specification.
 </summary>
 <param name="group">The group containing the project to open.</param>
 <param name="projectDetails">The <see cref="T:DriveWorks.ProjectDetails"  /> instance which describes the project on which the specification is based.</param>
 <param name="context">The context in which the specification is to be run.</param>
 <param name="projectFile">The opened project file.</param>
</member>
<member name="M:DriveWorks.Project.MgrCreate(DriveWorks.Group,System.Guid,System.String,System.String)">
 <summary>
 Creates a new project in the given group.
 </summary>
 <param name="group">The group to which to add the new project.</param>
 <param name="projectId">The unique identifier of the project.</param>
 <param name="projectFilePath">The full path to the project file, e.g. "C:\Users\StandardUser\DriveWorks\MyProject.driveproj".</param>
 <param name="additionalParameters">Semicolon separated, additional parameters to pass to the project creation process to customize its behavior, e.g. "DesignMasterFormat=xlsb;"</param>
 <exception cref="T:System.IO.DirectoryNotFoundException">The project directory does not exist.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The project does not have a supported extension or one or more of the parameters in <paramref name="additionalParameters" /> is invalid.</exception>
 <exception cref="T:DriveWorks.ProjectLoadException">A problem occurred creating the project, check the <see cref="P:System.Exception.InnerException" /> for more detail.</exception>
</member>
<member name="M:DriveWorks.Project.OpenCore(DriveWorks.Group,DriveWorks.ProjectDetails,DriveWorks.ProjectFile,System.String,DriveWorks.Specification.SpecificationContext)">
 <summary>
 Opens the given project in either project or specification mode.
 </summary>
 <param name="group">The group containing the project to open.</param>
 <param name="projectDetails">The details which describe the project being opened.</param>
 <param name="projectFile">The open project file.</param>
 <param name="designMasterPath">The full path to the design-master, or a null reference (Nothing in Visual Basic) to obtain it from the project file.</param>
 <param name="specificationCtx">The specification context if the project is being loaded as a specification.</param>
 <exception cref="T:System.IO.FileNotFoundException">The specified design master file does not exist.</exception>
 <exception cref="T:DriveWorks.ProjectLoadException">A problem occurred creating the project, check the <see cref="P:System.Exception.InnerException" /> for more detail.</exception>
</member>
<member name="M:DriveWorks.Project.Save">
 <summary>
 Saves the project.
 </summary>
</member>
<member name="M:DriveWorks.Project.CreateSnapshot(System.String)">
 <summary>
 Creates a snapshot of the project.
 </summary>
 <param name="snapshotPath">The path to create the snapshot at.</param>
</member>
<member name="P:DriveWorks.Project.Id">
 <summary>
 Gets a GUID which uniquely identifies the project.
 </summary>
</member>
<member name="P:DriveWorks.Project.RuleTechnology">
 <summary>
 Gets the rule technology used in this Project.
 </summary>
</member>
<member name="P:DriveWorks.Project.Variables">
 <summary>
 Gets the project's variables.
 </summary>
</member>
<member name="P:DriveWorks.Project.VariableCategories">
 <summary>
 Gets the project's variable categories.
 </summary>
</member>
<member name="P:DriveWorks.Project.Constants">
 <summary>
 Gets the object responsible for managing the project's constants.
 </summary>
</member>
<member name="P:DriveWorks.Project.Documents">
 <summary>
 Gets the object responsible for managing the project's documents.
 </summary>
</member>
<member name="P:DriveWorks.Project.SpecialVariables">
 <summary>
 Gets the object responsible for managing the project's special variables.
 </summary>
</member>
<member name="P:DriveWorks.Project.Navigation">
 <summary>
 Gets the object responsible for managing the project's form navigation information.
 </summary>
</member>
<member name="P:DriveWorks.Project.DataTables">
 <summary>
 Gets the object responsible for managing the project's data tables.
 </summary>
</member>
<member name="P:DriveWorks.Project.CalculationTables">
 <summary>
 Gets the object responsible for managing the project's calculation tables.
 </summary>
</member>
<member name="P:DriveWorks.Project.Messages">
 <summary>
 Gets the object responsible for managing the project's messages which are used
 in form controls to give interactive feedback to users.
 </summary>
</member>
<member name="P:DriveWorks.Project.ComponentSets">
 <summary>
 Gets the object responsible for managing the project's component sets.
 </summary>
</member>
<member name="P:DriveWorks.Project.SpecificationMacros">
 <summary>
 Gets the specification macros defined in the project.
 </summary>
</member>
<member name="P:DriveWorks.Project.SpecificationMacroCategories">
 <summary>
 Gets the specification macro categories defined in the project.
 </summary>
</member>
<member name="P:DriveWorks.Project.SpecificationFlow">
 <summary>
 Gets the specification-flow which defines the process which is followed
 for a specification created from this project.
 </summary>
</member>
<member name="P:DriveWorks.Project.SpecificationContext">
 <summary>
 Gets the active specification context if the project has been opened as part of a specification.
 </summary>
 <returns>
 The active specification context, or a null reference (Nothing in Visual Basic) if the project
 has not been opened as part of a specification.
 </returns>
</member>
<member name="P:DriveWorks.Project.IsOpen">
 <summary>
 Gets whether the project is open or not.
 </summary>
 <returns>True if the project is open, otherwise false.</returns>
</member>
<member name="P:DriveWorks.Project.IsClosed">
 <summary>
 Determines whether the project is closed.
 </summary>
 <returns>True if the project is closed, otherwise false.</returns>
</member>
<member name="P:DriveWorks.Project.Name">
 <summary>
 Gets the name of the project.
 </summary>
</member>
<member name="P:DriveWorks.Project.ProjectFilePath">
 <summary>
 Gets the full path to the project file.
 </summary>
</member>
<member name="P:DriveWorks.Project.BaseDirectory">
 <summary>
 Gets the base directory which is the project directory for a project, and the specification metadata directory
 for a specification.
 </summary>
</member>
<member name="P:DriveWorks.Project.Group">
 <summary>
 Gets the group from which the project was opened.
 </summary>
</member>
<member name="P:DriveWorks.Project.LocalizationHelper">
 <summary>
 Gets a rule localization helper which is valid for the open project.
 </summary>
</member>
<member name="P:DriveWorks.Project.SpecificationSettings">
 <summary>
 Gets access to settings which affect specifications based on the project.
 </summary>
</member>
<member name="P:DriveWorks.Project.Metadata">
 <summary>
 Gets access to the sections in the project metadata file.
 </summary>
</member>
<member name="P:DriveWorks.Project.Utility">
 <summary>
 Gets access to utility methods for the project.
 </summary>
</member>
<member name="P:DriveWorks.Project.Properties">
 <summary>
 Gets access to specification properties for the project.
 </summary>
</member>
<member name="P:DriveWorks.Project.ConnectionManager">
 <summary>
 Gets the connection manager for the project (and all other projects created by the same engine host).
 </summary>
</member>
<member name="P:DriveWorks.Project.OriginalVersion">
 <summary>
 Gets the version of the project when it was loaded from file. 
 This is not the current version, as it could have been upgraded since it was loaded.
 </summary>
</member>
<member name="P:DriveWorks.Project.Version">
 <summary>
 Gets the current version of the project.
 </summary>
</member>
<member name="P:DriveWorks.Project.ComponentTasks">
 <summary>
 Gets the manager for <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s that are not specific to a single component.
 </summary>
</member>
<member name="P:DriveWorks.Project.Profiler">
 <summary>
 Gets the profiler for the project.
 </summary>
</member>
<member name="P:DriveWorks.Project.FileCopyService">
 <summary>
 Gets the service used for copying files during a specification to the specification directory.
 </summary>
</member>
<member name="P:DriveWorks.Project.State">
 <summary>
 Gets the state data for the project.
 </summary>
 <returns>The state data for the project or a null reference if the project is not open.</returns>
</member>
<member name="P:DriveWorks.Project.OpenedForSpecification">
 <summary>
 Gets whether the project has been opened as part of a specification.
 </summary>
</member>
<member name="P:DriveWorks.Project.ControlsStoredAsInvariant">
 <summary>
 Gets whether the values for control properties are stored invariantly or using the current culture.
 </summary>
 <remarks>As of later versions of DW14 all values will be stored invariantly.</remarks>
</member>
<member name="M:DriveWorks.Project.GetNamedItem(System.String)">
 <summary>
 Attempts to find a matching named item in within DriveWorks, for example a calculation cell or variable.
 </summary>
 <param name="qualifiedName">The fully qualified name of the item to get, e.g. "DWCalcTableOne.ColumnOne2".</param>
 <returns>The associated named item or null if nothing is found.</returns>
</member>
<member name="M:DriveWorks.Project.GetRuleFromNamedItem(System.String)">
 <summary>
 Gets the rule for a named item within DriveWorks, for example a variable or constant.
 </summary>
 <param name="qualifiedName">The fully qualified name of the item to get, e.g. "DWVariable1".</param>
 <returns>The rule associated with the named item.</returns>
</member>
<member name="M:DriveWorks.Project.CreateLiveRule(System.String)">
 <summary>
 Gets a new LiveRule.
 </summary>
 <returns>The newly created LiveRule</returns>
</member>
<member name="M:DriveWorks.Project.SetNamedItemValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
 <summary>
 Sets the values of the specified named items.
 </summary>
 <param name="namesAndValues">The named items and values to set.</param>
 <returns>The names of any items that could not be driven.</returns>
</member>
<member name="M:DriveWorks.Project.EvaluateRuleForNamedItem(System.String,System.String)">
 <summary>
 Evaluates the result of the specified rule formula as if it had been applied to a particular named item, if the <see cref="P:DriveWorks.Project.RuleTechnology" />
 property is <see cref="F:DriveWorks.ProjectRuleTechnology.Excel" /> then this is the same as <see cref="M:DriveWorks.Project.EvaluateRule(System.String)" />, else if it is <see cref="F:DriveWorks.ProjectRuleTechnology.Titan" />
 then the MyName function is affected.
 </summary>
 <param name="qualifiedName">The fully qualified name of the item for which to evaluate the rule, e.g. "DWVariable1".</param>
 <param name="ruleFormula">The formula which defines the rule.</param>
 <returns>The result of executing the rule.</returns>
</member>
<member name="M:DriveWorks.Project.EvaluateRulesForNamedItem(System.String,System.String[])">
 <summary>
 Evaluates the result of the specified rule formulae as if they had been applied to a particular named item, if the <see cref="P:DriveWorks.Project.RuleTechnology" />
 property is <see cref="F:DriveWorks.ProjectRuleTechnology.Excel" /> then this is the same as <see cref="M:DriveWorks.Project.EvaluateRule(System.String)" />, else if it is <see cref="F:DriveWorks.ProjectRuleTechnology.Titan" />
 then the MyName function is affected.
 </summary>
 <param name="qualifiedName">The fully qualified name of the item for which to evaluate the rules, e.g. "DWVariable1".</param>
 <param name="ruleFormulae">The formulae which define the rules.</param>
 <returns>The result of executing the rules.</returns>
</member>
<member name="M:DriveWorks.Project.EvaluateRule(System.String)">
 <summary>
 Evaluates the result of the specified rule formula.
 </summary>
 <param name="ruleFormula">The formula which defines the rule.</param>
 <returns>The result of executing the rule.</returns>
</member>
<member name="M:DriveWorks.Project.EvaluateRules(System.String[])">
 <summary>
 Evaluates the result of the specified rule formulae.
 </summary>
 <param name="ruleFormulae">The formulae the rules.</param>
 <returns>The result of executing the rules.</returns>
</member>
<member name="M:DriveWorks.Project.EvaluateRule(System.String,System.String,System.Object)">
 <summary>
 Evaluates the result of the specified rule formula as if it had been applied to a particular named item.
 </summary>
 <param name="ruleFormula">The formula which defines the rule.</param>
 <param name="qualifiedName">The fully qualified name of the item for which to evaluate the rule, e.g. "DWVariable1".</param>
 <param name="context">The context to use when evaluating the rule.</param>
 <returns>The result of executing the rule.</returns>
</member>
<member name="M:DriveWorks.Project.EvaluateRule(System.String[],System.String,System.Object)">
 <summary>
 Evaluates the result of the specified rule formulae as if they had been applied to a particular named item.
 </summary>
 <param name="ruleFormulae">The formulae which define the rules.</param>
 <param name="qualifiedName">The fully qualified name of the item for which to evaluate the rules, e.g. "DWVariable1".</param>
 <param name="context">The context to use when evaluating the rules.</param>
 <returns>The result of executing the rules.</returns>
</member>
<member name="M:DriveWorks.Project.CreateTransactionFactory">
 <summary>
 Creates a transaction factory which can be used to create transactions for 
 common project modification operations.
 </summary>
 <returns>An instance of the <see cref="T:DriveWorks.Transactions.ProjectTransactionFactory" /> class.</returns>
</member>
<member name="M:DriveWorks.Project.TryExecuteMacro(System.String,System.Object[])">
 <summary>
 Executes the named macro and updates any dependencies.
 </summary>
 <param name="macroName">The name of the macro to execute.</param>
 <param name="arguments">The arguments to the macro to execute.</param>
 <returns>True if the macro is found and executed, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Project.TryExecuteMacroWithCaller(System.String,System.String,System.Object[])">
 <summary>
 Executes the named macro and updates any dependencies.
 </summary>
 <param name="caller">The caller of the macro.</param>
 <param name="macroName">The name of the macro to execute.</param>
 <param name="arguments">The arguments to the macro to execute.</param>
 <returns>True if the macro is found and executed, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Project.TryExecuteMacroWithCallerAndPosition(System.String,System.String,System.Drawing.Point,System.Object[])">
 <summary>
 Executes the named macro and updates any dependencies.
 </summary>
 <param name="caller">The caller of the macro.</param>
 <param name="macroName">The name of the macro to execute.</param>
 <param name="clickPosition">The position that the macro button was clicked at.</param>
 <param name="arguments">The arguments to the macro to execute.</param>
 <returns>True if the macro is found and executed, otherwise false.</returns>
</member>
<member name="M:DriveWorks.Project.CreateRenameProcess(System.String[],System.String[])">
 <summary>
 Creates a new process capable of swapping out one set of names in all the rules in the project, for another set of names.
 </summary>
 <param name="oldNames">The names which are being replaced.</param>
 <param name="newNames">The names which replace the old names.</param>
 <returns>An instance of the <see cref="T:DriveWorks.Refactoring.RenameProcess" /> class which will perform the renaming.</returns>
</member>
<member name="M:DriveWorks.Project.NamesExist(System.String[])">
 <summary>
 Checks the names to ensure they don't already exist in the design master.</summary>
 <param name="names">The names to check.</param>
 <returns>True if one or more of the names exist in the design master, false if names do not exist in the design master.</returns>
</member>
<member name="M:DriveWorks.Project.GetSuppressionContext">
 <summary>
 Suppresses calculation and returns a disposable suppression context which can be used
 to resume calculation.
 </summary>
</member>
<member name="M:DriveWorks.Project.GetLockStream(System.String)">
 <summary>
 Tries to create a file lock for the project.
 </summary>
 <param name="pathToProject">The path and file name of the project</param>
</member>
<member name="M:DriveWorks.Project.DisposeLockStream(System.Boolean)">
 <summary>
 Dispose of the File Stream and delete the lock file.
 </summary>
 <param name="retryOnError">If the function errors - we don't have the lock stream then try to reacquire the stream and try again or not</param>
</member>
<member name="P:DriveWorks.Project.EngineHost">
 <summary>
 Gets the host environment in which the project executes.
 </summary>
</member>
<member name="M:DriveWorks.Project.GetService``1">
 <summary>
 Gets a service from the project.
 </summary>
 <typeparam name="TService">The type of service to request.</typeparam>
 <returns>A service of the requested type, or a null reference if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Project.GetService(System.Type)">
 <summary>
 Gets a service from the project.
 </summary>
 <param name="serviceType">The type of service to request.</param>
 <returns>A service of the requested type, or a null reference if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:DriveWorks.Project.SetService``1(``0)">
 <summary>
 Sets a service on the Project. 
 </summary>
</member>
<member name="T:DriveWorks.RuleErrorCodeOptions">
 <summary>
 Gets known rule evaluation error codes.
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.DivisionByZero">
 <summary>
 An attempt was made to divide by zero.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.NotApplicable">
 <summary>
 A performed operation was invalid.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.Name">
 <summary>
 A name used in the rule or one or more of its dependants is invalid.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.Null">
 <summary>
 An attempt is made to use a null value.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.Number">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.Reference">
 <summary>
 A referenced cell is invalid.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.Value">
 <summary>
 The value is invalid or out of range.
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.Calculation">
 <summary>
 The value couldn't be calculated (this is a DriveWorks defined error code.)
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.CircularReference">
 <summary>
 The value couldn't be calculated because the rule is circular (this is a DriveWorks defined error code.)
 </summary>
 <remarks></remarks>
</member>
<member name="F:DriveWorks.RuleErrorCodeOptions.InvalidRule">
 <summary>
 The value couldn't be calculated because the rule is invalid (this is a DriveWorks defined error code.)
 </summary>
 <remarks></remarks>
</member>
<member name="T:DriveWorks.ProjectMaintenance">
 <summary>
 Provides a way of maintaining a potentially broken project.
 </summary>
</member>
<member name="M:DriveWorks.ProjectMaintenance.ForceRemoveComponentTasksOfType(System.String,System.String)">
 <summary>
 <para>Forcefully removes all component tasks of the specified type in the given project.</para>
 <para> </para>
 <para>Note: If you are able to open the project, consider using <see cref="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Remove(DriveWorks.Components.Tasks.ComponentTask)" />(ComponentTask) instead.</para>
 </summary>
 <param name="projectPath">The full path to the project file to delete the Component Tasks from.</param>
 <param name="taskTypeName">The full name of the type to remove.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.ForceRemoveComponentTaskConditionsOfType(System.String,System.String)">
 <summary>
 <para>Forcefully removes all component task conditions of the specified type in the given project.</para>
 <para> </para>
 <para>Note: If you are able to open the project, consider using the <see cref="T:DriveWorks.Components.Tasks.ComponentTaskConditions"/> API instead.</para>
 </summary>
 <param name="projectPath">The full path to the project file to delete the Component Tasks Conditions from.</param>
 <param name="conditionTypeName">The full name of the type to remove.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.ForceRemoveSpecificationFlowTasksOfType(System.String,System.String)">
 <summary>
 <para>Forcefully removes all specification flow tasks of the specified type in the given project.</para>
 <para> </para>
 <para>Note: If you are able to open the project, consider using <see cref="M:DriveWorks.Specification.Task.Delete" />() instead.</para>
 </summary>
 <param name="projectPath">The full path to the project file to delete the Specification Flow Tasks from.</param>
 <param name="typeFullname">The full name of the type to remove.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.ForceRemoveSpecificationMacroTasksOfType(System.String,System.String)">
 <summary>
 <para>Forcefully removes all specification macro tasks of the specified type in the given project.</para>
 <para> </para>
 <para>Note: If you are able to open the project, consider using <see cref="M:DriveWorks.Specification.Task.Delete" />() instead.</para>
 </summary>
 <param name="projectPath">The full path to the project file to delete the Specification Macro Tasks from.</param>
 <param name="typeFullname">The full name of the type to remove.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.ForceRemoveDocumentsOfType(System.String,System.String)">
 <summary>
 <para>Forcefully removes all documents of the specified type in the given project.</para>
 <para> </para>
 <para>Note: If you are able to open the project, consider using <see cref="M:DriveWorks.ProjectDocument.Delete" />() instead.</para>
 </summary>
 <param name="projectPath">The full path to the project file to delete the Documents from.</param>
 <param name="typeFullname">The full name of the type to remove.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.ForceRemoveDataTablesOfType(System.String,System.String)">
 <summary>
 <para>Forcefully removes all Data Tables of the specified type in the given project.</para>
 <para> </para>
 <para>Note: If you are able to open the project, consider using <see cref="M:DriveWorks.ProjectDataTable.Delete" />() instead.</para>
 </summary>
 <param name="projectPath">The full path to the project file to delete the Data Tables from.</param>
 <param name="typeFullname">The full name of the type to remove.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.ForceRemoveSpecificationFlowConditionsOfType(System.String,System.String)">
 <summary>
 <para>Forcefully removes all Specification Flow Conditions of the specified type in the given project.</para>
 <para> </para>
 <para>Note: If you are able to open the project, consider using <see cref="M:DriveWorks.Specification.Condition.Delete" />() instead.</para>
 </summary>
 <param name="projectPath">The full path to the project file to delete the conditions from.</param>
 <param name="typeFullname">The full name of the type to remove.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.ForceRemoveSpecificationMacroConditionsOfType(System.String,System.String)">
 <summary>
 <para>Forcefully removes all Specification Macro Conditions of the specified type in the given project.</para>
 <para> </para>
 <para>Note: If you are able to open the project, consider using <see cref="M:DriveWorks.Specification.Condition.Delete" />() instead.</para>
 </summary>
 <param name="projectPath">The full path to the project file to delete the conditions from.</param>
 <param name="typeFullname">The full name of the type to remove.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.GetAllComponentTaskConditionTypes(System.String)">
 <summary>
 Retrieves a list of all types of component task conditions in the given project.
 </summary>
 <param name="projectPath">The full path to the project to load the types from.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.GetAllComponentTaskTypes(System.String)">
 <summary>
 Retrieves a list of all types of component tasks in the given project.
 </summary>
 <param name="projectPath">The full path to the project to load the types from.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.GetAllSpecificationFlowTaskTypes(System.String)">
 <summary>
 Retrieves a list of all types of specification flow tasks in the given project.
 </summary>
 <param name="projectPath">The full path to the project to load the types from.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.GetAllSpecificationMacroTaskTypes(System.String)">
 <summary>
 Retrieves a list of all types of specification macro tasks in the given project.
 </summary>
 <param name="projectPath">The full path to the project to load the types from.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.GetAllSpecificationFlowConditionTypes(System.String)">
 <summary>
 Retrieves a list of all types of <see cref="T:DriveWorks.Specification.Condition" />s in the given project.
 </summary>
 <param name="projectPath">The full path to the project to load the types from.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.GetAllSpecificationMacroConditionTypes(System.String)">
 <summary>
 Retrieves a list of all types of <see cref="T:DriveWorks.Specification.Condition" />s in the given project.
 </summary>
 <param name="projectPath">The full path to the project to load the types from.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.GetAllDocumentTypes(System.String)">
 <summary>
 Retrieves a list of all types of <see cref="T:DriveWorks.ProjectDocument" /> types in the given project.
 </summary>
 <param name="projectPath">The full path to the project to load the types from.</param>
</member>
<member name="M:DriveWorks.ProjectMaintenance.GetAllDataTableTypes(System.String)">
 <summary>
 Retrieves a list of all types of DataTables types in the given project.
 </summary>
 <param name="projectPath">The full path to the project to load the types from.</param>
</member>
</members>
</doc>
